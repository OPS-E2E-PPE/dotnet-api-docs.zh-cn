<Type Name="GrammarBuilder" FullName="System.Speech.Recognition.GrammarBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d4dc4b7f6ec7aeae31f26b9a0c8d9052df4d3a64" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77104751" /></Metadata><TypeSignature Language="C#" Value="public class GrammarBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GrammarBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.GrammarBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class GrammarBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class GrammarBuilder" />
  <TypeSignature Language="F#" Value="type GrammarBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1ac70-101">提供机制以便以编程方式为语音识别语法生成约束。</span><span class="sxs-lookup"><span data-stu-id="1ac70-101">Provides a mechanism for programmatically building the constraints for a speech recognition grammar.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-102">语音识别语法通常以[语音识别语法规范（SRGS）版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)定义的 XML 格式编写。</span><span class="sxs-lookup"><span data-stu-id="1ac70-102">Speech recognition grammars are commonly authored in the XML format defined by the [Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761).</span></span> <span data-ttu-id="1ac70-103">如果你熟悉 SRGS 但想要以编程方式生成语法，则可以使用 <xref:System.Speech.Recognition.SrgsGrammar> 命名空间，其成员与 SRGS 定义的元素和属性密切对应。</span><span class="sxs-lookup"><span data-stu-id="1ac70-103">If you are familiar with SRGS but want to generate the grammars programmatically, you can use the <xref:System.Speech.Recognition.SrgsGrammar> namespace, whose members correspond closely to the elements and attributes defined by SRGS.</span></span> <span data-ttu-id="1ac70-104">如果你不熟悉 SRGS，或希望采用轻型的编程方法创作语法，以便能够有效地完成许多常见方案，您可以使用 <xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 类。</span><span class="sxs-lookup"><span data-stu-id="1ac70-104">If you are unfamiliar with SRGS, or you want a lightweight, programmatic approach to authoring grammars with which you can efficiently accomplish many common scenarios; you can use the <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> classes.</span></span>  
  
 <span data-ttu-id="1ac70-105">使用 <xref:System.Speech.Recognition.GrammarBuilder> 对象生成一个层次结构树，其中包含 <xref:System.Speech.Recognition.Choices> 对象，这些对象包含替代短语，并在每个节点上与前导头和 amble 短语交错，并使用语义值将含义传递回应用程序。</span><span class="sxs-lookup"><span data-stu-id="1ac70-105">Use <xref:System.Speech.Recognition.GrammarBuilder> objects to build a hierarchical tree composed of <xref:System.Speech.Recognition.Choices> objects that contain alternate phrases, interspersed with preamble and post-amble phrases at each node, and seeded with semantic values that convey  meaning back to the application.</span></span>  
  
 <span data-ttu-id="1ac70-106">若要使用 <xref:System.Speech.Recognition.GrammarBuilder> 创建 <xref:System.Speech.Recognition.Grammar> 对象，请使用以下步骤。</span><span class="sxs-lookup"><span data-stu-id="1ac70-106">To use a <xref:System.Speech.Recognition.GrammarBuilder> to create a <xref:System.Speech.Recognition.Grammar> object, use the following steps.</span></span>  
  
1.  <span data-ttu-id="1ac70-107">创建 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-107">Create a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
2.  <span data-ttu-id="1ac70-108">将约束追加到 <xref:System.Speech.Recognition.GrammarBuilder>，如 <xref:System.String> 对象、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>、<xref:System.Speech.Recognition.DictationGrammar>以及为语法定义约束的其他 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-108">Append constraints to the <xref:System.Speech.Recognition.GrammarBuilder>, such as <xref:System.String> objects, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, and other <xref:System.Speech.Recognition.GrammarBuilder> objects that define the constraints for the grammar.</span></span>  
  
3.  <span data-ttu-id="1ac70-109">使用 <xref:System.Speech.Recognition.Grammar.%23ctor%2A> 构造函数之一，从已完成的 <xref:System.Speech.Recognition.GrammarBuilder> 语法创建 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-109">Use one of the <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructors to create a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder> grammar.</span></span>  
  
 <span data-ttu-id="1ac70-110">使用 <xref:System.Speech.Recognition.GrammarBuilder> 创作最适用于具有单个规则（包含列表）或可能列表列表的语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-110">Authoring with <xref:System.Speech.Recognition.GrammarBuilder> is best suited to grammars that have a single rule containing lists, or perhaps lists of lists.</span></span> <span data-ttu-id="1ac70-111">若要以编程方式生成具有多个规则或需要进行内部规则引用的语法，请使用 <xref:System.Speech.Recognition.SrgsGrammar> 命名空间的类。</span><span class="sxs-lookup"><span data-stu-id="1ac70-111">To programmatically build grammars that have multiple rules, or that need to make internal rule references, use the classes of the <xref:System.Speech.Recognition.SrgsGrammar> namespace.</span></span>  
  
 <span data-ttu-id="1ac70-112">还可以通过隐式转换获取 <xref:System.Speech.Recognition.GrammarBuilder> 的实例，也可以通过将 <xref:System.Speech.Recognition.GrammarBuilder> 与包含语法约束的第二个对象组合在一起获取。</span><span class="sxs-lookup"><span data-stu-id="1ac70-112">Instances of <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained by implicit conversions from certain other classes or by combining a  <xref:System.Speech.Recognition.GrammarBuilder> with a second object that contains constraints for a grammar..</span></span> <span data-ttu-id="1ac70-113">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 和 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符和 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-113">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators and the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods.</span></span>  
  
 <span data-ttu-id="1ac70-114">若要将规则添加到现有 <xref:System.Speech.Recognition.GrammarBuilder>，请使用 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>和 <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-114">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-115">当使用的语音识别语法包含具有相同键名或多个可重复修改同一语义元素的值的语义元素时，语音识别器会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-115">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> 
  
 <span data-ttu-id="1ac70-116">为了帮助调试，<xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> 属性以字符串的形式返回 <xref:System.Speech.Recognition.GrammarBuilder> 的当前状态。</span><span class="sxs-lookup"><span data-stu-id="1ac70-116">To help with debugging, the <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> property returns the current status of the <xref:System.Speech.Recognition.GrammarBuilder> as a string.</span></span>  
  
## Examples  
 <span data-ttu-id="1ac70-117">下面的示例使用 <xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 对象来构造语法，该语法可识别两个短语中的任意一个： "使背景*colorChoice*" 或 "将背景设置为*colorChoice*"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-117">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="1ac70-118">该示例使用 <xref:System.Speech.Recognition.Choices> 对象从 <xref:System.String> 对象的数组中为*colorChoice*创建可接受值的列表。</span><span class="sxs-lookup"><span data-stu-id="1ac70-118">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="1ac70-119"><xref:System.Speech.Recognition.Choices> 对象类似于 SRGS 规范中的 `one-of` 元素，并包含一组替代短语，其中的任何一项都可以在口述时识别。</span><span class="sxs-lookup"><span data-stu-id="1ac70-119">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="1ac70-120">该示例还使用 <xref:System.Speech.Recognition.Choices> 对象将两个 <xref:System.Speech.Recognition.GrammarBuilder> 对象的数组分组为结果语法可以识别的一对替代短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-120">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="1ac70-121">替换字词或短语是大多数语法的组件，<xref:System.Speech.Recognition.Choices> 对象为使用 <xref:System.Speech.Recognition.GrammarBuilder>构造的语法提供此功能。</span><span class="sxs-lookup"><span data-stu-id="1ac70-121">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="1ac70-122">该示例最终从 <xref:System.Speech.Recognition.Choices> 对象构建的 <xref:System.Speech.Recognition.GrammarBuilder> 中创建 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-122">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Choices" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ac70-123">初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-123">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-124">此类的实例还可以通过隐式转换获取，也可以通过将具有第二个对象的 <xref:System.Speech.Recognition.GrammarBuilder> 对象组合到新的 <xref:System.Speech.Recognition.GrammarBuilder>中。</span><span class="sxs-lookup"><span data-stu-id="1ac70-124">Instances of this class can also be obtained by implicit conversions from other classes or by combining a <xref:System.Speech.Recognition.GrammarBuilder> object with a second object to from a new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="1ac70-125">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 和 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-125">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods.</span></span>  
  
 <span data-ttu-id="1ac70-126">若要向现有 <xref:System.Speech.Recognition.GrammarBuilder>添加约束，请使用 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>和 <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> 方法，并使用 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-126">To add constraints to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-127">当使用的语音识别语法包含具有相同键名或多个可重复修改同一语义元素的值的语义元素时，语音识别器会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-127">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span>
  
 <span data-ttu-id="1ac70-128">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))。</span><span class="sxs-lookup"><span data-stu-id="1ac70-128">For more information about building and using speech recognition grammars, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ac70-129">初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新的空实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-129">Initializes a new, empty instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-130">若要将规则添加到现有 <xref:System.Speech.Recognition.GrammarBuilder> 对象，请使用 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>和 <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> 方法，并使用 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-130">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder> object, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-131">当使用的语音识别语法包含具有相同键名或多个可重复修改同一语义元素的值的语义元素时，语音识别器会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-131">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="1ac70-132">下面的示例使用 <xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 对象来构造语法，该语法可识别两个短语中的任意一个： "使背景*colorChoice*" 或 "将背景设置为*colorChoice*"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-132">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="1ac70-133">该示例使用 <xref:System.Speech.Recognition.Choices> 对象从 <xref:System.String> 对象的数组中为*colorChoice*创建可接受值的列表。</span><span class="sxs-lookup"><span data-stu-id="1ac70-133">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="1ac70-134"><xref:System.Speech.Recognition.Choices> 对象类似于 SRGS 规范中的 `one-of` 元素，并包含一组替代短语，其中的任何一项可在口述时被识别。</span><span class="sxs-lookup"><span data-stu-id="1ac70-134">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken.</span></span> <span data-ttu-id="1ac70-135">该示例还使用 <xref:System.Speech.Recognition.Choices> 对象将两个 <xref:System.Speech.Recognition.GrammarBuilder> 对象的数组分组为结果语法可以识别的一对替代短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-135">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="1ac70-136">替换字词或短语是大多数语法的组件，<xref:System.Speech.Recognition.Choices> 对象为使用 <xref:System.Speech.Recognition.GrammarBuilder>构造的语法提供此功能。</span><span class="sxs-lookup"><span data-stu-id="1ac70-136">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="1ac70-137">该示例最终从 <xref:System.Speech.Recognition.Choices> 对象构建的 <xref:System.Speech.Recognition.GrammarBuilder> 中创建 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-137">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  GrammarBuilder bothPhrases = new GrammarBuilder();  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  bothPhrases.Append(bothChoices);  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices"><span data-ttu-id="1ac70-138">其他注意事项的集合。</span><span class="sxs-lookup"><span data-stu-id="1ac70-138">The set of alternatives.</span></span></param>
        <summary><span data-ttu-id="1ac70-139">从备选项的集合中初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-139">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a set of alternatives.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-140">有关生成包含替代项的语音识别语法的详细信息，请参阅[使用选项创建 GrammarBuilder 语法](https://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd)。</span><span class="sxs-lookup"><span data-stu-id="1ac70-140">For more information about building a speech recognition grammar that contains alternatives, see [Using Choices to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-141">下面的示例使用 <xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 对象来构造语法，该语法可识别两个短语中的任意一个： "使背景*colorChoice*" 或 "将背景设置为*colorChoice*"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-141">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="1ac70-142">该示例使用 <xref:System.Speech.Recognition.Choices> 对象从 <xref:System.String> 对象的数组中为*colorChoice*创建可接受值的列表。</span><span class="sxs-lookup"><span data-stu-id="1ac70-142">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="1ac70-143"><xref:System.Speech.Recognition.Choices> 对象类似于 SRGS 规范中的 `one-of` 元素，并包含一组替代短语，其中的任何一项都可以在口述时识别。</span><span class="sxs-lookup"><span data-stu-id="1ac70-143">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="1ac70-144">该示例还使用 <xref:System.Speech.Recognition.Choices> 对象将两个 <xref:System.Speech.Recognition.GrammarBuilder> 对象的数组分组为结果语法可以识别的一对替代短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-144">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="1ac70-145">替换字词或短语是大多数语法的组件，<xref:System.Speech.Recognition.Choices> 对象为使用 <xref:System.Speech.Recognition.GrammarBuilder>构造的语法提供此功能。</span><span class="sxs-lookup"><span data-stu-id="1ac70-145">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="1ac70-146">该示例最终从 <xref:System.Speech.Recognition.Choices> 对象构建的 <xref:System.Speech.Recognition.GrammarBuilder> 中创建 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-146">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.SemanticResultKey -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="1ac70-147">语义键。</span><span class="sxs-lookup"><span data-stu-id="1ac70-147">The semantic key.</span></span></param>
        <summary><span data-ttu-id="1ac70-148">初始化语义钥中的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-148">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-149">从 <xref:System.Speech.Recognition.SemanticResultValue> 对象创建 <xref:System.Speech.Recognition.GrammarBuilder> 实例时，可以将语义信息添加到可在识别结果中返回的语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-149">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="1ac70-150">您可以使用 <xref:System.Speech.Recognition.RecognizedPhrase>的 <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 属性访问识别结果中的语义信息，该属性可在 `SpeechRecognized` 事件的处理程序中使用。</span><span class="sxs-lookup"><span data-stu-id="1ac70-150">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="1ac70-151">如果 <xref:System.Speech.Recognition.GrammarBuilder> 定义 <xref:System.Speech.Recognition.SemanticResultKey>，则可使用此参数检索与密钥关联的识别结果中的语义信息。</span><span class="sxs-lookup"><span data-stu-id="1ac70-151">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="1ac70-152">请参阅 <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>的示例，同时参阅 <xref:System.Speech.Recognition.SemanticResultValue> 和 <xref:System.Speech.Recognition.SemanticResultKey>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-152">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-153">当构造 <xref:System.Speech.Recognition.GrammarBuilder> 包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的对象时，请确保避免使用相同的键名或多个可重复修改 <xref:System.Speech.Recognition.SemanticValue> 对象 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 属性的语义元素创建重复的语义元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-153">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-154">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-154">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="1ac70-155">下面的示例创建一个语音识别语法，它可以识别两个短语，即 "使背景*colorChoice*" 和 "将背景设置为*colorChoice*"，其中*colorChoice*是从一组颜色中选择的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-155">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="1ac70-156">语法允许用户使用几个颜色名称中的任何一个，并将有关识别的颜色名称的语义信息返回给应用程序。</span><span class="sxs-lookup"><span data-stu-id="1ac70-156">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="1ac70-157">该示例使用单个 <xref:System.Speech.Recognition.SemanticResultKey>，你可以检索与用户所说的颜色关联的 <xref:System.Speech.Recognition.SemanticValue>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-157">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="1ac70-158">例如，如果输入包含 "将背景设置为红色" 这一短语，则识别结果将包含 "#FF0000" 的语义值，你可以使用 `SpeechRecognized` 事件的处理程序检索此值。</span><span class="sxs-lookup"><span data-stu-id="1ac70-158">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="1ac70-159">该示例使用 <xref:System.String>、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>和 <xref:System.Speech.Recognition.GrammarBuilder> 对象，以生成最新 <xref:System.Speech.Recognition.GrammarBuilder> 对象 `bothPhrases`中包含的所有约束。</span><span class="sxs-lookup"><span data-stu-id="1ac70-159">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="1ac70-160">最后，该示例从已完成的 <xref:System.Speech.Recognition.GrammarBuilder>构造一个 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-160">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices object for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the Grammar object from the GrammarBuilder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.SemanticResultValue -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1ac70-161">语义值或名称/值对。</span><span class="sxs-lookup"><span data-stu-id="1ac70-161">The semantic value or name/value pair.</span></span></param>
        <summary><span data-ttu-id="1ac70-162">初始化语义值中的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-162">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-163">从 <xref:System.Speech.Recognition.SemanticResultValue> 对象创建 <xref:System.Speech.Recognition.GrammarBuilder> 实例时，可以将语义信息添加到可在识别结果中返回的语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-163">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="1ac70-164">您可以使用 <xref:System.Speech.Recognition.RecognizedPhrase>的 <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 属性访问识别结果中的语义信息，该属性可在 `SpeechRecognized` 事件的处理程序中使用。</span><span class="sxs-lookup"><span data-stu-id="1ac70-164">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="1ac70-165">如果 <xref:System.Speech.Recognition.GrammarBuilder> 定义 <xref:System.Speech.Recognition.SemanticResultKey>，则可使用此参数检索与密钥关联的识别结果中的语义信息。</span><span class="sxs-lookup"><span data-stu-id="1ac70-165">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="1ac70-166">请参阅 <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>的示例，同时参阅 <xref:System.Speech.Recognition.SemanticResultValue> 和 <xref:System.Speech.Recognition.SemanticResultKey>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-166">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-167">当构造 <xref:System.Speech.Recognition.GrammarBuilder> 包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的对象时，请确保避免使用相同的键名或多个可重复修改 <xref:System.Speech.Recognition.SemanticValue> 对象 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 属性的语义元素创建重复的语义元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-167">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-168">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-168">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="1ac70-169">下面的示例创建一个语音识别语法，它可以识别两个短语，即 "使背景*colorChoice*" 和 "将背景设置为*colorChoice*"，其中*colorChoice*是从一组颜色中选择的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-169">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="1ac70-170">语法允许用户使用几个颜色名称中的任何一个，并将有关识别的颜色名称的语义信息返回给应用程序。</span><span class="sxs-lookup"><span data-stu-id="1ac70-170">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="1ac70-171">该示例使用单个 <xref:System.Speech.Recognition.SemanticResultKey>，你可以检索与用户所说的颜色关联的 <xref:System.Speech.Recognition.SemanticValue>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-171">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="1ac70-172">例如，如果输入包含 "将背景设置为红色" 这一短语，则识别结果将包含 "#FF0000" 的语义值，你可以使用 `SpeechRecognized` 事件的处理程序检索此值。</span><span class="sxs-lookup"><span data-stu-id="1ac70-172">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="1ac70-173">该示例使用 <xref:System.String>、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>和 <xref:System.Speech.Recognition.GrammarBuilder> 对象，以生成最新 <xref:System.Speech.Recognition.GrammarBuilder> 对象 `bothPhrases`中包含的所有约束。</span><span class="sxs-lookup"><span data-stu-id="1ac70-173">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="1ac70-174">最后，该示例从已完成的 <xref:System.Speech.Recognition.GrammarBuilder>构造一个 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-174">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the grammar from the grammar builder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder phrase" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-175">字符序列。</span><span class="sxs-lookup"><span data-stu-id="1ac70-175">The sequence of words.</span></span></param>
        <summary><span data-ttu-id="1ac70-176">从字序列中初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-176">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a sequence of words.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-177">此短语表示语音识别语法可识别的确切口述短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-177">The phrase represents an exact spoken phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="1ac70-178">有关生成包含字符串的语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="1ac70-178">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-179">下面的示例使用 <xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 对象来构造语法，该语法可识别两个短语中的任意一个： "使背景*colorChoice*" 或 "将背景设置为*colorChoice*"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-179">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="1ac70-180">使用 <xref:System.Speech.Recognition.Choices> 对象为*colorChoice*创建可接受值的列表后，该示例使用字符串作为参数来初始化两个 <xref:System.Speech.Recognition.GrammarBuilder> 对象，`makePhrase` 和 `setPhrase`。</span><span class="sxs-lookup"><span data-stu-id="1ac70-180">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.</span></span>  
  
 <span data-ttu-id="1ac70-181">该示例最终从转换为 <xref:System.Speech.Recognition.GrammarBuilder> 对象的 <xref:System.Speech.Recognition.Choices> 对象创建 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-181">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string * System.Speech.Recognition.SubsetMatchingMode -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (phrase, subsetMatchingCriteria)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-182">字符序列。</span><span class="sxs-lookup"><span data-stu-id="1ac70-182">The sequence of words.</span></span></param>
        <param name="subsetMatchingCriteria"><span data-ttu-id="1ac70-183">用于识别短语的语法识别语法的匹配模式。</span><span class="sxs-lookup"><span data-stu-id="1ac70-183">The matching mode the speech recognition grammar uses to recognize the phrase.</span></span></param>
        <summary><span data-ttu-id="1ac70-184">根据字序列的子集初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-184">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class for a subset of a sequence of words.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-185">`phrase` 参数表示语音识别语法可以识别的短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-185">The `phrase` parameter represents the phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="1ac70-186">`subsetMatchingMode` 参数指定可用于实现整个短语成功识别的短语的子集。</span><span class="sxs-lookup"><span data-stu-id="1ac70-186">The `subsetMatchingMode` parameter specifies a subset of the phrase that can be spoken to achieve successful recognition of the entire phrase.</span></span> <span data-ttu-id="1ac70-187">您可以使用此选项创建包含长名称的条目列表的语法，而不要求用户说出整个名称来匹配项。</span><span class="sxs-lookup"><span data-stu-id="1ac70-187">You can use this to create a grammar with a list of entries that have long names, without requiring users to speak an entire name to match an item.</span></span>  
  
 <span data-ttu-id="1ac70-188">有关匹配模式的详细信息，请参阅 <xref:System.Speech.Recognition.SubsetMatchingMode>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-188">For more information about the matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode>.</span></span> <span data-ttu-id="1ac70-189">有关生成包含字符串的语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="1ac70-189">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-190">下面的示例为每个 <xref:System.Speech.Recognition.SubsetMatchingMode> 值创建了语音识别语法，并为在匹配模式语法之间选择的语法创建了语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-190">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars.</span></span> <span data-ttu-id="1ac70-191">如果 `phrase` 的值是 "1 2 3 4 5 6 7"，则子序列语法会识别输入 "2 3 4"，但不识别输入 "1 3 5"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-191">If the value of `phrase` is "one two three four five six seven", then the Subsequence grammar recognizes the input "two three four", but not the input "one three five".</span></span> <span data-ttu-id="1ac70-192">但是，有序子集语法可识别这两个输入。</span><span class="sxs-lookup"><span data-stu-id="1ac70-192">However, the Ordered Subset grammar recognizes both of these inputs.</span></span>  
  
```csharp  
  
private static IEnumerable<Grammar>  
  CreateMatchingModeGrammars(string phrase)  
{  
  List<Grammar> grammars = new List<Grammar>(5);  
  
  Choices modeChoice = new Choices();  
  Type enumType = typeof(SubsetMatchingMode);  
  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  
  {  
    string modeName = Enum.GetName(enumType, mode);  
    modeName = BreakAtCaps(modeName);  
  
    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  
    Grammar modeGrammar = new Grammar(builder);  
    modeGrammar.Name = modeName;  
    modeGrammar.Enabled = false;  
    grammars.Add(modeGrammar);  
  
    modeChoice.Add(modeName);  
  }  
  
  Grammar choiceGrammar = new Grammar(modeChoice);  
  choiceGrammar.Name = "choice";  
  grammars.Add(choiceGrammar);  
  
  return grammars;  
}  
  
// Insert spaces preceding each uppercase letter in a string.   
private static string BreakAtCaps(string item)  
{  
  if (item == null || item.Length == 0)  
  {  
    return item;  
  }  
  
  StringBuilder sb = new StringBuilder(item[0].ToString());  
  for (int i = 1; i < item.Length; i++)  
  {  
    char c = item[i];  
    if (char.IsUpper(c))  
    {  
      sb.Append(" ");  
    }  
    sb.Append(c);  
  }  
  
  return sb.ToString();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SubsetMatchingMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.GrammarBuilder * int * int -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (builder, minRepeat, maxRepeat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="1ac70-193">被重复元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-193">The repeated element.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="1ac70-194">必须发生构成匹配的输入匹配的要素定义的 <paramref name="builder" /> 的最小次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-194">The minimum number of times that input matching the element defined by <paramref name="builder" /> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="1ac70-195">可能发生构成匹配的输入匹配的要素定义的 <paramref name="builder" /> 的最大次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-195">The maximum number of times that input matching the element defined by <paramref name="builder" /> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="1ac70-196">从重复元素中初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-196">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a repeated element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-197">如果 `minRepeat` 的值为0，则新的 <xref:System.Speech.Recognition.GrammarBuilder> 表示一个可选元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-197">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="1ac70-198">`minRepeat` 的值必须大于或等于0且小于或等于 `maxRepeat`的值。</span><span class="sxs-lookup"><span data-stu-id="1ac70-198">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-199">为包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.GrammarBuilder> 对象指定重复项时，请确保避免使用相同的键名或多个可重复修改 <xref:System.Speech.Recognition.SemanticValue> 对象 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 属性的语义元素来创建重复的语义元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-199">When you specify repeats for <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-200">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-200">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="1ac70-201">以下示例创建了用于对比萨饼进行排序的语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-201">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="1ac70-202">它以可选的打开短语开头，后跟一到四个浇头，并以单词 "比萨饼" 结束。</span><span class="sxs-lookup"><span data-stu-id="1ac70-202">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object from a string array of alternative toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string * int * int -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (phrase, minRepeat, maxRepeat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-203">重复的字符序列。</span><span class="sxs-lookup"><span data-stu-id="1ac70-203">The repeated sequence of words.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="1ac70-204">必须发生构成匹配的输入匹配的短语的最小次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-204">The minimum number of times that input matching the phrase must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="1ac70-205">可能发生构成匹配的输入匹配的短语的最大次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-205">The maximum number of times that input matching the phrase can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="1ac70-206">初始化来自 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 中的单词的序列的 <see cref="T:System.String" /> 类的新实例并指定 <see cref="T:System.String" /> 可以重复使用的次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-206">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from the sequence of words in a <see cref="T:System.String" /> and specifies how many times the <see cref="T:System.String" /> can be repeated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-207">如果 `minRepeat` 的值为0，则新的 <xref:System.Speech.Recognition.GrammarBuilder> 表示一个可选元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-207">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="1ac70-208">`minRepeat` 的值必须大于或等于0且小于或等于 `maxRepeat`的值。</span><span class="sxs-lookup"><span data-stu-id="1ac70-208">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span> <span data-ttu-id="1ac70-209">有关生成包含字符串的语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="1ac70-209">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-210">以下示例创建了用于对比萨饼进行排序的语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-210">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="1ac70-211">它以可选的打开短语开头，后跟一到四个浇头，并以单词 "比萨饼" 结束。</span><span class="sxs-lookup"><span data-stu-id="1ac70-211">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ac70-212">创建包含两个语法元素序列的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-212">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-213">静态 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> 方法提供了另一种机制，通过该机制可以将各种类型组合起来，从而在使用 <xref:System.Speech.Recognition.GrammarBuilder>生成的语法中创建多样性和灵活性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-213">The static <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods provide another mechanism by which you can combine various types to create diversity and flexibility in grammars built with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="1ac70-214">这些方法对应于静态 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 方法，这些方法也是在 <xref:System.Speech.Recognition.GrammarBuilder> 类中定义的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-214">These methods correspond to the static <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods, which are also defined on the <xref:System.Speech.Recognition.GrammarBuilder> class.</span></span> <span data-ttu-id="1ac70-215">参数的顺序决定了元素在新的 <xref:System.Speech.Recognition.GrammarBuilder>中的顺序。</span><span class="sxs-lookup"><span data-stu-id="1ac70-215">The order of the parameters determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="1ac70-216">还可以从 <xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>和[字符串](https://go.microsoft.com/fwlink/?LinkId=159733)对象获取 <xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-216">A <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained from <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and [String](https://go.microsoft.com/fwlink/?LinkId=159733) objects.</span></span> <span data-ttu-id="1ac70-217">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 和 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-217">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-218">当使用的语音识别语法包含具有相同键名或多个可重复修改同一语义元素的值的语义元素时，语音识别器会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-218">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> 
  
 <span data-ttu-id="1ac70-219">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))。</span><span class="sxs-lookup"><span data-stu-id="1ac70-219">For more information about building and using speech recognition grammars, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.Choices * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (choices, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="1ac70-220">第一个语法元素，表示一组替代项。</span><span class="sxs-lookup"><span data-stu-id="1ac70-220">The first grammar element, which represents a set of alternatives.</span></span></param>
        <param name="builder"><span data-ttu-id="1ac70-221">第二个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-221">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="1ac70-222">创建一个新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含一个 <see cref="T:System.Speech.Recognition.Choices" /> 对象以及跟随在此对象后面的一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-222">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="1ac70-223">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="choices" /> 元素后面跟随一个 <paramref name="builder" /> 元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-223">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> element followed by the <paramref name="builder" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-224"><xref:System.Speech.Recognition.GrammarBuilder> 支持以下类中的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="1ac70-224"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-225">此方法接受上面列出的 `builder` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-225">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="1ac70-226">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 和 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-226">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-227">在将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象组合在一起时，请确保避免使用相同的键名或多个可重复修改 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 对象的 <xref:System.Speech.Recognition.SemanticValue> 属性的语义元素创建重复的语义元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-227">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-228">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-228">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="1ac70-229">有关生成包含语义信息的语音识别语法的详细信息，请参阅[向 GrammarBuilder 语法添加语义](https://msdn.microsoft.com/library/hh361581.aspx)。</span><span class="sxs-lookup"><span data-stu-id="1ac70-229">For more information about building a speech recognition grammar that contains semantic information, see [Add Semantics to a GrammarBuilder Grammar](https://msdn.microsoft.com/library/hh361581.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder, choices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="1ac70-230">第一个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-230">The first grammar element.</span></span></param>
        <param name="choices"><span data-ttu-id="1ac70-231">第一个表示替换系列的语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-231">The second grammar element, which represents a set of alternatives.</span></span></param>
        <summary><span data-ttu-id="1ac70-232">创建一个新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象以及跟随在此对象后面的一个 <see cref="T:System.Speech.Recognition.Choices" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-232">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a <see cref="T:System.Speech.Recognition.Choices" /> object.</span></span></summary>
        <returns><span data-ttu-id="1ac70-233">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="builder" /> 元素后面跟随一个 <paramref name="choices" /> 元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-233">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="choices" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-234"><xref:System.Speech.Recognition.GrammarBuilder> 支持以下类中的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="1ac70-234"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-235">此方法接受上面列出的 `builder` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-235">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="1ac70-236">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 和 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-236">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-237">当您将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象与其他语法元素组合在一起时，请确保避免使用相同的键名或多个语义元素创建重复的语义元素，这些元素可重复修改 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 对象的 <xref:System.Speech.Recognition.SemanticValue> 属性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-237">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-238">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-238">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="1ac70-239">下面的示例创建一个语音识别语法，它可以识别两个短语，即 "设置背景*色*" 和 "将背景设置为*颜色*"，其中*颜色*是从一组颜色中选择的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-239">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="1ac70-240">各种类型用于生成最终语法，如[字符串](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>和 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-240">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="1ac70-241">对 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> 方法的调用中的显式强制转换运算符是可选的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-241">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder1, builder2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1"><span data-ttu-id="1ac70-242">第一个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-242">The first grammar element.</span></span></param>
        <param name="builder2"><span data-ttu-id="1ac70-243">第二个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-243">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="1ac70-244">创建包含两个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象序列的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-244">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span></span></summary>
        <returns><span data-ttu-id="1ac70-245">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="builder1" /> 元素后面跟随一个 <paramref name="builder2" /> 元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-245">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> element followed by the <paramref name="builder2" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-246"><xref:System.Speech.Recognition.GrammarBuilder> 支持以下类中的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="1ac70-246"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-247">此方法接受上面列出的 `builder1` 或 `builder2` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-247">This method accepts the objects listed above for the `builder1` or `builder2` parameter.</span></span>  
  
 <span data-ttu-id="1ac70-248">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 和 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-248">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-249">当您将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象与其他语法元素组合在一起时，请确保避免使用相同的键名或多个语义元素创建重复的语义元素，这些元素可重复修改 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 对象的 <xref:System.Speech.Recognition.SemanticValue> 属性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-249">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-250">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-250">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="1ac70-251">下面的示例创建一个语音识别语法，它可以识别两个短语，即 "设置背景*色*" 和 "将背景设置为*颜色*"，其中*颜色*是从一组颜色中选择的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-251">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="1ac70-252">各种类型用于生成最终语法，如[字符串](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>和 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-252">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="1ac70-253">对 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> 方法的调用中的显式强制转换运算符是可选的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-253">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder, phrase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="1ac70-254">第一个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-254">The first grammar element.</span></span></param>
        <param name="phrase"><span data-ttu-id="1ac70-255">第二个表示字序列的语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-255">The second grammar element, which represents a sequence of words.</span></span></param>
        <summary><span data-ttu-id="1ac70-256">创建包含后跟一个短语的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-256">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a phrase.</span></span></summary>
        <returns><span data-ttu-id="1ac70-257">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="builder" /> 元素后面跟随一个 <paramref name="phrase" /> 元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-257">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="phrase" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-258"><xref:System.Speech.Recognition.GrammarBuilder> 支持以下类中的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="1ac70-258"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-259">此方法接受上面列出的 `builder` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-259">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="1ac70-260">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 和 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-260">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-261">下面的示例创建一个语音识别语法，它可以识别两个短语，即 "设置背景*色*" 和 "将背景设置为*颜色*"，其中*颜色*是从一组颜色中选择的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-261">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="1ac70-262">各种类型用于生成最终语法，如[字符串](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>和 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-262">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="1ac70-263">对 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> 方法的调用中的显式强制转换运算符是可选的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-263">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Add : string * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (phrase, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-264">第一个表示字序列的语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-264">The first grammar element, which represents a sequence of words.</span></span></param>
        <param name="builder"><span data-ttu-id="1ac70-265">第二个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-265">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="1ac70-266">创建包含 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象后跟的一个短语的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-266">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="1ac70-267">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="phrase" /> 元素后面跟随一个 <paramref name="builder" /> 元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-267">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> element followed by the <paramref name="builder" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-268"><xref:System.Speech.Recognition.GrammarBuilder> 支持以下类中的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="1ac70-268"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-269">此方法接受上面列出的 `builder` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-269">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="1ac70-270">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 和 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-270">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-271">下面的示例创建一个语音识别语法，它可以识别两个短语，即 "设置背景*色*" 和 "将背景设置为*颜色*"，其中*颜色*是从一组颜色中选择的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-271">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="1ac70-272">各种类型用于生成最终语法，如[字符串](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>和 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-272">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="1ac70-273">对 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> 方法的调用中的显式强制转换运算符是可选的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-273">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ac70-274">为语法元素的当前顺序追加语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-274">Appends a grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-275">使用这些方法可将语法元素追加到现有 <xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-275">Use these methods to append grammar elements to an existing <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="1ac70-276">创建语法元素时，可以将它们追加到现有生成器，以渐进式地开发语音识别语法的约束。</span><span class="sxs-lookup"><span data-stu-id="1ac70-276">As you create grammar elements, you can append them to the existing builder to progressively develop the constraints for a speech recognition grammar.</span></span> <span data-ttu-id="1ac70-277">每个元素都添加到当前元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="1ac70-277">Each element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="1ac70-278">此方法具有重载，用于追加 <xref:System.Speech.Recognition.GrammarBuilder>、<xref:System.String>、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>和 <xref:System.Speech.Recognition.SemanticResultValue> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-278">This method has overloads for appending <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, and <xref:System.Speech.Recognition.SemanticResultValue> objects.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-279">当使用的语音识别语法包含具有相同键名或多个可重复修改同一语义元素的值的语义元素时，语音识别器会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-279">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> 
  
 <span data-ttu-id="1ac70-280">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))。</span><span class="sxs-lookup"><span data-stu-id="1ac70-280">For more information about building and using speech recognition grammars, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.Choices -&gt; unit" Usage="grammarBuilder.Append alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices"><span data-ttu-id="1ac70-281">要追加的替代组。</span><span class="sxs-lookup"><span data-stu-id="1ac70-281">The set of alternatives to append.</span></span></param>
        <summary><span data-ttu-id="1ac70-282">为语法元素的当前顺序追加替代项集合。</span><span class="sxs-lookup"><span data-stu-id="1ac70-282">Appends a set of alternatives to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-283">将 `alternateChoices` 添加到当前元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="1ac70-283">`alternateChoices` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-284">在将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.Choices> 对象追加到 <xref:System.Speech.Recognition.GrammarBuilder> 对象时，请确保避免使用相同的键名或多个语义元素创建重复的语义元素，这些元素可重复修改 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 对象的 <xref:System.Speech.Recognition.SemanticValue> 属性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-284">When you append <xref:System.Speech.Recognition.Choices> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-285">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-285">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="1ac70-286">以下示例创建了一个语音识别语法用于短语，如 "在工作中调用 James" 和 "呼叫 Anne on 她的手机"，其中单词 "phone" 是可选的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-286">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="1ac70-287">该示例重点介绍 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-287">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.GrammarBuilder -&gt; unit" Usage="grammarBuilder.Append builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="1ac70-288">追加的语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-288">The grammar element to append.</span></span></param>
        <summary><span data-ttu-id="1ac70-289">为语法元素的当前顺序追加语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-289">Appends a grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-290">将 `builder` 添加到当前语法元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="1ac70-290">`builder` is added to the end of the current sequence of grammar elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ac70-291">在将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.GrammarBuilder> 对象追加到 <xref:System.Speech.Recognition.GrammarBuilder> 对象时，请确保避免使用相同的键名或多个语义元素创建重复的语义元素，这些元素可重复修改 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 对象的 <xref:System.Speech.Recognition.SemanticValue> 属性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-291">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-292">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-292">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="1ac70-293">以下示例创建了一个语音识别语法用于短语，如 "在工作中调用 James" 和 "呼叫 Anne on 她的手机"，其中单词 "phone" 是可选的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-293">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="1ac70-294"><xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 对象用于构造语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-294"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="1ac70-295">该示例重点介绍 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-295">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.SemanticResultKey -&gt; unit" Usage="grammarBuilder.Append key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="1ac70-296">要转换的语义键。</span><span class="sxs-lookup"><span data-stu-id="1ac70-296">The semantic key to append.</span></span></param>
        <summary><span data-ttu-id="1ac70-297">为语法元素的当前顺序追加语义密钥。</span><span class="sxs-lookup"><span data-stu-id="1ac70-297">Appends a semantic key to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-298">将 `key` 添加到当前元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="1ac70-298">`key` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-299">将 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例追加到 <xref:System.Speech.Recognition.GrammarBuilder> 对象时，请确保避免使用相同的键名或多个语义元素创建重复的语义元素，这些元素可重复修改 <xref:System.Speech.Recognition.SemanticValue> 对象的 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-299">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-300">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-300">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="1ac70-301">下面的示例是一个控制台应用程序的一部分，用于为航班选择源和目标城市。</span><span class="sxs-lookup"><span data-stu-id="1ac70-301">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="1ac70-302">此应用程序识别诸如 "我想要从迈阿密飞到芝加哥" 之类的短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-302">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="1ac70-303"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> 事件的处理程序使用 <xref:System.Speech.Recognition.SemanticResultKey> 提取源和目标城市的 <xref:System.Speech.Recognition.SemanticResultValue> 中指定的机场代码。</span><span class="sxs-lookup"><span data-stu-id="1ac70-303">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a Choices object and add  cities and airport codes  
        // using SemanticResultValue objects.  
        Choices cities = new Choices();  
        cities.Add(new SemanticResultValue("Chicago", "ORD"));  
        cities.Add(new SemanticResultValue("Boston", "BOS"));  
        cities.Add(new SemanticResultValue("Miami", "MIA"));  
        cities.Add(new SemanticResultValue("Dallas", "DFW"));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.SemanticResultValue -&gt; unit" Usage="grammarBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1ac70-304">要追加的语义值。</span><span class="sxs-lookup"><span data-stu-id="1ac70-304">The semantic value to append.</span></span></param>
        <summary><span data-ttu-id="1ac70-305">为语法元素的当前顺序追加语义值。</span><span class="sxs-lookup"><span data-stu-id="1ac70-305">Appends a semantic value to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-306">将 `value` 添加到当前元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="1ac70-306">`value` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-307">将 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例追加到 <xref:System.Speech.Recognition.GrammarBuilder> 对象时，请确保避免使用相同的键名或多个语义元素创建重复的语义元素，这些元素可重复修改 <xref:System.Speech.Recognition.SemanticValue> 对象的 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-307">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-308">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-308">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="1ac70-309">下面的示例是一个控制台应用程序的一部分，用于为航班选择源和目标城市。</span><span class="sxs-lookup"><span data-stu-id="1ac70-309">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="1ac70-310">此应用程序识别诸如 "我想要从迈阿密飞到芝加哥" 之类的短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-310">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="1ac70-311"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> 事件的处理程序使用 <xref:System.Speech.Recognition.SemanticResultKey> 提取源和目标城市的 <xref:System.Speech.Recognition.SemanticResultValue> 中指定的机场代码。</span><span class="sxs-lookup"><span data-stu-id="1ac70-311">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create GrammarBuilder objects and append SemanticResultValue objects   
        // that contain cities and airport codes.  
  
        GrammarBuilder chicago = new GrammarBuilder();  
        chicago.Append(new SemanticResultValue("Chicago", "ORD"));  
  
        GrammarBuilder boston = new GrammarBuilder();  
        boston.Append(new SemanticResultValue("Boston", "BOS"));  
  
        GrammarBuilder miami = new GrammarBuilder();  
        miami.Append(new SemanticResultValue("Miami", "MIA"));  
  
        GrammarBuilder dallas = new GrammarBuilder();  
        dallas.Append(new SemanticResultValue("Dallas", "DFW"));  
  
        // Create a Choices object and add the cities using implicit conversion from   
        // SemanticResultValue to GrammarBuilder.  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="member this.Append : string -&gt; unit" Usage="grammarBuilder.Append phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-312">追加的字符序列。</span><span class="sxs-lookup"><span data-stu-id="1ac70-312">The sequence of words to append.</span></span></param>
        <summary><span data-ttu-id="1ac70-313">为语法元素的当前顺序追加短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-313">Appends a phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-314">将 `phrase` 添加到当前元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="1ac70-314">`phrase` is added to the end of the current sequence of elements.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="F#" Value="member this.Append : string * System.Speech.Recognition.SubsetMatchingMode -&gt; unit" Usage="grammarBuilder.Append (phrase, subsetMatchingCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-315">追加的字符序列。</span><span class="sxs-lookup"><span data-stu-id="1ac70-315">The sequence of words to append.</span></span></param>
        <param name="subsetMatchingCriteria"><span data-ttu-id="1ac70-316">使用的语法识别该声明匹配的模式。</span><span class="sxs-lookup"><span data-stu-id="1ac70-316">The matching mode the grammar uses to recognize the phrase.</span></span></param>
        <summary><span data-ttu-id="1ac70-317">为语法元素的当前顺序追加一个短语子集元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-317">Appends an element for a subset of a phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-318">将子集元素添加到当前元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="1ac70-318">The subset element is added to the end of the current sequence of elements.</span></span> <span data-ttu-id="1ac70-319">有关使用字符串生成语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="1ac70-319">For more information about building a speech recognition grammar using strings, see [Using Strings to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
 <span data-ttu-id="1ac70-320">有关使用子集匹配模式的详细信息，请参阅 <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-320">For detailed information on the use of subset matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-321">下面的示例为每个 <xref:System.Speech.Recognition.SubsetMatchingMode> 值创建语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-321">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value.</span></span> <span data-ttu-id="1ac70-322">例如，生成的语法 `OrderedSubset` 可识别短语 "3 4 5" 和 "1 3 5"，语法 `Subsequence` 可识别短语 "3 4 5"，而不是短语 "1 3 5"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-322">For example, the generated grammar `OrderedSubset` recognizes the phrases, "three four five" and "one three five", and the grammar `Subsequence` recognizes the phrase "three four five", but not the phrase, "one three five".</span></span>  
  
```csharp  
  
private Grammar[] CreateSubsetMatchTest()  
{  
  List<Grammar> grammars = new List<Grammar>(4);  
  
  string phrase = "one two three four five six";  
  foreach (SubsetMatchingMode mode in  
    Enum.GetValues(typeof(SubsetMatchingMode)))  
  {  
    GrammarBuilder gb = new GrammarBuilder();  
    gb.Append(phrase, mode);  
  
    Grammar grammar = new Grammar(gb);  
    grammar.Name = mode.ToString();  
    grammars.Add(grammar);  
  }  
  
  return grammars.ToArray();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.GrammarBuilder * int * int -&gt; unit" Usage="grammarBuilder.Append (builder, minRepeat, maxRepeat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="1ac70-323">追加的重复语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-323">The repeated grammar element to append.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="1ac70-324">必须发生构成匹配的输入匹配的要素定义的 <paramref name="builder" /> 的最小次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-324">The minimum number of times that input matching the element defined by <paramref name="builder" /> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="1ac70-325">可能发生构成匹配的输入匹配的要素定义的 <paramref name="builder" /> 的最大次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-325">The maximum number of times that input matching the element defined by <paramref name="builder" /> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="1ac70-326">为语法元素的当前顺序追加重复的语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-326">Appends a repeated grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-327">`minRepeat` 的值必须大于或等于0且小于或等于 `maxRepeat`的值。</span><span class="sxs-lookup"><span data-stu-id="1ac70-327">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-328">在将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.GrammarBuilder> 对象追加到 <xref:System.Speech.Recognition.GrammarBuilder> 对象时，请确保避免使用相同的键名或多个语义元素创建重复的语义元素，这些元素可重复修改 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 对象的 <xref:System.Speech.Recognition.SemanticValue> 属性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-328">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-329">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-329">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="1ac70-330">以下示例创建了一个语音识别语法用于短语，如 "在工作中调用 James" 和 "呼叫 Anne on 她的手机"，其中单词 "phone" 是可选的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-330">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="1ac70-331"><xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 对象用于构造语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-331"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="1ac70-332">该示例重点介绍 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-332">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="member this.Append : string * int * int -&gt; unit" Usage="grammarBuilder.Append (phrase, minRepeat, maxRepeat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-333">追加的重复的字符序列。</span><span class="sxs-lookup"><span data-stu-id="1ac70-333">The repeated sequence of words to append.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="1ac70-334">必须发生构成匹配的输入匹配的 <paramref name="phrase" /> 的最小次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-334">The minimum number of times that input matching <paramref name="phrase" /> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="1ac70-335">可能发生构成匹配的输入匹配的 <paramref name="phrase" /> 的最大次数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-335">The maximum number of times that input matching <paramref name="phrase" /> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="1ac70-336">为语法元素的当前顺序追加重复的短语。</span><span class="sxs-lookup"><span data-stu-id="1ac70-336">Appends a repeated phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-337">`minRepeat` 的值必须大于或等于0且小于或等于 `maxRepeat`的值。</span><span class="sxs-lookup"><span data-stu-id="1ac70-337">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-338">以下示例创建了一个语音识别语法用于短语，如 "在工作中调用 James" 和 "呼叫 Anne on 她的手机"，其中单词 "phone" 是可选的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-338">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="1ac70-339"><xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 对象用于构造语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-339"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="1ac70-340">该示例重点介绍 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-340">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendDictation">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ac70-341">为语法元素的当前顺序追加听写语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-341">Appends a dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-342">利用 <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> 方法，您可以将听写语法作为规则追加到 <xref:System.Speech.Recognition.GrammarBuilder>中。</span><span class="sxs-lookup"><span data-stu-id="1ac70-342">The <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> methods allow you to append a dictation grammar as a rule to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="1ac70-343">有关听写语法的详细信息，请参阅 <xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-343">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation();" />
      <MemberSignature Language="F#" Value="member this.AppendDictation : unit -&gt; unit" Usage="grammarBuilder.AppendDictation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ac70-344">为语法元素的当前顺序追加默认的听写语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-344">Appends the default dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-345">有关听写语法的详细信息，请参阅 <xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-345">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-346">下面的示例创建了包含听写功能的语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-346">The following example creates a speech recognition grammar that incorporates dictation.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation();  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation(string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation (category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation(System::String ^ category);" />
      <MemberSignature Language="F#" Value="member this.AppendDictation : string -&gt; unit" Usage="grammarBuilder.AppendDictation category" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category"><span data-ttu-id="1ac70-347">附加口述语法的类别。</span><span class="sxs-lookup"><span data-stu-id="1ac70-347">The category of the dictation grammar to append.</span></span></param>
        <summary><span data-ttu-id="1ac70-348">为语法元素的当前顺序追加指定的听写语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-348">Appends the specified dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-349">若要使用拼写听写语法，请将 `category` 设置为 `spelling`。</span><span class="sxs-lookup"><span data-stu-id="1ac70-349">To use the spelling dictation grammar, set `category` to `spelling`.</span></span>  
  
 <span data-ttu-id="1ac70-350">有关听写语法的详细信息，请参阅 <xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-350">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-351">下面的示例创建一个包含拼写听写语法规则的语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-351">The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation("spelling");  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendRuleReference">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ac70-352">为语法元素的当前顺序追加语法文件或语法规则。</span><span class="sxs-lookup"><span data-stu-id="1ac70-352">Appends a grammar file or a grammar rule to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-353"><xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> 方法可以在文件中追加语法文件或语法规则。</span><span class="sxs-lookup"><span data-stu-id="1ac70-353">The <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> methods can append a grammar file or a grammar rule from a file.</span></span> <span data-ttu-id="1ac70-354">这些方法允许应用程序使用预先部署或可公开使用的语法规则。</span><span class="sxs-lookup"><span data-stu-id="1ac70-354">These methods allow applications to make use of pre-deployed or publicly available grammar rules.</span></span> <span data-ttu-id="1ac70-355">应用程序必须对指定语法文件的位置具有读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="1ac70-355">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="1ac70-356">这些方法可以从以下格式读取语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-356">These methods can read a speech recognition grammar from the following formats.</span></span>  
  
-   <span data-ttu-id="1ac70-357">符合 W3C[语音识别语法规范（SRGS）版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)的 XML 格式文件</span><span class="sxs-lookup"><span data-stu-id="1ac70-357">XML-format files that conform to the W3C [Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)</span></span>  
  
-   <span data-ttu-id="1ac70-358">符合 Microsoft Speech 识别语法二进制格式（cfg 文件扩展名）的二进制文件</span><span class="sxs-lookup"><span data-stu-id="1ac70-358">Binary files that conform to the Microsoft Speech Recognition Grammar Binary Format (.cfg file extension)</span></span>  
  
 <span data-ttu-id="1ac70-359">使用扩展名为的二进制语法文件将 XML 格式的 SRGS 语法文件编译为二进制语法文件可以减少搜索匹配所用的时间，尤其是当语法要求识别大量字词和短语时。</span><span class="sxs-lookup"><span data-stu-id="1ac70-359">Compiling an XML-format SRGS grammar file to a binary grammar file with the .cfg extension can reduce the time consumed by searches for a match, especially if the grammar requires recognition of a large number of words and phrases.</span></span> <span data-ttu-id="1ac70-360">有关将 SRGS 语法编译为 CFG 二进制格式的信息，请参阅 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-360">For information about compiling SRGS grammars to the CFG binary format, see <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendRuleReference : string -&gt; unit" Usage="grammarBuilder.AppendRuleReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="1ac70-361">在一个支持的布局描述语音识别语法的路径通用资源标识符（URI）的文件。</span><span class="sxs-lookup"><span data-stu-id="1ac70-361">The path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span></span></param>
        <summary><span data-ttu-id="1ac70-362">为语法元素的当前顺序追加语法定义文件。</span><span class="sxs-lookup"><span data-stu-id="1ac70-362">Appends a grammar definition file to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-363">`path` 参数提供的 URI 可以是本地的，也可以是远程的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-363">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="1ac70-364">应用程序必须对指定语法文件的位置具有读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="1ac70-364">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="1ac70-365">W3C 语音识别语法规范（SRGS）表示形式可以定义根规则。</span><span class="sxs-lookup"><span data-stu-id="1ac70-365">A W3C Speech Recognition Grammar Specification (SRGS) representation can define a root rule.</span></span> <span data-ttu-id="1ac70-366">此方法将语法从其根规则开始追加到语法元素的当前序列。</span><span class="sxs-lookup"><span data-stu-id="1ac70-366">This method appends the grammar, beginning with its root rule, to the current sequence of grammar elements.</span></span> <span data-ttu-id="1ac70-367">若要追加特定语法规则，请使用 <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-367">To append a specific grammar rule, use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-368">下面C#的示例创建一个语音识别语法，它使用本地 SRGS 文件 grxml 中名为 `Cities` 的规则。</span><span class="sxs-lookup"><span data-stu-id="1ac70-368">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="1ac70-369">Grxml 文件的内容将显示在C#代码示例下面。</span><span class="sxs-lookup"><span data-stu-id="1ac70-369">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar1()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.AppendRuleReference("file://c:/temp/cities.grxml");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 1";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-16" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path, string rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path, string rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String, rule As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path, System::String ^ rule);" />
      <MemberSignature Language="F#" Value="member this.AppendRuleReference : string * string -&gt; unit" Usage="grammarBuilder.AppendRuleReference (path, rule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="rule" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="1ac70-370">在一个支持的布局描述语音识别语法的路径通用资源标识符（URI）的文件路径。</span><span class="sxs-lookup"><span data-stu-id="1ac70-370">The file path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span></span></param>
        <param name="rule"><span data-ttu-id="1ac70-371">规则的追加、或追加语法文件的默认根规则的标识符 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="1ac70-371">The identifier of the rule to append, or <see langword="null" /> to append the default root rule of the grammar file.</span></span></param>
        <summary><span data-ttu-id="1ac70-372">为语法元素的当前顺序追加指定的语法定义文件规则。</span><span class="sxs-lookup"><span data-stu-id="1ac70-372">Appends the specified rule of a grammar definition file to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-373">`path` 参数提供的 URI 可以是本地的，也可以是远程的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-373">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="1ac70-374">应用程序必须对指定语法文件的位置具有读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="1ac70-374">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="1ac70-375">您可以使用 <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> 方法追加语法文件（以其根规则开头）。</span><span class="sxs-lookup"><span data-stu-id="1ac70-375">You can use the use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method to append a grammar file beginning with its root rule.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-376">下面C#的示例创建一个语音识别语法，它使用本地 SRGS 文件 grxml 中名为 `Cities` 的规则。</span><span class="sxs-lookup"><span data-stu-id="1ac70-376">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="1ac70-377">Grxml 文件的内容将显示在C#代码示例下面。</span><span class="sxs-lookup"><span data-stu-id="1ac70-377">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar2()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("Does");  
  builder.AppendRuleReference(@"c:\temp\cities.grxml", "Cities");  
  builder.Append("have a shuttle");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendWildcard">
      <MemberSignature Language="C#" Value="public void AppendWildcard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendWildcard() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendWildcard ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendWildcard();" />
      <MemberSignature Language="F#" Value="member this.AppendWildcard : unit -&gt; unit" Usage="grammarBuilder.AppendWildcard " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ac70-378">为语法元素的当前顺序追加与任何输入匹配的识别语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-378">Appends a recognition grammar element that matches any input to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-379">将通配符元素添加到当前元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="1ac70-379">The wildcard element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="1ac70-380">通配符元素与任何口述单词匹配。</span><span class="sxs-lookup"><span data-stu-id="1ac70-380">The wildcard element matches any spoken word.</span></span> <span data-ttu-id="1ac70-381">它不匹配背景噪音或静默。</span><span class="sxs-lookup"><span data-stu-id="1ac70-381">It does not match background noise or silence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-382">下面的示例创建一个接受密码输入作为通配符的语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-382">The following example creates a grammar that accepts password input as a wildcard.</span></span> <span data-ttu-id="1ac70-383">该示例将 <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> 事件处理程序附加到用于验证密码输入的语法。</span><span class="sxs-lookup"><span data-stu-id="1ac70-383">The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> event handler to the grammar that validates the password input.</span></span>  
  
```csharp  
private Grammar CreatePasswordGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey passwordKey =  
    new SemanticResultKey("Password", wildcardBuilder);  
  
  GrammarBuilder passwordBuilder =  
    new GrammarBuilder("My Password is");  
  passwordBuilder.Append(passwordKey);  
  
  Grammar passwordGrammar = new Grammar(passwordBuilder);  
  passwordGrammar.Name = "Password input";  
  
  passwordGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      PasswordInputHandler);  
  
  return passwordGrammar;  
}  
  
// Handle the SpeechRecognized event for the password grammar.  
private void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Password"))  
  {  
    RecognizedAudio passwordAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    if (IsValidPassword(passwordAudio))  
    {  
      Console.WriteLine("Password accepted.");  
  
      // Add code to handle a valid password here.  
    }  
    else  
    {  
      Console.WriteLine("Invalid password.");  
  
      // Add code to handle an invalid password here.  
    }  
  }  
}  
  
// Validate the password input.   
private bool IsValidPassword(RecognizedAudio passwordAudio)  
{  
  Console.WriteLine("Validating password.");  
  
  // Add password validation code here.  
  
  return false;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ac70-384">获取或设置语音识别语法的区域性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-384">Gets or sets the culture of the speech recognition grammar.</span></span></summary>
        <value><span data-ttu-id="1ac70-385"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的区域性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-385">The culture of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span> <span data-ttu-id="1ac70-386">区域性是执行线程的<see cref="P:System.Threading.Thread.CurrentUICulture" />属性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-386">The default is the executing thread's <see cref="P:System.Threading.Thread.CurrentUICulture" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-387"><xref:System.Speech.Recognition.Grammar.%23ctor%2A> 构造函数创建一个可由相应区域性的语音识别器使用的 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-387">The <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor creates a <xref:System.Speech.Recognition.Grammar> object that can be used by a speech recognizer of the corresponding culture.</span></span> <span data-ttu-id="1ac70-388">只有作为语法构造函数的参数提供的 <xref:System.Speech.Recognition.GrammarBuilder> 的 <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> 属性可用于设置生成的语音识别语法的区域性。</span><span class="sxs-lookup"><span data-stu-id="1ac70-388">Only the <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> property of the <xref:System.Speech.Recognition.GrammarBuilder> that is provided as the parameter to the Grammar constructor is used to set the culture of the resulting speech recognition grammar.</span></span>  
  
 <span data-ttu-id="1ac70-389">Microsoft Windows 和 Speech API 接受所有有效的语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="1ac70-389">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="1ac70-390">若要使用 `Culture` 属性中指定的语言执行语音识别，必须安装支持该语言-国家/地区代码的语音识别引擎。</span><span class="sxs-lookup"><span data-stu-id="1ac70-390">To perform speech recognition using the language specified in the `Culture` property, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="1ac70-391">Microsoft Windows 7 随附的语音识别引擎使用以下语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="1ac70-391">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="1ac70-392">半 GB。</span><span class="sxs-lookup"><span data-stu-id="1ac70-392">en-GB.</span></span> <span data-ttu-id="1ac70-393">英语（英国）</span><span class="sxs-lookup"><span data-stu-id="1ac70-393">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="1ac70-394">en-us。</span><span class="sxs-lookup"><span data-stu-id="1ac70-394">en-US.</span></span> <span data-ttu-id="1ac70-395">英语（美国）</span><span class="sxs-lookup"><span data-stu-id="1ac70-395">English (United States)</span></span>  
  
-   <span data-ttu-id="1ac70-396">取消。</span><span class="sxs-lookup"><span data-stu-id="1ac70-396">de-DE.</span></span> <span data-ttu-id="1ac70-397">德语（德国）</span><span class="sxs-lookup"><span data-stu-id="1ac70-397">German (Germany)</span></span>  
  
-   <span data-ttu-id="1ac70-398">es。</span><span class="sxs-lookup"><span data-stu-id="1ac70-398">es-ES.</span></span> <span data-ttu-id="1ac70-399">西班牙语(西班牙)</span><span class="sxs-lookup"><span data-stu-id="1ac70-399">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="1ac70-400">fr-fr。</span><span class="sxs-lookup"><span data-stu-id="1ac70-400">fr-FR.</span></span> <span data-ttu-id="1ac70-401">法语（法国）</span><span class="sxs-lookup"><span data-stu-id="1ac70-401">French (France)</span></span>  
  
-   <span data-ttu-id="1ac70-402">ja-jp。</span><span class="sxs-lookup"><span data-stu-id="1ac70-402">ja-JP.</span></span> <span data-ttu-id="1ac70-403">日语（日本）</span><span class="sxs-lookup"><span data-stu-id="1ac70-403">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="1ac70-404">zh-chs-CN。</span><span class="sxs-lookup"><span data-stu-id="1ac70-404">zh-CN.</span></span> <span data-ttu-id="1ac70-405">中文（中国）</span><span class="sxs-lookup"><span data-stu-id="1ac70-405">Chinese (China)</span></span>  
  
-   <span data-ttu-id="1ac70-406">zh-chs-幼圆。</span><span class="sxs-lookup"><span data-stu-id="1ac70-406">zh-TW.</span></span> <span data-ttu-id="1ac70-407">中文（台湾）</span><span class="sxs-lookup"><span data-stu-id="1ac70-407">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="1ac70-408">还允许使用两个字母的语言代码，例如 "en"、"fr" 或 "es"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-408">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ac70-409">下面的示例创建了一个语音识别语法，用于对包含最多四个浇头的比萨饼进行排序。</span><span class="sxs-lookup"><span data-stu-id="1ac70-409">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="1ac70-410">它专门将 <xref:System.Speech.Recognition.GrammarBuilder> 对象的区域性设置为 "英语（美国）"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-410">It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="DebugShowPhrases">
      <MemberSignature Language="C#" Value="public string DebugShowPhrases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugShowPhrases" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugShowPhrases As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DebugShowPhrases { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DebugShowPhrases : string" Usage="System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ac70-411">获取一个字符串，此字符串显示  <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 包含的语法的内容和结构。</span><span class="sxs-lookup"><span data-stu-id="1ac70-411">Gets a string that shows the contents and structure of the grammar contained by the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <value><span data-ttu-id="1ac70-412">当前内容和结构 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-412">The current content and structure of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ac70-413">下面的示例创建了一个语音识别语法，用于对包含最多四个浇头的比萨饼进行排序。</span><span class="sxs-lookup"><span data-stu-id="1ac70-413">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="1ac70-414">创建语法之前，它会将 <xref:System.Speech.Recognition.GrammarBuilder> 的状态写入控制台。</span><span class="sxs-lookup"><span data-stu-id="1ac70-414">It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar.</span></span> <span data-ttu-id="1ac70-415">此方法将生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="1ac70-415">This method generates the following output:</span></span>  
  
-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Write the contents and structure of the GrammarBuilder to the console.  
  Console.WriteLine("Grammar content and structure: {0}", gb.DebugShowPhrases);  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361640(v%3doffice.14)"><span data-ttu-id="1ac70-416">使用 GrammarBuilder 创建语法</span><span class="sxs-lookup"><span data-stu-id="1ac70-416">Create Grammars Using GrammarBuilder</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ac70-417">创建对应于两个语法元素序列的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-417">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that corresponds to a sequence of two grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-418">操作数的顺序决定了新 <xref:System.Speech.Recognition.GrammarBuilder>中元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="1ac70-418">The order of the operands determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-419">将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.Choices> 或 <xref:System.Speech.Recognition.GrammarBuilder> 对象与其他语法元素结合使用时，建议小心。</span><span class="sxs-lookup"><span data-stu-id="1ac70-419">Caution is recommended when combining <xref:System.Speech.Recognition.Choices> or <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements.</span></span> <span data-ttu-id="1ac70-420">当使用的语音识别语法包含具有相同键名或多个可重复修改同一语义元素的值的语义元素时，语音识别器会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-420">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> 
  
 <span data-ttu-id="1ac70-421">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))。</span><span class="sxs-lookup"><span data-stu-id="1ac70-421">For more information about building and using speech recognition grammars, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.Choices * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices + builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="1ac70-422">第一个语法元素，表示一组替代项。</span><span class="sxs-lookup"><span data-stu-id="1ac70-422">The first grammar element, which represents a set of alternatives.</span></span></param>
        <param name="builder"><span data-ttu-id="1ac70-423">第二个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-423">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="1ac70-424">创建一个新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含一个 <see cref="T:System.Speech.Recognition.Choices" /> 对象以及跟随在此对象后面的一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-424">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="1ac70-425">返回 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 参数后面的 <paramref name="choices" /> 参数序列的 <paramref name="builder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-425">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> parameter followed by the <paramref name="builder" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-426"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类转换。</span><span class="sxs-lookup"><span data-stu-id="1ac70-426"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-427">此方法接受上面列出的 `builder` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-427">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="1ac70-428">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-428">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-429">在将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象组合在一起时，请确保避免使用相同的键名或多个可重复修改 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 对象的 <xref:System.Speech.Recognition.SemanticValue> 属性的语义元素创建重复的语义元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-429">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-430">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-430">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
 <span data-ttu-id="1ac70-431">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-431">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder + choices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="1ac70-432">第一个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-432">The first grammar element.</span></span></param>
        <param name="choices"><span data-ttu-id="1ac70-433">第二个表示重置系列的替换元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-433">The second grammar element, which represents a set of alternative elements.</span></span></param>
        <summary><span data-ttu-id="1ac70-434">创建包含后跟一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的新 <see cref="T:System.Speech.Recognition.Choices" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-434">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a <see cref="T:System.Speech.Recognition.Choices" />.</span></span></summary>
        <returns><span data-ttu-id="1ac70-435">返回 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 参数后面的 <paramref name="builder" /> 参数序列的 <paramref name="choices" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-435">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="choices" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-436"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类进行转换：</span><span class="sxs-lookup"><span data-stu-id="1ac70-436"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-437">此方法接受上面列出的 `builder` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-437">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="1ac70-438">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-438">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-439">在将包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象组合在一起时，请确保避免使用相同的键名或多个可重复修改 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 对象的 <xref:System.Speech.Recognition.SemanticValue> 属性的语义元素创建重复的语义元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-439">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-440">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-440">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
 <span data-ttu-id="1ac70-441">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-441">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="1ac70-442">下面的示例创建一个语音识别语法，它可以识别两个短语，即 "设置背景*色*" 和 "将背景设置为*颜色*"，其中*颜色*是从一组颜色中选择的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-442">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="1ac70-443">各种类型用于生成最终语法，如[字符串](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>和 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-443">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder1 + builder2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1"><span data-ttu-id="1ac70-444">第一个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-444">The first grammar element.</span></span></param>
        <param name="builder2"><span data-ttu-id="1ac70-445">第二个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-445">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="1ac70-446">创建包含两个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象序列的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-446">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span></span></summary>
        <returns><span data-ttu-id="1ac70-447">返回 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 参数后面的 <paramref name="builder1" /> 参数序列的 <paramref name="builder2" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-447">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> parameter followed by the <paramref name="builder2" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-448"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类转换。</span><span class="sxs-lookup"><span data-stu-id="1ac70-448"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-449">此方法接受上面列出的 `builder1` 和 `builder2` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-449">This method accepts the objects listed above for the `builder1` and `builder2` parameters.</span></span> <span data-ttu-id="1ac70-450">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-450">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ac70-451">当你组合包含 <xref:System.Speech.Recognition.SemanticResultValue> 或 <xref:System.Speech.Recognition.SemanticResultKey> 实例的 <xref:System.Speech.Recognition.GrammarBuilder> 对象时，请确保避免使用相同的键名或多个可重复修改 <xref:System.Speech.Recognition.SemanticValue> 对象 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 属性的语义元素来创建重复的语义元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-451">When you combine <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="1ac70-452">语音识别器在遇到这些情况时可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1ac70-452">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
 <span data-ttu-id="1ac70-453">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-453">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder + phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="1ac70-454">第一个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-454">The first grammar element.</span></span></param>
        <param name="phrase"><span data-ttu-id="1ac70-455">第二个表示字序列的语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-455">The second grammar element, which represents a sequence of words.</span></span></param>
        <summary><span data-ttu-id="1ac70-456">创建包含后跟一个短语的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-456">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a phrase.</span></span></summary>
        <returns><span data-ttu-id="1ac70-457">返回 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 参数后面的 <paramref name="builder" /> 参数序列的 <paramref name="phrase" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-457">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="phrase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-458"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类转换。</span><span class="sxs-lookup"><span data-stu-id="1ac70-458"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-459">此方法接受上面列出的 `builder` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-459">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="1ac70-460">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-460">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="1ac70-461">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-461">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member ( + ) : string * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="phrase + builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-462">第一个表示字序列的语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-462">The first grammar element, which represents a sequence of words.</span></span></param>
        <param name="builder"><span data-ttu-id="1ac70-463">第二个语法元素。</span><span class="sxs-lookup"><span data-stu-id="1ac70-463">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="1ac70-464">创建包含 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 后跟的一个短语的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-464">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="1ac70-465">返回 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 参数后面的 <paramref name="phrase" /> 参数序列的 <paramref name="builder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-465">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> parameter followed by the <paramref name="builder" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-466"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类转换。</span><span class="sxs-lookup"><span data-stu-id="1ac70-466"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-467">此方法接受上面列出的 `builder` 参数的对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-467">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="1ac70-468">有关详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 运算符。</span><span class="sxs-lookup"><span data-stu-id="1ac70-468">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="1ac70-469">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-469">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="1ac70-470">下面的示例创建一个语音识别语法，它可以识别两个短语，即 "设置背景*色*" 和 "将背景设置为*颜色*"，其中*颜色*是从一组颜色中选择的。</span><span class="sxs-lookup"><span data-stu-id="1ac70-470">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="1ac70-471">各种类型用于生成最终语法，如[字符串](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>和 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-471">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ac70-472">将另一种类型为 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="1ac70-472">Converts another type to a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-473">隐式转换创建 <xref:System.Speech.Recognition.GrammarBuilder>的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-473">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="1ac70-474">可以将以下每个类强制转换为 <xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="1ac70-474">You can cast each of the following classes to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="1ac70-475">每个隐式强制转换等效于调用构造函数。</span><span class="sxs-lookup"><span data-stu-id="1ac70-475">Each of the implicit casts is equivalent to calling the constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit choices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="1ac70-476">要转换的替代组。</span><span class="sxs-lookup"><span data-stu-id="1ac70-476">The set of alternatives to convert.</span></span></param>
        <summary><span data-ttu-id="1ac70-477">将 <see cref="T:System.Speech.Recognition.Choices" /> 对象转换为 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-477">Converts a <see cref="T:System.Speech.Recognition.Choices" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="1ac70-478">转换的 <see cref="T:System.Speech.Recognition.Choices" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-478">The converted <see cref="T:System.Speech.Recognition.Choices" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-479">隐式转换创建 <xref:System.Speech.Recognition.GrammarBuilder>的新实例。此转换运算符等效于调用 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> 并指定 `alternateChoices`的 `choices`。</span><span class="sxs-lookup"><span data-stu-id="1ac70-479">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `choices` for the `alternateChoices`.</span></span>  
  
 <span data-ttu-id="1ac70-480">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-480">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="1ac70-481">下面的示例创建一个语音识别语法，它可以识别对 "是" 或 "否" 问题的响应。</span><span class="sxs-lookup"><span data-stu-id="1ac70-481">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="1ac70-482">隐式转换运算符用于构造 <xref:System.Speech.Recognition.Choices> 对象中的 <xref:System.Speech.Recognition.SemanticResultValue> 对象、构造来自两个 <xref:System.Speech.Recognition.SemanticResultValue> 对象的 <xref:System.Speech.Recognition.Choices> 对象，以及从 <xref:System.Speech.Recognition.Grammar> 对象构造 <xref:System.Speech.Recognition.SemanticResultKey> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-482">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultKey semanticKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultKey semanticKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticKey As SemanticResultKey) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultKey ^ semanticKey);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.SemanticResultKey -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit semanticKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticKey" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="semanticKey"><span data-ttu-id="1ac70-483">要转换的语义键。</span><span class="sxs-lookup"><span data-stu-id="1ac70-483">The semantic key to convert.</span></span></param>
        <summary><span data-ttu-id="1ac70-484">将 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 对象转换为 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-484">Converts a <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="1ac70-485">转换的 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-485">The converted <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-486">隐式转换创建 <xref:System.Speech.Recognition.GrammarBuilder>的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-486">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="1ac70-487">此转换运算符等效于调用 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> 并指定 `key`的 `semanticKey`。</span><span class="sxs-lookup"><span data-stu-id="1ac70-487">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticKey` for the `key`.</span></span>  
  
 <span data-ttu-id="1ac70-488">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-488">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="1ac70-489">下面的示例创建一个语音识别语法，它可以识别对 "是" 或 "否" 问题的响应。</span><span class="sxs-lookup"><span data-stu-id="1ac70-489">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="1ac70-490">隐式转换运算符用于构造 <xref:System.Speech.Recognition.Choices> 对象中的 <xref:System.Speech.Recognition.SemanticResultValue> 对象、构造来自两个 <xref:System.Speech.Recognition.SemanticResultValue> 对象的 <xref:System.Speech.Recognition.Choices> 对象，以及从 <xref:System.Speech.Recognition.Grammar> 对象构造 <xref:System.Speech.Recognition.SemanticResultKey> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-490">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultValue semanticValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultValue semanticValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticValue As SemanticResultValue) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultValue ^ semanticValue);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.SemanticResultValue -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit semanticValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticValue" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="semanticValue"><span data-ttu-id="1ac70-491">要转换的 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-491">The <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to convert.</span></span></param>
        <summary><span data-ttu-id="1ac70-492">将 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象转换为 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-492">Converts a <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="1ac70-493">转换的 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-493">The converted <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-494">隐式转换创建 <xref:System.Speech.Recognition.GrammarBuilder>的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-494">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="1ac70-495">此转换运算符等效于调用 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> 并指定 `value`的 `semanticValue`。</span><span class="sxs-lookup"><span data-stu-id="1ac70-495">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticValue` for the `value`.</span></span>  
  
 <span data-ttu-id="1ac70-496">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-496">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="1ac70-497">下面的示例创建一个语音识别语法，它可以识别对 "是" 或 "否" 问题的响应。</span><span class="sxs-lookup"><span data-stu-id="1ac70-497">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="1ac70-498">隐式转换运算符用于构造 <xref:System.Speech.Recognition.Choices>对象中的 <xref:System.Speech.Recognition.SemanticResultValue> 对象、构造来自两个 <xref:System.Speech.Recognition.SemanticResultValue> 对象的 <xref:System.Speech.Recognition.Choices> 对象，以及从 <xref:System.Speech.Recognition.Grammar> 对象构造 <xref:System.Speech.Recognition.SemanticResultKey> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-498">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices>object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="1ac70-499">要转换的字符串。</span><span class="sxs-lookup"><span data-stu-id="1ac70-499">The string to convert.</span></span></param>
        <summary><span data-ttu-id="1ac70-500">将字符串转换为 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-500">Converts a string to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="1ac70-501">已转换的字符串。</span><span class="sxs-lookup"><span data-stu-id="1ac70-501">The converted string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ac70-502">隐式转换创建 <xref:System.Speech.Recognition.GrammarBuilder>的新实例。</span><span class="sxs-lookup"><span data-stu-id="1ac70-502">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="1ac70-503">此转换运算符等效于调用 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> 并指定同一 `phrase`。</span><span class="sxs-lookup"><span data-stu-id="1ac70-503">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying the same `phrase`.</span></span>  
  
 <span data-ttu-id="1ac70-504">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1ac70-504">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="1ac70-505">下面的示例使用 <xref:System.Speech.Recognition.GrammarBuilder> 和 <xref:System.Speech.Recognition.Choices> 对象来构造语法，该语法可识别两个短语中的任意一个： "使背景*colorChoice*" 或 "将背景设置为*colorChoice*"。</span><span class="sxs-lookup"><span data-stu-id="1ac70-505">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="1ac70-506">使用 <xref:System.Speech.Recognition.Choices> 对象为*colorChoice*创建可接受值的列表后，该示例使用从字符串对象的隐式转换初始化两个 <xref:System.Speech.Recognition.GrammarBuilder> 对象，`makePhrase` 和 `setPhrase`。</span><span class="sxs-lookup"><span data-stu-id="1ac70-506">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using implicit conversion from string objects.</span></span>  
  
 <span data-ttu-id="1ac70-507">该示例最终从转换为 <xref:System.Speech.Recognition.GrammarBuilder> 对象的 <xref:System.Speech.Recognition.Choices> 对象创建 <xref:System.Speech.Recognition.Grammar> 对象。</span><span class="sxs-lookup"><span data-stu-id="1ac70-507">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
  </Members>
</Type>
