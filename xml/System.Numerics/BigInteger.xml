<Type Name="BigInteger" FullName="System.Numerics.BigInteger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="38ba1adfb886ebbb80e4a042dfa1f1148ea68728" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82305630" /></Metadata><TypeSignature Language="C#" Value="public struct BigInteger : IComparable, IComparable&lt;System.Numerics.BigInteger&gt;, IEquatable&lt;System.Numerics.BigInteger&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.BigInteger" />
  <TypeSignature Language="VB.NET" Value="Public Structure BigInteger&#xA;Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class BigInteger : IComparable, IComparable&lt;System::Numerics::BigInteger&gt;, IEquatable&lt;System::Numerics::BigInteger&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type BigInteger = struct&#xA;    interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Numerics" FromVersion="4.0.0.0" To="System.Runtime.Numerics" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b6a90-101">表示任意大的带符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-101">Represents an arbitrarily large signed integer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-102"><xref:System.Numerics.BigInteger> 类型是一个不可变类型，表示其值在理论上没有上限或下限的任意大整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-102">The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.</span></span> <span data-ttu-id="b6a90-103"><xref:System.Numerics.BigInteger> 类型的成员与其他整型类型（<xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.Int64>、<xref:System.SByte>、<xref:System.UInt16>、<xref:System.UInt32>和 <xref:System.UInt64> 类型）紧密并行。</span><span class="sxs-lookup"><span data-stu-id="b6a90-103">The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types).</span></span> <span data-ttu-id="b6a90-104">此类型不同于 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]中的其他整型类型，该类型的范围由其 `MinValue` 和 `MaxValue` 属性指示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-104">This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-105">由于 <xref:System.Numerics.BigInteger> 类型是不可变的（请参阅[可变性和 BigInteger 结构](#mutability)），因为它没有上限或下限，所以，对于导致 <xref:System.Numerics.BigInteger> 值增长太大的任何操作，可能会引发 <xref:System.OutOfMemoryException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-105">Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.</span></span>  
  
## <a name="instantiating-a-biginteger-object"></a><span data-ttu-id="b6a90-106">实例化 BigInteger 对象</span><span class="sxs-lookup"><span data-stu-id="b6a90-106">Instantiating a BigInteger Object</span></span>  
 <span data-ttu-id="b6a90-107">可以通过多种方式实例化 <xref:System.Numerics.BigInteger> 对象：</span><span class="sxs-lookup"><span data-stu-id="b6a90-107">You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:</span></span>  
  
-   <span data-ttu-id="b6a90-108">您可以使用 `new` 关键字并提供任何整型或浮点值作为 <xref:System.Numerics.BigInteger> 构造函数的参数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-108">You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="b6a90-109">（浮点值在分配到 <xref:System.Numerics.BigInteger>之前会被截断。）下面的示例演示如何使用 `new` 关键字来实例化 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-109">(Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]
     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  
  
-   <span data-ttu-id="b6a90-110">您可以声明一个 <xref:System.Numerics.BigInteger> 变量并为其分配一个值，就像对任何数值类型一样，前提是该值是整型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-110">You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type.</span></span> <span data-ttu-id="b6a90-111">下面的示例使用赋值从 <xref:System.Int64>创建 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-111">The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]
     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  
  
-   <span data-ttu-id="b6a90-112">如果强制转换值或先转换值，则可以向 <xref:System.Numerics.BigInteger> 对象分配 decimal 或浮点值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-112">You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first.</span></span> <span data-ttu-id="b6a90-113">下面的示例显式转换（在C#中）或将 <xref:System.Double> 和 <xref:System.Decimal> 值 Visual Basic 转换为 <xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-113">The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]
     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  
  
 <span data-ttu-id="b6a90-114">利用这些方法，您可以实例化一个 <xref:System.Numerics.BigInteger> 对象，该对象的值只在一个现有的数值类型的范围内。</span><span class="sxs-lookup"><span data-stu-id="b6a90-114">These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only.</span></span> <span data-ttu-id="b6a90-115">可以通过以下三种方式之一实例化其值可以超出现有数值类型范围的 <xref:System.Numerics.BigInteger> 对象：</span><span class="sxs-lookup"><span data-stu-id="b6a90-115">You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:</span></span>  
  
-   <span data-ttu-id="b6a90-116">可以使用 `new` 关键字，并向 <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> 构造函数提供任意大小的字节数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-116">You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="b6a90-117">例如：</span><span class="sxs-lookup"><span data-stu-id="b6a90-117">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]
     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  
  
-   <span data-ttu-id="b6a90-118">可以调用 <xref:System.Numerics.BigInteger.Parse%2A> 或 <xref:System.Numerics.BigInteger.TryParse%2A> 方法将数字的字符串表示形式转换为 <xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-118">You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>.</span></span> <span data-ttu-id="b6a90-119">例如：</span><span class="sxs-lookup"><span data-stu-id="b6a90-119">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]
     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  
  
-   <span data-ttu-id="b6a90-120">您可以在 Visual Basic 中调用 `static` （`Shared`） <xref:System.Numerics.BigInteger> 方法，该方法对数值表达式执行某些操作并返回计算得出的 <xref:System.Numerics.BigInteger> 结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-120">You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result.</span></span> <span data-ttu-id="b6a90-121">下面的示例通过多维数据集 <xref:System.UInt64.MaxValue?displayProperty=nameWithType> 并将结果分配给 <xref:System.Numerics.BigInteger>来实现此功能。</span><span class="sxs-lookup"><span data-stu-id="b6a90-121">The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=nameWithType> and assigning the result to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]
     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  
  
 <span data-ttu-id="b6a90-122"><xref:System.Numerics.BigInteger.Zero%2A><xref:System.Numerics.BigInteger> 的未初始化值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-122">The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.</span></span>  
  
## <a name="performing-operations-on-biginteger-values"></a><span data-ttu-id="b6a90-123">对 BigInteger 值执行操作</span><span class="sxs-lookup"><span data-stu-id="b6a90-123">Performing Operations on BigInteger Values</span></span>  
 <span data-ttu-id="b6a90-124">您可以使用 <xref:System.Numerics.BigInteger> 实例，就像使用任何其他整型类型一样。</span><span class="sxs-lookup"><span data-stu-id="b6a90-124">You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type.</span></span> <span data-ttu-id="b6a90-125"><xref:System.Numerics.BigInteger> 重载标准数字运算符，以使您能够执行基本的数学运算（例如加法、减法、除法、乘法、减法、求反和一元求反）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-125"><xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation.</span></span> <span data-ttu-id="b6a90-126">您还可以使用标准数值运算符来比较两个 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-126">You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other.</span></span> <span data-ttu-id="b6a90-127">与其他整型类型一样，<xref:System.Numerics.BigInteger> 还支持按位 `And`、`Or`、`XOr`、左移和右移位运算符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-127">Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators.</span></span> <span data-ttu-id="b6a90-128">对于不支持自定义运算符的语言，<xref:System.Numerics.BigInteger> 结构还提供了执行数学运算的等效方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-128">For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations.</span></span> <span data-ttu-id="b6a90-129">其中包括 <xref:System.Numerics.BigInteger.Add%2A>、<xref:System.Numerics.BigInteger.Divide%2A>、<xref:System.Numerics.BigInteger.Multiply%2A>、<xref:System.Numerics.BigInteger.Negate%2A>、<xref:System.Numerics.BigInteger.Subtract%2A>和其他一些。</span><span class="sxs-lookup"><span data-stu-id="b6a90-129">These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.</span></span>  
  
 <span data-ttu-id="b6a90-130"><xref:System.Numerics.BigInteger> 结构的许多成员直接与其他整型类型的成员相对应。</span><span class="sxs-lookup"><span data-stu-id="b6a90-130">Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types.</span></span> <span data-ttu-id="b6a90-131">此外，<xref:System.Numerics.BigInteger> 添加如下成员：</span><span class="sxs-lookup"><span data-stu-id="b6a90-131">In addition, <xref:System.Numerics.BigInteger> adds members such as the following:</span></span>  
  
-   <span data-ttu-id="b6a90-132"><xref:System.Numerics.BigInteger.Sign%2A>，它返回一个指示 <xref:System.Numerics.BigInteger> 值的符号的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-132"><xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="b6a90-133"><xref:System.Numerics.BigInteger.Abs%2A>，它返回 <xref:System.Numerics.BigInteger> 值的绝对值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-133"><xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="b6a90-134"><xref:System.Numerics.BigInteger.DivRem%2A>，它返回除法运算的商和余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-134"><xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.</span></span>  
  
-   <span data-ttu-id="b6a90-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>，它返回两个 <xref:System.Numerics.BigInteger> 值的最大公因数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="b6a90-136">其中许多附加成员与 <xref:System.Math> 类的成员相对应，后者提供了用于处理基元数值类型的功能。</span><span class="sxs-lookup"><span data-stu-id="b6a90-136">Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.</span></span>  
  
<a name="mutability"></a>   
## <a name="mutability-and-the-biginteger-structure"></a><span data-ttu-id="b6a90-137">可变性和 BigInteger 结构</span><span class="sxs-lookup"><span data-stu-id="b6a90-137">Mutability and the BigInteger Structure</span></span>  
 <span data-ttu-id="b6a90-138">下面的示例实例化一个 <xref:System.Numerics.BigInteger> 对象，然后将其值递增1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-138">The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  
  
 <span data-ttu-id="b6a90-139">虽然此示例似乎用于修改现有对象的值，但这不是这种情况。</span><span class="sxs-lookup"><span data-stu-id="b6a90-139">Although this example appears to modify the value of the existing object, this is not the case.</span></span> <span data-ttu-id="b6a90-140"><xref:System.Numerics.BigInteger> 对象是不可变的，这意味着，公共语言运行时实际上会创建一个新的 <xref:System.Numerics.BigInteger> 对象，并为其分配一个大于先前值的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-140"><xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value.</span></span> <span data-ttu-id="b6a90-141">然后，此新对象将返回到调用方。</span><span class="sxs-lookup"><span data-stu-id="b6a90-141">This new object is then returned to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-142">.NET Framework 中的其他数字类型也是不可变的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-142">The other numeric types in the .NET Framework are also immutable.</span></span> <span data-ttu-id="b6a90-143">但是，因为 <xref:System.Numerics.BigInteger> 类型没有上限或下限，所以它的值可能会变得非常大，并对性能产生显著影响。</span><span class="sxs-lookup"><span data-stu-id="b6a90-143">However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.</span></span>  
  
 <span data-ttu-id="b6a90-144">尽管此过程对调用方是透明的，但它确实会导致性能下降。</span><span class="sxs-lookup"><span data-stu-id="b6a90-144">Although this process is transparent to the caller, it does incur a performance penalty.</span></span> <span data-ttu-id="b6a90-145">在某些情况下，尤其是在非常大的 <xref:System.Numerics.BigInteger> 值的循环中执行重复的操作时，可能会导致性能下降。</span><span class="sxs-lookup"><span data-stu-id="b6a90-145">In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant.</span></span> <span data-ttu-id="b6a90-146">例如，在下面的示例中，操作重复执行了一百万次，每次操作成功时，<xref:System.Numerics.BigInteger> 值将递增1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-146">For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  
  
 <span data-ttu-id="b6a90-147">在这种情况下，您可以通过执行对 <xref:System.Int32> 变量的所有中间分配来提高性能。</span><span class="sxs-lookup"><span data-stu-id="b6a90-147">In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable.</span></span> <span data-ttu-id="b6a90-148">然后，在循环退出时，可以将变量的最后一个值分配给 <xref:System.Numerics.BigInteger> 的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-148">The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits.</span></span> <span data-ttu-id="b6a90-149">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-149">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  
  
## <a name="working-with-byte-arrays-and-hexadecimal-strings"></a><span data-ttu-id="b6a90-150">处理字节数组和十六进制字符串</span><span class="sxs-lookup"><span data-stu-id="b6a90-150">Working with Byte Arrays and Hexadecimal Strings</span></span>  
 <span data-ttu-id="b6a90-151">如果将 <xref:System.Numerics.BigInteger> 值转换为字节数组，或将字节数组转换为 <xref:System.Numerics.BigInteger> 值，则必须考虑字节的顺序。</span><span class="sxs-lookup"><span data-stu-id="b6a90-151">If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes.</span></span> <span data-ttu-id="b6a90-152"><xref:System.Numerics.BigInteger> 结构要求字节数组中的单个字节以小字节序顺序显示（即，值的低序位字节优先于高阶字节之前）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-152">The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes).</span></span> <span data-ttu-id="b6a90-153">可以通过调用 <xref:System.Numerics.BigInteger.ToByteArray%2A> 方法，然后将生成的字节数组传递到 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 构造函数来往返 <xref:System.Numerics.BigInteger> 值，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-153">You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  
  
 <span data-ttu-id="b6a90-154">若要从表示某个其他整型值的字节数组中实例化 <xref:System.Numerics.BigInteger> 值，你可以将整数值传递到 <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> 方法，然后将生成的字节数组传递到 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-154">To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span> <span data-ttu-id="b6a90-155">下面的示例实例化一个表示 <xref:System.Int16> 值的字节数组中的 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-155">The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  
  
 <span data-ttu-id="b6a90-156"><xref:System.Numerics.BigInteger> 结构假定负值是使用两个补码表示形式存储的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-156">The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation.</span></span> <span data-ttu-id="b6a90-157">由于 <xref:System.Numerics.BigInteger> 结构表示没有固定长度的数值，因此 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 构造函数始终将数组中最后一个字节的最高有效位解释为符号位。</span><span class="sxs-lookup"><span data-stu-id="b6a90-157">Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit.</span></span> <span data-ttu-id="b6a90-158">若要防止 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 构造函数混淆具有正值的符号和数量级表示形式的负值的两个补数表示形式，则在字节数组中最后一个字节的最高有效位通常应设置为正值，该值为0。</span><span class="sxs-lookup"><span data-stu-id="b6a90-158">To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0.</span></span> <span data-ttu-id="b6a90-159">例如，0xC0 0xBD 0xF0 0xFF 是-1000000 或4293967296的小字节序十六进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-159">For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296.</span></span> <span data-ttu-id="b6a90-160">由于此数组中最后一个字节的最高有效位为 on，因此，<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 构造函数会将字节数组的值解释为-1000000。</span><span class="sxs-lookup"><span data-stu-id="b6a90-160">Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000.</span></span> <span data-ttu-id="b6a90-161">若要实例化值为正值的 <xref:System.Numerics.BigInteger>，则必须将其元素为 0xC0 0xBD 0xF0 0xFF 0x00 的字节数组传递到构造函数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-161">To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor.</span></span> <span data-ttu-id="b6a90-162">下面的示例阐释了这一点。</span><span class="sxs-lookup"><span data-stu-id="b6a90-162">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  
  
 <span data-ttu-id="b6a90-163">从正值 <xref:System.Numerics.BigInteger.ToByteArray%2A> 方法创建的字节数组包括此额外的零值字节。</span><span class="sxs-lookup"><span data-stu-id="b6a90-163">Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte.</span></span> <span data-ttu-id="b6a90-164">因此，<xref:System.Numerics.BigInteger> 结构可以通过将值分配到，然后从字节数组中恢复它们来成功往返值，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-164">Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  
  
 <span data-ttu-id="b6a90-165">但是，你可能需要将此额外的零值字节添加到由开发人员动态创建的字节数组，或由将无符号整数转换为字节数组（如 <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>、<xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>和 <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>）的方法返回。</span><span class="sxs-lookup"><span data-stu-id="b6a90-165">However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="b6a90-166">在分析十六进制字符串时，<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> 和 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 方法假设设置了字符串中第一个字节的最高有效位，或字符串的第一个十六进制数字表示字节值的下四位，则使用两个补数表示法来表示值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-166">When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation.</span></span> <span data-ttu-id="b6a90-167">例如，"FF01" 和 "F01" 都表示十进制值-255。</span><span class="sxs-lookup"><span data-stu-id="b6a90-167">For example, both "FF01" and "F01" represent the decimal value -255.</span></span> <span data-ttu-id="b6a90-168">若要将正值与负值区分开来，正值应包括前导零。</span><span class="sxs-lookup"><span data-stu-id="b6a90-168">To differentiate positive from negative values, positive values should include a leading zero.</span></span> <span data-ttu-id="b6a90-169"><xref:System.Numerics.BigInteger.ToString%2A> 方法的相关重载在传递 "X" 格式字符串时，为正值在返回的十六进制字符串中添加前导零。</span><span class="sxs-lookup"><span data-stu-id="b6a90-169">The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the "X" format string, add a leading zero to the returned hexadecimal string for positive values.</span></span> <span data-ttu-id="b6a90-170">这样，就可以通过使用 <xref:System.Numerics.BigInteger.ToString%2A> 和 <xref:System.Numerics.BigInteger.Parse%2A> 方法往返 <xref:System.Numerics.BigInteger> 值，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-170">This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  
  
 <span data-ttu-id="b6a90-171">但是，通过调用其他整型类型的 `ToString` 方法或包含 `toBase` 参数 <xref:System.Convert.ToString%2A> 方法的重载创建的十六进制字符串并不表示值的符号或派生十六进制字符串的源数据类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-171">However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived.</span></span> <span data-ttu-id="b6a90-172">成功实例化此类字符串的 <xref:System.Numerics.BigInteger> 值需要一些额外的逻辑。</span><span class="sxs-lookup"><span data-stu-id="b6a90-172">Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic.</span></span> <span data-ttu-id="b6a90-173">下面的示例提供了一个可能的实现。</span><span class="sxs-lookup"><span data-stu-id="b6a90-173">The following example provides one possible implementation.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-174">初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-174">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : byte[] -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-175">顺序为 little-endian 的字节值的数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-175">An array of byte values in little-endian order.</span></span></param>
        <summary><span data-ttu-id="b6a90-176">使用字节数组中的值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-176">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-177">`value` 数组中的单个字节应采用小字节序顺序，即从最低序位字节到最高序位字节。</span><span class="sxs-lookup"><span data-stu-id="b6a90-177">The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte.</span></span> <span data-ttu-id="b6a90-178">例如，数字值1000000000000如下表中所示：</span><span class="sxs-lookup"><span data-stu-id="b6a90-178">For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b6a90-179">十六进制字符串</span><span class="sxs-lookup"><span data-stu-id="b6a90-179">Hexadecimal string</span></span>|<span data-ttu-id="b6a90-180">E8D4A51000</span><span class="sxs-lookup"><span data-stu-id="b6a90-180">E8D4A51000</span></span>|  
|<span data-ttu-id="b6a90-181">字节数组（首先为最低索引）</span><span class="sxs-lookup"><span data-stu-id="b6a90-181">Byte array (lowest index first)</span></span>|<span data-ttu-id="b6a90-182">00 10 A5 D4 E8 00</span><span class="sxs-lookup"><span data-stu-id="b6a90-182">00 10 A5 D4 E8 00</span></span>|  
  
 <span data-ttu-id="b6a90-183">将数字值转换为字节数组的大多数方法（如 <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> 和 <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>）以小字节序顺序返回字节数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-183">Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> and <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>, return byte arrays in little-endian order.</span></span>  
  
 <span data-ttu-id="b6a90-184">构造函数需要字节数组中的正值才能使用符号和量的表示形式，而负值则使用两个补数表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-184">The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation.</span></span> <span data-ttu-id="b6a90-185">换言之，如果在 `value` 中设置了最高序位字节的最高序位，则生成的 <xref:System.Numerics.BigInteger> 值为负数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-185">In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative.</span></span> <span data-ttu-id="b6a90-186">这可能会导致将正值错误解释为负值，这取决于字节数组的源。</span><span class="sxs-lookup"><span data-stu-id="b6a90-186">Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value.</span></span> <span data-ttu-id="b6a90-187">字节数组通常按以下方式生成：</span><span class="sxs-lookup"><span data-stu-id="b6a90-187">Byte arrays are typically generated in the following ways:</span></span>  
  
-   <span data-ttu-id="b6a90-188">通过调用 <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-188">By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b6a90-189">因为此方法返回一个字节数组，该数组的数组中最高序位字节的最高序位为正值，所以没有可能将正值错误解释为负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-189">Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative.</span></span> <span data-ttu-id="b6a90-190"><xref:System.Numerics.BigInteger.ToByteArray%2A> 方法创建的未修改字节数组在传递到 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 构造函数时始终会成功往返。</span><span class="sxs-lookup"><span data-stu-id="b6a90-190">Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
-   <span data-ttu-id="b6a90-191">调用 <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> 方法，并向其传递一个有符号整数作为参数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-191">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it a signed integer as a parameter.</span></span> <span data-ttu-id="b6a90-192">由于有符号整数处理的是符号和量的表示形式和两个补码表示形式，因此没有任何可能将正值错误解释为负数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-192">Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.</span></span>  
  
-   <span data-ttu-id="b6a90-193">调用 <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> 方法，并向其传递一个无符号整数作为参数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-193">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it an unsigned integer as a parameter.</span></span> <span data-ttu-id="b6a90-194">因为无符号整数仅按其大小表示，所以可以将正值错误解释为负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-194">Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values.</span></span> <span data-ttu-id="b6a90-195">若要防止这种误解，可以将零字节值添加到数组的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-195">To prevent this misinterpretation, you can add a zero-byte value to the end of the array.</span></span> <span data-ttu-id="b6a90-196">下一节中的示例提供了一个图例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-196">The example in the next section provides an illustration.</span></span>  
  
-   <span data-ttu-id="b6a90-197">通过动态或静态方式创建字节数组，无需调用上述任何方法，或通过修改现有的字节数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-197">By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array.</span></span> <span data-ttu-id="b6a90-198">若要防止将正值错误解释为负值，可以将零字节值添加到数组的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-198">To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.</span></span>  
  
 <span data-ttu-id="b6a90-199">如果 `value` 为空 <xref:System.Byte> 数组，则新的 <xref:System.Numerics.BigInteger> 对象将初始化为值 <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-199">If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-200">如果 `null``value`，则构造函数将引发一个 <xref:System.ArgumentNullException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-200">If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-201">下面的示例实例化5元素字节数组中的一个 <xref:System.Numerics.BigInteger> 对象，其值为 {5，4，3，2，1}。</span><span class="sxs-lookup"><span data-stu-id="b6a90-201">The following example instantiates a <xref:System.Numerics.BigInteger> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}.</span></span> <span data-ttu-id="b6a90-202">然后，它会将表示为十进制和十六进制数字的 <xref:System.Numerics.BigInteger> 值显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="b6a90-202">It then displays the <xref:System.Numerics.BigInteger> value, represented as both decimal and hexadecimal numbers, to the console.</span></span> <span data-ttu-id="b6a90-203">使用文本输出比较输入数组，使 <xref:System.Numerics.BigInteger> 类构造函数的此重载创建的 <xref:System.Numerics.BigInteger> 对象的值为4328719365（或0x102030405）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-203">A comparison of the input array with the text output makes it clear why this overload of the <xref:System.Numerics.BigInteger> class constructor creates a <xref:System.Numerics.BigInteger> object whose value is 4328719365 (or 0x102030405).</span></span> <span data-ttu-id="b6a90-204">字节数组的第一个元素（其值为5）定义 <xref:System.Numerics.BigInteger> 对象的最低序位字节的值，该量为0x05。</span><span class="sxs-lookup"><span data-stu-id="b6a90-204">The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref:System.Numerics.BigInteger> object, which is 0x05.</span></span> <span data-ttu-id="b6a90-205">字节数组的第二个元素（其值为4）定义 <xref:System.Numerics.BigInteger> 对象的第二个字节的值（0x04），依此类推。</span><span class="sxs-lookup"><span data-stu-id="b6a90-205">The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref:System.Numerics.BigInteger> object, which is 0x04, and so on.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  
  
 <span data-ttu-id="b6a90-206">下面的示例实例化一个正值和一个负 <xref:System.Numerics.BigInteger> 值，将其传递给 <xref:System.Numerics.BigInteger.ToByteArray%2A> 方法，然后从生成的字节数组还原原始 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-206">The following example instantiates a positive and a negative <xref:System.Numerics.BigInteger> value, passes them to the <xref:System.Numerics.BigInteger.ToByteArray%2A> method, and then restores the original <xref:System.Numerics.BigInteger> values from the resulting byte array.</span></span> <span data-ttu-id="b6a90-207">请注意，这两个值由相同的字节数组表示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-207">Note that the two values are represented by identical byte arrays.</span></span> <span data-ttu-id="b6a90-208">它们之间唯一的区别在于字节数组中最后一个元素的最高有效位。</span><span class="sxs-lookup"><span data-stu-id="b6a90-208">The only difference between them is in the most significant bit of the last element in the byte array.</span></span> <span data-ttu-id="b6a90-209">如果从负值 <xref:System.Numerics.BigInteger> 值创建数组，则设置此位（字节的值为0xFF）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-209">This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="b6a90-210">如果数组是从正 <xref:System.Numerics.BigInteger> 值创建的，则不设置位（字节的值为零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-210">The bit is not set (the value of the byte is zero), if the array is created from a positive <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  
  
 <span data-ttu-id="b6a90-211">下面的示例演示如何通过将值为零的字节添加到数组的末尾，来确保不将正值错误地实例化为负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-211">The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b6a90-212"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-212"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToByteArray" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : decimal -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-213">十进制数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-213">A decimal number.</span></span></param>
        <summary><span data-ttu-id="b6a90-214">使用 <see cref="T:System.Numerics.BigInteger" /> 值初始化 <see cref="T:System.Decimal" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-214">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-215">调用此构造函数的结果与显式将 <xref:System.Decimal> 值分配给 <xref:System.Numerics.BigInteger> 变量完全相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-215">The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.</span></span>  
  
 <span data-ttu-id="b6a90-216">调用此构造函数可能会导致数据丢失;实例化 <xref:System.Numerics.BigInteger> 对象时，`value` 的任何小数部分将被截断。</span><span class="sxs-lookup"><span data-stu-id="b6a90-216">Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-217">下面的示例演示如何使用 <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> 构造函数来实例化 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-217">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="b6a90-218">它定义 <xref:System.Decimal> 值的数组，然后将每个值传递给 <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-218">It defines an array of <xref:System.Decimal> values, and then passes each value to the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor.</span></span> <span data-ttu-id="b6a90-219">请注意，在将 <xref:System.Decimal> 值分配给 <xref:System.Numerics.BigInteger> 对象时，它将被截断，而不是舍入。</span><span class="sxs-lookup"><span data-stu-id="b6a90-219">Note that the <xref:System.Decimal> value is truncated instead of rounded when it is assigned to the <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(double value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : double -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-220">一个双精度浮点值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-220">A double-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="b6a90-221">使用双精度浮点值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-221">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-222">实例化 <xref:System.Numerics.BigInteger> 对象时，`value` 参数的任何小数部分将被截断。</span><span class="sxs-lookup"><span data-stu-id="b6a90-222">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="b6a90-223">由于缺少 <xref:System.Double> 数据类型的精度，调用此构造函数可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-223">Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.</span></span>  
  
 <span data-ttu-id="b6a90-224">调用此构造函数导致的 <xref:System.Numerics.BigInteger> 值与显式将 <xref:System.Double> 值分配到 <xref:System.Numerics.BigInteger>时生成的值相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-224">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-225">下面的示例演示如何使用 <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> 构造函数来实例化 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-225">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="b6a90-226">它还说明了在使用 <xref:System.Double> 数据类型时可能会发生的精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-226">It also illustrates the loss of precision that may occur when you use the <xref:System.Double> data type.</span></span> <span data-ttu-id="b6a90-227">向 <xref:System.Double> 分配一个较大的值，然后将其分配给 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-227">A <xref:System.Double> is assigned a large value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="b6a90-228">如输出所示，此分配涉及精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-228">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="b6a90-229">然后，这两个值将递增1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-229">Both values are then incremented by one.</span></span> <span data-ttu-id="b6a90-230">输出显示 <xref:System.Numerics.BigInteger> 对象反映更改后的值，而 <xref:System.Double> 对象则不会。</span><span class="sxs-lookup"><span data-stu-id="b6a90-230">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Double> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]
 [!code-vb[System.Numerics.BigInteger.ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-231"><paramref name="value" /> 为 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-231"><paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(int value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-232">32 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-232">A 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-233">使用 32 位带符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-233">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-234">使用此构造函数实例化 <xref:System.Numerics.BigInteger> 对象时不会损失精度。</span><span class="sxs-lookup"><span data-stu-id="b6a90-234">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="b6a90-235">调用此构造函数导致的 <xref:System.Numerics.BigInteger> 值与将 <xref:System.Int32> 值分配到 <xref:System.Numerics.BigInteger>后得出的值相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-235">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
 <span data-ttu-id="b6a90-236"><xref:System.Numerics.BigInteger> 结构不包括具有类型 <xref:System.Byte>、<xref:System.Int16>、<xref:System.SByte>或 <xref:System.UInt16>的参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-236">The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>.</span></span> <span data-ttu-id="b6a90-237">但 <xref:System.Int32> 类型支持将8位和16位有符号和无符号整数隐式转换为有符号32位整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-237">However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers.</span></span> <span data-ttu-id="b6a90-238">因此，如果 `value` 是这四个整型类型中的任意一种，就会调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-238">As a result, this constructor is called if `value` is any one of these four integral types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-239">下面的示例调用 <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> 构造函数来实例化32位整数数组中的 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-239">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 32-bit integers.</span></span> <span data-ttu-id="b6a90-240">它还使用隐式转换将每个32位整数值分配给 <xref:System.Numerics.BigInteger> 变量。</span><span class="sxs-lookup"><span data-stu-id="b6a90-240">It also uses implicit conversion to assign each 32-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="b6a90-241">然后，它对两个值进行比较，以确定生成的 <xref:System.Numerics.BigInteger> 值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-241">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.ctors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(long value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-242">64 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-242">A 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-243">使用 64 位带符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-243">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-244">使用此构造函数实例化 <xref:System.Numerics.BigInteger> 对象时不会损失精度。</span><span class="sxs-lookup"><span data-stu-id="b6a90-244">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="b6a90-245">调用此构造函数导致的 <xref:System.Numerics.BigInteger> 值与将 <xref:System.Int64> 值分配到 <xref:System.Numerics.BigInteger>后得出的值相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-245">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-246">下面的示例调用 <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> 构造函数来实例化64位整数数组中的 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-246">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 64-bit integers.</span></span> <span data-ttu-id="b6a90-247">它还使用隐式转换将每个64位整数值分配给 <xref:System.Numerics.BigInteger> 变量。</span><span class="sxs-lookup"><span data-stu-id="b6a90-247">It also uses implicit conversion to assign each 64-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="b6a90-248">然后，它对两个值进行比较，以确定生成的 <xref:System.Numerics.BigInteger> 值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-248">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]
 [!code-vb[System.Numerics.BigInteger.ctors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(float value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : single -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-249">单精度浮点值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-249">A single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="b6a90-250">使用单精度浮点值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-250">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-251">实例化 <xref:System.Numerics.BigInteger> 对象时，`value` 参数的任何小数部分将被截断。</span><span class="sxs-lookup"><span data-stu-id="b6a90-251">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="b6a90-252">由于缺少 <xref:System.Single> 数据类型的精度，调用此构造函数可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-252">Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.</span></span>  
  
 <span data-ttu-id="b6a90-253">调用此构造函数导致的 <xref:System.Numerics.BigInteger> 值与显式将 <xref:System.Single> 值分配到 <xref:System.Numerics.BigInteger>时生成的值相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-253">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-254">下面的示例演示如何使用 <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> 构造函数来实例化 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-254">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="b6a90-255">它还说明了在使用 <xref:System.Single> 数据类型时可能会发生的精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-255">It also illustrates the loss of precision that may occur when you use the <xref:System.Single> data type.</span></span> <span data-ttu-id="b6a90-256">为 <xref:System.Single> 分配一个较大的负值，然后将其分配给 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-256">A <xref:System.Single> is assigned a large negative value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="b6a90-257">如输出所示，此分配涉及精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-257">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="b6a90-258">然后，这两个值将递增1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-258">Both values are then incremented by one.</span></span> <span data-ttu-id="b6a90-259">输出显示 <xref:System.Numerics.BigInteger> 对象反映更改后的值，而 <xref:System.Single> 对象则不会。</span><span class="sxs-lookup"><span data-stu-id="b6a90-259">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Single> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]
 [!code-vb[System.Numerics.BigInteger.ctors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-260"><paramref name="value" /> 为 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-260"><paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint32 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-261">32 位无符号整数值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-261">An unsigned 32-bit integer value.</span></span></param>
        <summary><span data-ttu-id="b6a90-262">使用 32 位无符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-262">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-263">使用此构造函数实例化 <xref:System.Numerics.BigInteger> 时不会损失精度。</span><span class="sxs-lookup"><span data-stu-id="b6a90-263">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="b6a90-264">调用此构造函数导致的 <xref:System.Numerics.BigInteger> 值与将 <xref:System.UInt32> 值分配到 <xref:System.Numerics.BigInteger>后得出的值相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-264">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-265">下面的示例使用 <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> 构造函数和赋值语句来初始化一个无符号32位整数数组中 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-265">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructor and an assignment statement to initialize <xref:System.Numerics.BigInteger> values from an array of unsigned 32-bit integers.</span></span> <span data-ttu-id="b6a90-266">然后，它对两个值进行比较以演示初始化 <xref:System.Numerics.BigInteger> 值的两种方法生成相同的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-266">It then compares the two values to demonstrate that the two methods of initializing a <xref:System.Numerics.BigInteger> value produce identical results.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]
 [!code-vb[System.Numerics.BigInteger.ctors#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-267">64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-267">An unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-268">使用 64 位无符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-268">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-269">使用此构造函数实例化 <xref:System.Numerics.BigInteger> 时不会损失精度。</span><span class="sxs-lookup"><span data-stu-id="b6a90-269">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="b6a90-270">调用此构造函数导致的 <xref:System.Numerics.BigInteger> 值与将 <xref:System.UInt64> 值分配到 <xref:System.Numerics.BigInteger>后得出的值相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-270">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-271">下面的示例使用 <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> 构造函数来实例化其值等于 <xref:System.UInt64.MaxValue><xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-271">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object whose value is equal to <xref:System.UInt64.MaxValue>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]
 [!code-vb[System.Numerics.BigInteger.ctors#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ReadOnlySpan&lt;byte&gt; value, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Byte), Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger (value, isUnsigned, isBigEndian)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-272">字节的只读范围，它表示大整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-272">A read-only span of bytes representing the big integer.</span></span></param>
        <param name="isUnsigned"><span data-ttu-id="b6a90-273"><see langword="true" /> 表示 <paramref name="value" /> 使用无符号编码；否则为 <see langword="false" />（默认值）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-273"><see langword="true" /> to indicate <paramref name="value" /> uses unsigned encoding; otherwise, <see langword="false" /> (the default value).</span></span></param>
        <param name="isBigEndian"><span data-ttu-id="b6a90-274"><see langword="true" /> 表示 <paramref name="value" /> 是大端字节顺序；否则为 <see langword="false" />（默认值）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-274"><see langword="true" /> to indicate <paramref name="value" /> is in big-endian byte order; otherwise, <see langword="false" />  (the default value).</span></span></param>
        <summary><span data-ttu-id="b6a90-275">使用字节的只读范围中的值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例，并选择性地指示符号编码和字节排序方式顺序。</span><span class="sxs-lookup"><span data-stu-id="b6a90-275">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a read-only span of bytes, and optionally indicating the signing encoding and the endianness byte order.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Abs(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Abs(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-276">数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-276">A number.</span></span></param>
        <summary><span data-ttu-id="b6a90-277">获取 <see cref="T:System.Numerics.BigInteger" /> 对象的绝对值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-277">Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="b6a90-278"><paramref name="value" /> 的绝对值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-278">The absolute value of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-279">数字的绝对值是没有符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-279">The absolute value of a number is that number without its sign, as shown in the following table.</span></span>  
  
|<span data-ttu-id="b6a90-280">`value` 参数</span><span class="sxs-lookup"><span data-stu-id="b6a90-280">`value` parameter</span></span>|<span data-ttu-id="b6a90-281">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-281">Return value</span></span>|  
|-----------------------|------------------|  
|<span data-ttu-id="b6a90-282">`value` > = 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-282">`value` >= 0</span></span>|`value`|  
|<span data-ttu-id="b6a90-283">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-283">`value` < 0</span></span>|<span data-ttu-id="b6a90-284">`value` \* -1</span><span class="sxs-lookup"><span data-stu-id="b6a90-284">`value` \* -1</span></span>|  
  
 <span data-ttu-id="b6a90-285"><xref:System.Numerics.BigInteger.Abs%2A> 方法等效于基元数值类型的 <xref:System.Math.Abs%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-285">The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-286">下面的示例使用 <xref:System.Numerics.BigInteger.Abs%2A> 方法，将 <xref:System.Numerics.BigInteger> 值从两个补数表示形式转换为签名和数量级表示形式，然后将其序列化到文件中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-286">The following example uses the <xref:System.Numerics.BigInteger.Abs%2A> method to convert a <xref:System.Numerics.BigInteger> value from two's complement representation to sign-and-magnitude representation before serializing it to a file.</span></span> <span data-ttu-id="b6a90-287">然后，将对文件中的数据进行反序列化并将其分配给新的 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-287">Data in the file is then deserialized and assigned to a new <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Abs(System.SByte)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Add(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Add(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-288">要相加的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-288">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-289">要相加的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-289">The second value to add.</span></span></param>
        <summary><span data-ttu-id="b6a90-290">将两个 <see cref="T:System.Numerics.BigInteger" /> 值相加，并返回结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-290">Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</span></span></summary>
        <returns><span data-ttu-id="b6a90-291"><paramref name="left" /> 与 <paramref name="right" /> 的和。</span><span class="sxs-lookup"><span data-stu-id="b6a90-291">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-292">不支持运算符重载或自定义运算符的语言可以使用 <xref:System.Numerics.BigInteger.Add%2A> 方法来执行使用 <xref:System.Numerics.BigInteger> 值的加法运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-292">Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="b6a90-293">在实例化 <xref:System.Numerics.BigInteger> 变量时，<xref:System.Numerics.BigInteger.Add%2A> 方法对于加法运算符是一个有用的替代方法，方法是为该变量分配加法运算，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-293">The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (left As BigInteger, right As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.Compare (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-294">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-294">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-295">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-295">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-296">比较两个 <see cref="T:System.Numerics.BigInteger" /> 值，并返回一个整数，该整数指示第一个值是小于、等于还是大于第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-296">Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-297">一个有符号整数，指示 <paramref name="left" /> 和 <paramref name="right" /> 的相对值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-297">A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b6a90-298">“值”</span><span class="sxs-lookup"><span data-stu-id="b6a90-298">Value</span></span> 
 </term><description> <span data-ttu-id="b6a90-299">条件</span><span class="sxs-lookup"><span data-stu-id="b6a90-299">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b6a90-300">小于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-300">Less than zero</span></span> 
 </term><description><span data-ttu-id="b6a90-301"><paramref name="left" /> 小于 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-301"><paramref name="left" /> is less than <paramref name="right" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-302">零</span><span class="sxs-lookup"><span data-stu-id="b6a90-302">Zero</span></span> 
 </term><description><span data-ttu-id="b6a90-303"><paramref name="left" /> 等于 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-303"><paramref name="left" /> equals <paramref name="right" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-304">大于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-304">Greater than zero</span></span> 
 </term><description><span data-ttu-id="b6a90-305"><paramref name="left" /> 大于 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-305"><paramref name="left" /> is greater than <paramref name="right" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-306">尽管 <xref:System.Numerics.BigInteger> 类型没有固定的范围，但 <xref:System.Numerics.BigInteger> 值的比较不是以反映浮点数比较的精度所引起的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-306">Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers.</span></span> <span data-ttu-id="b6a90-307">下面的示例比较两个不同的 <xref:System.Numerics.BigInteger> 值，每个值都有1896位数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-307">The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits.</span></span> <span data-ttu-id="b6a90-308"><xref:System.Numerics.BigInteger.Compare%2A> 方法正确报告了两个值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-308">The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.CompareTo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-309">将此实例的值与另一个值进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于另一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-309">Compares the value of this instance with another value and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the other value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(long other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : int64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b6a90-310">要比较的 64 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-310">The signed 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-311">将此实例与 64 位带符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位带符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-311">Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="b6a90-312">一个带符号整数值，指示此实例与 <paramref name="other" /> 的关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-312">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b6a90-313">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-313">Return value</span></span> 
 </term><description> <span data-ttu-id="b6a90-314">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-314">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b6a90-315">小于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-315">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-316">当前实例小于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-316">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-317">零</span><span class="sxs-lookup"><span data-stu-id="b6a90-317">Zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-318">当前实例等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-318">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-319">大于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-319">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-320">当前实例大于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-320">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-321">如果 `other` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在调用 <xref:System.Int64> 方法时，它将隐式转换为 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-321">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-322">下面的示例演示了通过整数值调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> 方法的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-322">The following example illustrates the result of calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method with integral values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Numerics.BigInteger -&gt; int&#xA;override this.CompareTo : System.Numerics.BigInteger -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b6a90-323">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-323">The object to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-324">将此实例与另一个 <see cref="T:System.Numerics.BigInteger" /> 进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-324">Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="b6a90-325">一个带符号整数值，指示此实例与 <paramref name="other" /> 的关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-325">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b6a90-326">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-326">Return value</span></span> 
 </term><description> <span data-ttu-id="b6a90-327">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-327">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b6a90-328">小于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-328">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-329">当前实例小于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-329">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-330">零</span><span class="sxs-lookup"><span data-stu-id="b6a90-330">Zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-331">当前实例等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-331">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-332">大于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-332">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-333">当前实例大于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-333">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-334"><xref:System.Numerics.BigInteger.CompareTo%2A> 方法的此重载实现 <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-334">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b6a90-335">泛型集合对象使用它对集合中的项进行排序。</span><span class="sxs-lookup"><span data-stu-id="b6a90-335">It is used by generic collection objects to order the items in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-336">下面的示例演示如何使用 <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> 方法对 `StarInfo` 对象的列表进行排序。</span><span class="sxs-lookup"><span data-stu-id="b6a90-336">The following example illustrates the use of the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> method to order a list of `StarInfo` objects.</span></span> <span data-ttu-id="b6a90-337">每个 `StarInfo` 对象均提供有关星形名称及其与地球距离的信息（英里）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-337">Each `StarInfo` object provides information about a star's name and its distance from the Earth in miles.</span></span> <span data-ttu-id="b6a90-338">`StarInfo` 实现 <xref:System.IComparable%601> 接口，该接口启用按泛型集合类排序 `StarInfo` 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-338">`StarInfo` implements the <xref:System.IComparable%601> interface, which enables `StarInfo` objects to be sorted by generic collection classes.</span></span> <span data-ttu-id="b6a90-339">它的 <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> 实现仅包装对 <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>的调用。</span><span class="sxs-lookup"><span data-stu-id="b6a90-339">Its <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> implementation just wraps a call to <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  
  
 <span data-ttu-id="b6a90-340">然后，以下代码实例化四个 `StarInfo` 对象，并将它们存储在泛型 <xref:System.Collections.Generic.List%601> 对象中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-340">The following code then instantiates four `StarInfo` objects and stores them in a generic <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="b6a90-341">调用 <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> 方法后，`StarInfo` 对象将按其与地球的距离顺序显示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-341">After the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> method is called, `StarInfo` objects are displayed in order of their distance from the Earth.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="bigInteger.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b6a90-342">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-342">The object to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-343">将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-343">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="b6a90-344">一个带符号整数，指示当前实例与 <paramref name="obj" /> 参数的关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-344">A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b6a90-345">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-345">Return value</span></span> 
 </term><description> <span data-ttu-id="b6a90-346">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-346">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b6a90-347">小于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-347">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-348">当前实例小于 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-348">The current instance is less than <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-349">零</span><span class="sxs-lookup"><span data-stu-id="b6a90-349">Zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-350">当前实例等于 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-350">The current instance equals <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-351">大于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-351">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b6a90-352">当前实例大于 <paramref name="obj" />，或者 <paramref name="obj" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-352">The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-353"><xref:System.Numerics.BigInteger.CompareTo%2A> 方法的此重载实现 <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-353">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b6a90-354">它由非泛型集合对象用于对集合中的项进行排序。</span><span class="sxs-lookup"><span data-stu-id="b6a90-354">It is used by non-generic collection objects to order the items in the collection.</span></span>  
  
 <span data-ttu-id="b6a90-355">`obj` 参数必须为以下参数之一：</span><span class="sxs-lookup"><span data-stu-id="b6a90-355">The `obj` parameter must be one of the following:</span></span>  
  
-   <span data-ttu-id="b6a90-356"><xref:System.Numerics.BigInteger>其运行时类型的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-356">An object whose run-time type is <xref:System.Numerics.BigInteger>.</span></span>  
  
-   <span data-ttu-id="b6a90-357">值为 `null`的 <xref:System.Object> 变量。</span><span class="sxs-lookup"><span data-stu-id="b6a90-357">An <xref:System.Object> variable whose value is `null`.</span></span> <span data-ttu-id="b6a90-358">如果 `null``obj` 参数的值，则该方法将返回1，指示当前实例大于 `obj`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-358">If the value of the `obj` parameter is `null`, the method returns 1, which indicates that the current instance is greater than `obj`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-359">下面的示例调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> 方法，将 <xref:System.Numerics.BigInteger> 值与对象数组中的每个元素进行比较：</span><span class="sxs-lookup"><span data-stu-id="b6a90-359">The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b6a90-360"><paramref name="obj" /> 不是 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-360"><paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</span></span></exception>
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : uint64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b6a90-361">要比较的 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-361">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-362">将此实例与 64 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位无符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-362">Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="b6a90-363">一个带符号整数，指示此实例和 <paramref name="other" /> 的相对值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-363">A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.</span></span>
          <list type="table"><listheader><term><span data-ttu-id="b6a90-364">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-364">Return value</span></span></term><description><span data-ttu-id="b6a90-365">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-365">Description</span></span></description></listheader><item><term><span data-ttu-id="b6a90-366">小于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-366">Less than zero</span></span></term><description><span data-ttu-id="b6a90-367">当前实例小于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-367">The current instance is less than <paramref name="other" />.</span></span></description></item><item><term><span data-ttu-id="b6a90-368">零</span><span class="sxs-lookup"><span data-stu-id="b6a90-368">Zero</span></span></term><description><span data-ttu-id="b6a90-369">当前实例等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-369">The current instance equals <paramref name="other" />.</span></span></description></item><item><term><span data-ttu-id="b6a90-370">大于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-370">Greater than zero</span></span></term><description><span data-ttu-id="b6a90-371">当前实例大于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-371">The current instance is greater than <paramref name="other" />.</span></span></description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Divide(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Divide(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="b6a90-372">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-372">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="b6a90-373">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-373">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="b6a90-374">用另一个值除 <see cref="T:System.Numerics.BigInteger" /> 值并返回结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-374">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="b6a90-375">相除后的商。</span><span class="sxs-lookup"><span data-stu-id="b6a90-375">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-376"><xref:System.Numerics.BigInteger.Divide%2A> 方法执行整数除法;除以相除后得出的任何余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-376">The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded.</span></span> <span data-ttu-id="b6a90-377">若要在保留余数的同时执行整数除法，请调用 <xref:System.Numerics.BigInteger.DivRem%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-377">To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span> <span data-ttu-id="b6a90-378">若要仅检索余数，请调用 <xref:System.Numerics.BigInteger.Remainder%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-378">To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="b6a90-379">不支持运算符重载的语言可以使用 <xref:System.Numerics.BigInteger.Divide%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-379">The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading.</span></span> <span data-ttu-id="b6a90-380">其行为与使用除法运算符的除法相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-380">Its behavior is identical to division using the division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-381">下面的示例创建一个 <xref:System.Numerics.BigInteger> 值的数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-381">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-382">然后，它使用每个元素作为除法运算中使用 <xref:System.Numerics.BigInteger.Divide%2A> 方法、除法运算符（/）和 <xref:System.Numerics.BigInteger.DivRem%2A> 方法的商。</span><span class="sxs-lookup"><span data-stu-id="b6a90-382">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="b6a90-383"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-383"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger DivRem(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor, [out] valuetype System.Numerics.BigInteger&amp; remainder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger DivRem(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor, [Runtime::InteropServices::Out] System::Numerics::BigInteger % remainder);" />
      <MemberSignature Language="F#" Value="static member DivRem : System.Numerics.BigInteger * System.Numerics.BigInteger * BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.DivRem (dividend, divisor, remainder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
        <Parameter Name="remainder" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="b6a90-384">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-384">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="b6a90-385">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-385">The value to divide by.</span></span></param>
        <param name="remainder"><span data-ttu-id="b6a90-386">当此方法返回时，包含一个表示相除余数的 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-386">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division.</span></span> <span data-ttu-id="b6a90-387">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="b6a90-387">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="b6a90-388">用另一个值除一个 <see cref="T:System.Numerics.BigInteger" /> 值，返回结果，并在输出参数中返回余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-388">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="b6a90-389">相除后的商。</span><span class="sxs-lookup"><span data-stu-id="b6a90-389">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-390">此方法保留整数相除产生的商和余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-390">This method preserves both the quotient and the remainder that results from integer division.</span></span> <span data-ttu-id="b6a90-391">如果不感兴趣，请使用 <xref:System.Numerics.BigInteger.Divide%2A> 方法或除法运算符;如果仅对余数感兴趣，请使用 <xref:System.Numerics.BigInteger.Remainder%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-391">If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="b6a90-392">返回 `remainder` 值的符号与 `dividend` 参数的符号相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-392">The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="b6a90-393"><xref:System.Numerics.BigInteger.DivRem%2A> 方法的行为与 <xref:System.Math.DivRem%2A?displayProperty=nameWithType> 方法的行为相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-393">The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-394">下面的示例创建一个 <xref:System.Numerics.BigInteger> 值的数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-394">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-395">然后，它使用每个元素作为除法运算中使用 <xref:System.Numerics.BigInteger.Divide%2A> 方法、除法运算符（/）和 <xref:System.Numerics.BigInteger.DivRem%2A> 方法的商。</span><span class="sxs-lookup"><span data-stu-id="b6a90-395">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="b6a90-396"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-396"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-397">返回一个值，该值指示两个数值是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-397">Returns a value that indicates whether two numeric values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(long other);" />
      <MemberSignature Language="F#" Value="override this.Equals : int64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b6a90-398">要比较的 64 位带符号整数值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-398">The signed 64-bit integer value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-399">返回一个值，该值指示当前实例与 64 位带符号整数是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-399">Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-400">如果 64 位带符号整数与当前实例具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-400"><see langword="true" /> if the signed 64-bit integer and the current instance have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-401">如果 `other` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在调用该方法时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-401">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.</span></span>  
  
 <span data-ttu-id="b6a90-402">若要确定两个对象之间的关系，而不只是测试相等性，请调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-402">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-403">下面的示例实例化除 <xref:System.UInt64>之外的每个整型类型的 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-403">The following example instantiates a <xref:System.Numerics.BigInteger> object from each integral type except <xref:System.UInt64>.</span></span> <span data-ttu-id="b6a90-404">然后，它调用 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> 方法，将 <xref:System.Numerics.BigInteger> 值与传递到 <xref:System.Numerics.BigInteger> 构造函数的原始整数值进行比较。</span><span class="sxs-lookup"><span data-stu-id="b6a90-404">It then calls the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> method to compare the <xref:System.Numerics.BigInteger> value with the original integer value that was passed to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="b6a90-405">如输出所示，每种情况下的值都相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-405">As the output shows, the values are equal in each case.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]
 [!code-csharp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.BigInteger -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b6a90-406">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-406">The object to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-407">返回一个值，该值指示当前实例与指定的 <see cref="T:System.Numerics.BigInteger" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-407">Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-408">如果此 <see cref="T:System.Numerics.BigInteger" /> 对象与 <paramref name="other" /> 具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-408"><see langword="true" /> if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-409">此方法实现 <xref:System.IEquatable%601> 接口，并且执行的效果略优于 <xref:System.Numerics.BigInteger.Equals%28System.Object%29>，因为它不必将 `other` 参数转换为 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-409">This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="b6a90-410">若要确定两个 <xref:System.Numerics.BigInteger> 对象之间的关系，而不只是测试相等性，请调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-410">To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-411">下面的示例将地球上几个星的近似距离与来自地球的 Epsilon 指明的距离进行比较，以确定它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-411">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="b6a90-412">该示例使用 <xref:System.Numerics.BigInteger.Equals%2A> 方法的每个重载来测试是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-412">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="bigInteger.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b6a90-413">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-413">The object to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-414">返回一个值，该值指示当前实例与指定的对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-414">Returns a value that indicates whether the current instance and a specified object have the same value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-415">如果 <paramref name="obj" /> 参数是 <see cref="T:System.Numerics.BigInteger" /> 对象，并且其值等于当前 <see cref="T:System.Numerics.BigInteger" /> 实例的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-415"><see langword="true" /> if the <paramref name="obj" /> argument is a <see cref="T:System.Numerics.BigInteger" /> object, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-416">如果 `obj` 参数不是 <xref:System.Numerics.BigInteger> 值，则该方法返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-416">If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`.</span></span> <span data-ttu-id="b6a90-417">仅当 `obj` 是其值等于当前实例的 <xref:System.Numerics.BigInteger> 实例时，该方法才会返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-417">The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.</span></span>  
  
 <span data-ttu-id="b6a90-418">若要确定两个对象之间的关系，而不只是测试相等性，请调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-418">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-419">下面的示例定义了并行 <xref:System.Object> 和 <xref:System.Numerics.BigInteger> 数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-419">The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays.</span></span> <span data-ttu-id="b6a90-420">一个数组的每个元素与第二个数组的相应元素具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-420">Each element of one array has the same value as the corresponding element of the second array.</span></span> <span data-ttu-id="b6a90-421">如示例的输出所示，仅当后 <xref:System.Numerics.BigInteger> 数组中的实例是 <xref:System.Numerics.BigInteger>，并且它们的值相等时，才被视为等于 <xref:System.Object> 数组中的实例。</span><span class="sxs-lookup"><span data-stu-id="b6a90-421">As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="override this.Equals : uint64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b6a90-422">要比较的 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-422">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-423">返回一个值，该值指示当前实例与 64 位无符号整数是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-423">Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-424">如果当前实例与 64 位无符号整数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-424"><see langword="true" /> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-425">若要确定两个对象之间的关系，而不只是测试相等性，请调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-425">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-426">下面的示例将地球上几个星的近似距离与来自地球的 Epsilon 指明的距离进行比较，以确定它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-426">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="b6a90-427">该示例使用 <xref:System.Numerics.BigInteger.Equals%2A> 方法的每个重载来测试是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-427">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (bool isUnsigned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(bool isUnsigned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (Optional isUnsigned As Boolean = false) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetByteCount : bool -&gt; int" Usage="bigInteger.GetByteCount isUnsigned" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="isUnsigned"><span data-ttu-id="b6a90-428">如果使用无符号编码，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-428"><see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-429">获取将由 <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> 和 <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" /> 输出的字节数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-429">Gets the number of bytes that will be output by <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> and <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-430">字节数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-430">The number of bytes.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="bigInteger.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b6a90-431">返回当前 <see cref="T:System.Numerics.BigInteger" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b6a90-431">Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="b6a90-432">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b6a90-432">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreatestCommonDivisor">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger GreatestCommonDivisor(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreatestCommonDivisor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger GreatestCommonDivisor(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member GreatestCommonDivisor : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.GreatestCommonDivisor (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-433">第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-433">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-434">第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-434">The second value.</span></span></param>
        <summary><span data-ttu-id="b6a90-435">查找两个 <see cref="T:System.Numerics.BigInteger" /> 值的最大公约数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-435">Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-436"><paramref name="left" /> 和 <paramref name="right" /> 的最大公约数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-436">The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-437">最大公因数是两个 <xref:System.Numerics.BigInteger> 值的最大值，不返回余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-437">The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.</span></span>  
  
 <span data-ttu-id="b6a90-438">如果 `left` 和 `right` 参数为非零数字，则此方法始终返回至少1个值，因为所有数字都可以除以1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-438">If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1.</span></span> <span data-ttu-id="b6a90-439">如果任一参数为零，则该方法将返回非零参数的绝对值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-439">If either parameter is zero, the method returns the absolute value of the non-zero parameter.</span></span> <span data-ttu-id="b6a90-440">如果两个值都为零，则该方法返回零。</span><span class="sxs-lookup"><span data-stu-id="b6a90-440">If both values are zero, the method returns zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-441">计算非常大的 `left` 和 `right` 值的最大公约数可能是一项非常耗时的操作。</span><span class="sxs-lookup"><span data-stu-id="b6a90-441">Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.</span></span>  
  
 <span data-ttu-id="b6a90-442">无论 `left` 和 `right` 参数的符号如何，<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> 方法返回的值始终为正值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-442">The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-443">下面的示例演示对 <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> 方法的调用，以及提供有关 <xref:System.ArgumentOutOfRangeException>的有用信息所需的异常处理。</span><span class="sxs-lookup"><span data-stu-id="b6a90-443">The following example illustrates a call to the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method and the exception handling necessary to provide useful information about an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="b6a90-444">结果指示这两个数字的最大公因数为1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-444">The result indicates that the greatest common divisor of these two numbers is 1.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]
 [!code-vb[System.Numeric.BigInteger.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEven" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsEven" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEven As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEven { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEven : bool" Usage="System.Numerics.BigInteger.IsEven" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b6a90-445">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是偶数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-445">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</span></span></summary>
        <value><span data-ttu-id="b6a90-446">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是偶数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-446"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-447">此属性是一项便利功能，用于指示 <xref:System.Numerics.BigInteger> 值是否均匀地除以2。</span><span class="sxs-lookup"><span data-stu-id="b6a90-447">This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two.</span></span> <span data-ttu-id="b6a90-448">它等效于以下表达式：</span><span class="sxs-lookup"><span data-stu-id="b6a90-448">It is equivalent to the following expression:</span></span>  
  
```csharp   
value % 2 == 0;  
```  
  
```vb  
value Mod 2 = 0  
```  
  
 <span data-ttu-id="b6a90-449">如果 <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>当前 <xref:System.Numerics.BigInteger> 对象的值，则属性将返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-449">If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>, the property returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOne">
      <MemberSignature Language="C#" Value="public bool IsOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsOne" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOne As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOne { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOne : bool" Usage="System.Numerics.BigInteger.IsOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b6a90-450">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 <see cref="P:System.Numerics.BigInteger.One" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-450">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</span></span></summary>
        <value><span data-ttu-id="b6a90-451">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 <see cref="P:System.Numerics.BigInteger.One" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-451"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-452">此属性比其他比较（如 `thisBigInteger.Equals(BigInteger.One)`）提供明显更好的性能。</span><span class="sxs-lookup"><span data-stu-id="b6a90-452">This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public bool IsPowerOfTwo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerOfTwo" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerOfTwo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerOfTwo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerOfTwo : bool" Usage="System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b6a90-453">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 2 的幂。</span><span class="sxs-lookup"><span data-stu-id="b6a90-453">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</span></span></summary>
        <value><span data-ttu-id="b6a90-454">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 2 的幂，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-454"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-455">此属性确定 <xref:System.Numerics.BigInteger> 值是否设置了单非零位。</span><span class="sxs-lookup"><span data-stu-id="b6a90-455">This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set.</span></span> <span data-ttu-id="b6a90-456">这意味着，如果当前 <xref:System.Numerics.BigInteger> 对象的值为1（即 2<sup>0</sup>）或二者的任何更大的幂，则它将返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-456">This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two.</span></span> <span data-ttu-id="b6a90-457">如果当前 <xref:System.Numerics.BigInteger> 对象的值为0，则它将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-457">It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsZero" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsZero As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsZero { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsZero : bool" Usage="System.Numerics.BigInteger.IsZero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b6a90-458">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 <see cref="P:System.Numerics.BigInteger.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-458">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</span></span></summary>
        <value><span data-ttu-id="b6a90-459">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 <see cref="P:System.Numerics.BigInteger.Zero" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-459"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-460">此属性提供的性能明显优于 `BigInteger.Equals(BigInteger.Zero)`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-460">This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-461">返回指定数字的对数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-461">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-462">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-462">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="b6a90-463">返回指定数字的自然对数（底为 <see langword="e" />）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-463">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="b6a90-464"><paramref name="value" /> 的自然对数（底为 <see langword="e" />），如“备注”部分中的表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-464">The natural (base <see langword="e" />) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-465">`value` 参数指定为以10为基数的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-465">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="b6a90-466">此方法的准确返回值取决于 `value`的符号，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-466">The precise return value of this method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="b6a90-467">`value` 参数的符号</span><span class="sxs-lookup"><span data-stu-id="b6a90-467">Sign of `value` parameter</span></span>|<span data-ttu-id="b6a90-468">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-468">Return value</span></span>|  
|-------------------------------|------------------|  
|<span data-ttu-id="b6a90-469">正</span><span class="sxs-lookup"><span data-stu-id="b6a90-469">Positive</span></span>|<span data-ttu-id="b6a90-470">`value`的自然对数;即 ln `value`或 log e`value`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-470">The natural logarithm of `value`; that is, ln `value`, or log e`value`.</span></span>|  
|<span data-ttu-id="b6a90-471">零</span><span class="sxs-lookup"><span data-stu-id="b6a90-471">Zero</span></span>|<span data-ttu-id="b6a90-472"><xref:System.Double.NegativeInfinity>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-472"><xref:System.Double.NegativeInfinity>.</span></span>|  
|<span data-ttu-id="b6a90-473">负数</span><span class="sxs-lookup"><span data-stu-id="b6a90-473">Negative</span></span>|<span data-ttu-id="b6a90-474"><xref:System.Double.NaN>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-474"><xref:System.Double.NaN>.</span></span>|  
  
 <span data-ttu-id="b6a90-475">若要计算 <xref:System.Numerics.BigInteger> 值以10为底的对数，请调用 <xref:System.Numerics.BigInteger.Log10%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-475">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="b6a90-476">若要计算某个数在另一个基中的对数，请调用 <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-476">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.</span></span>  
  
 <span data-ttu-id="b6a90-477">可以通过调用 <xref:System.Numerics.BigInteger.Log%2A> 方法以及 <xref:System.Math.Exp%2A?displayProperty=nameWithType> 方法来查找数字的平方根。</span><span class="sxs-lookup"><span data-stu-id="b6a90-477">You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b6a90-478">请注意，如果结果大于 <xref:System.Double.MaxValue?displayProperty=nameWithType>，则结果 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-478">Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if the result is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-479">下面的示例计算 <xref:System.Numerics.BigInteger> 值的数组中每个元素的平方根。</span><span class="sxs-lookup"><span data-stu-id="b6a90-479">The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]
  
 <span data-ttu-id="b6a90-480">此方法对应于基元数值类型的 <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-480">This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b6a90-481"><paramref name="value" /> 的自然对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-481">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger, baseValue As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger * double -&gt; double" Usage="System.Numerics.BigInteger.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-482">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-482">A number whose logarithm is to be found.</span></span></param>
        <param name="baseValue"><span data-ttu-id="b6a90-483">对数的底。</span><span class="sxs-lookup"><span data-stu-id="b6a90-483">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="b6a90-484">返回指定数字在使用指定底时的对数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-484">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="b6a90-485"><paramref name="baseValue" /> 的以 <paramref name="value" /> 为底的对数，如“备注”部分中的表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-485">The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-486">`value` 和 `baseValue` 参数指定为以10为基数的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-486">The `value` and `baseValue` parameters are specified as base 10 numbers.</span></span>  
  
 <span data-ttu-id="b6a90-487">此方法的准确返回值取决于 `baseValue`的符号和值上的 `value` 和的符号，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-487">The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.</span></span>  
  
|<span data-ttu-id="b6a90-488">`value` 参数</span><span class="sxs-lookup"><span data-stu-id="b6a90-488">`value` parameter</span></span>|<span data-ttu-id="b6a90-489">`baseValue` 参数</span><span class="sxs-lookup"><span data-stu-id="b6a90-489">`baseValue` parameter</span></span>|<span data-ttu-id="b6a90-490">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-490">Return value</span></span>|  
|-----------------------|---------------------------|------------------|  
|<span data-ttu-id="b6a90-491">`value` > 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-491">`value` > 0</span></span>|<span data-ttu-id="b6a90-492">（0 < `baseValue` < 1）-或-（`baseValue` > 1）</span><span class="sxs-lookup"><span data-stu-id="b6a90-492">(0 < `baseValue` < 1) -or-(`baseValue` > 1)</span></span>|<span data-ttu-id="b6a90-493">logbaseValue （`value`）</span><span class="sxs-lookup"><span data-stu-id="b6a90-493">logbaseValue(`value`)</span></span>|  
|<span data-ttu-id="b6a90-494">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-494">`value` < 0</span></span>|<span data-ttu-id="b6a90-495">（任意值）</span><span class="sxs-lookup"><span data-stu-id="b6a90-495">(any value)</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="b6a90-496">（任意值）</span><span class="sxs-lookup"><span data-stu-id="b6a90-496">(any value)</span></span>|<span data-ttu-id="b6a90-497">`baseValue` < 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-497">`baseValue` < 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="b6a90-498">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="b6a90-498">`value` != 1</span></span>|<span data-ttu-id="b6a90-499">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-499">`baseValue` = 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="b6a90-500">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="b6a90-500">`value` != 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="b6a90-501">（任意值）</span><span class="sxs-lookup"><span data-stu-id="b6a90-501">(any value)</span></span>|`baseValue` = <xref:System.Double.NaN?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="b6a90-502">（任意值）</span><span class="sxs-lookup"><span data-stu-id="b6a90-502">(any value)</span></span>|<span data-ttu-id="b6a90-503">`baseValue` = 1</span><span class="sxs-lookup"><span data-stu-id="b6a90-503">`baseValue` = 1</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="b6a90-504">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-504">`value` = 0</span></span>|<span data-ttu-id="b6a90-505">0 < `baseValue` < 1</span><span class="sxs-lookup"><span data-stu-id="b6a90-505">0 < `baseValue` < 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="b6a90-506">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-506">`value` = 0</span></span>|<span data-ttu-id="b6a90-507">`baseValue` > 1</span><span class="sxs-lookup"><span data-stu-id="b6a90-507">`baseValue` > 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="b6a90-508">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="b6a90-508">`value` = 1</span></span>|<span data-ttu-id="b6a90-509">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="b6a90-509">`baseValue` = 0</span></span>|<span data-ttu-id="b6a90-510">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-510">0</span></span>|  
|<span data-ttu-id="b6a90-511">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="b6a90-511">`value` = 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<span data-ttu-id="b6a90-512">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-512">0</span></span>|  
  
 <span data-ttu-id="b6a90-513">若要计算 <xref:System.Numerics.BigInteger> 值以10为底的对数，请调用 <xref:System.Numerics.BigInteger.Log10%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-513">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="b6a90-514">若要计算某个数的自然对数，请调用 <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-514">To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.</span></span>  
  
 <span data-ttu-id="b6a90-515">此方法对应于基元数值类型的 <xref:System.Math.Log%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-515">This method corresponds to the <xref:System.Math.Log%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b6a90-516"><paramref name="value" /> 的对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-516">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-517">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-517">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="b6a90-518">返回指定数字以 10 为底的对数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-518">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="b6a90-519"><paramref name="value" /> 的以 10 为底的对数，如“备注”部分中的表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-519">The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-520">`value` 参数指定为以10为基数的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-520">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="b6a90-521">此方法的准确返回值取决于 `value`的符号，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-521">The precise return value of the method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="b6a90-522">值参数的符号</span><span class="sxs-lookup"><span data-stu-id="b6a90-522">Sign of value parameter</span></span>|<span data-ttu-id="b6a90-523">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-523">Return value</span></span>|  
|-----------------------------|------------------|  
|<span data-ttu-id="b6a90-524">正</span><span class="sxs-lookup"><span data-stu-id="b6a90-524">Positive</span></span>|<span data-ttu-id="b6a90-525">`value`的基数为10的日志;也就是说，log10`value`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-525">The base 10 log of `value`; that is, log10`value`.</span></span>|  
|<span data-ttu-id="b6a90-526">零</span><span class="sxs-lookup"><span data-stu-id="b6a90-526">Zero</span></span>|<span data-ttu-id="b6a90-527"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-527"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="b6a90-528">负数</span><span class="sxs-lookup"><span data-stu-id="b6a90-528">Negative</span></span>|<span data-ttu-id="b6a90-529"><xref:System.Double.NaN?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-529"><xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="b6a90-530">若要计算 <xref:System.Numerics.BigInteger> 值的自然对数，请调用 <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-530">To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b6a90-531">若要计算某个数在另一个基中的对数，请调用 <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-531">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b6a90-532">此方法对应于基元数值类型的 <xref:System.Math.Log10%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-532">This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b6a90-533"><paramref name="value" /> 的以 10 为底的对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-533">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Max(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Max(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Max : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Max (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-534">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-534">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-535">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-535">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-536">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值中的较大者。</span><span class="sxs-lookup"><span data-stu-id="b6a90-536">Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-537"><paramref name="left" /> 或 <paramref name="right" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="b6a90-537">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-538">此方法对应于基元数值类型的 <xref:System.Math.Max%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-538">This method corresponds to the <xref:System.Math.Max%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-539">下面的示例使用 <xref:System.Numerics.BigInteger.Max%2A> 方法来选择 <xref:System.Numerics.BigInteger> 值数组中的最大数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-539">The following example uses the <xref:System.Numerics.BigInteger.Max%2A> method to select the largest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Min(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Min(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Min : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Min (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-540">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-540">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-541">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-541">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-542">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值中的较小者。</span><span class="sxs-lookup"><span data-stu-id="b6a90-542">Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-543"><paramref name="left" /> 或 <paramref name="right" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="b6a90-543">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-544">此方法对应于基元数值类型的 <xref:System.Math.Min%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-544">This method corresponds to the <xref:System.Math.Min%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-545">下面的示例使用 <xref:System.Numerics.BigInteger.Min%2A> 方法选择 <xref:System.Numerics.BigInteger> 值数组中的最小数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-545">The following example uses the <xref:System.Numerics.BigInteger.Min%2A> method to select the smallest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="MinusOne">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger MinusOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger MinusOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.MinusOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinusOne As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger MinusOne { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.MinusOne : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.MinusOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b6a90-546">获取一个表示数字负一 (-1) 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-546">Gets a value that represents the number negative one (-1).</span></span></summary>
        <value><span data-ttu-id="b6a90-547">其值为负一 (-1) 的整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-547">An integer whose value is negative one (-1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-548"><xref:System.Numerics.BigInteger.MinusOne%2A> 属性用于比较 <xref:System.Numerics.BigInteger> 值为-1，或将-1 赋给 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-548">The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
      </Docs>
    </Member>
    <Member MemberName="ModPow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger ModPow(valuetype System.Numerics.BigInteger value, valuetype System.Numerics.BigInteger exponent, valuetype System.Numerics.BigInteger modulus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModPow (value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger ModPow(System::Numerics::BigInteger value, System::Numerics::BigInteger exponent, System::Numerics::BigInteger modulus);" />
      <MemberSignature Language="F#" Value="static member ModPow : System.Numerics.BigInteger * System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.ModPow (value, exponent, modulus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Numerics.BigInteger" />
        <Parameter Name="modulus" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-549">要计算 <paramref name="exponent" /> 次幂的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-549">The number to raise to the <paramref name="exponent" /> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="b6a90-550">对 <paramref name="value" /> 进行幂运算的指数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-550">The exponent to raise <paramref name="value" /> by.</span></span></param>
        <param name="modulus"><span data-ttu-id="b6a90-551"><paramref name="value" /> 的 <paramref name="exponent" /> 次幂要除以的数值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-551">The number by which to divide <paramref name="value" /> raised to the <paramref name="exponent" /> power.</span></span></param>
        <summary><span data-ttu-id="b6a90-552">对以某个数为底、以另一个数为指数的幂执行模数除法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-552">Performs modulus division on a number raised to the power of another number.</span></span></summary>
        <returns><span data-ttu-id="b6a90-553">将 <paramref name="value" /><sup>exponent</sup> 除以 <paramref name="modulus" /> 后的余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-553">The remainder after dividing <paramref name="value" /><sup>exponent</sup> by <paramref name="modulus" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-554"><xref:System.Numerics.BigInteger.ModPow%2A> 方法计算以下表达式：</span><span class="sxs-lookup"><span data-stu-id="b6a90-554">The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:</span></span>  
  
 <span data-ttu-id="b6a90-555">（接受 basevalue ^ 指数）Mod 取模</span><span class="sxs-lookup"><span data-stu-id="b6a90-555">(baseValue ^ exponent) Mod modulus</span></span>  
  
 <span data-ttu-id="b6a90-556">若要对没有模数除法 <xref:System.Numerics.BigInteger> 值执行幂运算，请使用 <xref:System.Numerics.BigInteger.Pow%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-556">To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-557">下面的示例提供了调用 <xref:System.Numerics.BigInteger.ModPow%2A> 方法的简单阐释。</span><span class="sxs-lookup"><span data-stu-id="b6a90-557">The following example provides a simple illustration of calling the <xref:System.Numerics.BigInteger.ModPow%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="b6a90-558"><paramref name="modulus" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="b6a90-558"><paramref name="modulus" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b6a90-559"><paramref name="exponent" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-559"><paramref name="exponent" /> is negative.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Multiply(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-560">要相乘的第一个数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-560">The first number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-561">要相乘的第二个数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-561">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="b6a90-562">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值的乘积。</span><span class="sxs-lookup"><span data-stu-id="b6a90-562">Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-563"><paramref name="left" /> 与 <paramref name="right" /> 参数的乘积。</span><span class="sxs-lookup"><span data-stu-id="b6a90-563">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-564">为不支持运算符重载的语言实现 <xref:System.Numerics.BigInteger.Multiply%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-564">The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading.</span></span> <span data-ttu-id="b6a90-565">它的行为与使用乘法运算符的乘法相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-565">Its behavior is identical to multiplication using the multiplication operator.</span></span> <span data-ttu-id="b6a90-566">此外，在实例化 <xref:System.Numerics.BigInteger> 变量时，<xref:System.Numerics.BigInteger.Multiply%2A> 方法对于乘法运算符是一种有用的替代方法，方法是将该变量分配给乘法运算符产生的积，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-566">In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  
  
 <span data-ttu-id="b6a90-567">如有必要，此方法会自动执行其他整型类型到 <xref:System.Numerics.BigInteger> 对象的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-567">If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="b6a90-568">下一节中的示例对此进行了说明，其中 <xref:System.Numerics.BigInteger.Multiply%2A> 方法传递两个 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-568">This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-569">下面的示例尝试通过两个长整数执行乘法运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-569">The following example tries to perform multiplication with two long integers.</span></span> <span data-ttu-id="b6a90-570">由于结果超出了长整数的范围，因此会引发 <xref:System.OverflowException>，并调用 <xref:System.Numerics.BigInteger.Multiply%2A> 方法来处理乘法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-570">Because the result exceeds the range of a long integer, an <xref:System.OverflowException> is thrown, and the <xref:System.Numerics.BigInteger.Multiply%2A> method is called to handle the multiplication.</span></span> <span data-ttu-id="b6a90-571">请注意C# ，需要使用 `checked` 关键字（如本示例所示）或 `/checked+` 编译器选项，以确保在数值溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b6a90-571">Note that C# requires that you use either the `checked` keyword (as in this example) or the `/checked+` compiler option to make sure an exception is thrown on a numeric overflow.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Negate(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Negate(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-572">要求反的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-572">The value to negate.</span></span></param>
        <summary><span data-ttu-id="b6a90-573">对指定的 <see cref="T:System.Numerics.BigInteger" /> 值求反。</span><span class="sxs-lookup"><span data-stu-id="b6a90-573">Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-574"><paramref name="value" /> 参数乘以负一 (-1) 的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-574">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-575">求反会获得数字的加法逆值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-575">Negation obtains the additive inverse of a number.</span></span> <span data-ttu-id="b6a90-576">数字的加法反数值是在将其添加到原始数字时产生零值的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-576">The additive inverse of a number is a number that produces a value of zero when it is added to the original number.</span></span>  
  
 <span data-ttu-id="b6a90-577">为不支持自定义运算符的语言实现 <xref:System.Numerics.BigInteger.Negate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-577">The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="b6a90-578">它的行为等同于使用一元求反运算符的求反。</span><span class="sxs-lookup"><span data-stu-id="b6a90-578">Its behavior is identical to negation using the unary negation operator.</span></span> <span data-ttu-id="b6a90-579">此外，在实例化 <xref:System.Numerics.BigInteger> 变量时，<xref:System.Numerics.BigInteger.Negate%2A> 方法对于求反运算符非常有用，如以下示例中所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-579">In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-580">下面的示例演示了使 <xref:System.Numerics.BigInteger> 对象的值求反的三种方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-580">The following example illustrates three ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger One" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property One As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger One { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.One : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.One" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b6a90-581">获取一个表示数字一 (1) 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-581">Gets a value that represents the number one (1).</span></span></summary>
        <value><span data-ttu-id="b6a90-582">其值为一 (1) 的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-582">An object whose value is one (1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-583"><xref:System.Numerics.BigInteger.One%2A> 属性通常用于将 <xref:System.Numerics.BigInteger> 值与1进行比较，或将1赋给 <xref:System.Numerics.BigInteger> 的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-583">The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
        <altmember cref="P:System.Numerics.BigInteger.MinusOne" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Addition(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-584">要相加的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-584">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-585">要相加的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-585">The second value to add.</span></span></param>
        <summary><span data-ttu-id="b6a90-586">将两个指定的 <see cref="T:System.Numerics.BigInteger" /> 对象的值相加。</span><span class="sxs-lookup"><span data-stu-id="b6a90-586">Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</span></span></summary>
        <returns><span data-ttu-id="b6a90-587"><paramref name="left" /> 与 <paramref name="right" /> 的和。</span><span class="sxs-lookup"><span data-stu-id="b6a90-587">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-588"><xref:System.Numerics.BigInteger.op_Addition%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的加法运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-588">The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-589">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-589">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]
 [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  
  
 <span data-ttu-id="b6a90-590">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Add%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-590">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &amp; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseAnd(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator And (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &amp;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &amp;&amp;&amp; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left &amp;&amp;&amp; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-591">第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-591">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-592">第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-592">The second value.</span></span></param>
        <summary><span data-ttu-id="b6a90-593">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位 <see langword="And" /> 运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-593">Performs a bitwise <see langword="And" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-594">按位 <see langword="And" /> 运算的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-594">The result of the bitwise <see langword="And" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-595"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的按位 `And` 运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-595">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-596">仅当同时设置了 `left` 和 `right` 中的相应位时，按位 `And` 运算才设置结果位，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-596">The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="b6a90-597">`left` 中的位</span><span class="sxs-lookup"><span data-stu-id="b6a90-597">Bit in `left`</span></span>|<span data-ttu-id="b6a90-598">`right` 中的位</span><span class="sxs-lookup"><span data-stu-id="b6a90-598">Bit in `right`</span></span>|<span data-ttu-id="b6a90-599">结果中的位</span><span class="sxs-lookup"><span data-stu-id="b6a90-599">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="b6a90-600">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-600">0</span></span>|<span data-ttu-id="b6a90-601">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-601">0</span></span>|<span data-ttu-id="b6a90-602">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-602">0</span></span>|  
|<span data-ttu-id="b6a90-603">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-603">1</span></span>|<span data-ttu-id="b6a90-604">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-604">0</span></span>|<span data-ttu-id="b6a90-605">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-605">0</span></span>|  
|<span data-ttu-id="b6a90-606">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-606">1</span></span>|<span data-ttu-id="b6a90-607">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-607">1</span></span>|<span data-ttu-id="b6a90-608">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-608">1</span></span>|  
|<span data-ttu-id="b6a90-609">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-609">0</span></span>|<span data-ttu-id="b6a90-610">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-610">1</span></span>|<span data-ttu-id="b6a90-611">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-611">0</span></span>|  
  
 <span data-ttu-id="b6a90-612"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> 方法启用如下代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-612">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  
  
 <span data-ttu-id="b6a90-613"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> 方法对两个 <xref:System.Numerics.BigInteger> 值执行按位 `And` 运算，就好像它们是两个都在具有虚符号扩展的两个补数表示形式中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-613">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator | (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator |(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ||| ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ||| right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-614">第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-614">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-615">第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-615">The second value.</span></span></param>
        <summary><span data-ttu-id="b6a90-616">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位 <see langword="Or" /> 运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-616">Performs a bitwise <see langword="Or" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-617">按位 <see langword="Or" /> 运算的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-617">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-618"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的按位 `Or` 运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-618">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-619">仅当设置了 `left` 和 `right` 中的一个或两个对应位时，按位 `Or` 运算才设置结果位，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-619">The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="b6a90-620">`left` 中的位</span><span class="sxs-lookup"><span data-stu-id="b6a90-620">Bit in `left`</span></span>|<span data-ttu-id="b6a90-621">`right` 中的位</span><span class="sxs-lookup"><span data-stu-id="b6a90-621">Bit in `right`</span></span>|<span data-ttu-id="b6a90-622">结果中的位</span><span class="sxs-lookup"><span data-stu-id="b6a90-622">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="b6a90-623">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-623">0</span></span>|<span data-ttu-id="b6a90-624">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-624">0</span></span>|<span data-ttu-id="b6a90-625">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-625">0</span></span>|  
|<span data-ttu-id="b6a90-626">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-626">1</span></span>|<span data-ttu-id="b6a90-627">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-627">0</span></span>|<span data-ttu-id="b6a90-628">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-628">1</span></span>|  
|<span data-ttu-id="b6a90-629">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-629">1</span></span>|<span data-ttu-id="b6a90-630">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-630">1</span></span>|<span data-ttu-id="b6a90-631">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-631">1</span></span>|  
|<span data-ttu-id="b6a90-632">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-632">0</span></span>|<span data-ttu-id="b6a90-633">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-633">1</span></span>|<span data-ttu-id="b6a90-634">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-634">1</span></span>|  
  
 <span data-ttu-id="b6a90-635"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A> 方法启用如下代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-635">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  
  
 <span data-ttu-id="b6a90-636"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A> 方法对两个 <xref:System.Numerics.BigInteger> 值执行按位 `Or` 运算，就好像它们是两个都在具有虚符号扩展的两个补数表示形式中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-636">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator -- (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Decrement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Decrement (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator --(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Decrement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Decrement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-637">要递减的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-637">The value to decrement.</span></span></param>
        <summary><span data-ttu-id="b6a90-638">将 <see cref="T:System.Numerics.BigInteger" /> 值减 1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-638">Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="b6a90-639"><paramref name="value" /> 参数减 1 后的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-639">The value of the <paramref name="value" /> parameter decremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-640"><xref:System.Numerics.BigInteger.op_Decrement%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的减量运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-640">The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-641">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-641">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  
  
 <span data-ttu-id="b6a90-642">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Subtract%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-642">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead.</span></span> <span data-ttu-id="b6a90-643">例如：</span><span class="sxs-lookup"><span data-stu-id="b6a90-643">For example:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  
  
 <span data-ttu-id="b6a90-644">由于 <xref:System.Numerics.BigInteger> 对象是不可变的，因此 <xref:System.Numerics.BigInteger.op_Decrement%2A> 运算符会创建一个新的 <xref:System.Numerics.BigInteger> 对象，其值比 `value`表示的 <xref:System.Numerics.BigInteger> 对象小1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-644">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="b6a90-645">这意味着对 <xref:System.Numerics.BigInteger.op_Decrement%2A> 的重复调用可能会消耗大量资源。</span><span class="sxs-lookup"><span data-stu-id="b6a90-645">This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="b6a90-646">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-646">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator / (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Division(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator /(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend / divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="b6a90-647">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-647">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="b6a90-648">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-648">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="b6a90-649">通过使用整除，将指定的 <see cref="T:System.Numerics.BigInteger" /> 值除以另一个指定的 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-649">Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</span></span></summary>
        <returns><span data-ttu-id="b6a90-650">相除的整数结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-650">The integral result of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-651"><xref:System.Numerics.BigInteger.op_Division%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的除法运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-651">The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-652">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-652">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]
 [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  
  
 <span data-ttu-id="b6a90-653">不支持自定义运算符和运算符重载的语言可以改为调用 <xref:System.Numerics.BigInteger.Divide%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-653">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.</span></span>  
  
 <span data-ttu-id="b6a90-654">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b6a90-654">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="b6a90-655">下面的示例创建一个 <xref:System.Numerics.BigInteger> 值的数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-655">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-656">然后，它使用每个元素作为除法运算中使用 <xref:System.Numerics.BigInteger.Divide%2A> 方法、除法运算符（/）和 <xref:System.Numerics.BigInteger.DivRem%2A> 方法的商。</span><span class="sxs-lookup"><span data-stu-id="b6a90-656">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="b6a90-657"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-657"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-658">返回一个值，该值指示两个值是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-658">Returns a value that indicates whether two values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-659">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-659">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-660">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-660">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-661">返回一个值，该值指示带符号长整数值与 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-661">Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-662">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-662"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-663"><xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> 方法定义 <xref:System.Numerics.BigInteger> 值的相等比较运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-663">The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-664">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-664">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  
  
 <span data-ttu-id="b6a90-665">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> 的实例方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-665">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="b6a90-666">如果 `left` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-666">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-667">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-667">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-668">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-668">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-669">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-669">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-670">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与带符号长整数值是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-670">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-671">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-671"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-672"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> 方法定义 <xref:System.Numerics.BigInteger> 值的相等比较运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-672">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-673">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-673">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  
  
 <span data-ttu-id="b6a90-674">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> 的实例方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-674">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="b6a90-675">如果 `right` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-675">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-676">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-676">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-677">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-677">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-678">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-678">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-679">返回一个值，该值指示两个 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-679">Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-680">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-680"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-681"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> 方法定义 <xref:System.Numerics.BigInteger> 值的相等运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-681">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-682">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-682">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]
 [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  
  
 <span data-ttu-id="b6a90-683">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> 的实例方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-683">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="b6a90-684">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-684">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Equals" />
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-685">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-685">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-686">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-686">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-687">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与无符号长整数值是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-687">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-688">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-688"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-689"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> 方法定义 <xref:System.Numerics.BigInteger> 值的相等比较运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-689">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-690">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-690">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  
  
 <span data-ttu-id="b6a90-691">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> 的实例方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-691">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-692">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-692">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-693">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-693">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-694">返回一个值，该值指示无符号长整数值与 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-694">Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-695">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-695"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-696"><xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> 方法定义 <xref:System.Numerics.BigInteger> 值的相等比较运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-696">The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-697">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-697">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]
 [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  
  
 <span data-ttu-id="b6a90-698">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> 的实例方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-698">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ^ (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_ExclusiveOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Xor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ^(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ^^^ ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ^^^ right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-699">第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-699">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-700">第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-700">The second value.</span></span></param>
        <summary><span data-ttu-id="b6a90-701">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位异 <see langword="Or" /> (<see langword="XOr" />) 运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-701">Performs a bitwise exclusive <see langword="Or" /> (<see langword="XOr" />) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-702">按位 <see langword="Or" /> 运算的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-702">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-703">如果两个位的值不同，则按位异 `Or` 运算的结果将 `true`;否则，`false`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-703">The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`.</span></span> <span data-ttu-id="b6a90-704">下表说明了独占 `Or` 操作。</span><span class="sxs-lookup"><span data-stu-id="b6a90-704">The following table illustrates the exclusive `Or` operation.</span></span>  
  
|<span data-ttu-id="b6a90-705">`left` 中的位 x</span><span class="sxs-lookup"><span data-stu-id="b6a90-705">Bit x in `left`</span></span>|<span data-ttu-id="b6a90-706">`right` 中的位 x</span><span class="sxs-lookup"><span data-stu-id="b6a90-706">Bit x in `right`</span></span>|<span data-ttu-id="b6a90-707">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-707">Return value</span></span>|  
|---------------------|----------------------|------------------|  
|<span data-ttu-id="b6a90-708">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-708">0</span></span>|<span data-ttu-id="b6a90-709">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-709">0</span></span>|<span data-ttu-id="b6a90-710">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-710">0</span></span>|  
|<span data-ttu-id="b6a90-711">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-711">0</span></span>|<span data-ttu-id="b6a90-712">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-712">1</span></span>|<span data-ttu-id="b6a90-713">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-713">1</span></span>|  
|<span data-ttu-id="b6a90-714">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-714">1</span></span>|<span data-ttu-id="b6a90-715">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-715">0</span></span>|<span data-ttu-id="b6a90-716">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-716">1</span></span>|  
|<span data-ttu-id="b6a90-717">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-717">1</span></span>|<span data-ttu-id="b6a90-718">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-718">1</span></span>|<span data-ttu-id="b6a90-719">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-719">0</span></span>|  
  
 <span data-ttu-id="b6a90-720"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> 方法启用如下代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-720">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]
 [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  
  
 <span data-ttu-id="b6a90-721"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> 方法对两个 <xref:System.Numerics.BigInteger> 值执行按位 "异 `Or` 运算"，就像它们都是两个采用虚符号扩展的两个补数表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-721">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-722">定义 <see cref="T:System.Numerics.BigInteger" /> 对象与其他类型之间的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-722">Defines an explicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-723">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-723">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-724">定义从 <see cref="T:System.Decimal" /> 对象到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-724">Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-725">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-725">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-726">在转换前截断 `value` 参数的任何小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-726">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="b6a90-727"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-727">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-728">由于从 <xref:System.Decimal> 到 <xref:System.Numerics.BigInteger> 的转换可能涉及截断 `value`的任何小数部分，因此语言编译器不会自动执行此转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-728">Because the conversion from <xref:System.Decimal> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="b6a90-729">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 Visual Basic 中的 `CType`）时，它们才会执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-729">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-730">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-730">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="b6a90-731">对于不支持自定义运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-731">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="b6a90-732">下面的示例将 <xref:System.Decimal> 值数组中的单个元素转换为 <xref:System.Numerics.BigInteger> 对象，然后显示每个转换的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-732">The following example converts the individual elements in an array of <xref:System.Decimal> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="b6a90-733">请注意，在转换过程中，<xref:System.Decimal> 值的任何小数部分将被截断。</span><span class="sxs-lookup"><span data-stu-id="b6a90-733">Note that any fractional part of a <xref:System.Decimal> value is truncated during the conversion.</span></span>   

 [!code-csharp[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#1)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(double value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : double -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-734">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-734">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-735">定义从 <see cref="T:System.Double" /> 值到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-735">Defines an explicit conversion of a <see cref="T:System.Double" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-736">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-736">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-737">在转换前截断 `value` 参数的任何小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-737">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="b6a90-738"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-738">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-739">由于从 <xref:System.Double> 到 <xref:System.Numerics.BigInteger> 的转换可能涉及截断 `value`的任何小数部分，因此语言编译器不会自动执行此转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-739">Because the conversion from <xref:System.Double> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="b6a90-740">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 Visual Basic 中的 `CType`）时，它们才会执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-740">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-741">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-741">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="b6a90-742">对于不支持自定义运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-742">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="b6a90-743">下面的示例将 <xref:System.Double> 值数组中的单个元素转换为 <xref:System.Numerics.BigInteger> 对象，然后显示每个转换的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-743">The following example converts the individual elements in an array of <xref:System.Double> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="b6a90-744">请注意，在转换过程中，<xref:System.Double> 值的任何小数部分将被截断。</span><span class="sxs-lookup"><span data-stu-id="b6a90-744">Note that any fractional part of a <xref:System.Double> value is truncated during the conversion.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#2)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#2)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-745"><paramref name="value" /> 为 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-745"><paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator byte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Byte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; byte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-746">要转换为 <see cref="T:System.Byte" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-746">The value to convert to a <see cref="T:System.Byte" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-747">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到无符号字节值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-747">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-748">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-748">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-749"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-749">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-750">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-750">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-751">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CByte` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-751">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CByte` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-752">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-752">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="b6a90-753">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.Byte> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-753">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span> <span data-ttu-id="b6a90-754">如果转换成功，则结果 <xref:System.Byte> 值中不会有精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-754">There is no loss of precision in the resulting <xref:System.Byte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="b6a90-755">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.Byte> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-755">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Byte> values.</span></span> <span data-ttu-id="b6a90-756">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.Byte> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-756">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#1)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-757"><paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-757"><paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; decimal" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-758">要转换为 <see cref="T:System.Decimal" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-758">The value to convert to a <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-759">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 <see cref="T:System.Decimal" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-759">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-760">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-760">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-761"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-761">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-762">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-762">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-763">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CDec` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-763">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDec` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="b6a90-764">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.Decimal> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-764">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span> 

## Examples
 <span data-ttu-id="b6a90-765">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.Decimal> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-765">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Decimal> values.</span></span> <span data-ttu-id="b6a90-766">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.Decimal> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-766">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-767"><paramref name="value" /> 小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-767"><paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-768">要转换为 <see cref="T:System.Double" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-768">The value to convert to a <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-769">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 <see cref="T:System.Double" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-769">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-770">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-770">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-771"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-771">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-772">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-772">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-773">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CDbl` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-773">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDbl` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="b6a90-774">由于 <xref:System.Numerics.BigInteger> 值可以超出 <xref:System.Double> 数据类型的范围，因此此操作是收缩转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-774">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Double> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="b6a90-775">如果转换失败，则不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-775">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-776">相反，如果 <xref:System.Numerics.BigInteger> 值小于 <xref:System.Double.MinValue?displayProperty=nameWithType>，则生成的 <xref:System.Double> 值 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-776">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Double.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-777">如果 <xref:System.Numerics.BigInteger> 值大于 <xref:System.Double.MaxValue?displayProperty=nameWithType>，则生成的 <xref:System.Double> 值为 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-777">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>
 
 <span data-ttu-id="b6a90-778"><xref:System.Numerics.BigInteger> 到 <xref:System.Double> 的转换可能会导致精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-778">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Double> may involve a loss of precision.</span></span> <span data-ttu-id="b6a90-779">在某些情况下，丢失精度可能导致强制转换或转换操作成功，即使 <xref:System.Numerics.BigInteger> 值超出 <xref:System.Double> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-779">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="b6a90-780">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-780">The following example provides an illustration.</span></span> <span data-ttu-id="b6a90-781">它将 <xref:System.Double> 的最大值分配给两个 <xref:System.Numerics.BigInteger> 变量，通过 9.999 e291 增加一个 <xref:System.Numerics.BigInteger> 变量，并测试这两个变量是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-781">It assigns the maximum value of a <xref:System.Double> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="b6a90-782">与预期一样，对 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> 方法的调用显示它们不相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-782">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="b6a90-783">但是，虽然 <xref:System.Numerics.BigInteger> 值现在超出 <xref:System.Double.MaxValue?displayProperty=nameWithType>，但将较大的 <xref:System.Numerics.BigInteger> 值转换回 <xref:System.Double> 会成功。</span><span class="sxs-lookup"><span data-stu-id="b6a90-783">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Double> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#4)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#4)]   



## Examples
 <span data-ttu-id="b6a90-784">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.Double> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-784">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Double> values.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator short (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator short(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-785">要转换为 16 位带符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-785">The value to convert to a 16-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-786">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 16 位带符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-786">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-787">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-787">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-788"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-788">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-789">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-789">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-790">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CShort` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-790">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CShort` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-791">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-791">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="b6a90-792">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.Int16> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-792">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span> <span data-ttu-id="b6a90-793">如果转换成功，则结果 <xref:System.Int16> 值中不会有精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-793">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="b6a90-794">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.Int16> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-794">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int16> values.</span></span> <span data-ttu-id="b6a90-795">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.Int16> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-795">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#4)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-796"><paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-796"><paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-797">要转换为 32 位带符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-797">The value to convert to a 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-798">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 32 位带符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-798">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-799">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-799">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-800"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-800">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-801">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-801">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-802">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CInt` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-802">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CInt` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-803">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-803">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="b6a90-804">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.Int32> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-804">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span> <span data-ttu-id="b6a90-805">如果转换成功，则结果 <xref:System.Int32> 值中不会有精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-805">There is no loss of precision in the resulting <xref:System.Int32> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="b6a90-806">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.Int32> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-806">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int32> values.</span></span> <span data-ttu-id="b6a90-807">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.Int32> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-807">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#5)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-808"><paramref name="value" /> 小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-808"><paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-809">要转换为 64 位带符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-809">The value to convert to a 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-810">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 64 位带符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-810">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-811">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-811">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-812"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-812">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-813">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-813">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-814">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CLng` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-814">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CLng` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-815">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-815">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="b6a90-816">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.Int64> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-816">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span> 

## Examples
 <span data-ttu-id="b6a90-817">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.Int64> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-817">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int64> values.</span></span> <span data-ttu-id="b6a90-818">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.Int64> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-818">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#6)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-819"><paramref name="value" /> 小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-819"><paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or is greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator sbyte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::SByte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; sbyte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-820">要转换为 8 位带符号值的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-820">The value to convert to a signed 8-bit value.</span></span></param>
        <summary><span data-ttu-id="b6a90-821">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 8 位带符号值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-821">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.</span></span>  
  
<span data-ttu-id="b6a90-822">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b6a90-822">This API is not CLS-compliant.</span></span> <span data-ttu-id="b6a90-823">符合的替代方法是 <see cref="T:System.Int16" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-823">The compliant alternative is <see cref="T:System.Int16" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-824">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-824">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-825"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-825">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-826">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-826">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-827">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CSByte` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-827">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSByte` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-828">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-828">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="b6a90-829">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.SByte> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-829">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span> <span data-ttu-id="b6a90-830">如果转换成功，则结果 <xref:System.SByte> 值中不会有精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-830">There is no loss of precision in the resulting <xref:System.SByte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="b6a90-831">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.SByte> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-831">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.SByte> values.</span></span> <span data-ttu-id="b6a90-832">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.SByte> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-832">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#7)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-833"><paramref name="value" /> 小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-833"><paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or is greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; single" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-834">要转换为单精度浮点值的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-834">The value to convert to a single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="b6a90-835">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到单精度浮点值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-835">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-836">一个对象，包含 <paramref name="value" /> 参数的尽可能精确的表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-836">An object that contains the closest possible representation of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-837"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-837">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-838">语言编译器不会自动执行此转换，因为它可能涉及到数据丢失或精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-838">Language compilers do not perform this conversion automatically because it can involve data loss or a loss of precision.</span></span> <span data-ttu-id="b6a90-839">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CSng` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-839">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSng` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-840">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-840">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="b6a90-841">由于 <xref:System.Numerics.BigInteger> 值可以超出 <xref:System.Single> 数据类型的范围，因此此操作是收缩转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-841">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Single> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="b6a90-842">如果转换失败，则不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-842">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-843">相反，如果 <xref:System.Numerics.BigInteger> 值小于 <xref:System.Single.MinValue?displayProperty=nameWithType>，则生成的 <xref:System.Single> 值 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-843">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Single.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-844">如果 <xref:System.Numerics.BigInteger> 值大于 <xref:System.Single.MaxValue?displayProperty=nameWithType>，则生成的 <xref:System.Single> 值为 <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-844">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="b6a90-845"><xref:System.Numerics.BigInteger> 到 <xref:System.Single> 的转换可能会导致精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-845">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Single> may involve a loss of precision.</span></span> <span data-ttu-id="b6a90-846">在某些情况下，丢失精度可能导致强制转换或转换操作成功，即使 <xref:System.Numerics.BigInteger> 值超出 <xref:System.Single> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-846">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Single> data type.</span></span> <span data-ttu-id="b6a90-847">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-847">The following example provides an illustration.</span></span> <span data-ttu-id="b6a90-848">它将 <xref:System.Single> 的最大值分配给两个 <xref:System.Numerics.BigInteger> 变量，通过 9.999 e291 增加一个 <xref:System.Numerics.BigInteger> 变量，并测试这两个变量是否相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-848">It assigns the maximum value of a <xref:System.Single> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="b6a90-849">与预期一样，对 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> 方法的调用显示它们不相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-849">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="b6a90-850">但是，虽然 <xref:System.Numerics.BigInteger> 值现在超出 <xref:System.Single.MaxValue?displayProperty=nameWithType>，但将较大的 <xref:System.Numerics.BigInteger> 值转换回 <xref:System.Single> 会成功。</span><span class="sxs-lookup"><span data-stu-id="b6a90-850">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Single> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#5)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#5)]   



## Examples
 <span data-ttu-id="b6a90-851">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.Single> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-851">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Single> values.</span></span>   
     
 [!code-csharp[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ushort (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt16(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-852">要转换为 16 位无符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-852">The value to convert to an unsigned 16-bit integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-853">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 16 位无符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-853">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.</span></span>  
  
<span data-ttu-id="b6a90-854">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b6a90-854">This API is not CLS-compliant.</span></span> <span data-ttu-id="b6a90-855">符合的替代方法是 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-855">The compliant alternative is <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-856">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-856">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-857"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-857">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-858">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-858">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-859">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CUShort` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-859">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUShort` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-860">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-860">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="b6a90-861">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.UInt16> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-861">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span> <span data-ttu-id="b6a90-862">如果转换成功，则结果 <xref:System.UInt16> 值中不会有精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-862">There is no loss of precision in the resulting <xref:System.UInt16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="b6a90-863">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.UInt16> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-863">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt16> values.</span></span> <span data-ttu-id="b6a90-864">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.UInt16> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-864">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#9)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#9)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-865"><paramref name="value" /> 小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-865"><paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" /> or is greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint32" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-866">要转换为 32 位无符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-866">The value to convert to an unsigned 32-bit integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-867">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 32 位无符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-867">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.</span></span>  
  
<span data-ttu-id="b6a90-868">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b6a90-868">This API is not CLS-compliant.</span></span> <span data-ttu-id="b6a90-869">符合的替代方法是 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-869">The compliant alternative is <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-870">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-870">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-871"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-871">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-872">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-872">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-873">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CUInt` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-873">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUInt` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-874">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-874">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="b6a90-875">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.UInt32> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-875">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span> <span data-ttu-id="b6a90-876">如果转换成功，则结果 <xref:System.UInt32> 值中不会有精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-876">There is no loss of precision in the resulting <xref:System.UInt32> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="b6a90-877">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.UInt32> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-877">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt32> values.</span></span> <span data-ttu-id="b6a90-878">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.UInt32> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-878">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#10)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#10)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-879"><paramref name="value" /> 小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-879"><paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" /> or is greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-880">要转换为 64 位无符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-880">The value to convert to an unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="b6a90-881">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 64 位无符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-881">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.</span></span>  
  
<span data-ttu-id="b6a90-882">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b6a90-882">This API is not CLS-compliant.</span></span> <span data-ttu-id="b6a90-883">符合的替代方法是 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-883">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-884">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-884">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-885"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-885">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-886">语言编译器不会自动执行此转换，因为这可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-886">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="b6a90-887">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 `CType` 或 `CULng` 在 Visual Basic 中）时，它们才执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-887">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CULng` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-888">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-888">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="b6a90-889">由于此操作定义收缩转换，因此如果 <xref:System.Numerics.BigInteger> 值超出 <xref:System.UInt64> 数据类型的范围，则它可能会在运行时引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-889">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span> <span data-ttu-id="b6a90-890">如果转换成功，则结果 <xref:System.UInt64> 值中不会有精度损失。</span><span class="sxs-lookup"><span data-stu-id="b6a90-890">There is no loss of precision in the resulting <xref:System.UInt64> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="b6a90-891">下面的示例说明 <xref:System.Numerics.BigInteger> 到 <xref:System.UInt64> 值的转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-891">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt64> values.</span></span> <span data-ttu-id="b6a90-892">它还处理引发的 <xref:System.OverflowException>，因为 <xref:System.Numerics.BigInteger> 值超出了 <xref:System.UInt64> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-892">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#11)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#11)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-893"><paramref name="value" /> 小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-893"><paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue" /> or is greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Single) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(float value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : single -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-894">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-894">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-895">定义从 <see cref="T:System.Single" /> 值到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-895">Defines an explicit conversion of a <see cref="T:System.Single" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-896">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-896">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-897">在转换前截断 `value` 参数的任何小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-897">Any fractional part of the `value` parameter is truncated before conversion.</span></span>
 
 <span data-ttu-id="b6a90-898"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> 方法的重载定义可以从中转换 <xref:System.Numerics.BigInteger> 对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b6a90-898">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="b6a90-899">由于从 <xref:System.Single> 到 <xref:System.Numerics.BigInteger> 的转换可能涉及截断 `value`的任何小数部分，因此语言编译器不会自动执行此转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-899">Because the conversion from <xref:System.Single> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="b6a90-900">相反，仅当使用强制转换运算符（在中C#）或转换函数（如 Visual Basic 中的 `CType`）时，它们才会执行转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-900">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="b6a90-901">否则，它们会显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="b6a90-901">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="b6a90-902">对于不支持自定义运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-902">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="b6a90-903">下面的示例将 <xref:System.Single> 值数组中的单个元素转换为 <xref:System.Numerics.BigInteger> 对象，然后显示每个转换的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-903">The following example converts the individual elements in an array of <xref:System.Single> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="b6a90-904">请注意，在转换过程中，<xref:System.Single> 值的任何小数部分将被截断。</span><span class="sxs-lookup"><span data-stu-id="b6a90-904">Note that any fractional part of a <xref:System.Single> value is truncated during the conversion.</span></span>
 
 [!code-csharp[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#3)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#3)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-905"><paramref name="value" /> 为 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-905"><paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-906">返回一个值，该值指示指定的值是否大于另一个指定的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-906">Returns a value that indicates whether a specified value is greater than another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-907">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-907">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-908">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-908">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-909">返回一个值，该值指示 64 位带符号整数是否大于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-909">Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-910">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-910"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-911"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-911">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-912">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-912">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]
 [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  
  
 <span data-ttu-id="b6a90-913">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 的实例方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-913">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span> <span data-ttu-id="b6a90-914">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-914">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  
  
 <span data-ttu-id="b6a90-915">如果 `left` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-915">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-916">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-916">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-917">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-917">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-918">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-918">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-919">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 是否大于 64 位带符号整数值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-919">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-920">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-920"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-921"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-921">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-922">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-922">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]
 [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  
  
 <span data-ttu-id="b6a90-923">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-923">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-924">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-924">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  
  
 <span data-ttu-id="b6a90-925">如果 `right` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-925">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-926">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-926">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-927">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-927">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-928">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-928">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-929">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-929">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-930">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-930"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-931"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-931">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-932">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-932">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]
 [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  
  
 <span data-ttu-id="b6a90-933">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-933">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-934">它们还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> 方法，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-934">They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  
  
 <span data-ttu-id="b6a90-935">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-935">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-936">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-936">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-937">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-937">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-938">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-938">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="b6a90-939">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-939"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-940"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-940">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-941">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-941">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]
 [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  
  
 <span data-ttu-id="b6a90-942">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-942">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-943">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-943">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-944">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-944">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-945">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-945">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-946">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-946">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="b6a90-947">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-947"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-948"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-948">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-949">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-949">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]
 [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  
  
 <span data-ttu-id="b6a90-950">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-950">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-951">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-951">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-952">返回一个值，该值指示指定的值是否大于等于另一个指定的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-952">Returns a value that indicates whether a specified value is greater than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-953">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-953">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-954">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-954">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-955">返回一个值，该值指示 64 位带符号整数是否大于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-955">Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-956">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-956"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-957"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-957">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-958">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-958">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]
 [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  
  
 <span data-ttu-id="b6a90-959">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-959">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-960">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-960">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  
  
 <span data-ttu-id="b6a90-961">如果 `left` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-961">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-962">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-962">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-963">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-963">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-964">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-964">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-965">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于 64 位带符号整数值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-965">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-966">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-966"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-967"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-967">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-968">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-968">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]
 [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  
  
 <span data-ttu-id="b6a90-969">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-969">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-970">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-970">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  
  
 <span data-ttu-id="b6a90-971">如果 `right` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-971">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-972">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-972">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-973">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-973">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-974">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-974">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-975">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-975">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-976">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-976"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-977"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-977">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-978">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-978">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]
 [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  
  
 <span data-ttu-id="b6a90-979">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-979">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-980">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-980">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  
  
 <span data-ttu-id="b6a90-981">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-981">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-982">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-982">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-983">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-983">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-984">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于 64 位无符号整数值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-984">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-985">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-985"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-986"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-986">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-987">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-987">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]
 [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  
  
 <span data-ttu-id="b6a90-988">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-988">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-989">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-989">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  
  
 <span data-ttu-id="b6a90-990">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-990">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-991">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-991">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-992">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-992">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-993">返回一个值，该值指示 64 位无符号整数是否大于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-993">Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-994">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-994"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-995"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义大于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-995">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-996">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-996">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]
 [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  
  
 <span data-ttu-id="b6a90-997">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-997">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-998">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-998">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  
  
 <span data-ttu-id="b6a90-999">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-999">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-1000">定义 <see cref="T:System.Numerics.BigInteger" /> 对象与其他类型之间的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1000">Defines an implicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1001">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1001">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1002">定义从无符号字节到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1002">Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1003">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1003">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1004">在转换前截断 `value` 参数的任何小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1004">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="b6a90-1005">对于不支持隐式运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1005">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="b6a90-1006"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> 方法的重载定义了这样的类型，编译器可以在这些类型中自动转换 <xref:System.Numerics.BigInteger> 值，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1006">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="b6a90-1007">它们是不涉及数据丢失的扩大转换，不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1007">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-1008">此重载使编译器可以处理从 <xref:System.Byte> 值到 <xref:System.Numerics.BigInteger> 值的转换，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1008">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1009">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1009">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1010">定义从 16 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1010">Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1011">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1011">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1012">对于不支持隐式运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1012">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="b6a90-1013"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> 方法的重载定义了这样的类型，编译器可以在这些类型中自动转换 <xref:System.Numerics.BigInteger> 值，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1013">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="b6a90-1014">它们是不涉及数据丢失的扩大转换，不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1014">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-1015">此重载使编译器可以处理从 <xref:System.Int16> 值到 <xref:System.Numerics.BigInteger> 值的转换，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1015">This overload lets the compiler handle conversions from a <xref:System.Int16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#2)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1016">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1016">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1017">定义从 32 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1017">Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1018">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1018">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1019">对于不支持隐式运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1019">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="b6a90-1020"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> 方法的重载定义了这样的类型，编译器可以在这些类型中自动转换 <xref:System.Numerics.BigInteger> 值，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1020">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="b6a90-1021">它们是不涉及数据丢失的扩大转换，不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1021">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-1022">此重载使编译器可以处理从 <xref:System.Int32> 值到 <xref:System.Numerics.BigInteger> 值的转换，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1022">This overload lets the compiler handle conversions from a <xref:System.Int32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1023">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1023">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1024">定义从 64 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1024">Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1025">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1025">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1026">对于不支持隐式运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1026">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>.</span></span>   
 
 <span data-ttu-id="b6a90-1027"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> 方法的重载定义了这样的类型，编译器可以在这些类型中自动转换 <xref:System.Numerics.BigInteger> 值，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1027">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="b6a90-1028">它们是不涉及数据丢失的扩大转换，不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1028">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-1029">此重载使编译器可以处理从 <xref:System.Int64> 值到 <xref:System.Numerics.BigInteger> 值的转换，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1029">This overload lets the compiler handle conversions from a <xref:System.Int64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1030">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1030">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1031">定义从 8 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1031">Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="b6a90-1032">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1032">This API is not CLS-compliant.</span></span> <span data-ttu-id="b6a90-1033">符合的替代方法是 <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1033">The compliant alternative is <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1034">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1034">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1035">对于不支持隐式运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1035">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="b6a90-1036"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> 方法的重载定义了这样的类型，编译器可以在这些类型中自动转换 <xref:System.Numerics.BigInteger> 值，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1036">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="b6a90-1037">它们是不涉及数据丢失的扩大转换，不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1037">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-1038">此重载使编译器可以处理从 <xref:System.SByte> 值到 <xref:System.Numerics.BigInteger> 值的转换，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1038">This overload lets the compiler handle conversions from a <xref:System.SByte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#5)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1039">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1039">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1040">定义从 16 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1040">Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="b6a90-1041">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1041">This API is not CLS-compliant.</span></span> <span data-ttu-id="b6a90-1042">符合的替代方法是 <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1042">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1043">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1043">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1044">对于不支持隐式运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1044">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="b6a90-1045"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> 方法的重载定义了这样的类型，编译器可以在这些类型中自动转换 <xref:System.Numerics.BigInteger> 值，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1045">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="b6a90-1046">它们是不涉及数据丢失的扩大转换，不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1046">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-1047">此重载使编译器可以处理从 <xref:System.UInt16> 值到 <xref:System.Numerics.BigInteger> 值的转换，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1047">This overload lets the compiler handle conversions from a <xref:System.UInt16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#6)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1048">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1048">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1049">定义从 32 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1049">Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="b6a90-1050">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1050">This API is not CLS-compliant.</span></span> <span data-ttu-id="b6a90-1051">符合的替代方法是 <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1051">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1052">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1052">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1053">对于不支持隐式运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1053">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="b6a90-1054"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> 方法的重载定义了这样的类型，编译器可以在这些类型中自动转换 <xref:System.Numerics.BigInteger> 值，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1054">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="b6a90-1055">它们是不涉及数据丢失的扩大转换，不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1055">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-1056">此重载使编译器可以处理从 <xref:System.UInt32> 值到 <xref:System.Numerics.BigInteger> 值的转换，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1056">This overload lets the compiler handle conversions from a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#7)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1057">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1057">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1058">定义从 64 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1058">Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="b6a90-1059">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1059">This API is not CLS-compliant.</span></span> <span data-ttu-id="b6a90-1060">符合的替代方法是 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1060">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1061">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1061">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1062">对于不支持隐式运算符的语言，将 <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>替代方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1062">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="b6a90-1063"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> 方法的重载定义了这样的类型，编译器可以在这些类型中自动转换 <xref:System.Numerics.BigInteger> 值，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1063">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="b6a90-1064">它们是不涉及数据丢失的扩大转换，不会引发 <xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1064">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b6a90-1065">此重载使编译器可以处理从 <xref:System.UInt64> 值到 <xref:System.Numerics.BigInteger> 值的转换，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1065">This overload lets the compiler handle conversions from a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#8)]   

 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ++ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Increment(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Increment (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ++(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Increment : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Increment value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1066">要递增的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1066">The value to increment.</span></span></param>
        <summary><span data-ttu-id="b6a90-1067">将 <see cref="T:System.Numerics.BigInteger" /> 值加 1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1067">Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1068"><paramref name="value" /> 参数加 1 后的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1068">The value of the <paramref name="value" /> parameter incremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1069"><xref:System.Numerics.BigInteger.op_Increment%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的增量运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1069">The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1070">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1070">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  
  
 <span data-ttu-id="b6a90-1071">缺少增量运算符或不支持运算符重载的某些语言（如 Visual Basic）可以直接调用 <xref:System.Numerics.BigInteger.op_Increment%2A> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1071">Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  
  
 <span data-ttu-id="b6a90-1072">由于 <xref:System.Numerics.BigInteger> 对象是不可变的，因此 <xref:System.Numerics.BigInteger.op_Increment%2A> 运算符会创建一个新的 <xref:System.Numerics.BigInteger> 对象，其值比 `value`表示的 <xref:System.Numerics.BigInteger> 对象多一个。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1072">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="b6a90-1073">因此，对 <xref:System.Numerics.BigInteger.op_Increment%2A> 的重复调用可能会消耗大量资源。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1073">Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="b6a90-1074">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1074">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-1075">返回一个值，该值指示两个数值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1075">Returns a value that indicates whether two numeric values are not equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : int64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1076">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1076">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1077">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1077">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1078">返回一个值，该值指示 64 位带符号整数与 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1078">Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1079">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1079"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1080"><xref:System.Numerics.BigInteger.op_Inequality%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义不相等运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1080">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1081">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1081">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]
 [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  
  
 <span data-ttu-id="b6a90-1082">不支持自定义运算符的语言可以通过使用以下方法之一来测试是否不相等：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1082">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="b6a90-1083">调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 实例方法，该方法指示 <xref:System.Numerics.BigInteger> 与有符号长整数值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1083">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="b6a90-1084">调用 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> 实例方法并反转其值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1084">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method and reversing its value.</span></span>  
  
 <span data-ttu-id="b6a90-1085">如果 `left` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1085">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * int64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1086">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1086">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1087">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1087">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1088">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与 64 位带符号整数是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1088">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1089">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1089"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1090"><xref:System.Numerics.BigInteger.op_Inequality%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义不相等运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1090">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1091">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1091">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]
 [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  
  
 <span data-ttu-id="b6a90-1092">不支持自定义运算符的语言可以通过使用以下方法之一来测试是否不相等：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1092">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="b6a90-1093">调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法，该方法指示 <xref:System.Numerics.BigInteger> 与有符号长整数值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1093">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="b6a90-1094">调用 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> 方法并反转其值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1094">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="b6a90-1095">如果 `right` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1095">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-1096">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1096">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1097">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1097">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1098">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1098">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1099">返回一个值，该值指示两个 <see cref="T:System.Numerics.BigInteger" /> 对象是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1099">Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1100">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1100"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1101"><xref:System.Numerics.BigInteger.op_Inequality%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义不相等运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1101">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1102">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1102">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]
 [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  
  
 <span data-ttu-id="b6a90-1103">不支持自定义运算符的语言可以通过使用以下方法之一来测试是否不相等：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1103">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="b6a90-1104">调用 <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> 方法，该方法指示两个 <xref:System.Numerics.BigInteger> 对象之间的关系。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1104">Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.</span></span>  
  
-   <span data-ttu-id="b6a90-1105">调用 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> 方法并反转其值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1105">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="b6a90-1106">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1106">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1107">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1107">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1108">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1108">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1109">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与 64 位无符号整数是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1109">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1110">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1110"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1111"><xref:System.Numerics.BigInteger.op_Inequality%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义不相等运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1111">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1112">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1112">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]
 [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  
  
 <span data-ttu-id="b6a90-1113">不支持自定义运算符的语言可以通过使用以下方法之一来测试是否不相等：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1113">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="b6a90-1114">调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法，该方法指示 <xref:System.Numerics.BigInteger> 与无符号长整数值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1114">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="b6a90-1115">调用 <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> 方法并反转其值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1115">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1116">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1116">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1117">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1117">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1118">返回一个值，该值指示 64 位无符号整数与 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1118">Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1119">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1119"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1120"><xref:System.Numerics.BigInteger.op_Inequality%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义不相等运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1120">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1121">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1121">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]
 [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  
  
 <span data-ttu-id="b6a90-1122">不支持自定义运算符的语言可以通过使用以下方法之一来测试是否不相等：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1122">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="b6a90-1123">调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法，该方法指示 <xref:System.Numerics.BigInteger> 与无符号长整数值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1123">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="b6a90-1124">调用 <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> 方法并反转其值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1124">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_LeftShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &lt;&lt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_LeftShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;&lt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &lt;&lt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &lt;&lt;&lt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &lt;&lt;&lt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1125">要移动其位的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1125">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="b6a90-1126">将 <paramref name="value" /> 向左移动的位数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1126">The number of bits to shift <paramref name="value" /> to the left.</span></span></param>
        <summary><span data-ttu-id="b6a90-1127">将 <see cref="T:System.Numerics.BigInteger" /> 值向左移动指定的位数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1127">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1128">一个已向左移动指定位数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1128">A value that has been shifted to the left by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1129"><xref:System.Numerics.BigInteger.op_LeftShift%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的按位左移运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1129">The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1130">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1130">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]
 [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-1131">与整数基元的按位左移运算不同，<xref:System.Numerics.BigInteger.op_LeftShift%2A> 方法保留原始 <xref:System.Numerics.BigInteger> 值的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1131">Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="b6a90-1132">不支持自定义运算符的语言可以通过将 `value` 乘以 `BigInteger.Pow(2, shift)`来执行按位左移运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1132">Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`.</span></span> <span data-ttu-id="b6a90-1133">下面的示例演示结果与使用此运算符的结果相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1133">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]
 [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-1134">返回一个值，该值指示指定的值是否小于另一个指定的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1134">Returns a value that indicates whether a specified value is less than a second specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1135">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1135">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1136">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1136">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1137">返回一个值，该值指示 64 位带符号整数是否小于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1137">Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1138">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1138"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1139"><xref:System.Numerics.BigInteger.op_LessThan%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1139">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1140">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1140">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]
 [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  
  
 <span data-ttu-id="b6a90-1141">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1141">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1142">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1142">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  
  
 <span data-ttu-id="b6a90-1143">如果 `left` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1143">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-1144">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1144">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1145">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1145">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1146">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1146">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1147">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于 64 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1147">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1148">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1148"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1149"><xref:System.Numerics.BigInteger.op_LessThan%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1149">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1150">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1150">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]
 [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  
  
 <span data-ttu-id="b6a90-1151">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1151">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1152">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1152">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  
  
 <span data-ttu-id="b6a90-1153">如果 `right` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1153">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-1154">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1154">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1155">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1155">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1156">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1156">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1157">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1157">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1158">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1158"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1159"><xref:System.Numerics.BigInteger.op_LessThan%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1159">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1160">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1160">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]
 [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  
  
 <span data-ttu-id="b6a90-1161">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1161">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1162">某些语言还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> 方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1162">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  
  
 <span data-ttu-id="b6a90-1163">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1163">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1164">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1164">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1165">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1165">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1166">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1166">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1167">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1167"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1168"><xref:System.Numerics.BigInteger.op_LessThan%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1168">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1169">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1169">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]
 [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  
  
 <span data-ttu-id="b6a90-1170">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1170">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1171">它们还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> 方法，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1171">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  
  
 <span data-ttu-id="b6a90-1172">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1172">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1173">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1173">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1174">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1174">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1175">返回一个值，该值指示 64 位无符号整数是否小于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1175">Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1176">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1176"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1177"><xref:System.Numerics.BigInteger.op_LessThan%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1177">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1178">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1178">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]
 [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  
  
 <span data-ttu-id="b6a90-1179">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1179">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1180">它们还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> 方法，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1180">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  
  
 <span data-ttu-id="b6a90-1181">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1181">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-1182">返回一个值，该值指示指定的值是否小于等于另一个指定的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1182">Returns a value that indicates whether a specified value is less than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1183">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1183">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1184">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1184">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1185">返回一个值，该值指示 64 位带符号整数是否小于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1185">Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1186">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1186"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1187"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1187">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1188">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1188">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]
 [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  
  
 <span data-ttu-id="b6a90-1189">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1189">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1190">它们还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> 方法，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1190">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  
  
 <span data-ttu-id="b6a90-1191">如果 `left` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1191">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-1192">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1192">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1193">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1193">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1194">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1194">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1195">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于 64 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1195">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1196">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1196"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1197"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1197">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1198">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1198">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]
 [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  
  
 <span data-ttu-id="b6a90-1199">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1199">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1200">它们还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> 方法，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1200">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  
  
 <span data-ttu-id="b6a90-1201">如果 `right` 是 <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>或 <xref:System.UInt32> 值，则在执行操作时，它将隐式转换为 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1201">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="b6a90-1202">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1202">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1203">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1203">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1204">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1204">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1205">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1205">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1206">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1206"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1207"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1207">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1208">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1208">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]
 [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  
  
 <span data-ttu-id="b6a90-1209">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Compare%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1209">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead.</span></span> <span data-ttu-id="b6a90-1210">它们还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> 方法，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1210">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  
  
 <span data-ttu-id="b6a90-1211">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1211">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1212">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1212">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1213">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1213">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1214">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1214">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1215">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1215"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1216"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1216">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1217">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1217">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]
 [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  
  
 <span data-ttu-id="b6a90-1218">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1218">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1219">它们还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> 方法，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1219">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  
  
 <span data-ttu-id="b6a90-1220">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1220">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1221">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1221">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1222">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1222">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1223">返回一个值，该值指示 64 位无符号整数是否小于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1223">Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1224">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1224"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1225"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的小于或等于运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1225">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1226">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1226">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]
 [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  
  
 <span data-ttu-id="b6a90-1227">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1227">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="b6a90-1228">它们还可以直接调用 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> 方法，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1228">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  
  
 <span data-ttu-id="b6a90-1229">此运算符的等效方法是 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1229">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator % (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Modulus(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator %(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( % ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend % divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="b6a90-1230">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1230">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="b6a90-1231">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1231">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="b6a90-1232">返回两个指定 <see cref="T:System.Numerics.BigInteger" /> 值相除所得的余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1232">Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1233">相除所得的余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1233">The remainder that results from the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1234"><xref:System.Numerics.BigInteger.op_Modulus%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的取模运算符的操作。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1234">The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1235">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1235">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]
 [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  
  
 <span data-ttu-id="b6a90-1236">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1236">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="b6a90-1237">取模操作返回的值的符号取决于 `dividend`的符号：如果 `dividend` 为正，则取模操作返回一个正的结果;如果为负，则取模操作返回一个负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1237">The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.</span></span> <span data-ttu-id="b6a90-1238">具有 <xref:System.Numerics.BigInteger> 值的取模运算的行为与其他整型的取模运算相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1238">The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.</span></span>  
  
 <span data-ttu-id="b6a90-1239">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1239">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="b6a90-1240"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1240"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator * (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator *(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1241">要相乘的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1241">The first value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1242">要相乘的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1242">The second value to multiply.</span></span></param>
        <summary><span data-ttu-id="b6a90-1243">两个指定的 <see cref="T:System.Numerics.BigInteger" /> 值相乘。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1243">Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1244"><paramref name="left" /> 与 <paramref name="right" /> 的乘积。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1244">The product of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1245"><xref:System.Numerics.BigInteger.op_Multiply%2A> 方法定义了 <xref:System.Numerics.BigInteger> 值的乘法运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1245">The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1246">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1246">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]
 [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  
  
 <span data-ttu-id="b6a90-1247">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1247">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ~ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_OnesComplement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Not (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ~(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_OnesComplement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_OnesComplement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1248">一个整数值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1248">An integer value.</span></span></param>
        <summary><span data-ttu-id="b6a90-1249">返回 <see cref="T:System.Numerics.BigInteger" /> 值的按位二进制反码。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1249">Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1250"><paramref name="value" /> 的按位二进制反码。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1250">The bitwise one's complement of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1251"><xref:System.Numerics.BigInteger.op_OnesComplement%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的按位求补运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1251">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1252">按位1的补数运算符反转数值中的每个位。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1252">The bitwise one's complement operator reverses each bit in a numeric value.</span></span> <span data-ttu-id="b6a90-1253">也就是说，结果中将为0的 `value` 中的位设置为1，在结果中将为1的位设置为0。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1253">That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result.</span></span> <span data-ttu-id="b6a90-1254"><xref:System.Numerics.BigInteger.op_OnesComplement%2A> 方法启用如下代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1254">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  
  
 <span data-ttu-id="b6a90-1255">不支持自定义运算符的语言可以直接调用 <xref:System.Numerics.BigInteger.op_OnesComplement%2A> 方法，以执行按位 "的求补运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1255">Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation.</span></span> <span data-ttu-id="b6a90-1256">例如：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1256">For example:</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_RightShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &gt;&gt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_RightShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;&gt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &gt;&gt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &gt;&gt;&gt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &gt;&gt;&gt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1257">要移动其位的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1257">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="b6a90-1258">将 <paramref name="value" /> 向右移动的位数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1258">The number of bits to shift <paramref name="value" /> to the right.</span></span></param>
        <summary><span data-ttu-id="b6a90-1259">将 <see cref="T:System.Numerics.BigInteger" /> 值向右移动指定的位数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1259">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1260">一个已向右移动指定位数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1260">A value that has been shifted to the right by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1261"><xref:System.Numerics.BigInteger.op_RightShift%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的按位右移运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1261">The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1262">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1262">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]
 [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  
  
 <span data-ttu-id="b6a90-1263">不支持自定义运算符的语言可以通过将 `value` 除以 `BigInteger.Pow(2, shift)` 并为负值 `shift` 减去1次，来执行按位右移运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1263">Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values.</span></span> <span data-ttu-id="b6a90-1264">下面的示例演示结果与使用此运算符的结果相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1264">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]
 [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  
  
 <span data-ttu-id="b6a90-1265">如果 `shift` 大于或等于正 <xref:System.Numerics.BigInteger> 值中的位数，则右移操作的结果是 <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1265">If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-1266">如果 `shift` 大于负值 <xref:System.Numerics.BigInteger> 值中的位数，则将 <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>右移操作的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1266">If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Subtraction(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1267">要从中减去的值（被减数）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1267">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1268">要减去的值（减数）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1268">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="b6a90-1269">从另一个 <see cref="T:System.Numerics.BigInteger" /> 值中减去 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1269">Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1270"><paramref name="right" /> 减 <paramref name="left" /> 所得的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1270">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1271"><xref:System.Numerics.BigInteger.op_Subtraction%2A> 方法为 <xref:System.Numerics.BigInteger> 值定义减法运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1271">The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1272">它可以实现如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1272">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]
 [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  
  
 <span data-ttu-id="b6a90-1273">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1273">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="b6a90-1274">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1274">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryNegation(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1275">要求反的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1275">The value to negate.</span></span></param>
        <summary><span data-ttu-id="b6a90-1276">对指定的 BigInteger 值求反。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1276">Negates a specified BigInteger value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1277"><paramref name="value" /> 参数乘以负一 (-1) 的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1277">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1278"><xref:System.Numerics.BigInteger.op_UnaryNegation%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的一元求反运算符（或加法逆运算符）的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1278">The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1279">操作将生成一个值，该值将在添加到原始数字时导致为0（零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1279">The operation produces a value that results in 0 (zero) when it is added to the original number.</span></span> <span data-ttu-id="b6a90-1280">不支持自定义运算符的语言可以改为调用 <xref:System.Numerics.BigInteger.Negate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1280">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="b6a90-1281">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b6a90-1281">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="b6a90-1282">下面的示例演示了使用三种不同的方法来否定 <xref:System.Numerics.BigInteger> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1282">The following example illustrates three different ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryPlus(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="+ value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1283">一个整数值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1283">An integer value.</span></span></param>
        <summary><span data-ttu-id="b6a90-1284">返回 <see cref="T:System.Numerics.BigInteger" /> 操作数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1284">Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand.</span></span> <span data-ttu-id="b6a90-1285">（操作数的符号不变。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1285">(The sign of the operand is unchanged.)</span></span></summary>
        <returns><span data-ttu-id="b6a90-1286"><paramref name="value" /> 操作数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1286">The value of the <paramref name="value" /> operand.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1287"><xref:System.Numerics.BigInteger.op_UnaryPlus%2A> 方法定义 <xref:System.Numerics.BigInteger> 值的一元正运算符的运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1287">The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-1288">将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1288">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1289">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1289">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="b6a90-1290">将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1290">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1291">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1291">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1292">`value` 参数应为以下形式的数字的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1292">The `value` parameter should be the string representation of a number in the following form.</span></span>  
  
 <span data-ttu-id="b6a90-1293">[*ws*][*sign*]*数字*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1293">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1294">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1294">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b6a90-1295">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1295">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b6a90-1296">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1296">Element</span></span>|<span data-ttu-id="b6a90-1297">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1297">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b6a90-1298">*ws*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1298">*ws*</span></span>|<span data-ttu-id="b6a90-1299">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1299">Optional white space.</span></span>|  
|<span data-ttu-id="b6a90-1300">*sign*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1300">*sign*</span></span>|<span data-ttu-id="b6a90-1301">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1301">An optional sign.</span></span> <span data-ttu-id="b6a90-1302">有效的符号字符由当前区域性的 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> 和 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> 属性确定。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1302">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="b6a90-1303">*digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1303">*digits*</span></span>|<span data-ttu-id="b6a90-1304">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1304">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="b6a90-1305">任何前导零都将被忽略。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1305">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-1306">使用 <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> 样式来解释由 `value` 参数指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1306">The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="b6a90-1307">它不能包含任何组分隔符或小数分隔符，也不能包含小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1307">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="b6a90-1308">`value` 参数是使用为当前系统区域性初始化 <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> 对象中的格式设置信息分析的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1308">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> object that is initialized for the current system culture.</span></span> <span data-ttu-id="b6a90-1309">有关详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1309">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-1310">若要通过使用特定区域性的格式设置信息分析字符串，请使用 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1310">To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b6a90-1311">如果使用 <xref:System.Numerics.BigInteger.Parse%2A> 方法往返 <xref:System.Numerics.BigInteger.ToString%2A> 方法输出的 <xref:System.Numerics.BigInteger> 值的字符串表示形式，则应将 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> 方法与 "R" 格式说明符一起使用，以生成 <xref:System.Numerics.BigInteger> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1311">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="b6a90-1312">否则，<xref:System.Numerics.BigInteger> 的字符串表示形式仅保留原始值的50最高有效位，并且当你使用 <xref:System.Numerics.BigInteger.Parse%2A> 方法还原 <xref:System.Numerics.BigInteger> 值时，可能会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1312">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1313">下面的示例使用 <xref:System.Numerics.BigInteger.Parse%28System.String%29> 方法来实例化两个 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1313">The following example uses the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="b6a90-1314">它将每个对象乘以另一个数字，然后调用 <xref:System.Numerics.BigInteger.Compare%2A> 方法来确定这两个值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1314">It multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b6a90-1315"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1315"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b6a90-1316"><paramref name="value" /> 的格式不正确。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1316"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1317">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1317">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="b6a90-1318">枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1318">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1319">将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1319">Converts the string representation of a number in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1320">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1320">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1321">`style` 参数定义在 `value` 参数中允许的样式元素（如空格、正号或负号符号、组分隔符符号或小数点符号），以便分析操作成功。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1321">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="b6a90-1322">`styles` 必须是 <xref:System.Globalization.NumberStyles> 枚举中的位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1322">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="b6a90-1323">当 `value` 包含十六进制值的字符串表示形式时，`style` 参数会使此方法重载非常有用，当 `value` 表示的数值系统（十进制或十六进制）仅在运行时已知，或者您想要禁止在 `value`中使用空格或符号符号时。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1323">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="b6a90-1324">根据 `style`的值，`value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1324">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="b6a90-1325">[*ws*][*$*][*sign*][*数字*，]*位数*[。*fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1325">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1326">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>，则 `value` 参数可能包含以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1326">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may contain the following elements:</span></span>  
  
 <span data-ttu-id="b6a90-1327">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1327">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1328">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1328">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b6a90-1329">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1329">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b6a90-1330">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1330">Element</span></span>|<span data-ttu-id="b6a90-1331">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1331">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b6a90-1332">*ws*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1332">*ws*</span></span>|<span data-ttu-id="b6a90-1333">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1333">Optional white space.</span></span> <span data-ttu-id="b6a90-1334">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 标志，则空格可以出现在 `value` 的开头，如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 标志，则它可以出现在 `value` 的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1334">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="b6a90-1335">区域性特定的货币符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1335">A culture-specific currency symbol.</span></span> <span data-ttu-id="b6a90-1336">其在字符串中的位置由当前区域性的 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 和 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 属性定义。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1336">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="b6a90-1337">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 标志，当前区域性的货币符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1337">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1338">*sign*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1338">*sign*</span></span>|<span data-ttu-id="b6a90-1339">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1339">An optional sign.</span></span> <span data-ttu-id="b6a90-1340">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 标志，则符号会出现在 `value` 的开头，如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 标志，则它可以出现在 `value` 的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1340">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b6a90-1341">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 标志，则可以在 `value` 中使用括号来表示负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1341">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1342">*digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1342">*digits*</span></span><br /><br /> <span data-ttu-id="b6a90-1343">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1343">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="b6a90-1344">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1344">*exponential_digits*</span></span>|<span data-ttu-id="b6a90-1345">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1345">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="b6a90-1346">对于*fractional_digits*，只有数字0有效。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1346">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="b6a90-1347">*，*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1347">*,*</span></span>|<span data-ttu-id="b6a90-1348">区域性特定的组分隔符符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1348">A culture-specific group separator symbol.</span></span> <span data-ttu-id="b6a90-1349">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 标志，当前区域性的组分隔符可能出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1349">The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1350">*.*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1350">*.*</span></span>|<span data-ttu-id="b6a90-1351">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1351">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="b6a90-1352">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 标志，当前区域性的小数点符号会出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1352">The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b6a90-1353">只有数字0才能作为小数位出现，以便分析操作成功;如果*fractional_digits*包含任何其他数字，则会引发 <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1353">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="b6a90-1354">E</span><span class="sxs-lookup"><span data-stu-id="b6a90-1354">E</span></span>|<span data-ttu-id="b6a90-1355">"E" 或 "E" 字符，指示值以指数（科学型）表示法表示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1355">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="b6a90-1356">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 标志，则 `value` 参数可以表示指数表示法中的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1356">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1357">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1357">*hexdigits*</span></span>|<span data-ttu-id="b6a90-1358">从0到 f 的十六进制数字序列，或者从0到 F。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1358">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="b6a90-1359">无论 `style` 参数的值是什么，分析操作都将忽略 `s` 中任何终止的 NUL （U + 0000）字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1359">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="b6a90-1360">只包含数字的字符串（对应于 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 样式）始终会成功分析。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1360">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="b6a90-1361">大多数其余 <xref:System.Globalization.NumberStyles> 成员控制可能存在但不需要存在于输入字符串中的元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1361">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="b6a90-1362">下表指示单个 <xref:System.Globalization.NumberStyles> 成员如何影响可能出现在 `value`中的元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1362">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="b6a90-1363">`NumberStyles` 值</span><span class="sxs-lookup"><span data-stu-id="b6a90-1363">`NumberStyles` value</span></span>|<span data-ttu-id="b6a90-1364">`value` 中允许的元素以及数字</span><span class="sxs-lookup"><span data-stu-id="b6a90-1364">Elements permitted in `value` in addition to digits</span></span>|  
|--------------------------|---------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="b6a90-1365">仅限*数字*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1365">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="b6a90-1366">小数点（.）和*小数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1366">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="b6a90-1367">"E" 或 "E" 字符（指示指数表示法）以及*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1367">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="b6a90-1368">`value`开头的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1368">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="b6a90-1369">`value`末尾的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1369">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="b6a90-1370">`value`开头的*sign*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1370">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="b6a90-1371">`value`末尾的*sign*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1371">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="b6a90-1372">用括号括起数值的*符号*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1372">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="b6a90-1373">组分隔符（，）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1373">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="b6a90-1374">货币符号（$）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1374">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="b6a90-1375">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1375">All elements.</span></span> <span data-ttu-id="b6a90-1376">但是，`value` 不能表示十六进制数或以指数表示法表示的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1376">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="b6a90-1377">`value`开头或结尾处的*ws*元素，在 `value`开头处进行签名，并在小数点（*.*）符号处进行*签名*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1377">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="b6a90-1378">`value` 参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1378">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="b6a90-1379">`ws`、`sign`、组分隔符（*、*）和小数点（*.*）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1379">The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="b6a90-1380">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1380">All elements.</span></span> <span data-ttu-id="b6a90-1381">但 `value` 不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1381">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="b6a90-1382">如果使用 <xref:System.Numerics.BigInteger.Parse%2A> 方法往返 <xref:System.Numerics.BigInteger.ToString%2A> 方法输出的 <xref:System.Numerics.BigInteger> 值的字符串表示形式，则应将 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> 方法与 "R" 格式说明符一起使用，以生成 <xref:System.Numerics.BigInteger> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1382">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="b6a90-1383">否则，<xref:System.Numerics.BigInteger> 的字符串表示形式仅保留原始值的50最高有效位，并且当你使用 <xref:System.Numerics.BigInteger.Parse%2A> 方法还原 <xref:System.Numerics.BigInteger> 值时，可能会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1383">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="b6a90-1384">不同于其他 <xref:System.Globalization.NumberStyles> 值，它们允许但不要求在 `value`中存在特定样式元素，<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> 样式值表示 `value` 中的单个数字字符始终解释为十六进制字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1384">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="b6a90-1385">有效的十六进制字符为0-9、A-f 和 a-f。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1385">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="b6a90-1386">可以与 `style` 参数组合的其他标志仅 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 并 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1386">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-1387">（<xref:System.Globalization.NumberStyles> 枚举包含复合数字样式，<xref:System.Globalization.NumberStyles.HexNumber>，其中包含两个空白标志。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1387">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-1388">如果 `value` 是十六进制数的字符串表示形式，则它的前面不能有将其视为十六进制数的任何修饰（如 `0x` 或 `&h`）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1388">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="b6a90-1389">这将导致转换失败。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1389">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="b6a90-1390">如果 `value` 是十六进制字符串，则 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 方法会将 `value` 解释为使用两个补数表示形式存储的负数（如果它的前两个十六进制数字大于或等于 `0x80`）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1390">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="b6a90-1391">换言之，该方法将 `value` 中第一个字节的最高序位解释为符号位。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1391">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="b6a90-1392">若要确保十六进制字符串正确解释为正数，`value` 中的第一个数字的值必须为零。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1392">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="b6a90-1393">例如，方法将 `0x80` 解释为负值，但会将 `0x080` 或 `0x0080` 解释为正值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1393">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="b6a90-1394">下面的示例演示表示负值和正值的十六进制字符串之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1394">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="b6a90-1395">`value` 参数是使用为当前系统区域性初始化 <xref:System.Globalization.NumberFormatInfo> 对象中的格式设置信息分析的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1395">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="b6a90-1396">若要指定其格式设置信息用于分析操作的区域性，请调用 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 重载。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1396">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1397">下面的示例演示对 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 方法的调用，其中包含 `style` 参数的几个可能的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1397">The following example illustrates calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method with several possible values for the `style` parameter.</span></span> <span data-ttu-id="b6a90-1398">它演示如何将字符串解释为十六进制值，以及如何禁止空格和符号符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1398">It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b6a90-1399"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1399"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b6a90-1400">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b6a90-1400">-or-</span></span> 
 <span data-ttu-id="b6a90-1401"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1401"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b6a90-1402"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1402"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b6a90-1403"><paramref name="value" /> 不符合由 <see cref="T:System.Globalization.NumberStyles" /> 指定的输入模式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1403"><paramref name="value" /> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1404">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1404">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="b6a90-1405">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1405">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1406">将指定的区域性特定格式的数字字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1406">Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1407">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1407">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1408">`value` 参数应为以下形式的数字的字符串表示形式：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1408">The `value` parameter should be the string representation of a number in the following form:</span></span>  
  
 <span data-ttu-id="b6a90-1409">[*ws*][*sign*]*数字*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1409">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1410">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1410">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b6a90-1411">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1411">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b6a90-1412">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1412">Element</span></span>|<span data-ttu-id="b6a90-1413">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1413">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b6a90-1414">*ws*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1414">*ws*</span></span>|<span data-ttu-id="b6a90-1415">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1415">Optional white space.</span></span>|  
|<span data-ttu-id="b6a90-1416">*sign*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1416">*sign*</span></span>|<span data-ttu-id="b6a90-1417">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1417">An optional sign.</span></span> <span data-ttu-id="b6a90-1418">有效的符号字符由 `provider` 对象的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回的 <xref:System.Globalization.NumberFormatInfo> 对象的 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> 和 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> 属性确定。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1418">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.</span></span>|  
|<span data-ttu-id="b6a90-1419">*digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1419">*digits*</span></span>|<span data-ttu-id="b6a90-1420">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1420">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="b6a90-1421">任何前导零都将被忽略。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1421">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-1422">使用 <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> 样式解释 `value` 参数指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1422">The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="b6a90-1423">它不能包含任何组分隔符或小数分隔符，也不能包含小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1423">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b6a90-1424">如果使用 <xref:System.Numerics.BigInteger.Parse%2A> 方法往返 <xref:System.Numerics.BigInteger.ToString%2A> 方法输出的 <xref:System.Numerics.BigInteger> 值的字符串表示形式，则应将 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> 方法与 "R" 格式说明符一起使用，以生成 <xref:System.Numerics.BigInteger> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1424">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="b6a90-1425">否则，<xref:System.Numerics.BigInteger> 的字符串表示形式仅保留原始值的50最高有效位，并且当你使用 <xref:System.Numerics.BigInteger.Parse%2A> 方法还原 <xref:System.Numerics.BigInteger> 值时，可能会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1425">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="b6a90-1426">`provider` 参数是一个 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回提供区域性特定格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1426">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="b6a90-1427">调用 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> 方法时，它将调用 `provider` 参数的 <xref:System.IFormatProvider.GetFormat%2A> 方法，并向其传递一个表示 <xref:System.Globalization.NumberFormatInfo> 类型的 <xref:System.Type> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1427">When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="b6a90-1428">然后 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供有关 `value` 参数格式的信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1428">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter.</span></span> <span data-ttu-id="b6a90-1429">有三种方法可以使用 `provider` 参数向分析操作提供自定义格式设置信息：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1429">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="b6a90-1430">可以传递表示提供格式设置信息的区域性的 <xref:System.Globalization.CultureInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1430">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="b6a90-1431">它的 <xref:System.Globalization.CultureInfo.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供该区域性的数字格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1431">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="b6a90-1432">可以传递提供数字格式设置信息的实际 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1432">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="b6a90-1433">（其 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 的实现只返回自身。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1433">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="b6a90-1434">可以传递实现 <xref:System.IFormatProvider>的自定义对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1434">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="b6a90-1435">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法实例化并返回提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1435">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="b6a90-1436">如果 `null``provider`，则将根据当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象来解释 `value` 的格式设置。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1436">If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1437">下面的示例演示了两种将颚化符（~）定义为负数格式 <xref:System.Numerics.BigInteger> 值的方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1437">The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="b6a90-1438">请注意，若要显示与原始字符串格式相同的 <xref:System.Numerics.BigInteger> 值，你的代码必须调用 <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 方法并向其传递提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1438">Note that to display the <xref:System.Numerics.BigInteger> values in the same format as the original strings, your code must call the <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> method and pass it the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="b6a90-1439">第一个示例定义一个实现 <xref:System.IFormatProvider> 的类，并使用 <xref:System.IFormatProvider.GetFormat%2A> 方法返回提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1439">The first example defines a class that implements <xref:System.IFormatProvider> and uses the <xref:System.IFormatProvider.GetFormat%2A> method to return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  
  
 <span data-ttu-id="b6a90-1440">然后，可以使用以下代码实例化 <xref:System.Numerics.BigInteger> 对象：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1440">A <xref:System.Numerics.BigInteger> object can then be instantiated with the following code:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  
  
 <span data-ttu-id="b6a90-1441">第二个示例更简单。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1441">The second example is more straightforward.</span></span> <span data-ttu-id="b6a90-1442">它将提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象传递给 `provider` 参数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1442">It passes the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information to the `provider` parameter.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b6a90-1443"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1443"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b6a90-1444"><paramref name="value" /> 的格式不正确。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1444"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As BigInteger" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1445">字符的只读范围，其中包含要转换的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1445">A read-only span of characters that contains the number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="b6a90-1446">枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1446">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b6a90-1447">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1447">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1448">以指定的样式将包含在指定的字符只读范围内的数字表示形式转换为其 <see cref="T:System.Numerics.BigInteger" /> 等效项。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1448">Converts the representation of a number, contained in the specified read-only span of characters, in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1449">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1449">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b6a90-1450">`style` 参数定义在 `value` 参数中允许的样式元素（如空格、正号或负号符号、组分隔符符号或小数点符号），以便分析操作成功。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1450">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="b6a90-1451">`styles` 必须是 <xref:System.Globalization.NumberStyles> 枚举中的位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1451">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="b6a90-1452">当 `value` 包含十六进制值的表示形式时，`style` 参数会使此方法重载非常有用，当 `value` 表示的数字系统（十进制或十六进制）仅在运行时已知，或者当你要禁止在 `value`中使用空格或符号符号时。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1452">The `style` parameter makes this method overload useful when `value` contains the representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>

<span data-ttu-id="b6a90-1453">根据 `style`的值，`value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1453">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>

<span data-ttu-id="b6a90-1454">[*ws*][*$*][*sign*][*数字*，]*位数*[*. Fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1454">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>

<span data-ttu-id="b6a90-1455">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>，则 `value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1455">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may include the following elements:</span></span>

<span data-ttu-id="b6a90-1456">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1456">[*ws*]*hexdigits*[*ws*]</span></span>

<span data-ttu-id="b6a90-1457">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1457">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b6a90-1458">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1458">The following table describes each element.</span></span>

|<span data-ttu-id="b6a90-1459">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1459">Element</span></span>|<span data-ttu-id="b6a90-1460">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1460">Description</span></span>|
|-------------|-----------------|
|<span data-ttu-id="b6a90-1461">*ws*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1461">*ws*</span></span>|<span data-ttu-id="b6a90-1462">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1462">Optional white space.</span></span> <span data-ttu-id="b6a90-1463">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 标志，则空格可以出现在 `value` 的开头，如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 标志，则它可以出现在 `value` 的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1463">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|
|*$*|<span data-ttu-id="b6a90-1464">区域性特定的货币符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1464">A culture-specific currency symbol.</span></span> <span data-ttu-id="b6a90-1465">它在 `value` 中的位置由 `provider` 参数所指示的区域性的 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 和 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 属性定义。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1465">Its position in `value` is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the culture indicated by the `provider` parameter.</span></span> <span data-ttu-id="b6a90-1466">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 标志，当前区域性的货币符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1466">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1467">*sign*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1467">*sign*</span></span>|<span data-ttu-id="b6a90-1468">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1468">An optional sign.</span></span> <span data-ttu-id="b6a90-1469">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 标志，则符号会出现在 `value` 的开头，如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 标志，则它可以出现在 `value` 的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1469">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b6a90-1470">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 标志，则可以在 `value` 中使用括号来表示负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1470">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1471">*digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1471">*digits*</span></span><br /><br /> <span data-ttu-id="b6a90-1472">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1472">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="b6a90-1473">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1473">*exponential_digits*</span></span>|<span data-ttu-id="b6a90-1474">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1474">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="b6a90-1475">对于*fractional_digits*，只有数字0有效。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1475">For *fractional_digits*, only the digit 0 is valid.</span></span>|
|<span data-ttu-id="b6a90-1476">*，*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1476">*,*</span></span>|<span data-ttu-id="b6a90-1477">区域性特定的组分隔符符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1477">A culture-specific group separator symbol.</span></span> <span data-ttu-id="b6a90-1478">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 标志，则 `provider` 指定的区域性的组分隔符符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1478">The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1479">*.*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1479">*.*</span></span>|<span data-ttu-id="b6a90-1480">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1480">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="b6a90-1481">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 标志，则 `provider` 指定的区域性的小数点符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1481">The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b6a90-1482">只有数字0才能作为小数位出现，以便分析操作成功;如果*fractional_digits*包含任何其他数字，则会引发 <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1482">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|
|<span data-ttu-id="b6a90-1483">E</span><span class="sxs-lookup"><span data-stu-id="b6a90-1483">E</span></span>|<span data-ttu-id="b6a90-1484">"E" 或 "E" 字符，指示值以指数（科学型）表示法表示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1484">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="b6a90-1485">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 标志，则 `value` 参数可以表示指数表示法中的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1485">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1486">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1486">*hexdigits*</span></span>|<span data-ttu-id="b6a90-1487">从0到 f 的十六进制数字序列，或者从0到 F。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1487">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|

> [!NOTE]
> <span data-ttu-id="b6a90-1488">无论 `style` 参数的值是什么，分析操作都将忽略 `s` 中任何终止的 NUL （U + 0000）字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1488">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

<span data-ttu-id="b6a90-1489">仅使用数字（对应于 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 样式）的 `value` 始终会成功分析。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1489">A `value` with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="b6a90-1490">大多数其余 <xref:System.Globalization.NumberStyles> 成员控制可能存在但不需要存在于 `value`中的元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1490">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in `value`.</span></span> <span data-ttu-id="b6a90-1491">下表指示单个 <xref:System.Globalization.NumberStyles> 成员如何影响可能出现在 `value`中的元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1491">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>

|<span data-ttu-id="b6a90-1492">NumberStyles 值</span><span class="sxs-lookup"><span data-stu-id="b6a90-1492">NumberStyles value</span></span>|<span data-ttu-id="b6a90-1493">除了数字以外，还允许在值中使用元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1493">Elements permitted in value in addition to digits</span></span>|
|------------------------|-------------------------------------------------------|
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="b6a90-1494">仅限*数字*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1494">The *digits* element only.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="b6a90-1495">小数点（.）和*小数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1495">The decimal point (.) and *fractional-digits* elements.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="b6a90-1496">"E" 或 "E" 字符，指示指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1496">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="b6a90-1497">以及*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1497">along with *exponential_digits*.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="b6a90-1498">`value`开头的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1498">The *ws* element at the start of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="b6a90-1499">`value`末尾的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1499">The *ws* element at the end of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="b6a90-1500">`value`开头的*sign*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1500">The *sign* element at the start of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="b6a90-1501">`value`末尾的*sign*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1501">The *sign* element at the end of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="b6a90-1502">用括号括起数值的*符号*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1502">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="b6a90-1503">组分隔符（，）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1503">The group separator (,) element.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="b6a90-1504">货币符号（$）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1504">The currency ($) element.</span></span>|
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="b6a90-1505">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1505">All elements.</span></span> <span data-ttu-id="b6a90-1506">但是，`value` 不能表示十六进制数或以指数表示法表示的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1506">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="b6a90-1507">`value`开头或结尾处的*ws*元素，在 `value`开头处进行签名，并在小数点（.）符号处进行*签名*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1507">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="b6a90-1508">`value` 参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1508">The `value` parameter can also use exponential notation.</span></span>|
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="b6a90-1509">`ws`、`sign`、组分隔符（、）和小数点（.）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1509">The `ws`, `sign`, group separator (,), and decimal point (.) elements.</span></span>|
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="b6a90-1510">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1510">All elements.</span></span> <span data-ttu-id="b6a90-1511">但 `value` 不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1511">However, `value` cannot represent a hexadecimal number.</span></span>|

<span data-ttu-id="b6a90-1512">与其他 <xref:System.Globalization.NumberStyles> 值不同，它们允许但不要求 `value`中存在特定样式元素，<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> 样式值表示 `value` 中的单个数字字符始终解释为十六进制字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1512">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="b6a90-1513">有效的十六进制字符为0-9、A-f 和 a-f。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1513">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="b6a90-1514">可以与 `style` 参数组合的其他标志仅 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 并 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1514">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-1515">（<xref:System.Globalization.NumberStyles> 枚举包含复合数字样式，<xref:System.Globalization.NumberStyles.HexNumber>，其中包含两个空白标志。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1515">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>


<span data-ttu-id="b6a90-1516">`provider` 参数是一个 <xref:System.IFormatProvider> 实现。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1516">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="b6a90-1517">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回一个 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供有关 `value`格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1517">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="b6a90-1518">通常，`provider` 可以是以下任一项：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1518">Typically, `provider` can be any one of the following:</span></span>

-   <span data-ttu-id="b6a90-1519">一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示提供数字格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1519">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="b6a90-1520">它的 <xref:System.Globalization.CultureInfo.GetFormat%2A> 方法返回提供数字格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1520">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>

-   <span data-ttu-id="b6a90-1521">提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1521">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="b6a90-1522">（其 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 的实现只返回自身。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1522">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>

-   <span data-ttu-id="b6a90-1523">一个实现 <xref:System.IFormatProvider> 并使用 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 方法来实例化和返回提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象的自定义对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1523">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>

<span data-ttu-id="b6a90-1524">如果 `null``provider`，则使用当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1524">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b6a90-1525"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1525"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b6a90-1526">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b6a90-1526">-or-</span></span> 
 <span data-ttu-id="b6a90-1527"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1527"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b6a90-1528"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1528"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b6a90-1529"><paramref name="value" /> 不符合由 <paramref name="style" /> 指定的输入模式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1529"><paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1530">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1530">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="b6a90-1531">枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1531">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b6a90-1532">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1532">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1533">将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1533">Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1534">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1534">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1535">`style` 参数定义在 `value` 参数中允许的样式元素（如空格、正号或负号符号、组分隔符符号或小数点符号），以便分析操作成功。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1535">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="b6a90-1536">`styles` 必须是 <xref:System.Globalization.NumberStyles> 枚举中的位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1536">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="b6a90-1537">当 `value` 包含十六进制值的字符串表示形式时，`style` 参数会使此方法重载非常有用，当 `value` 表示的数值系统（十进制或十六进制）仅在运行时已知，或者您想要禁止在 `value`中使用空格或符号符号时。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1537">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="b6a90-1538">根据 `style`的值，`value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1538">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="b6a90-1539">[*ws*][*$*][*sign*][*数字*，]*位数*[*. Fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1539">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1540">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>，则 `value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1540">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="b6a90-1541">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1541">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1542">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1542">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b6a90-1543">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1543">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b6a90-1544">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1544">Element</span></span>|<span data-ttu-id="b6a90-1545">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1545">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b6a90-1546">*ws*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1546">*ws*</span></span>|<span data-ttu-id="b6a90-1547">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1547">Optional white space.</span></span> <span data-ttu-id="b6a90-1548">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 标志，则空格可以出现在 `value` 的开头，如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 标志，则它可以出现在 `value` 的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1548">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="b6a90-1549">区域性特定的货币符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1549">A culture-specific currency symbol.</span></span> <span data-ttu-id="b6a90-1550">其在字符串中的位置由 `provider` 参数指示的区域性的 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 和 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 属性定义。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1550">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the culture indicated by the `provider` parameter.</span></span> <span data-ttu-id="b6a90-1551">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 标志，当前区域性的货币符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1551">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1552">*sign*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1552">*sign*</span></span>|<span data-ttu-id="b6a90-1553">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1553">An optional sign.</span></span> <span data-ttu-id="b6a90-1554">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 标志，则符号会出现在 `value` 的开头，如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 标志，则它可以出现在 `value` 的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1554">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b6a90-1555">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 标志，则可以在 `value` 中使用括号来表示负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1555">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1556">*digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1556">*digits*</span></span><br /><br /> <span data-ttu-id="b6a90-1557">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1557">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="b6a90-1558">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1558">*exponential_digits*</span></span>|<span data-ttu-id="b6a90-1559">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1559">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="b6a90-1560">对于*fractional_digits*，只有数字0有效。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1560">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="b6a90-1561">*，*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1561">*,*</span></span>|<span data-ttu-id="b6a90-1562">区域性特定的组分隔符符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1562">A culture-specific group separator symbol.</span></span> <span data-ttu-id="b6a90-1563">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 标志，则 `provider` 指定的区域性的组分隔符符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1563">The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1564">*.*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1564">*.*</span></span>|<span data-ttu-id="b6a90-1565">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1565">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="b6a90-1566">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 标志，则 `provider` 指定的区域性的小数点符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1566">The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b6a90-1567">只有数字0才能作为小数位出现，以便分析操作成功;如果*fractional_digits*包含任何其他数字，则会引发 <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1567">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="b6a90-1568">E</span><span class="sxs-lookup"><span data-stu-id="b6a90-1568">E</span></span>|<span data-ttu-id="b6a90-1569">"E" 或 "E" 字符，指示值以指数（科学型）表示法表示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1569">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="b6a90-1570">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 标志，则 `value` 参数可以表示指数表示法中的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1570">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1571">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1571">*hexdigits*</span></span>|<span data-ttu-id="b6a90-1572">从0到 f 的十六进制数字序列，或者从0到 F。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1572">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="b6a90-1573">无论 `style` 参数的值是什么，分析操作都将忽略 `s` 中任何终止的 NUL （U + 0000）字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1573">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="b6a90-1574">只包含数字的字符串（对应于 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 样式）始终会成功分析。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1574">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="b6a90-1575">大多数其余 <xref:System.Globalization.NumberStyles> 成员控制可能存在但不需要存在于输入字符串中的元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1575">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="b6a90-1576">下表指示单个 <xref:System.Globalization.NumberStyles> 成员如何影响可能出现在 `value`中的元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1576">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="b6a90-1577">NumberStyles 值</span><span class="sxs-lookup"><span data-stu-id="b6a90-1577">NumberStyles value</span></span>|<span data-ttu-id="b6a90-1578">除了数字以外，还允许在值中使用元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1578">Elements permitted in value in addition to digits</span></span>|  
|------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="b6a90-1579">仅限*数字*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1579">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="b6a90-1580">小数点（.）和*小数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1580">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="b6a90-1581">"E" 或 "E" 字符，指示指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1581">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="b6a90-1582">以及*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1582">along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="b6a90-1583">`value`开头的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1583">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="b6a90-1584">`value`末尾的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1584">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="b6a90-1585">`value`开头的*sign*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1585">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="b6a90-1586">`value`末尾的*sign*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1586">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="b6a90-1587">用括号括起数值的*符号*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1587">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="b6a90-1588">组分隔符（，）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1588">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="b6a90-1589">货币符号（$）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1589">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="b6a90-1590">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1590">All elements.</span></span> <span data-ttu-id="b6a90-1591">但是，`value` 不能表示十六进制数或以指数表示法表示的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1591">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="b6a90-1592">`value`开头或结尾处的*ws*元素，在 `value`开头处进行签名，并在小数点（.）符号处进行*签名*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1592">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="b6a90-1593">`value` 参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1593">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="b6a90-1594">`ws`、`sign`、组分隔符（、）和小数点（.）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1594">The `ws`, `sign`, group separator (,), and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="b6a90-1595">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1595">All elements.</span></span> <span data-ttu-id="b6a90-1596">但 `value` 不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1596">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="b6a90-1597">如果使用 <xref:System.Numerics.BigInteger.Parse%2A> 方法往返 <xref:System.Numerics.BigInteger.ToString%2A> 方法输出的 <xref:System.Numerics.BigInteger> 值的字符串表示形式，则应将 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> 方法与 "R" 格式说明符一起使用，以生成 <xref:System.Numerics.BigInteger> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1597">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="b6a90-1598">否则，<xref:System.Numerics.BigInteger> 的字符串表示形式仅保留原始值的50最高有效位，并且当你使用 <xref:System.Numerics.BigInteger.Parse%2A> 方法还原 <xref:System.Numerics.BigInteger> 值时，可能会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1598">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="b6a90-1599">与其他 <xref:System.Globalization.NumberStyles> 值不同，它们允许但不要求 `value`中存在特定样式元素，<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> 样式值表示 `value` 中的单个数字字符始终解释为十六进制字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1599">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="b6a90-1600">有效的十六进制字符为0-9、A-f 和 a-f。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1600">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="b6a90-1601">可以与 `style` 参数组合的其他标志仅 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 并 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1601">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-1602">（<xref:System.Globalization.NumberStyles> 枚举包含复合数字样式，<xref:System.Globalization.NumberStyles.HexNumber>，其中包含两个空白标志。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1602">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-1603">如果 `value` 是十六进制数的字符串表示形式，则它的前面不能有将其视为十六进制数的任何修饰（如 `0x` 或 `&h`）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1603">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="b6a90-1604">这将导致转换失败。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1604">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="b6a90-1605">如果 `value` 是十六进制字符串，则 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 方法会将 `value` 解释为使用两个补数表示形式存储的负数（如果它的前两个十六进制数字大于或等于 `0x80`）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1605">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="b6a90-1606">换言之，该方法将 `value` 中第一个字节的最高序位解释为符号位。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1606">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="b6a90-1607">若要确保十六进制字符串正确解释为正数，`value` 中的第一个数字的值必须为零。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1607">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="b6a90-1608">例如，方法将 `0x80` 解释为负值，但会将 `0x080` 或 `0x0080` 解释为正值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1608">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="b6a90-1609">下面的示例演示表示负值和正值的十六进制字符串之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1609">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="b6a90-1610">`provider` 参数是一个 <xref:System.IFormatProvider> 实现。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1610">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="b6a90-1611">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回一个 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供有关 `value`格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1611">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="b6a90-1612">通常，`provider` 可以是以下任一项：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1612">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="b6a90-1613">一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示提供数字格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1613">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="b6a90-1614">它的 <xref:System.Globalization.CultureInfo.GetFormat%2A> 方法返回提供数字格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1614">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="b6a90-1615">提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1615">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="b6a90-1616">（其 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 的实现只返回自身。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1616">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="b6a90-1617">一个实现 <xref:System.IFormatProvider> 并使用 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 方法来实例化和返回提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象的自定义对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1617">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="b6a90-1618">如果 `null``provider`，则使用当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1618">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1619">下面的示例使用 `style` 和 `provider` 参数的值的各种组合对 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 方法进行多次调用。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1619">The following example makes several calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  
  
 <span data-ttu-id="b6a90-1620">对 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 方法的单个调用会传递以下 `BigIntegerFormatProvider` 类的实例，该类将一个波形符（~）定义为负号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1620">A number of the individual calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b6a90-1621"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1621"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b6a90-1622">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b6a90-1622">-or-</span></span> 
 <span data-ttu-id="b6a90-1623"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1623"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b6a90-1624"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1624"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b6a90-1625"><paramref name="value" /> 不符合由 <paramref name="style" /> 指定的输入模式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1625"><paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Pow(valuetype System.Numerics.BigInteger value, int32 exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As BigInteger, exponent As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Pow(System::Numerics::BigInteger value, int exponent);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Pow (value, exponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1626">要计算 <paramref name="exponent" /> 次幂的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1626">The number to raise to the <paramref name="exponent" /> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="b6a90-1627">对 <paramref name="value" /> 进行幂运算的指数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1627">The exponent to raise <paramref name="value" /> by.</span></span></param>
        <summary><span data-ttu-id="b6a90-1628">求以 <see cref="T:System.Numerics.BigInteger" /> 值为底、以指定的值为指数的幂。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1628">Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1629"><paramref name="value" /> 的 <paramref name="exponent" /> 次幂的计算结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1629">The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1630">如果指数参数的值为0，或者 `value` 和 `exponent` 参数的值均为0，则 <xref:System.Numerics.BigInteger.Pow%2A> 方法返回1。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1630">The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0.</span></span> <span data-ttu-id="b6a90-1631">如果 `exponent` 为1，则 <xref:System.Numerics.BigInteger.Pow%2A> 方法返回 `value`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1631">If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`.</span></span> <span data-ttu-id="b6a90-1632">如果 `value` 为负数，则该方法将返回负结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1632">If `value` is negative, the method returns a negative result.</span></span>  
  
 <span data-ttu-id="b6a90-1633">此方法对应于基元数值类型的 <xref:System.Math.Pow%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1633">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1634">下面的示例演示了使用 <xref:System.Numerics.BigInteger> 值和一个其值范围从0到10的指数的幂运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1634">The following example illustrates exponentiation using a <xref:System.Numerics.BigInteger> value and an exponent whose value ranges from 0 to 10.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]
 [!code-vb[System.Numeric.BigInteger.Class#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b6a90-1635"><paramref name="exponent" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1635"><paramref name="exponent" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Remainder(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remainder (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Remainder(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Remainder : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Remainder (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="b6a90-1636">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1636">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="b6a90-1637">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1637">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="b6a90-1638">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行整除并返回余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1638">Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1639">将 <paramref name="dividend" /> 除以 <paramref name="divisor" /> 后的余数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1639">The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1640">余数的符号是 `dividend` 参数的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1640">The sign of the remainder is the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="b6a90-1641">为不支持自定义运算符的语言实现 <xref:System.Numerics.BigInteger.Remainder%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1641">The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="b6a90-1642">它的行为与使用取模运算符的除法相同。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1642">Its behavior is identical to division using the modulus operator.</span></span>  
  
 <span data-ttu-id="b6a90-1643">如有必要，该方法将在执行取模操作之前自动执行其他整型类型到 <xref:System.Numerics.BigInteger> 对象的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1643">If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1644">下面的示例将 <xref:System.Numerics.BigInteger.DivRem%2A> 方法的余数与 <xref:System.Numerics.BigInteger.Remainder%2A> 方法返回的余数进行比较，以确定两个方法计算的余数是相同的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1644">The following example compares the remainder from the <xref:System.Numerics.BigInteger.DivRem%2A> method with the remainder returned by the <xref:System.Numerics.BigInteger.Remainder%2A> method to establish that the two methods calculate identical remainders.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="b6a90-1645"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1645"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public int Sign { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sign" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Sign" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sign As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Sign { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Sign : int" Usage="System.Numerics.BigInteger.Sign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b6a90-1646">获取一个数字，该数字指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的符号（负、正或零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1646">Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <value><span data-ttu-id="b6a90-1647">一个指示 <see cref="T:System.Numerics.BigInteger" /> 对象的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1647">A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b6a90-1648">数字</span><span class="sxs-lookup"><span data-stu-id="b6a90-1648">Number</span></span> 
 </term><description> <span data-ttu-id="b6a90-1649">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1649">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b6a90-1650">-1</span><span class="sxs-lookup"><span data-stu-id="b6a90-1650">-1</span></span> 
 </term><description> <span data-ttu-id="b6a90-1651">此对象的值为负。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1651">The value of this object is negative.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-1652">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-1652">0</span></span> 
 </term><description> <span data-ttu-id="b6a90-1653">此对象的值为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1653">The value of this object is 0 (zero).</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b6a90-1654">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-1654">1</span></span> 
 </term><description> <span data-ttu-id="b6a90-1655">此对象的值为正。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1655">The value of this object is positive.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1656"><xref:System.Numerics.BigInteger.Sign%2A> 属性等效于基元数值类型的 <xref:System.Math.Sign%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1656">The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Subtract(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Subtract(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b6a90-1657">要从中减去的值（被减数）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1657">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="b6a90-1658">要减去的值（减数）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1658">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="b6a90-1659">从另一个值中减去一个 <see cref="T:System.Numerics.BigInteger" /> 值并返回结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1659">Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1660"><paramref name="right" /> 减 <paramref name="left" /> 所得的结果。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1660">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1661">不支持自定义运算符的语言可以使用 <xref:System.Numerics.BigInteger.Subtract%2A> 方法来使用 <xref:System.Numerics.BigInteger> 值执行减法运算。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1661">Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="b6a90-1662">在实例化 <xref:System.Numerics.BigInteger> 变量时，<xref:System.Numerics.BigInteger.Subtract%2A> 方法对于减法运算符是一种有用的替代方法，这是通过将该变量的结果赋给该变量，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1662">The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="bigInteger.System.IComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b6a90-1663">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1663">The object to compare.</span></span></param>
        <summary><span data-ttu-id="b6a90-1664">将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1664">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1665">一个带符号整数，指示当前实例与 <paramref name="obj" /> 参数的关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1665">A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.</span></span>
          <list type="table"><listheader><term> <span data-ttu-id="b6a90-1666">返回值</span><span class="sxs-lookup"><span data-stu-id="b6a90-1666">Return value</span></span></term><description> <span data-ttu-id="b6a90-1667">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1667">Description</span></span></description></listheader><item><term> <span data-ttu-id="b6a90-1668">小于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-1668">Less than zero</span></span></term><description> <span data-ttu-id="b6a90-1669">当前实例小于 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1669">The current instance is less than <paramref name="obj" />.</span></span></description></item><item><term> <span data-ttu-id="b6a90-1670">零</span><span class="sxs-lookup"><span data-stu-id="b6a90-1670">Zero</span></span></term><description> <span data-ttu-id="b6a90-1671">当前实例等于 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1671">The current instance equals <paramref name="obj" />.</span></span></description></item><item><term> <span data-ttu-id="b6a90-1672">大于零</span><span class="sxs-lookup"><span data-stu-id="b6a90-1672">Greater than zero</span></span></term><description> <span data-ttu-id="b6a90-1673">当前实例大于 <paramref name="obj" />，或者 <paramref name="obj" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1673">The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</span></span></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="b6a90-1674">`obj` 参数必须为以下参数之一：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1674">The `obj` parameter must be one of the following:</span></span>

-   <span data-ttu-id="b6a90-1675"><xref:System.Numerics.BigInteger>其运行时类型的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1675">An object whose run-time type is <xref:System.Numerics.BigInteger>.</span></span>

-   <span data-ttu-id="b6a90-1676">值为 `null`的 <xref:System.Object> 变量。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1676">An <xref:System.Object> variable whose value is `null`.</span></span> <span data-ttu-id="b6a90-1677">如果 `null``obj` 参数的值，则该方法将返回1，指示当前实例大于 `obj`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1677">If the value of the `obj` parameter is `null`, the method returns 1, which indicates that the current instance is greater than `obj`.</span></span>

## Examples

<span data-ttu-id="b6a90-1678">下面的示例调用 <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> 方法，将 <xref:System.Numerics.BigInteger> 值与对象数组中的每个元素进行比较：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1678">The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array:</span></span>

[!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
[!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b6a90-1679"><paramref name="obj" /> 不是 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1679"><paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ToByteArray();" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : unit -&gt; byte[]" Usage="bigInteger.ToByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b6a90-1680">将 <see cref="T:System.Numerics.BigInteger" /> 值转换为字节数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1680">Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1681">转换为字节数组的当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1681">The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1682">此方法返回的数组中的单个字节以小字节序顺序显示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1682">The individual bytes in the array returned by this method appear in little-endian order.</span></span> <span data-ttu-id="b6a90-1683">也就是说，值的低序位字节优先于高阶字节。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1683">That is, the lower-order bytes of the value precede the higher-order bytes.</span></span> <span data-ttu-id="b6a90-1684">数组的第一个字节反映 <xref:System.Numerics.BigInteger> 值的前八位，第二个字节反映后八位，依此类推。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1684">The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on.</span></span> <span data-ttu-id="b6a90-1685">例如，值1024或0x0400 存储为以下两个字节的数组：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1685">For example, the value 1024, or 0x0400, is stored as the following array of two bytes:</span></span>  
  
|<span data-ttu-id="b6a90-1686">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1686">Element</span></span>|<span data-ttu-id="b6a90-1687">字节值</span><span class="sxs-lookup"><span data-stu-id="b6a90-1687">Byte value</span></span>|  
|-------------|----------------|  
|<span data-ttu-id="b6a90-1688">0</span><span class="sxs-lookup"><span data-stu-id="b6a90-1688">0</span></span>|<span data-ttu-id="b6a90-1689">0x00</span><span class="sxs-lookup"><span data-stu-id="b6a90-1689">0x00</span></span>|  
|<span data-ttu-id="b6a90-1690">1</span><span class="sxs-lookup"><span data-stu-id="b6a90-1690">1</span></span>|<span data-ttu-id="b6a90-1691">0x04</span><span class="sxs-lookup"><span data-stu-id="b6a90-1691">0x04</span></span>|  
  
 <span data-ttu-id="b6a90-1692">负值将使用最简洁形式的2的补码表示形式写入数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1692">Negative values are written to the array using two's complement representation in the most compact form possible.</span></span> <span data-ttu-id="b6a90-1693">例如，-1 表示为单个字节，其值为 `0xFF` 而不是包含多个元素的数组，如 `0xFF`、`0xFF` 或 `0xFF`、`0xFF`、`0xFF`、`0xFF`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1693">For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.</span></span>  
  
 <span data-ttu-id="b6a90-1694">由于两个补数表示法始终解释数组中最后一个字节（位置 <xref:System.Array.Length%2A?displayProperty=nameWithType>`- 1`）的最高序位，因此该方法返回一个字节数组，该数组包含一个值为零的额外元素，以消除可解释为其符号位设置的正值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1694">Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=nameWithType>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set.</span></span> <span data-ttu-id="b6a90-1695">例如，值120或 `0x78` 表示为单字节数组： `0x78`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1695">For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`.</span></span> <span data-ttu-id="b6a90-1696">但是，128或 `0x80`表示为两个字节的数组： `0x80`，`0x00`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1696">However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.</span></span>  
  
 <span data-ttu-id="b6a90-1697">你可以通过将 <xref:System.Numerics.BigInteger> 值存储到字节数组中，然后使用 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 构造函数将其还原，来往返。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1697">You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b6a90-1698">如果代码在恢复值之前修改此方法返回的数组中的单个字节的值，则必须确保不会意外更改符号位。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1698">If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit.</span></span> <span data-ttu-id="b6a90-1699">例如，如果您的修改增加了一个正值，使字节数组的最后一个元素中的最高序位成为集，则可以将其值为零的新字节添加到数组的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1699">For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1700">下面的示例说明了某些 <xref:System.Numerics.BigInteger> 值在字节数组中的表示方式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1700">The following example illustrates how some <xref:System.Numerics.BigInteger> values are represented in byte arrays.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray (bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray(bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray (Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : bool * bool -&gt; byte[]" Usage="bigInteger.ToByteArray (isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="isUnsigned"><span data-ttu-id="b6a90-1701">如果使用无符号编码，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1701"><see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</span></span></param>
        <param name="isBigEndian"><span data-ttu-id="b6a90-1702">如果以大端字节顺序写入字节，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1702"><see langword="true" /> to write the bytes in a big-endian byte order; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1703">使用尽可能少的字节数返回此 <see cref="T:System.Numerics.BigInteger" /> 的值作为字节数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1703">Returns the value of this <see cref="T:System.Numerics.BigInteger" /> as a byte array using the fewest number of bytes possible.</span></span> <span data-ttu-id="b6a90-1704">如果值为零，则返回一个字节（其元素为 0x00）的数组。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1704">If the value is zero, returns an array of one byte whose element is 0x00.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1705">转换为字节数组的当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1705">The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b6a90-1706">可在四个不同数组中导出 `33022` 整数值：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1706">The integer value `33022` can be exported in four different arrays:</span></span>

| <span data-ttu-id="b6a90-1707">属性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1707">Properties</span></span>                           | <span data-ttu-id="b6a90-1708">结果</span><span class="sxs-lookup"><span data-stu-id="b6a90-1708">Result</span></span>                          |
|--------------------------------------|---------------------------------|
| `isUnsigned: false, isBigEndian: false` | `new byte[] { 0xFE, 0x80, 0x00 }` |
| `isUnsigned: false, isBigEndian: true`  | `new byte[] { 0x00, 0x80, 0xFE }` |
| `isUnsigned: true, isBigEndian: false`  | `new byte[] { 0xFE, 0x80 } `      |
| `isUnsigned: true, isBigEndian: true`   | `new byte[] { 0x80, 0xFE }`       |

          ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-1709">如果 <paramref name="isUnsigned" /> 为 <see langword="true" /> 且 <see cref="P:System.Numerics.BigInteger.Sign" /> 为负。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1709">If <paramref name="isUnsigned" /> is <see langword="true" /> and <see cref="P:System.Numerics.BigInteger.Sign" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-1710">将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为其等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1710">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="bigInteger.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b6a90-1711">将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为其等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1711">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1712">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1712">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1713"><xref:System.Numerics.BigInteger.ToString> 方法设置了当前区域性的 "R" 或往返行程格式中 <xref:System.Numerics.BigInteger> 值的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1713">The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format of the current culture.</span></span> <span data-ttu-id="b6a90-1714">如果要指定其他格式或区域性，请使用 <xref:System.Numerics.BigInteger.ToString%2A> 方法的其他重载，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1714">If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="b6a90-1715">使用格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1715">To use format</span></span>|<span data-ttu-id="b6a90-1716">对于区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1716">For culture</span></span>|<span data-ttu-id="b6a90-1717">使用重载</span><span class="sxs-lookup"><span data-stu-id="b6a90-1717">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="b6a90-1718">往返（"R"）格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1718">Round-trip ("R") format</span></span>|<span data-ttu-id="b6a90-1719">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1719">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%2A>|  
|<span data-ttu-id="b6a90-1720">特定格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1720">A specific format</span></span>|<span data-ttu-id="b6a90-1721">默认（当前）区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1721">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="b6a90-1722">特定格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1722">A specific format</span></span>|<span data-ttu-id="b6a90-1723">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1723">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="b6a90-1724">如果值为负，则 <xref:System.Numerics.BigInteger> 值的字符串表示形式包括负号，而从0到9之间的数字序列的范围为不带前导零的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1724">The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros.</span></span> <span data-ttu-id="b6a90-1725">负号由当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象定义。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1725">The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1726">下面的示例使用默认的 <xref:System.Numerics.BigInteger.ToString> 方法显示 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1726">The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method.</span></span> <span data-ttu-id="b6a90-1727">它还显示了使用某些标准格式说明符生成的 <xref:System.Numerics.BigInteger> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1727">It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers.</span></span> <span data-ttu-id="b6a90-1728">这些示例使用 en-us 区域性的格式设置约定来显示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1728">The examples are displayed using the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="b6a90-1729">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b6a90-1729">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="b6a90-1730">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b6a90-1730">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="bigInteger.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b6a90-1731">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1731">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b6a90-1732">使用指定的区域性特定格式设置信息将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1732">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1733">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式，该值使用 <paramref name="provider" /> 参数指定的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1733">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1734"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> 方法使用指定区域性的 <xref:System.Globalization.NumberFormatInfo> 对象来设置 "R" 或往返行程格式的 <xref:System.Numerics.BigInteger> 值的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1734">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="b6a90-1735">如果要指定其他格式或当前区域性，请使用 <xref:System.Numerics.BigInteger.ToString%2A> 方法的其他重载，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1735">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="b6a90-1736">使用格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1736">To use format</span></span>|<span data-ttu-id="b6a90-1737">对于区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1737">For culture</span></span>|<span data-ttu-id="b6a90-1738">使用重载</span><span class="sxs-lookup"><span data-stu-id="b6a90-1738">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="b6a90-1739">往返（"R"）格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1739">Round-trip ("R") format</span></span>|<span data-ttu-id="b6a90-1740">默认（当前）区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1740">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="b6a90-1741">特定格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1741">A specific format</span></span>|<span data-ttu-id="b6a90-1742">默认（当前）区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1742">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="b6a90-1743">特定格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1743">A specific format</span></span>|<span data-ttu-id="b6a90-1744">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1744">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="b6a90-1745">`provider` 参数是一个 <xref:System.IFormatProvider> 实现。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1745">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="b6a90-1746">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回一个 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供有关此方法返回的字符串格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1746">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="b6a90-1747">如果 `null``provider`，则使用当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象设置 <xref:System.Numerics.BigInteger> 值的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1747">If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span> <span data-ttu-id="b6a90-1748">使用常规格式说明符控制 <xref:System.Numerics.BigInteger> 值的字符串表示形式的 <xref:System.Globalization.NumberFormatInfo> 对象的唯一属性为 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>，这定义了表示负号的字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1748">The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, which defines the character that represents the negative sign.</span></span>  
  
 <span data-ttu-id="b6a90-1749">`provider` 参数可以是以下项之一：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1749">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="b6a90-1750">一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示提供格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1750">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="b6a90-1751">提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1751">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="b6a90-1752">一个实现 <xref:System.IFormatProvider>的自定义对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1752">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="b6a90-1753">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1753">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1754">下面的示例实例化一个自定义 <xref:System.Globalization.NumberFormatInfo> 对象，该对象将波形符（~）定义为负号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1754">The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span> <span data-ttu-id="b6a90-1755">然后，<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> 方法使用自定义 <xref:System.Globalization.NumberFormatInfo> 对象显示负值 <xref:System.Numerics.BigInteger> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1755">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]
 [!code-vb[System.Numeric.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="bigInteger.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b6a90-1756">标准或自定义的数值格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1756">A standard or custom numeric format string.</span></span></param>
        <summary><span data-ttu-id="b6a90-1757">使用指定的格式将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1757">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1758">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式，该值使用 <paramref name="format" /> 参数指定的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1758">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1759"><xref:System.Numerics.BigInteger.ToString%28System.String%29> 方法通过使用表示当前区域性约定的 <xref:System.Globalization.NumberFormatInfo> 对象来设置指定格式的 <xref:System.Numerics.BigInteger> 值的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1759">The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture.</span></span> <span data-ttu-id="b6a90-1760">如果要使用 "R" 或往返行程、格式或指定不同的区域性，请使用 <xref:System.Numerics.BigInteger.ToString%2A> 方法的其他重载，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1760">If you want to use the "R", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="b6a90-1761">使用格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1761">To use format</span></span>|<span data-ttu-id="b6a90-1762">对于区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1762">For culture</span></span>|<span data-ttu-id="b6a90-1763">使用重载</span><span class="sxs-lookup"><span data-stu-id="b6a90-1763">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="b6a90-1764">往返（"R"）格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1764">Round-trip ("R") format</span></span>|<span data-ttu-id="b6a90-1765">默认（当前）区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1765">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="b6a90-1766">往返（"R"）格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1766">Round-trip ("R") format</span></span>|<span data-ttu-id="b6a90-1767">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1767">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="b6a90-1768">特定格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1768">A specific format</span></span>|<span data-ttu-id="b6a90-1769">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1769">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="b6a90-1770">`format` 参数可以是任何有效的[标准数值字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)或[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)的任意组合。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1770">The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="b6a90-1771">如果 `format` 等于 <xref:System.String.Empty?displayProperty=nameWithType> 或 `null`，则当前 <xref:System.Numerics.BigInteger> 对象的返回值将用往返格式说明符（"R"）进行格式设置。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1771">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="b6a90-1772">如果 `format` 为任何其他值，则该方法将引发 <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1772">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="b6a90-1773">.NET Framework 提供了广泛的格式设置支持，以下格式设置主题更详细地介绍了这些支持：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1773">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="b6a90-1774">有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1774">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="b6a90-1775">有关 .NET Framework 中的格式设置的详细信息，请参阅[格式设置类型](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1775">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="b6a90-1776">返回的字符串的格式由当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象确定。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1776">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="b6a90-1777">根据 `format` 参数，此对象控制输出字符串中的符号，如负号、组分隔符和小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1777">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="b6a90-1778">若要为当前区域性以外的区域性提供格式设置信息，请调用 <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> 重载。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1778">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1779">下面的示例通过使用每个标准格式字符串和一些自定义格式字符串来初始化 <xref:System.Numerics.BigInteger> 值并显示该值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1779">The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b6a90-1780"><paramref name="format" /> 不是有效的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1780"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="b6a90-1781">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b6a90-1781">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="b6a90-1782">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b6a90-1782">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="bigInteger.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b6a90-1783">标准或自定义的数值格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1783">A standard or custom numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="b6a90-1784">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1784">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b6a90-1785">使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1785">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1786">由 <paramref name="format" /> 和 <paramref name="provider" /> 参数指定的当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1786">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1787"><xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> 方法通过使用指定区域性的 <xref:System.Globalization.NumberFormatInfo> 对象来设置指定格式的 <xref:System.Numerics.BigInteger> 值的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1787">The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="b6a90-1788">如果要使用往返格式或默认区域性设置，请使用 <xref:System.Numerics.BigInteger.ToString%2A> 方法的其他重载，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1788">If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="b6a90-1789">使用格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1789">To use format</span></span>|<span data-ttu-id="b6a90-1790">对于区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1790">For culture</span></span>|<span data-ttu-id="b6a90-1791">使用重载</span><span class="sxs-lookup"><span data-stu-id="b6a90-1791">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="b6a90-1792">往返（"R"）格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1792">Round-trip ("R") format</span></span>|<span data-ttu-id="b6a90-1793">默认（当前）区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1793">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="b6a90-1794">往返（"R"）格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1794">Round-trip ("R") format</span></span>|<span data-ttu-id="b6a90-1795">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1795">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="b6a90-1796">特定格式</span><span class="sxs-lookup"><span data-stu-id="b6a90-1796">A specific format</span></span>|<span data-ttu-id="b6a90-1797">默认（当前）区域性</span><span class="sxs-lookup"><span data-stu-id="b6a90-1797">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
  
 <span data-ttu-id="b6a90-1798">`format` 参数可以是任何有效的[标准数值字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)或[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)的任意组合。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1798">The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="b6a90-1799">如果 `format` 等于 <xref:System.String.Empty?displayProperty=nameWithType> 或 `null`，则当前 <xref:System.Numerics.BigInteger> 对象的返回值将用往返格式说明符（"R"）进行格式设置。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1799">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="b6a90-1800">如果 `format` 为任何其他值，则该方法将引发 <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1800">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="b6a90-1801">.NET Framework 提供了广泛的格式设置支持，以下格式设置主题更详细地介绍了这些支持：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1801">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="b6a90-1802">有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1802">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="b6a90-1803">有关 .NET Framework 中的格式设置的详细信息，请参阅[格式设置类型](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1803">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="b6a90-1804">`provider` 参数是一个 <xref:System.IFormatProvider> 实现。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1804">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="b6a90-1805">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回一个 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供有关此方法返回的字符串格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1805">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="b6a90-1806">调用 <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> 方法时，它将调用 `provider` 参数的 <xref:System.IFormatProvider.GetFormat%2A> 方法，并向其传递一个表示 <xref:System.Globalization.NumberFormatInfo> 类型的 <xref:System.Type> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1806">When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="b6a90-1807">然后 <xref:System.IFormatProvider.GetFormat%2A> 方法返回提供用于格式化 `value` 参数的信息的 <xref:System.Globalization.NumberFormatInfo> 对象，如负号符号、组分隔符符号或小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1807">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol.</span></span> <span data-ttu-id="b6a90-1808">使用 `provider` 参数向 <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> 方法提供格式设置信息的方法有三种：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1808">There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:</span></span>  
  
-   <span data-ttu-id="b6a90-1809">可以传递表示提供格式设置信息的区域性的 <xref:System.Globalization.CultureInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1809">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="b6a90-1810">它的 <xref:System.Globalization.CultureInfo.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供该区域性的数字格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1810">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="b6a90-1811">可以传递提供数字格式设置信息的实际 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1811">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="b6a90-1812">（其 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 的实现只返回自身。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1812">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="b6a90-1813">可以传递实现 <xref:System.IFormatProvider>的自定义对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1813">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="b6a90-1814">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法实例化并返回提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1814">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="b6a90-1815">如果 `null``provider`，则返回的字符串的格式将基于当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1815">If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1816">下面的示例使用标准格式字符串和将颚化符（~）定义为负号的 <xref:System.Globalization.NumberFormatInfo> 对象将 <xref:System.Numerics.BigInteger> 值进行初始化，并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1816">The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b6a90-1817"><paramref name="format" /> 不是有效的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1817"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="b6a90-1818">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b6a90-1818">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="b6a90-1819">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b6a90-1819">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="bigInteger.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="b6a90-1820">将向其中写入此实例的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1820">The span of characters into which this instance will be written.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="b6a90-1821">方法返回时，包含以字符数表示的范围长度。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1821">When the method returns, contains the length of the span in number of characters.</span></span></param>
        <param name="format"><span data-ttu-id="b6a90-1822">字符的只读范围，指定格式设置操作的格式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1822">A read-only span of characters that specifies the format for the formatting operation.</span></span></param>
        <param name="provider"><span data-ttu-id="b6a90-1823">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1823">An object that supplies culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-1824">将此大整数实例格式设置到一个字符范围内。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1824">Formats this big integer instance into a span of characters.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1825">如果格式设置操作成功，则返回 <see langword="true" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1825"><see langword="true" /> if the formatting operation succeeds; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b6a90-1826">尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />，并返回一个指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1826">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1827">数字的表示形式，它是字符的只读范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1827">The representation of a number as a read-only span of characters.</span></span></param>
        <param name="result"><span data-ttu-id="b6a90-1828">当此方法返回时，包含与 <paramref name="value" /> 中所包含的数字等效的 <see cref="T:System.Numerics.BigInteger" />；如果转换失败，则包含零 (0)。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1828">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails.</span></span> <span data-ttu-id="b6a90-1829">如果 <paramref name="value" /> 参数为空字符范围或格式不正确，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1829">The conversion fails if the <paramref name="value" /> parameter is an empty character span or is not of the correct format.</span></span> <span data-ttu-id="b6a90-1830">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1830">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="b6a90-1831">尝试将指定的字符只读范围中包含的数字的表示形式转换为其 <see cref="T:System.Numerics.BigInteger" /> 等效项，并返回一个指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1831">Tries to convert the representation of a number contained in the specified read-only character span, to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1832">如果 <see langword="true" /> 成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1832"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1833">数字的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1833">The string representation of a number.</span></span></param>
        <param name="result"><span data-ttu-id="b6a90-1834">当此方法返回时，包含与 <paramref name="value" /> 中所包含的数字等效的 <see cref="T:System.Numerics.BigInteger" />；如果转换失败，则包含零 (0)。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1834">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails.</span></span> <span data-ttu-id="b6a90-1835">如果 <paramref name="value" /> 参数为 <see langword="null" />，或者其格式不正确，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1835">The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not of the correct format.</span></span> <span data-ttu-id="b6a90-1836">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1836">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="b6a90-1837">尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />，并返回一个指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1837">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1838">如果 <see langword="true" /> 成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1838"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1839"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> 方法与 <xref:System.Numerics.BigInteger.Parse%28System.String%29> 方法类似，不同之处在于，如果转换失败，则它不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1839">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="b6a90-1840">如果 `value` 无效且无法成功分析，则此方法无需使用异常处理来测试 <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1840">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="b6a90-1841">`value` 参数应为以下形式的十进制数的字符串表示形式：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1841">The `value` parameter should be the string representation of a decimal number in the following form:</span></span>  
  
 <span data-ttu-id="b6a90-1842">[*ws*][*sign*]*数字*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1842">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1843">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1843">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b6a90-1844">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1844">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b6a90-1845">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1845">Element</span></span>|<span data-ttu-id="b6a90-1846">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1846">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b6a90-1847">*ws*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1847">*ws*</span></span>|<span data-ttu-id="b6a90-1848">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1848">Optional white space.</span></span>|  
|<span data-ttu-id="b6a90-1849">*sign*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1849">*sign*</span></span>|<span data-ttu-id="b6a90-1850">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1850">An optional sign.</span></span> <span data-ttu-id="b6a90-1851">有效的符号字符由当前区域性的 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> 和 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> 属性确定。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1851">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="b6a90-1852">*digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1852">*digits*</span></span>|<span data-ttu-id="b6a90-1853">十进制数字的序列，范围为0到9。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1853">A sequence of decimal digits ranging from 0 to 9.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-1854">`value` 参数指定的字符串不能包含任何组分隔符或小数分隔符，并且它不能包含小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1854">The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="b6a90-1855">使用 <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> 样式对 `value` 参数进行解释。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1855">The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="b6a90-1856">除十进制数字外，只允许使用前导符号和尾随空格。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1856">In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed.</span></span> <span data-ttu-id="b6a90-1857">若要显式定义具有可在 `value`中显示的区域性特定格式设置信息的样式元素，请调用 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1857">To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.</span></span>  
  
 <span data-ttu-id="b6a90-1858">使用当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象中的格式设置信息对 `value` 参数进行分析。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1858">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="b6a90-1859">有关详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1859">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b6a90-1860">此重载将 `value` 参数中的所有数字解释为十进制数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1860">This overload interprets all digits in the `value` parameter as decimal digits.</span></span> <span data-ttu-id="b6a90-1861">若要分析十六进制数的字符串表示形式，请改为调用 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> 重载。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1861">To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-1862">下面的示例使用 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> 方法来实例化两个 <xref:System.Numerics.BigInteger> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1862">The following example uses the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="b6a90-1863">如果转换成功，则它会将每个对象乘以另一个数字，然后调用 <xref:System.Numerics.BigInteger.Compare%2A> 方法来确定两个对象之间的关系。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1863">If the conversions succeed, it multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two objects.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]
 [!code-vb[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b6a90-1864"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1864"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToString(System.String)" />
        <altmember cref="Overload:System.Numerics.BigInteger.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider * BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1865">数字的表示形式，它是字符的只读范围。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1865">The representation of a number as a read-only span of characters.</span></span></param>
        <param name="style"><span data-ttu-id="b6a90-1866">枚举值的按位组合，用于指示可出现在 <paramref name="value" /> 中的样式元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1866">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />.</span></span> <span data-ttu-id="b6a90-1867">要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1867">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b6a90-1868">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1868">An object that supplies culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <param name="result"><span data-ttu-id="b6a90-1869">当此方法返回时，包含与 <paramref name="value" /> 中所包含的数字等效的 <see cref="T:System.Numerics.BigInteger" />；如果转换失败，则包含 <see cref="P:System.Numerics.BigInteger.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1869">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed.</span></span> <span data-ttu-id="b6a90-1870">如果 <paramref name="value" /> 参数为空字符范围或格式不符合 <paramref name="style" />，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1870">The conversion fails if the <paramref name="value" /> parameter is an empty character span or is not in a format that is compliant with <paramref name="style" />.</span></span> <span data-ttu-id="b6a90-1871">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1871">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="b6a90-1872">尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />，并返回一个指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1872">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1873">如果 <see langword="true" /> 成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1873"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b6a90-1874">此重载类似于 <xref:System.Numerics.BigInteger.Parse(System.ReadOnlySpan%7BSystem.Char%7D,System.Globalization.NumberStyles,System.IFormatProvider)> 方法，但如果转换失败，则它不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1874">This overload is like the <xref:System.Numerics.BigInteger.Parse(System.ReadOnlySpan%7BSystem.Char%7D,System.Globalization.NumberStyles,System.IFormatProvider)> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="b6a90-1875">如果 `value` 无效且无法成功分析，则此方法无需使用异常处理来测试 <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1875">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.</span></span>

<span data-ttu-id="b6a90-1876">`style` 参数定义在 `value` 参数中允许的样式元素（如空格或正号或负号），以便分析操作成功。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1876">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="b6a90-1877">它必须是 <xref:System.Globalization.NumberStyles> 枚举中的位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1877">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="b6a90-1878">根据 `style`的值，`value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1878">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>

<span data-ttu-id="b6a90-1879">[*ws*][*$*][*sign*][*数字*，]*位数*[。*fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1879">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>

<span data-ttu-id="b6a90-1880">如果 `style` 参数包括 <xref:System.Globalization.NumberStyles.AllowHexSpecifier>，则 `value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1880">If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:</span></span>

<span data-ttu-id="b6a90-1881">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1881">[*ws*]*hexdigits*[*ws*]</span></span>

<span data-ttu-id="b6a90-1882">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1882">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b6a90-1883">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1883">The following table describes each element.</span></span>

|<span data-ttu-id="b6a90-1884">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1884">Element</span></span>|<span data-ttu-id="b6a90-1885">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1885">Description</span></span>|
|-------------|-----------------|
|<span data-ttu-id="b6a90-1886">*ws*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1886">*ws*</span></span>|<span data-ttu-id="b6a90-1887">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1887">Optional white space.</span></span> <span data-ttu-id="b6a90-1888">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 标志，`value` 或者如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 标志，则在 `value` 的开头可以出现空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1888">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|
|*$*|<span data-ttu-id="b6a90-1889">区域性特定的货币符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1889">A culture-specific currency symbol.</span></span> <span data-ttu-id="b6a90-1890">它在 `value` 中的位置由 `provider` 参数的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回的 <xref:System.Globalization.NumberFormatInfo> 对象的 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> 属性定义。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1890">Its position in `value` is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="b6a90-1891">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 标志，货币符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1891">The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1892">*sign*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1892">*sign*</span></span>|<span data-ttu-id="b6a90-1893">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1893">An optional sign.</span></span> <span data-ttu-id="b6a90-1894">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 标志，则符号会出现在 `value` 的开头，如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 标志，则它可以出现在 `value` 的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1894">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b6a90-1895">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 标志，则可以在 `value` 中使用括号来表示负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1895">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1896">*digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1896">*digits*</span></span>|<span data-ttu-id="b6a90-1897">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1897">A sequence of digits from 0 through 9.</span></span>|
|<span data-ttu-id="b6a90-1898">*，*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1898">*,*</span></span>|<span data-ttu-id="b6a90-1899">区域性特定的组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1899">A culture-specific group separator.</span></span> <span data-ttu-id="b6a90-1900">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 标志，则 `provider` 指定的区域性的组分隔符可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1900">The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1901">*.*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1901">*.*</span></span>|<span data-ttu-id="b6a90-1902">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1902">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="b6a90-1903">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 标志，则 `provider` 指定的区域性的小数点符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1903">The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1904">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1904">*fractional_digits*</span></span>|<span data-ttu-id="b6a90-1905">数字0的一个或多个匹配项。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1905">One or more occurrences of the digit 0.</span></span> <span data-ttu-id="b6a90-1906">仅当 `style` 包含 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 标志时，小数位才能出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1906">Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1907">E</span><span class="sxs-lookup"><span data-stu-id="b6a90-1907">E</span></span>|<span data-ttu-id="b6a90-1908">"E" 或 "E" 字符，指示值以指数（科学型）表示法表示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1908">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="b6a90-1909">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 标志，则 `value` 参数可以表示指数表示法中的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1909">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1910">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1910">*exponential_digits*</span></span>|<span data-ttu-id="b6a90-1911">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1911">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="b6a90-1912">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 标志，则 `value` 参数可以表示指数表示法中的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1912">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="b6a90-1913">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1913">*hexdigits*</span></span>|<span data-ttu-id="b6a90-1914">从0到 f 的十六进制数字序列，或者从0到 F。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1914">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|

> [!NOTE]
> <span data-ttu-id="b6a90-1915">无论 `style` 参数的值是什么，分析操作都将忽略 `s` 中任何终止的 NUL （U + 0000）字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1915">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

|<span data-ttu-id="b6a90-1916">非复合 `NumberStyles` 值</span><span class="sxs-lookup"><span data-stu-id="b6a90-1916">Non-composite `NumberStyles` values</span></span>|<span data-ttu-id="b6a90-1917">除了数字以外，还允许在值中使用元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1917">Elements permitted in value in addition to digits</span></span>|
|------------------------------------------|-------------------------------------------------------|
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="b6a90-1918">仅十进制数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1918">Decimal digits only.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="b6a90-1919">小数点（*.*）和*fractional_digits*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1919">The decimal point (*.*) and *fractional_digits* elements.</span></span> <span data-ttu-id="b6a90-1920">但*fractional_digits*只能包含一个或多个0位数，或者该方法返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1920">However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="b6a90-1921">"E" 或 "E" 字符（指示指数表示法）以及*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1921">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span> <span data-ttu-id="b6a90-1922">如果 `value` 表示指数表示法中的数字，则它不能包含非零的小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1922">If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="b6a90-1923">`value`开头的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1923">The *ws* element at the start of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="b6a90-1924">`value`末尾的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1924">The *ws* element at the end of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="b6a90-1925">*数字*前面的*sign*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1925">The *sign* element before *digits*.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="b6a90-1926">*数字*后的*符号*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1926">The *sign* element after *digits*.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="b6a90-1927">用括号括起数值的*符号*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1927">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="b6a90-1928">组分隔符（*，*）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1928">The group separator (*,*) element.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="b6a90-1929">货币（*$*）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1929">The currency (*$*) element.</span></span>|
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="b6a90-1930">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1930">All elements.</span></span> <span data-ttu-id="b6a90-1931">但是，`value` 不能表示十六进制数或以指数表示法表示的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1931">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="b6a90-1932">`value`开头或结尾处的*ws*元素，在 `value`开头处进行签名，并在小数点（*.*）符号处进行*签名*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1932">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="b6a90-1933">`value` 参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1933">The `value` parameter can also use exponential notation.</span></span>|
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="b6a90-1934">*Ws*、 *sign*、group 分隔符（*，*）和小数点（*.*）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1934">The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.</span></span>|
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="b6a90-1935">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1935">All elements.</span></span> <span data-ttu-id="b6a90-1936">但 `value` 不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1936">However, `value` cannot represent a hexadecimal number.</span></span>|

<span data-ttu-id="b6a90-1937">如果使用 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> 标志，则 `value` 必须是十六进制值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1937">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `value` must be a hexadecimal value.</span></span> <span data-ttu-id="b6a90-1938">`style` 中的唯一其他标志 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 并 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1938">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-1939">（<xref:System.Globalization.NumberStyles> 枚举具有复合样式，<xref:System.Globalization.NumberStyles.HexNumber>，它包含两个空白标志。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1939">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>

<span data-ttu-id="b6a90-1940">`provider` 参数是一个 <xref:System.IFormatProvider> 实现。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1940">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="b6a90-1941">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回一个 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供有关 `value`格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1941">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="b6a90-1942">`provider` 参数可以是以下任一项：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1942">The `provider` parameter can be any one of the following:</span></span>

-   <span data-ttu-id="b6a90-1943">一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示提供格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1943">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="b6a90-1944">它的 <xref:System.Globalization.CultureInfo.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供该区域性的数字格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1944">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>

-   <span data-ttu-id="b6a90-1945">提供数字格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1945">A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="b6a90-1946">（其 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 的实现只返回自身。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-1946">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>

-   <span data-ttu-id="b6a90-1947">一个实现 <xref:System.IFormatProvider>的自定义对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1947">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="b6a90-1948">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法实例化并返回提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1948">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>

<span data-ttu-id="b6a90-1949">如果 `null``provider`，则使用当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1949">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b6a90-1950"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1950"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b6a90-1951">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b6a90-1951">-or-</span></span> 
 <span data-ttu-id="b6a90-1952"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1952"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider * BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b6a90-1953">数字的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1953">The string representation of a number.</span></span> <span data-ttu-id="b6a90-1954">该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1954">The string is interpreted using the style specified by <paramref name="style" />.</span></span></param>
        <param name="style"><span data-ttu-id="b6a90-1955">枚举值的按位组合，用于指示可出现在 <paramref name="value" /> 中的样式元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1955">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />.</span></span> <span data-ttu-id="b6a90-1956">要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1956">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b6a90-1957">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1957">An object that supplies culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <param name="result"><span data-ttu-id="b6a90-1958">当此方法返回时，包含与 <paramref name="value" /> 中所包含的数字等效的 <see cref="T:System.Numerics.BigInteger" />；如果转换失败，则包含 <see cref="P:System.Numerics.BigInteger.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1958">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed.</span></span> <span data-ttu-id="b6a90-1959">如果 <paramref name="value" /> 参数为 <see langword="null" /> 或其格式不符合 <paramref name="style" />，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1959">The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not in a format that is compliant with <paramref name="style" />.</span></span> <span data-ttu-id="b6a90-1960">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1960">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="b6a90-1961">尝试将指定样式和区域性特定格式的数字的字符串表示形式转换为其 <see cref="T:System.Numerics.BigInteger" /> 等效项，并返回一个指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1961">Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="b6a90-1962">如果 <see langword="true" /> 参数成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1962"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-1963"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> 方法与 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 方法类似，不同之处在于，如果转换失败，则它不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1963">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="b6a90-1964">如果 `value` 无效且无法成功分析，则此方法无需使用异常处理来测试 <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1964">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.</span></span>  
  
 <span data-ttu-id="b6a90-1965">`style` 参数定义在 `value` 参数中允许的样式元素（如空格或正号或负号），以便分析操作成功。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1965">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="b6a90-1966">它必须是 <xref:System.Globalization.NumberStyles> 枚举中的位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1966">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="b6a90-1967">根据 `style`的值，`value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1967">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="b6a90-1968">[*ws*][*$*][*sign*][*数字*，]*位数*[。*fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1968">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1969">如果 `style` 参数包括 <xref:System.Globalization.NumberStyles.AllowHexSpecifier>，则 `value` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b6a90-1969">If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="b6a90-1970">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="b6a90-1970">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="b6a90-1971">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1971">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b6a90-1972">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1972">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b6a90-1973">元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-1973">Element</span></span>|<span data-ttu-id="b6a90-1974">描述</span><span class="sxs-lookup"><span data-stu-id="b6a90-1974">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b6a90-1975">*ws*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1975">*ws*</span></span>|<span data-ttu-id="b6a90-1976">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1976">Optional white space.</span></span> <span data-ttu-id="b6a90-1977">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 标志，`value` 或者如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 标志，则在 `value` 的开头可以出现空白。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1977">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="b6a90-1978">区域性特定的货币符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1978">A culture-specific currency symbol.</span></span> <span data-ttu-id="b6a90-1979">其在字符串中的位置由 `provider` 参数的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回的 <xref:System.Globalization.NumberFormatInfo> 对象的 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> 属性定义。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1979">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="b6a90-1980">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 标志，货币符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1980">The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1981">*sign*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1981">*sign*</span></span>|<span data-ttu-id="b6a90-1982">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1982">An optional sign.</span></span> <span data-ttu-id="b6a90-1983">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 标志，则符号会出现在 `value` 的开头，如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 标志，则它可以出现在 `value` 的末尾。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1983">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b6a90-1984">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 标志，则可以在 `value` 中使用括号来表示负值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1984">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1985">*digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1985">*digits*</span></span>|<span data-ttu-id="b6a90-1986">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1986">A sequence of digits from 0 through 9.</span></span>|  
|<span data-ttu-id="b6a90-1987">*，*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1987">*,*</span></span>|<span data-ttu-id="b6a90-1988">区域性特定的组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1988">A culture-specific group separator.</span></span> <span data-ttu-id="b6a90-1989">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 标志，则 `provider` 指定的区域性的组分隔符可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1989">The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1990">*.*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1990">*.*</span></span>|<span data-ttu-id="b6a90-1991">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1991">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="b6a90-1992">如果 `style` 包括 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 标志，则 `provider` 指定的区域性的小数点符号可以出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1992">The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1993">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1993">*fractional_digits*</span></span>|<span data-ttu-id="b6a90-1994">数字0的一个或多个匹配项。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1994">One or more occurrences of the digit 0.</span></span> <span data-ttu-id="b6a90-1995">仅当 `style` 包含 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 标志时，小数位才能出现在 `value` 中。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1995">Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1996">E</span><span class="sxs-lookup"><span data-stu-id="b6a90-1996">E</span></span>|<span data-ttu-id="b6a90-1997">"E" 或 "E" 字符，指示值以指数（科学型）表示法表示。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1997">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="b6a90-1998">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 标志，则 `value` 参数可以表示指数表示法中的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-1998">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-1999">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-1999">*exponential_digits*</span></span>|<span data-ttu-id="b6a90-2000">介于0到9之间的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2000">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="b6a90-2001">如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 标志，则 `value` 参数可以表示指数表示法中的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2001">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b6a90-2002">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="b6a90-2002">*hexdigits*</span></span>|<span data-ttu-id="b6a90-2003">从0到 f 的十六进制数字序列，或者从0到 F。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2003">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="b6a90-2004">无论 `style` 参数的值是什么，分析操作都将忽略 `s` 中任何终止的 NUL （U + 0000）字符。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2004">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="b6a90-2005">仅包含十进制数字的字符串（对应于 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 标志）始终分析成功。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2005">A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> flag) always parses successfully.</span></span> <span data-ttu-id="b6a90-2006">大多数其余 <xref:System.Globalization.NumberStyles> 成员控制可能存在但不需要存在于此输入字符串中的元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2006">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string.</span></span> <span data-ttu-id="b6a90-2007">下表指示单个 <xref:System.Globalization.NumberStyles> 成员如何影响可能出现在 `value`中的元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2007">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="b6a90-2008">非复合 `NumberStyles` 值</span><span class="sxs-lookup"><span data-stu-id="b6a90-2008">Non-composite `NumberStyles` values</span></span>|<span data-ttu-id="b6a90-2009">除了数字以外，还允许在值中使用元素</span><span class="sxs-lookup"><span data-stu-id="b6a90-2009">Elements permitted in value in addition to digits</span></span>|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="b6a90-2010">仅十进制数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2010">Decimal digits only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="b6a90-2011">小数点（*.*）和*fractional_digits*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2011">The decimal point (*.*) and *fractional_digits* elements.</span></span> <span data-ttu-id="b6a90-2012">但*fractional_digits*只能包含一个或多个0位数，或者该方法返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2012">However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="b6a90-2013">"E" 或 "E" 字符（指示指数表示法）以及*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2013">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span> <span data-ttu-id="b6a90-2014">如果 `value` 表示指数表示法中的数字，则它不能包含非零的小数部分。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2014">If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="b6a90-2015">`value`开头的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2015">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="b6a90-2016">`value`末尾的*ws*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2016">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="b6a90-2017">*数字*前面的*sign*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2017">The *sign* element before *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="b6a90-2018">*数字*后的*符号*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2018">The *sign* element after *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="b6a90-2019">用括号括起数值的*符号*元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2019">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="b6a90-2020">组分隔符（*，*）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2020">The group separator (*,*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="b6a90-2021">货币（*$*）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2021">The currency (*$*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="b6a90-2022">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2022">All elements.</span></span> <span data-ttu-id="b6a90-2023">但是，`value` 不能表示十六进制数或以指数表示法表示的数字。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2023">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="b6a90-2024">`value`开头或结尾处的*ws*元素，在 `value`开头处进行签名，并在小数点（*.*）符号处进行*签名*。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2024">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="b6a90-2025">`value` 参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2025">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="b6a90-2026">*Ws*、 *sign*、group 分隔符（*，*）和小数点（*.*）元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2026">The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="b6a90-2027">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2027">All elements.</span></span> <span data-ttu-id="b6a90-2028">但 `value` 不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2028">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="b6a90-2029">如果使用 <xref:System.Numerics.BigInteger.TryParse%2A> 方法往返 <xref:System.Numerics.BigInteger.ToString%2A> 方法输出的 <xref:System.Numerics.BigInteger> 值的字符串表示形式，则应将 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> 方法与 "R" 格式说明符一起使用，以生成 <xref:System.Numerics.BigInteger> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2029">If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="b6a90-2030">否则，<xref:System.Numerics.BigInteger> 的字符串表示形式仅保留原始值的50最高有效位，并且当你使用 <xref:System.Numerics.BigInteger.TryParse%2A> 方法还原 <xref:System.Numerics.BigInteger> 值时，可能会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2030">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="b6a90-2031">如果使用 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> 标志，则 `value` 必须是十六进制值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2031">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `value` must be a hexadecimal value.</span></span> <span data-ttu-id="b6a90-2032">`style` 中的唯一其他标志 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 并 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2032">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6a90-2033">（<xref:System.Globalization.NumberStyles> 枚举具有复合样式，<xref:System.Globalization.NumberStyles.HexNumber>，它包含两个空白标志。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-2033">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b6a90-2034">如果 `value` 是十六进制数的字符串表示形式，则它的前面不能有将其视为十六进制数的任何修饰（如 `0x` 或 `&h`）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2034">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="b6a90-2035">这将导致转换失败。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2035">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="b6a90-2036">如果 `value` 是十六进制字符串，则 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> 方法会将 `value` 解释为使用两个补数表示形式存储的负数（如果它的前两个十六进制数字大于或等于 `0x80`）。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2036">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="b6a90-2037">换言之，该方法将 `value` 中第一个字节的最高序位解释为符号位。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2037">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="b6a90-2038">若要确保十六进制字符串正确解释为正数，`value` 中的第一个数字的值必须为零。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2038">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="b6a90-2039">例如，方法将 `0x80` 解释为负值，但会将 `0x080` 或 `0x0080` 解释为正值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2039">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="b6a90-2040">下面的示例演示表示负值和正值的十六进制字符串之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2040">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  
  
 <span data-ttu-id="b6a90-2041">`provider` 参数是一个 <xref:System.IFormatProvider> 实现。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2041">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="b6a90-2042">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法返回一个 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供有关 `value`格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2042">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="b6a90-2043">`provider` 参数可以是以下任一项：</span><span class="sxs-lookup"><span data-stu-id="b6a90-2043">The `provider` parameter can be any one of the following:</span></span>  
  
-   <span data-ttu-id="b6a90-2044">一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示提供格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2044">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="b6a90-2045">它的 <xref:System.Globalization.CultureInfo.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供该区域性的数字格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2045">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="b6a90-2046">提供数字格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2046">A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="b6a90-2047">（其 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 的实现只返回自身。）</span><span class="sxs-lookup"><span data-stu-id="b6a90-2047">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="b6a90-2048">一个实现 <xref:System.IFormatProvider>的自定义对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2048">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="b6a90-2049">它的 <xref:System.IFormatProvider.GetFormat%2A> 方法实例化并返回提供格式设置信息的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2049">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="b6a90-2050">如果 `null``provider`，则使用当前区域性的 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2050">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6a90-2051">下面的示例使用 `style` 和 `provider` 参数的值的各种组合对 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> 方法进行一些调用。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2051">The following example makes some calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  
  
 <span data-ttu-id="b6a90-2052">对 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> 方法的单个调用会传递以下 `BigIntegerFormatProvider` 类的实例，该类将一个波形符（~）定义为负号。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2052">A number of the individual calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b6a90-2053"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2053"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b6a90-2054">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b6a90-2054">-or-</span></span> 
 <span data-ttu-id="b6a90-2055"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2055"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.ToString" />
        <altmember cref="Overload:System.Numerics.BigInteger.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryWriteBytes : Span&lt;byte&gt; * int * bool * bool -&gt; bool" Usage="bigInteger.TryWriteBytes (destination, bytesWritten, isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="b6a90-2056">应写入生成字节的目标跨度。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2056">The destination span to which the resulting bytes should be written.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="b6a90-2057">写入到 <paramref name="destination" /> 的字节数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2057">The number of bytes written to <paramref name="destination" />.</span></span></param>
        <param name="isUnsigned"><span data-ttu-id="b6a90-2058">如果使用无符号编码，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2058"><see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</span></span></param>
        <param name="isBigEndian"><span data-ttu-id="b6a90-2059">如果以大端字节顺序写入字节，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2059"><see langword="true" /> to write the bytes in a big-endian byte order; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b6a90-2060">使用尽可能少的字节数将此 <see cref="T:System.Numerics.BigInteger" /> 的值复制为小端二进制补码字节。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2060">Copies the value of this <see cref="T:System.Numerics.BigInteger" /> as little-endian twos-complement bytes, using the fewest number of bytes possible.</span></span> <span data-ttu-id="b6a90-2061">如果值为零，则输入其元素为 0x00 的字节。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2061">If the value is zero, outputs one byte whose element is 0x00.</span></span></summary>
        <returns><span data-ttu-id="b6a90-2062">如果字节满足 <paramref name="destination" />，则为 <see langword="true" />；如果由于空间不足而无法写入所有字节，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2062"><see langword="true" /> if the bytes fit in <paramref name="destination" />; <see langword="false" /> if not all bytes could be written due to lack of space.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b6a90-2063"><paramref name="isUnsigned" /> 为 <see langword="true" /> 且 <see cref="P:System.Numerics.BigInteger.Sign" /> 为负。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2063"><paramref name="isUnsigned" /> is <see langword="true" /> and <see cref="P:System.Numerics.BigInteger.Sign" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger Zero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zero As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger Zero { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.Zero : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b6a90-2064">获取一个表示数字 0（零）的值。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2064">Gets a value that represents the number 0 (zero).</span></span></summary>
        <value><span data-ttu-id="b6a90-2065">其值为 0（零）的整数。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2065">An integer whose value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6a90-2066">此属性返回的 <xref:System.Numerics.BigInteger> 对象提供了一个用于赋值和比较的零值的方便源。</span><span class="sxs-lookup"><span data-stu-id="b6a90-2066">The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsZero" />
      </Docs>
    </Member>
  </Members>
</Type>
