<Type Name="IDataObject" FullName="Microsoft.CLRAdmin.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd1efb3d12b95c99dc6cb94056198f74b71db376" /><Meta Name="ms.sourcegitcommit" Value="3facd7aafd1f5ffe2afede7ecab64614a55d408e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/18/2019" /><Meta Name="ms.locfileid" Value="75186122" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CLRAdmin.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorcfg</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0000010e-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DAdvise">
      <MemberSignature Language="C#" Value="public int DAdvise (IntPtr a, uint b, IntPtr c, ref uint d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DAdvise(native int a, unsigned int32 b, native int c, unsigned int32&amp; d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.DAdvise(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAdvise (a As IntPtr, b As UInteger, c As IntPtr, ByRef d As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DAdvise(IntPtr a, System::UInt32 b, IntPtr c, System::UInt32 % d);" />
      <MemberSignature Language="F#" Value="abstract member DAdvise : nativeint * uint32 * nativeint * uint32 -&gt; int" Usage="iDataObject.DAdvise (a, b, c, d)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.IntPtr" />
        <Parameter Name="b" Type="System.UInt32" />
        <Parameter Name="c" Type="System.IntPtr" />
        <Parameter Name="d" Type="System.UInt32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="a">指向 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 的指针，它定义通知的格式、介质和目标设备。</param>
        <param name="b"><see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 值，它指定所请求的连接行为。</param>
        <param name="c">指向调用方对象上的 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 的指针。</param>
        <param name="d">指向连接的指针，该连接由对 DAdvise 方法的此调用设置。</param>
        <summary>创建实现 <see cref="T:Microsoft.CLRAdmin.IDataObject" /> 接口的数据对象与调用方对象之间的通知连接，使调用方接收到有关数据对象中数据更改的通知。</summary>
        <returns>DAdvise 方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值以及下面的返回值：

| 返回值 | 说明 | | --- | --- | | S\_OK | DAdvise 方法成功创建了连接。 | | E\_NOTIMPL | 数据对象不实现 DAdvise 方法。 | | DV\_E\_LINDEX | 索引无效。 | | DV\_E\_FORMATETC | 数据指针值无效。 | | OLE\_E\_ADVISENOTSUPPORTED | 对象不支持更改通知。 |</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="DUnadvise">
      <MemberSignature Language="C#" Value="public int DUnadvise (uint a);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DUnadvise(unsigned int32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.DUnadvise(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DUnadvise (a As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DUnadvise(System::UInt32 a);" />
      <MemberSignature Language="F#" Value="abstract member DUnadvise : uint32 -&gt; int" Usage="iDataObject.DUnadvise a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="a">要损坏的连接。</param>
        <summary>损坏由于先前调用 <see cref="M:Microsoft.CLRAdmin.IDataObject.DAdvise(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)" /> 方法而创建的通知连接。</summary>
        <returns>| 返回值 | 说明 | | --- | --- | | S\_OK | DUnadvise 方法成功删除了指定连接。 | | OLE\_E\_NOCONNECTION | 指定连接不是有效连接。 | | OLE\_E\_ADVISENOTSUPPORTED | 对象不支持更改通知。 |</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="EnumDAdvise">
      <MemberSignature Language="C#" Value="public int EnumDAdvise (IntPtr a);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 EnumDAdvise(native int a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.EnumDAdvise(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumDAdvise (a As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EnumDAdvise(IntPtr a);" />
      <MemberSignature Language="F#" Value="abstract member EnumDAdvise : nativeint -&gt; int" Usage="iDataObject.EnumDAdvise a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="a"><see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> 的地址，它接收指向新的枚举数对象的接口指针。 如果对 EnumDAdvise 方法的调用将 <paramref name="a" /> 设置为 <see langword="null" />，则说明没有连接。</param>
        <summary>检索指向一个对象的指针，该对象可以枚举此 <see cref="T:Microsoft.CLRAdmin.IDataObject" /> 接口当前维护的通知连接。</summary>
        <returns>EnumDAdvise 方法支持标准返回值 E_OUTOFMEMORY 和以下返回值：



| 返回值 | 说明 | | --- | --- | | S\_OK | 对 EnumDAdvise 方法的此次调用成功创建了枚举器对象的实例。或者没有连接。 | | OLE\_E\_ADVISENOTSUPPORTED | 对象不支持更改通知。 |</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="EnumFormatEtc">
      <MemberSignature Language="C#" Value="public int EnumFormatEtc (uint a, IntPtr b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 EnumFormatEtc(unsigned int32 a, native int b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.EnumFormatEtc(System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumFormatEtc (a As UInteger, b As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EnumFormatEtc(System::UInt32 a, IntPtr b);" />
      <MemberSignature Language="F#" Value="abstract member EnumFormatEtc : uint32 * nativeint -&gt; int" Usage="iDataObject.EnumFormatEtc (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.UInt32" />
        <Parameter Name="b" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCanonicalFormatEtc">
      <MemberSignature Language="C#" Value="public int GetCanonicalFormatEtc (IntPtr a, IntPtr b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCanonicalFormatEtc(native int a, native int b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.GetCanonicalFormatEtc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCanonicalFormatEtc (a As IntPtr, b As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetCanonicalFormatEtc(IntPtr a, IntPtr b);" />
      <MemberSignature Language="F#" Value="abstract member GetCanonicalFormatEtc : nativeint * nativeint -&gt; int" Usage="iDataObject.GetCanonicalFormatEtc (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.IntPtr" />
        <Parameter Name="b" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="a">指向 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 的指针，它为检索数据的调用定义格式、介质和目标设备。</param>
        <param name="b">一个指向 FORMATETC 的输出指针，它包含特定呈现可能使用的最常见信息；如果 GetCanonicalFormatEtc 方法返回 DATA_S_SAMEFORMATETC，则为 <see langword="null" />。</param>
        <summary>检索指向标准 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 结构的指针，该结构在逻辑上等效于（但不一定等于）<paramref name="a" /> 参数引用的 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 结构。</summary>
        <returns>GetCanonicalFormatEtc 方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值以及下面的返回值：



| 返回值 | 说明 | | --- | --- | |S\_OK |返回的 FORMATETC 与参数中传递的结构不同。 | | DATA\_S\_SAMEFORMATETC | 返回的 FORMATETC 与参数中传递的结构相同，并且 <see langword="null" /> 在 <paramref name="b" /> 中返回。 | | DV\_E\_LINDEX | 索引无效。 | | DV\_E\_FORMATETC | <paramref name="a" /> 无效。 | | OLE\_E\_NOTRUNNING | 对象应用程序未运行。 |</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public int GetData (ref Microsoft.CLRAdmin.FORMATETC pFormatEtc, ref Microsoft.CLRAdmin.STGMEDIUM b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetData(valuetype Microsoft.CLRAdmin.FORMATETC&amp; pFormatEtc, valuetype Microsoft.CLRAdmin.STGMEDIUM&amp; b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.GetData(Microsoft.CLRAdmin.FORMATETC@,Microsoft.CLRAdmin.STGMEDIUM@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (ByRef pFormatEtc As FORMATETC, ByRef b As STGMEDIUM) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetData(Microsoft::CLRAdmin::FORMATETC % pFormatEtc, Microsoft::CLRAdmin::STGMEDIUM % b);" />
      <MemberSignature Language="F#" Value="abstract member GetData : FORMATETC * STGMEDIUM -&gt; int" Usage="iDataObject.GetData (pFormatEtc, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pFormatEtc" Type="Microsoft.CLRAdmin.FORMATETC" RefType="ref" />
        <Parameter Name="b" Type="Microsoft.CLRAdmin.STGMEDIUM" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="pFormatEtc">指向 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 的指针，它为检索数据的调用定义格式、介质和目标设备。</param>
        <param name="b">指向 <see cref="T:Microsoft.CLRAdmin.STGMEDIUM" /> 的指针，它指示包含返回数据的存储介质。</param>
        <summary>从源数据对象中获取数据。 数据使用者调用的 <see cref="M:Microsoft.CLRAdmin.IDataObject.GetData(Microsoft.CLRAdmin.FORMATETC@,Microsoft.CLRAdmin.STGMEDIUM@)" /> 方法将呈现指定的 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 结构中描述的数据，并通过指定的 <see cref="T:Microsoft.CLRAdmin.STGMEDIUM" /> 结构传输该数据。 然后，调用方对释放 <see cref="T:Microsoft.CLRAdmin.STGMEDIUM" /> 结构的责任进行假定。</summary>
        <returns>GetData 方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值以及下面的返回值：

| 返回值 | 说明 | | --- | --- | | S\_OK | 对 GetData 方法的此调用成功地检索到了数据，并将数据放入了所提供的存储介质中。 | | DV\_E\_LINDEX | 索引无效。 | | DV\_E\_FORMATETC | <paramref name="pFormatEtc" /> 无效。 | | DV\_E\_TYMED | tymed 无效。 | | DV\_E\_DVASPECT | dwAspect 无效。 | | OLE\_E\_NOTRUNNING | 对象应用程序未运行。 | | STG\_E\_MEDIUMFULL | 分配介质时出错。 |</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="GetDataHere">
      <MemberSignature Language="C#" Value="public int GetDataHere (ref Microsoft.CLRAdmin.FORMATETC pFormatEtc, ref Microsoft.CLRAdmin.STGMEDIUM b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetDataHere(valuetype Microsoft.CLRAdmin.FORMATETC&amp; pFormatEtc, valuetype Microsoft.CLRAdmin.STGMEDIUM&amp; b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.GetDataHere(Microsoft.CLRAdmin.FORMATETC@,Microsoft.CLRAdmin.STGMEDIUM@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataHere (ByRef pFormatEtc As FORMATETC, ByRef b As STGMEDIUM) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetDataHere(Microsoft::CLRAdmin::FORMATETC % pFormatEtc, Microsoft::CLRAdmin::STGMEDIUM % b);" />
      <MemberSignature Language="F#" Value="abstract member GetDataHere : FORMATETC * STGMEDIUM -&gt; int" Usage="iDataObject.GetDataHere (pFormatEtc, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pFormatEtc" Type="Microsoft.CLRAdmin.FORMATETC" RefType="ref" />
        <Parameter Name="b" Type="Microsoft.CLRAdmin.STGMEDIUM" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="pFormatEtc">指向 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 的指针，它为检索数据的调用定义格式、介质和目标设备。</param>
        <param name="b">指向 <see cref="T:Microsoft.CLRAdmin.STGMEDIUM" /> 的指针，它指示包含返回数据的存储介质。</param>
        <summary>从源数据对象中获取数据。 数据使用者调用的此方法与 <see cref="M:Microsoft.CLRAdmin.IDataObject.GetData(Microsoft.CLRAdmin.FORMATETC@,Microsoft.CLRAdmin.STGMEDIUM@)" /> 方法的区别在于调用方必须分配并释放指定的存储介质。</summary>
        <returns>GetDataHere 方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值以及下面的返回值：

| 返回值 | 说明 | | --- | --- | | S\_OK | 对 GetDataHere 方法的此调用成功地检索到了数据，并将数据放入了所提供的存储介质中。 | | DV\_E\_LINDEX | 索引无效。 | | DV\_E\_FORMATETC | <paramref name="pFormatEtc" /> 无效。 | | DV\_E\_TYMED | tymed 无效。 | | DV\_E\_DVASPECT | dwAspect 无效。 | | OLE\_E\_NOTRUNNING | 对象应用程序未运行。 | | STG\_E\_MEDIUMFULL | 分配介质时出错。 |</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="QueryGetData">
      <MemberSignature Language="C#" Value="public int QueryGetData (IntPtr a);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 QueryGetData(native int a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.QueryGetData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryGetData (a As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int QueryGetData(IntPtr a);" />
      <MemberSignature Language="F#" Value="abstract member QueryGetData : nativeint -&gt; int" Usage="iDataObject.QueryGetData a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="a">指向 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 的指针，它为检索数据的调用定义格式、介质和目标设备。</param>
        <summary>确定数据对象是否能够呈现 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 结构中所描述的数据。 尝试执行粘贴或删除操作的对象可以在调用 <see cref="M:Microsoft.CLRAdmin.CDO.GetData(Microsoft.CLRAdmin.FORMATETC@,Microsoft.CLRAdmin.STGMEDIUM@)" /> 来获取操作是否成功的指示之前调用此方法。</summary>
        <returns>QueryGetData 方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值以及下面的返回值：

| 返回值 | 说明 | | --- | --- | | S\_OK | 对 <see cref="M:Microsoft.CLRAdmin.IDataObject.GetData(Microsoft.CLRAdmin.FORMATETC@,Microsoft.CLRAdmin.STGMEDIUM@)" /> 方法的后续调用可能会成功。 | | DV\_E\_LINDEX | 索引无效。 | | DV\_E\_FORMATETC | <paramref name="a" /> 无效。 | | DV\_E\_TYMED | tymed 无效。 | | DV\_E\_DVASPECT | dwAspect 值。 | | OLE\_E\_NOTRUNNING | 对象应用程序未运行。 |</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public int SetData (IntPtr a, IntPtr b, int c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetData(native int a, native int b, int32 c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CLRAdmin.IDataObject.SetData(System.IntPtr,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetData (a As IntPtr, b As IntPtr, c As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SetData(IntPtr a, IntPtr b, int c);" />
      <MemberSignature Language="F#" Value="abstract member SetData : nativeint * nativeint * int -&gt; int" Usage="iDataObject.SetData (a, b, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorcfg</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.IntPtr" />
        <Parameter Name="b" Type="System.IntPtr" />
        <Parameter Name="c" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">指向 <see cref="T:Microsoft.CLRAdmin.FORMATETC" /> 的指针，它为实现 <see cref="T:Microsoft.CLRAdmin.IDataObject" /> 的数据对象定义当解释包含在存储介质中的数据时应采用的格式。</param>
        <param name="b">指向 <see cref="T:Microsoft.CLRAdmin.STGMEDIUM" /> 的指针，它为 SetData 方法定义用来传递数据的存储介质。</param>
        <param name="c">如果要指定实现 <see cref="T:Microsoft.CLRAdmin.IDataObject" /> 的被调用数据对象在调用后拥有存储介质，并且必须在使用完介质后释放介质，则为 <see langword="true" />；如果要指定调用方保留对存储介质的所属权，并且数据对象只在调用期间使用介质，则为 <see langword="false" />。</param>
        <summary>将包含在 <see cref="T:Microsoft.CLRAdmin.STGMEDIUM" /> 结构中、被 <paramref name="a" /> 引用的数据传输到 <see cref="T:Microsoft.Aspnet.Snapin.IDataObject" /> 接口的此实例。</summary>
        <returns>SetData 方法支持 E_FAIL、E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值以及下面的返回值：

| Return value | Description | | --- | --- | | S\_OK | 对 SetData 方法的调用成功传输了数据。 | | E\_NOTIMPL | 没有为实现 <see cref="T:Microsoft.CLRAdmin.IDataObject" /> 的数据对象实现 SetData 方法。 | | DV\_E\_LINDEX | 索引无效。 | | DV\_E\_FORMATETC | pFormatEtc 无效。 | | DV\_E\_TYMED | tymed 无效。 | | DV\_E\_DVASPECT | dwAspect 无效。 | | OLE\_E\_NOTRUNNING | 对象应用程序未运行。 |</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
