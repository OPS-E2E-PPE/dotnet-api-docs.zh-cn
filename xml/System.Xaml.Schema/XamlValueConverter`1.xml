<Type Name="XamlValueConverter&lt;TConverterBase&gt;" FullName="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f3b0f230b1e61c8366375e01e9e106ff54e6be3d" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82287053" /></Metadata><TypeSignature Language="C#" Value="public class XamlValueConverter&lt;TConverterBase&gt; : IEquatable&lt;System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;&gt; where TConverterBase : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlValueConverter`1&lt;class TConverterBase&gt; extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlValueConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlValueConverter(Of TConverterBase)&#xA;Implements IEquatable(Of XamlValueConverter(Of TConverterBase))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TConverterBase&gt;&#xA; where TConverterBase : classpublic ref class XamlValueConverter : IEquatable&lt;System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; = class&#xA;    interface IEquatable&lt;XamlValueConverter&lt;'ConverterBase&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TConverterBase">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TConverterBase"><span data-ttu-id="bad0c-101">此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 所表示的特定转换器的 CLR 基类。</span><span class="sxs-lookup"><span data-stu-id="bad0c-101">The CLR base class for the particular converter that this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> represents.</span></span> <span data-ttu-id="bad0c-102">它通常为以下类之一：<see cref="T:System.ComponentModel.TypeConverter" />；<see cref="T:System.Windows.Markup.MarkupExtension" />；<see cref="T:System.Windows.Markup.ValueSerializer" />；</span><span class="sxs-lookup"><span data-stu-id="bad0c-102">Typically this is one of the following: <see cref="T:System.ComponentModel.TypeConverter" />; <see cref="T:System.Windows.Markup.MarkupExtension" />; <see cref="T:System.Windows.Markup.ValueSerializer" />;</span></span></typeparam>
    <summary><span data-ttu-id="bad0c-103">提供一个公共 API 接口，此接口适用于根据最终目标类型以外的输入为 XAML 生成初始化或序列化值的技术。</span><span class="sxs-lookup"><span data-stu-id="bad0c-103">Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type.</span></span> <span data-ttu-id="bad0c-104">此类型包括标记扩展和类型转换器。</span><span class="sxs-lookup"><span data-stu-id="bad0c-104">This includes markup extensions and type converters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bad0c-105">此类型的实例由 XAML 架构 API 的方法（如 <xref:System.Xaml.XamlType.LookupTypeConverter%2A>）返回。</span><span class="sxs-lookup"><span data-stu-id="bad0c-105">Instances of this type are returned by methods of the XAML schema API such as <xref:System.Xaml.XamlType.LookupTypeConverter%2A>.</span></span> <span data-ttu-id="bad0c-106"><xref:System.Xaml.Schema.XamlValueConverter%601> 的泛型实现为 system.exception 程序集提供间接寻址，使基本 XAML 架构和类型系统不必依赖于在其他程序集中通常实现的不同值转换技术。</span><span class="sxs-lookup"><span data-stu-id="bad0c-106">The generic implementation of <xref:System.Xaml.Schema.XamlValueConverter%601> provides indirection for the System.Xaml assembly so that the basic XAML schema and type system does not have to take dependencies on different value conversion techniques that are typically implementations in other assemblies.</span></span>  
  
 <span data-ttu-id="bad0c-107">可以使用 null 实现类型构造 <xref:System.Xaml.Schema.XamlValueConverter%601>，但此类 <xref:System.Xaml.Schema.XamlValueConverter%601> 将为 <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="bad0c-107">A <xref:System.Xaml.Schema.XamlValueConverter%601> can be constructed with a null implementation type, but such a <xref:System.Xaml.Schema.XamlValueConverter%601> will return `null` for <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>.</span></span>  
  
 <span data-ttu-id="bad0c-108"><xref:System.Xaml.Schema.XamlValueConverter%601> 的构造函数签名使用引用实现转换行为的特定类型的 `converterType` 参数。</span><span class="sxs-lookup"><span data-stu-id="bad0c-108">Constructor signatures for <xref:System.Xaml.Schema.XamlValueConverter%601> use a `converterType` parameter that references the specific type that implements the conversion behavior.</span></span> <span data-ttu-id="bad0c-109">对于正常运行的 <xref:System.Xaml.Schema.XamlValueConverter%601> （具有非空 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>的），`converterType` 类型应可转换为 `TConverterBase` 约束。</span><span class="sxs-lookup"><span data-stu-id="bad0c-109">For a properly functioning <xref:System.Xaml.Schema.XamlValueConverter%601> (one that has a nonnull <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>), the `converterType` type is expected to be castable to the `TConverterBase` constraint.</span></span> <span data-ttu-id="bad0c-110">不匹配条件不是由构造函数强制实现的，但可能会在运行时生成 <xref:System.InvalidCastException>。</span><span class="sxs-lookup"><span data-stu-id="bad0c-110">A mismatch condition is not enforced by constructors, but might produce an <xref:System.InvalidCastException> at run time.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bad0c-111">初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="bad0c-111">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlValueConverter (Type converterType, System.Xaml.XamlType targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type converterType, class System.Xaml.XamlType targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (converterType As Type, targetType As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; : Type * System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;" Usage="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; (converterType, targetType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="converterType"><span data-ttu-id="bad0c-112">实现转换器行为的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-112">The <see cref="T:System.Type" /> that implements the converter behavior.</span></span></param>
        <param name="targetType"><span data-ttu-id="bad0c-113"><see cref="T:System.Xaml.XamlType" /> 的目标 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-113">The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></param>
        <summary><span data-ttu-id="bad0c-114">基于实现 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 和 <see cref="T:System.Type" /> 的目标类型的转换器，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="bad0c-114">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> class, based on a converter implementing <see cref="T:System.Type" /> and the target/destination type of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlValueConverter (Type converterType, System.Xaml.XamlType targetType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type converterType, class System.Xaml.XamlType targetType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (converterType As Type, targetType As XamlType, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; : Type * System.Xaml.XamlType * string -&gt; System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;" Usage="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; (converterType, targetType, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="converterType"><span data-ttu-id="bad0c-115">实现转换器行为的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-115">The <see cref="T:System.Type" /> that implements the converter behavior.</span></span></param>
        <param name="targetType"><span data-ttu-id="bad0c-116"><see cref="T:System.Xaml.XamlType" /> 的目标 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-116">The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></param>
        <param name="name"><span data-ttu-id="bad0c-117">字符串名称。</span><span class="sxs-lookup"><span data-stu-id="bad0c-117">The string name.</span></span></param>
        <summary><span data-ttu-id="bad0c-118">基于实现 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 和 <see cref="T:System.Type" /> 的目标类型的转换器以及一个字符串值，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="bad0c-118">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> class, based on a converter implementing <see cref="T:System.Type" /> the target/destination type of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, and a string name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bad0c-119">如果 `name` 作为 `null`提供，则将根据 `converterType` 或 `targetType`生成默认名称。</span><span class="sxs-lookup"><span data-stu-id="bad0c-119">If `name` is provided as `null`, a default name is generated based on either `converterType` or `targetType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bad0c-120">所有三个参数都为 <see langword="null" />（至少需要有一个为非 null）。</span><span class="sxs-lookup"><span data-stu-id="bad0c-120">All three parameters are <see langword="null" /> (at least one is required to be non-null).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ConverterInstance">
      <MemberSignature Language="C#" Value="public TConverterBase ConverterInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TConverterBase ConverterInstance" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConverterInstance As TConverterBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TConverterBase ConverterInstance { TConverterBase get(); };" />
      <MemberSignature Language="F#" Value="member this.ConverterInstance : 'ConverterBase" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.ConverterInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TConverterBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bad0c-121">获取转换器实现的已创建实例。</span><span class="sxs-lookup"><span data-stu-id="bad0c-121">Gets a created instance of the converter implementation.</span></span></summary>
        <value><span data-ttu-id="bad0c-122">转换器实现的已创建实例，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-122">A created instance of the converter implementation, or <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bad0c-123"><xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> 调用 <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A> 的受保护的默认实现以获取其值（如果已在此 <xref:System.Xaml.Schema.XamlValueConverter%601>上调用了一次，<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> 则可能会访问存储的值）。</span><span class="sxs-lookup"><span data-stu-id="bad0c-123"><xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> calls the protected default implementation of <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A> to get its value (and might be accessing a stored value if <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> was already called once on this <xref:System.Xaml.Schema.XamlValueConverter%601>.</span></span>  
  
 <span data-ttu-id="bad0c-124">可以使用 null 实现类型构造 <xref:System.Xaml.Schema.XamlValueConverter%601>，但此类 <xref:System.Xaml.Schema.XamlValueConverter%601> 将为 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="bad0c-124">A <xref:System.Xaml.Schema.XamlValueConverter%601> can be constructed with a null implementation type, but such a <xref:System.Xaml.Schema.XamlValueConverter%601> will return `null` for <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterType">
      <MemberSignature Language="C#" Value="public Type ConverterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ConverterType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConverterType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ConverterType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConverterType : Type" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.ConverterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bad0c-125">获取实现转换器行为的类的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-125">Gets the <see cref="T:System.Type" /> for the class that implements the converter behavior.</span></span></summary>
        <value><span data-ttu-id="bad0c-126">实现转换器行为的类的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-126">The <see cref="T:System.Type" /> for the class that implements the converter behavior.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual TConverterBase CreateInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TConverterBase CreateInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateInstance () As TConverterBase" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TConverterBase CreateInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : unit -&gt; 'ConverterBase&#xA;override this.CreateInstance : unit -&gt; 'ConverterBase" Usage="xamlValueConverter.CreateInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TConverterBase</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bad0c-127">返回转换器实现的实例。</span><span class="sxs-lookup"><span data-stu-id="bad0c-127">Returns an instance of the converter implementation.</span></span></summary>
        <returns><span data-ttu-id="bad0c-128">转换器实现的实例，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-128">An instance of the converter implementation, or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bad0c-129"><xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A> 受保护。</span><span class="sxs-lookup"><span data-stu-id="bad0c-129"><xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A> is protected.</span></span> <span data-ttu-id="bad0c-130">若要使用公共 API 获取转换器实例，请获取 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>的值。</span><span class="sxs-lookup"><span data-stu-id="bad0c-130">To get a converter instance with a public API, get the value of <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>.</span></span>  
  
 <span data-ttu-id="bad0c-131">可以使用 null 实现类型构造 <xref:System.Xaml.Schema.XamlValueConverter%601>，但此类 <xref:System.Xaml.Schema.XamlValueConverter%601> 将为 <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="bad0c-131">A <xref:System.Xaml.Schema.XamlValueConverter%601> can be constructed with a null implementation type, but such a <xref:System.Xaml.Schema.XamlValueConverter%601> will return `null` for <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlSchemaException"><span data-ttu-id="bad0c-132">转换器未实现正确的基类型。</span><span class="sxs-lookup"><span data-stu-id="bad0c-132">Converter did not implement the correct base type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bad0c-133">确定 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的此实例与对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="bad0c-133">Determines whether this instance of <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and an object have the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlValueConverter.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bad0c-134">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="bad0c-134">The object to compare.</span></span></param>
        <summary><span data-ttu-id="bad0c-135">确定此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例是否与指定的对象（也必须是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />）具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="bad0c-135">Determines whether this instance of <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and a specified object, which must also be a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, have the same value.</span></span></summary>
        <returns><span data-ttu-id="bad0c-136">如果 <see langword="true" /> 是一个 <paramref name="obj" /> 且其值与此实例相等，则为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-136"><see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and its value is the same as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="xamlValueConverter.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="bad0c-137">要比较的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-137">The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> to compare.</span></span></param>
        <summary><span data-ttu-id="bad0c-138">确定 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的此实例与另一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="bad0c-138">Determines whether this instance of <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and another <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object have the same value.</span></span></summary>
        <returns><span data-ttu-id="bad0c-139">如果 <see langword="true" /> 是一个 <paramref name="other" /> 且其值与此实例相等，则为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-139"><see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and its value is the same as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlValueConverter.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bad0c-140">返回此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="bad0c-140">Returns the hash code for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></summary>
        <returns><span data-ttu-id="bad0c-141">整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="bad0c-141">An integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bad0c-142">获取此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="bad0c-142">Gets a string name for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></summary>
        <value><span data-ttu-id="bad0c-143">此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="bad0c-143">A string name for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bad0c-144">此属性的值是通过以下方式之一建立的：</span><span class="sxs-lookup"><span data-stu-id="bad0c-144">The value of this property is established by one of the following:</span></span>  
  
-   <span data-ttu-id="bad0c-145">构造函数参数（请参阅 <xref:System.Xaml.Schema.XamlValueConverter%601.%23ctor%2A?displayProperty=nameWithType>）。</span><span class="sxs-lookup"><span data-stu-id="bad0c-145">A constructor parameter (see <xref:System.Xaml.Schema.XamlValueConverter%601.%23ctor%2A?displayProperty=nameWithType>).</span></span>  
  
-   <span data-ttu-id="bad0c-146">处理其他构造函数输入并形成字符串的内部逻辑。</span><span class="sxs-lookup"><span data-stu-id="bad0c-146">Internal logic that processes other constructor inputs and forms a string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter1, System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter1, class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (converter1 As XamlValueConverter(Of TConverterBase), converter2 As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter1, System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; * System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="converter1 = converter2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter1" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
        <Parameter Name="converter2" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="converter1"><span data-ttu-id="bad0c-147">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-147">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or <see langword="null" />.</span></span></param>
        <param name="converter2"><span data-ttu-id="bad0c-148">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-148">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="bad0c-149">确定两个指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="bad0c-149">Determines whether two specified <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> objects have the same value.</span></span></summary>
        <returns><span data-ttu-id="bad0c-150">如果 <see langword="true" /> 的值与 <paramref name="converter1" /> 的值相同，则为 <paramref name="converter2" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-150"><see langword="true" /> if the value of <paramref name="converter1" /> is the same as the value of <paramref name="converter2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter1, System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter1, class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (converter1 As XamlValueConverter(Of TConverterBase), converter2 As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter1, System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; * System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.op_Inequality (converter1, converter2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter1" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
        <Parameter Name="converter2" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="converter1"><span data-ttu-id="bad0c-151">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-151">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or <see langword="null" />.</span></span></param>
        <param name="converter2"><span data-ttu-id="bad0c-152">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-152">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="bad0c-153">确定两个指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="bad0c-153">Determines whether two specified <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="bad0c-154">如果 <see langword="true" /> 的值与 <paramref name="converter1" /> 的值不同，则为 <paramref name="converter2" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-154"><see langword="true" /> if the value of <paramref name="converter1" /> is different than the value of <paramref name="converter2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType TargetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ TargetType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : System.Xaml.XamlType" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bad0c-155">获取 <see cref="T:System.Xaml.XamlType" /> 的目标 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-155">Gets the target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></summary>
        <value><span data-ttu-id="bad0c-156"><see cref="T:System.Xaml.XamlType" /> 的目标 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-156">The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlValueConverter.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bad0c-157">返回一个表示此 <see cref="T:System.String" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-157">Returns a <see cref="T:System.String" /> that represents this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></summary>
        <returns><span data-ttu-id="bad0c-158">表示此 <see cref="T:System.String" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</span><span class="sxs-lookup"><span data-stu-id="bad0c-158">A <see cref="T:System.String" /> that represents this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bad0c-159"><xref:System.Xaml.Schema.XamlValueConverter%601.ToString%2A> 值基于 <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A>。</span><span class="sxs-lookup"><span data-stu-id="bad0c-159">The <xref:System.Xaml.Schema.XamlValueConverter%601.ToString%2A> value is based on <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
