<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d155bca2aaa96e96ca9e65e2fe859e60123643e" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82294125" /></Metadata><TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8ce37-101">提供一个扩展点，该扩展点可通过除反射和构造函数之外的其他技术来构造 XAML 类型的实例。</span><span class="sxs-lookup"><span data-stu-id="8ce37-101">Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-102"><xref:System.Xaml.Schema.XamlTypeInvoker> 的目的是启用可扩展 XAML 类型系统、架构和不完全依赖于 CLR 功能（如 CLR 特性、通过 <xref:System.Type> 和 <xref:System.Reflection.MemberInfo>的反射信息等）的工作运行时。</span><span class="sxs-lookup"><span data-stu-id="8ce37-102">The purpose of <xref:System.Xaml.Schema.XamlTypeInvoker> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span> <span data-ttu-id="8ce37-103"><xref:System.Xaml.Schema.XamlTypeInvoker> 的子类用作 XAML 架构类（如 <xref:System.Xaml.XamlType>）的备用构造函数的输入参数。</span><span class="sxs-lookup"><span data-stu-id="8ce37-103">Subclasses of <xref:System.Xaml.Schema.XamlTypeInvoker> are used as input parameters for the alternate constructors of XAML schema classes such as <xref:System.Xaml.XamlType>.</span></span> <span data-ttu-id="8ce37-104">子类 <xref:System.Xaml.XamlType>，并将 <xref:System.Xaml.Schema.XamlTypeInvoker> 传递到基构造函数。</span><span class="sxs-lookup"><span data-stu-id="8ce37-104">You subclass <xref:System.Xaml.XamlType> and pass the <xref:System.Xaml.Schema.XamlTypeInvoker> through to the base constructor.</span></span> <span data-ttu-id="8ce37-105">除了为构造函数定义 <xref:System.Xaml.Schema.XamlTypeInvoker> 之外，还必须至少为 <xref:System.Xaml.XamlType>的 `Lookup` 方法提供重写。</span><span class="sxs-lookup"><span data-stu-id="8ce37-105">Along with defining a <xref:System.Xaml.Schema.XamlTypeInvoker> for the constructor, you must also provide overrides for at least some of the `Lookup` methods of <xref:System.Xaml.XamlType>.</span></span>  
  
 <span data-ttu-id="8ce37-106"><xref:System.Xaml.Schema.XamlTypeInvoker> 具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="8ce37-106"><xref:System.Xaml.Schema.XamlTypeInvoker> has a default implementation.</span></span> <span data-ttu-id="8ce37-107">默认实现遵循与 XAML 架构类型默认实现类似的模型 <xref:System.Xaml.XamlType> 和 <xref:System.Xaml.XamlMember>： CLR 类型系统用于实例化、值和查找，包括使用 CLR 特性、<xref:System.Type> 和 <xref:System.Reflection.MemberInfo>等。</span><span class="sxs-lookup"><span data-stu-id="8ce37-107">The default implementation follows a similar model to the default implementation of XAML schema types <xref:System.Xaml.XamlType> and <xref:System.Xaml.XamlMember>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span>  
  
 <span data-ttu-id="8ce37-108"><xref:System.Xaml.Schema.XamlTypeInvoker> 提供基本实例化（<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>）的方法，以及与 <xref:System.Xaml.XamlType> 表示集合、字典或数组的类型（<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>）相关的方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-108"><xref:System.Xaml.Schema.XamlTypeInvoker> provides methods for basic instantiation (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) and methods that are relevant for types where the <xref:System.Xaml.XamlType> represents a collection, dictionary or array (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ce37-109">初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8ce37-109">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ce37-110">初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8ce37-110">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-111">默认实现为空。</span><span class="sxs-lookup"><span data-stu-id="8ce37-111">The default implementation is empty.</span></span>  
  
 <span data-ttu-id="8ce37-112">此构造函数在内部调用以提供 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>的值。</span><span class="sxs-lookup"><span data-stu-id="8ce37-112">This constructor is invoked internally to provide a value for <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>.</span></span> <span data-ttu-id="8ce37-113">对于 <xref:System.Xaml.Schema.XamlTypeInvoker> 子类，应将 <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> 签名用于构造，或提供一个重写，以将 <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> 作为基。</span><span class="sxs-lookup"><span data-stu-id="8ce37-113">For a <xref:System.Xaml.Schema.XamlTypeInvoker> subclass, it is expected that you either use the <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> signature for construction or provide an override that calls <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> as base.</span></span> <span data-ttu-id="8ce37-114">提供 <xref:System.Xaml.XamlType> 可实现默认模式，其中 <xref:System.Xaml.Schema.XamlTypeInvoker> 是不可变的。</span><span class="sxs-lookup"><span data-stu-id="8ce37-114">Providing the <xref:System.Xaml.XamlType> implements a default pattern where <xref:System.Xaml.Schema.XamlTypeInvoker> is immutable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8ce37-115">与此 <see cref="T:System.Xaml.XamlType" /> 相关的特定 XAML 类型的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 值。</span><span class="sxs-lookup"><span data-stu-id="8ce37-115">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></param>
        <summary><span data-ttu-id="8ce37-116">基于提供的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8ce37-116">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-117">此构造函数基于用于构造 <xref:System.Xaml.Schema.XamlTypeInvoker> 的 <xref:System.Xaml.XamlType> 在内部调用。</span><span class="sxs-lookup"><span data-stu-id="8ce37-117">This constructor is called internally based on the <xref:System.Xaml.XamlType> where the <xref:System.Xaml.Schema.XamlTypeInvoker> is used for construction.</span></span> <span data-ttu-id="8ce37-118">此处提供的 `type` 与 <xref:System.Xaml.Schema.XamlTypeInvoker>的所有其他方法调用相关。</span><span class="sxs-lookup"><span data-stu-id="8ce37-118">The `type` provided here is relevant to all other method calls for <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ce37-119"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-119"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="8ce37-120">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-120">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></param>
        <param name="item"><span data-ttu-id="8ce37-121">要添加的项。</span><span class="sxs-lookup"><span data-stu-id="8ce37-121">The item to add.</span></span></param>
        <summary><span data-ttu-id="8ce37-122">将所提供的项添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的实例。</span><span class="sxs-lookup"><span data-stu-id="8ce37-122">Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-123">只应在表示集合的 <xref:System.Xaml.XamlType> 上调用此方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-123">You should only call this method on a <xref:System.Xaml.XamlType> that represents a collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ce37-124">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-124">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span></span>  
  
 <span data-ttu-id="8ce37-125">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8ce37-125">**-or-**</span></span>  
  
<span data-ttu-id="8ce37-126">在其相关类型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-126">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ce37-127"><paramref name="instance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-127"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xaml.XamlSchemaException"><span data-ttu-id="8ce37-128">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-128"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ce37-129">基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。</span><span class="sxs-lookup"><span data-stu-id="8ce37-129">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span></span> <span data-ttu-id="8ce37-130">此帮助器在以下情况下始终引发： <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />，这包括 <see langword="null" /><see cref="T:System.Xaml.XamlType" /> <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 的情况。</span><span class="sxs-lookup"><span data-stu-id="8ce37-130">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ce37-131">在内部，基实现调用 <see cref="P:System.Xaml.XamlType.IsCollection" />，并在结果为 <see langword="false" />时引发。</span><span class="sxs-lookup"><span data-stu-id="8ce37-131">Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsCollection" />, and throws if the result is <see langword="false" />.</span></span>  
  
<span data-ttu-id="8ce37-132">基实现不一定使用其自己的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="8ce37-132">The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation.</span></span> <span data-ttu-id="8ce37-133">首先，尝试将 <paramref name="instance" /> 转换为 <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-133">First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IList" /> is attempted.</span></span> <span data-ttu-id="8ce37-134">如果成功，则调用 <see cref="M:System.Collections.IList.Add(System.Object)" />，并且该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="8ce37-134">If this succeeds, a call to <see cref="M:System.Collections.IList.Add(System.Object)" /> is made and the method returns.</span></span> <span data-ttu-id="8ce37-135">否则，基实现使用 CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 调用基础 <see langword="Add" /> 方法，此方法是从对此 <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 调用中获取的。</span><span class="sxs-lookup"><span data-stu-id="8ce37-135">Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span>  
  
<span data-ttu-id="8ce37-136">在基实现中，如果 <see langword="null" /><paramref name="item" />，则不会在此级别引发异常。</span><span class="sxs-lookup"><span data-stu-id="8ce37-136">In the base implementation no exception is raised at this level if <paramref name="item" /> is <see langword="null" />.</span></span> <span data-ttu-id="8ce37-137">在调用基础 <see langword="Add" /> 方法时，仍有可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="8ce37-137">It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked.</span></span> <span data-ttu-id="8ce37-138">如果 <see cref="P:System.Xaml.XamlType.ItemType" /> 不返回有效的结果，则可能会出现其他运行时异常。</span><span class="sxs-lookup"><span data-stu-id="8ce37-138">Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="8ce37-139">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-139">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></param>
        <param name="key"><span data-ttu-id="8ce37-140">要添加的项的字典键。</span><span class="sxs-lookup"><span data-stu-id="8ce37-140">Dictionary key for the item to add.</span></span></param>
        <param name="item"><span data-ttu-id="8ce37-141">要添加的项值。</span><span class="sxs-lookup"><span data-stu-id="8ce37-141">The item value to add.</span></span></param>
        <summary><span data-ttu-id="8ce37-142">将所提供的密钥和项值添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的实例。</span><span class="sxs-lookup"><span data-stu-id="8ce37-142">Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-143">只应在表示字典的 <xref:System.Xaml.XamlType> 上调用此方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-143">You should only call this method on a <xref:System.Xaml.XamlType> that represents a dictionary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ce37-144">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-144">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span></span>  
  
 <span data-ttu-id="8ce37-145">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8ce37-145">**-or-**</span></span>  
  
<span data-ttu-id="8ce37-146">已在其相关类型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-146">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ce37-147"><paramref name="instance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-147"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xaml.XamlSchemaException"><span data-ttu-id="8ce37-148">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-148"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ce37-149">基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。</span><span class="sxs-lookup"><span data-stu-id="8ce37-149">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span></span> <span data-ttu-id="8ce37-150">此帮助器在以下情况下始终引发： <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />，这包括 <see langword="null" /><see cref="T:System.Xaml.XamlType" /> <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 的情况。</span><span class="sxs-lookup"><span data-stu-id="8ce37-150">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ce37-151">在内部，基实现调用 <see cref="P:System.Xaml.XamlType.IsDictionary" />，并在结果为 <see langword="false" />时引发。</span><span class="sxs-lookup"><span data-stu-id="8ce37-151">Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsDictionary" />, and throws if the result is <see langword="false" />.</span></span>  
  
<span data-ttu-id="8ce37-152">基实现不一定使用其自己的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="8ce37-152">The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation.</span></span> <span data-ttu-id="8ce37-153">首先，尝试将 <paramref name="instance" /> 转换为 <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-153">First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IDictionary" /> is attempted.</span></span> <span data-ttu-id="8ce37-154">如果成功，则调用 <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />，并且该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="8ce37-154">If this succeeds, a call to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> is made and the method returns.</span></span> <span data-ttu-id="8ce37-155">否则，基实现使用 CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 调用基础 <see langword="Add" /> 方法，此方法是从对此 <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 调用中获取的。</span><span class="sxs-lookup"><span data-stu-id="8ce37-155">Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span>  
  
<span data-ttu-id="8ce37-156">在基实现中，如果 <see langword="null" /><paramref name="item" /> 或 <paramref name="key" />，则在此级别不引发异常。</span><span class="sxs-lookup"><span data-stu-id="8ce37-156">In the base implementation no exception is raised at this level if <paramref name="item" /> or <paramref name="key" /> are <see langword="null" />.</span></span> <span data-ttu-id="8ce37-157">在调用基础 <see langword="Add" /> 方法时，仍有可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="8ce37-157">It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked.</span></span> <span data-ttu-id="8ce37-158">如果 <see cref="P:System.Xaml.XamlType.ItemType" /> 不返回有效的结果，则可能会出现其他运行时异常。</span><span class="sxs-lookup"><span data-stu-id="8ce37-158">Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments"><span data-ttu-id="8ce37-159">一个对象数组，这些对象为实例提供 <see langword="x:ConstructorArgs" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-159">An array of objects that supply the <see langword="x:ConstructorArgs" /> for the instance.</span></span> <span data-ttu-id="8ce37-160">对于不需要或者不使用 <see langword="null" /> 的类型可能为 <see langword="x:ConstructorArgs" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-160">May be <see langword="null" /> for types that do not require or use <see langword="x:ConstructorArgs" />.</span></span></param>
        <summary><span data-ttu-id="8ce37-161">基于此 <see cref="T:System.Xaml.XamlType" /> 的构造启动的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 创建对象实例。</span><span class="sxs-lookup"><span data-stu-id="8ce37-161">Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></summary>
        <returns><span data-ttu-id="8ce37-162">基于此 <see cref="T:System.Xaml.XamlType" /> 的构造启动的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 所创建的实例。</span><span class="sxs-lookup"><span data-stu-id="8ce37-162">The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8ce37-163">未能解析构造函数。</span><span class="sxs-lookup"><span data-stu-id="8ce37-163">Could not resolve a constructor.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ce37-164">基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。</span><span class="sxs-lookup"><span data-stu-id="8ce37-164">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span></span> <span data-ttu-id="8ce37-165">此帮助器在以下情况下始终引发： <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />，这包括 <see langword="null" /><see cref="T:System.Xaml.XamlType" /> <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 的情况。</span><span class="sxs-lookup"><span data-stu-id="8ce37-165">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType"><span data-ttu-id="8ce37-166"><see langword="Add" /> 方法所使用的项类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-166"><see cref="T:System.Xaml.XamlType" /> for the item type that is used by the <see langword="Add" /> method.</span></span></param>
        <summary><span data-ttu-id="8ce37-167">返回与集合或字典相关的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的相关 <see langword="Add" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-167">Returns the relevant <see langword="Add" /> method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary.</span></span></summary>
        <returns><span data-ttu-id="8ce37-168"><see langword="Add" /> 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 信息，或为 NULL。</span><span class="sxs-lookup"><span data-stu-id="8ce37-168">CLR <see cref="T:System.Reflection.MethodInfo" /> information for the <see langword="Add" /> method, or null.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-169">如果此 <xref:System.Xaml.Schema.XamlTypeInvoker> 的 <xref:System.Xaml.XamlType> 不是可写的集合或字典，则此方法应返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="8ce37-169">This method should return `null` for cases where the <xref:System.Xaml.XamlType> for this <xref:System.Xaml.Schema.XamlTypeInvoker> is not a writeable collection or dictionary.</span></span> <span data-ttu-id="8ce37-170">具体而言，应在 <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> 返回 `None`的情况下返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="8ce37-170">Specifically, should return `null` for cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> returns `None`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8ce37-171">如果不是访问完全受信任的 XAML 类型系统，此方法可能会向调用方报告错误的 <xref:System.Reflection.MethodInfo> 信息。</span><span class="sxs-lookup"><span data-stu-id="8ce37-171">If you are not accessing a fully trusted XAML type system, this method has the potential to report false <xref:System.Reflection.MethodInfo> information to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ce37-172"><paramref name="contentType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-172"><paramref name="contentType" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ce37-173">如果 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />，则基实现返回 <see langword="null" />，其中包括 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="P:System.Xaml.XamlType.UnderlyingType" /> <see langword="null" />的情况。</span><span class="sxs-lookup"><span data-stu-id="8ce37-173">The base implementation returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span></span> <span data-ttu-id="8ce37-174">如果 <see cref="P:System.Xaml.XamlType.ItemType" /> <see langword="null" />，它也会返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-174">It also returns <see langword="null" /> if <see cref="P:System.Xaml.XamlType.ItemType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ce37-175">XAML 集合可能有多个 <see langword="Add" /> 方法，因为 XAML 集合可能支持多个内容类型（请参见 <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />，或参阅 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />，以了解有关此概念在 WPF 中的一个实现的信息。）</span><span class="sxs-lookup"><span data-stu-id="8ce37-175">XAML collections potentially have more than one <see langword="Add" /> method, because a XAML collection can potentially support more than one content type (see <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, or see <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> for information about one implementation of this concept in WPF).</span></span> <span data-ttu-id="8ce37-176">默认实现使用内部逻辑根据签名和提供的 <paramref name="contentType" />的类型返回最佳匹配项。</span><span class="sxs-lookup"><span data-stu-id="8ce37-176">The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <paramref name="contentType" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ce37-177">返回一个对象，该对象表示可对项进行枚举的方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-177">Returns an object representing a method that can enumerate over items.</span></span></summary>
        <returns><span data-ttu-id="8ce37-178">枚举器方法的 <see cref="T:System.Reflection.MethodInfo" />，或为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-178"><see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-179">如果 <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> 返回 `None`，则应返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="8ce37-179">Should return `null` for cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> returns `None`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8ce37-180">如果不是访问完全受信任的 XAML 类型系统，此方法可能会向调用方报告错误的 <xref:System.Reflection.MethodInfo> 信息。</span><span class="sxs-lookup"><span data-stu-id="8ce37-180">If you are not accessing a fully trusted XAML type system, this method has the potential to report false <xref:System.Reflection.MethodInfo> information to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ce37-181">基实现调用内部 helper 方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-181">The base implementation calls an internal helper method.</span></span> <span data-ttu-id="8ce37-182">如果 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />，则该帮助器将返回 <see langword="null" />，其中包括 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="P:System.Xaml.XamlType.UnderlyingType" /> <see langword="null" />的情况。</span><span class="sxs-lookup"><span data-stu-id="8ce37-182">That helper returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span></span> <span data-ttu-id="8ce37-183">如果 <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> 返回 <see langword="None" />，则它还会返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-183">It also returns <see langword="null" /> for cases where <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> returns <see langword="None" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="8ce37-184">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-184">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></param>
        <summary><span data-ttu-id="8ce37-185">返回一个表示项集的 <see cref="T:System.Collections.IEnumerator" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="8ce37-185">Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</span></span></summary>
        <returns><span data-ttu-id="8ce37-186">一个 <see cref="T:System.Collections.IEnumerator" /> 对象，或为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-186">An <see cref="T:System.Collections.IEnumerator" /> object, or <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ce37-187">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-187">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span></span>  
  
 <span data-ttu-id="8ce37-188">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8ce37-188">**-or-**</span></span>  
  
<span data-ttu-id="8ce37-189">在相关类型不是集合或字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</span><span class="sxs-lookup"><span data-stu-id="8ce37-189">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ce37-190"><paramref name="instance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-190"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ce37-191">基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。</span><span class="sxs-lookup"><span data-stu-id="8ce37-191">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span></span> <span data-ttu-id="8ce37-192">此帮助器在以下情况下始终引发： <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />，这包括 <see langword="null" /><see cref="T:System.Xaml.XamlType" /> <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 的情况。</span><span class="sxs-lookup"><span data-stu-id="8ce37-192">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ce37-193">基实现不一定使用其自己的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="8ce37-193">The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementation.</span></span> <span data-ttu-id="8ce37-194">首先，尝试将 <paramref name="instance" /> 转换为 <see cref="T:System.Collections.IEnumerable" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-194">First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IEnumerable" /> is attempted.</span></span> <span data-ttu-id="8ce37-195">如果成功，则对 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 进行调用，并且方法将返回值。</span><span class="sxs-lookup"><span data-stu-id="8ce37-195">If this succeeds, a call to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> is made and the method returns that return value.</span></span> <span data-ttu-id="8ce37-196">否则，基实现使用 CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 调用基础 <see langword="GetEnumerator" /> 方法，此方法是从对此 <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> 调用中获取的。</span><span class="sxs-lookup"><span data-stu-id="8ce37-196">Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="GetEnumerator" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ce37-197">获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入所实现的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 时使用的处理程序。</span><span class="sxs-lookup"><span data-stu-id="8ce37-197">Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</span></span></summary>
        <value><span data-ttu-id="8ce37-198">一个处理此情况的处理程序实现。</span><span class="sxs-lookup"><span data-stu-id="8ce37-198">A handler implementation that handles this case.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-199">事件处理程序基于 <xref:System.EventHandler%601> 用 <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> 事件数据进行约束。</span><span class="sxs-lookup"><span data-stu-id="8ce37-199">The event handler is based on <xref:System.EventHandler%601> constrained with <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> event data.</span></span>  
  
 <span data-ttu-id="8ce37-200">返回的值将调用 <xref:System.Xaml.Schema.XamlTypeInvoker> 所基于的 <xref:System.Xaml.XamlType> 的 <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> 行为。</span><span class="sxs-lookup"><span data-stu-id="8ce37-200">The value returned invokes the <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> behavior of the <xref:System.Xaml.XamlType> that the <xref:System.Xaml.Schema.XamlTypeInvoker> is based on.</span></span>  
  
 <span data-ttu-id="8ce37-201">返回值为基于未知 <xref:System.Xaml.XamlType>的 <xref:System.Xaml.Schema.XamlTypeInvoker> `null`。</span><span class="sxs-lookup"><span data-stu-id="8ce37-201">The return value is `null` for a <xref:System.Xaml.Schema.XamlTypeInvoker> that is based on an unknown <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ce37-202">获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入 CLR 实现的 <see cref="T:System.ComponentModel.TypeConverter" /> 时使用的处理程序。</span><span class="sxs-lookup"><span data-stu-id="8ce37-202">Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</span></span></summary>
        <value><span data-ttu-id="8ce37-203">一个处理此情况的处理程序实现。</span><span class="sxs-lookup"><span data-stu-id="8ce37-203">A handler implementation that handles this case.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-204">事件处理程序基于 <xref:System.EventHandler%601> 用 <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> 事件数据进行约束。</span><span class="sxs-lookup"><span data-stu-id="8ce37-204">The event handler is based on <xref:System.EventHandler%601> constrained with <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> event data.</span></span>  
  
 <span data-ttu-id="8ce37-205">返回的值将调用 <xref:System.Xaml.Schema.XamlTypeInvoker> 所基于的 <xref:System.Xaml.XamlType> 的 <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> 行为。</span><span class="sxs-lookup"><span data-stu-id="8ce37-205">The value returned invokes the <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> behavior of the <xref:System.Xaml.XamlType> that the <xref:System.Xaml.Schema.XamlTypeInvoker> is based on.</span></span>  
  
 <span data-ttu-id="8ce37-206">返回值为基于未知 <xref:System.Xaml.XamlType>的 <xref:System.Xaml.Schema.XamlTypeInvoker> `null`。</span><span class="sxs-lookup"><span data-stu-id="8ce37-206">The return value is `null` for a <xref:System.Xaml.Schema.XamlTypeInvoker> that is based on an unknown <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ce37-207">提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-207">Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></summary>
        <value><span data-ttu-id="8ce37-208">一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span><span class="sxs-lookup"><span data-stu-id="8ce37-208">A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ce37-209">为 system.exception 定义的 API 的 <xref:System.Xaml.Schema.XamlTypeInvoker> 参数提供此值通常会导致调用的代码引发异常。</span><span class="sxs-lookup"><span data-stu-id="8ce37-209">Supplying this value for a <xref:System.Xaml.Schema.XamlTypeInvoker> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
