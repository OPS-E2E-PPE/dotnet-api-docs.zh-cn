<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e093b385eb17baa6eb6652f3108ad1f59721551a" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82301431" /></Metadata><TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PackageStore extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示结合 <see cref="T:System.IO.Packaging.Package" /> 使用的应用程序特定的 <see cref="T:System.IO.Packaging.PackWebRequest" /> 实例的集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackageStore> 定义在应用程序中打开和活动的包的引用集合。  可以访问添加到 <xref:System.IO.Packaging.PackageStore> 中的包，其密钥 URI 值为。  <xref:System.IO.Packaging.PackageStore> 支持以下三种常见用途：  
  
1.  通过 <xref:System.IO.Packaging.PackWebRequest>访问 <xref:System.IO.Packaging.PackagePart> 数据。  
  
2.  获取给定包 URI 的 <xref:System.IO.Packaging.Package> 实例的应用程序。  
  
3.  访问在 <xref:System.IO.MemoryStream>中创建并存储的包。  
  
 为了提高性能并最大程度地降低重复打开和关闭文件的开销，该 <xref:System.IO.Packaging.PackageStore> 用于管理由应用程序 <xref:System.IO.Packaging.PackWebRequest> 和直接访问的包的实例。  在访问包中的数据时，首先会检查所请求 <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> 的 <xref:System.IO.Packaging.Package> 地址，以查看是否已在 <xref:System.IO.Packaging.PackageStore>中定义并打开了包。  如果在 <xref:System.IO.Packaging.PackageStore>中将包定义为开放，则无需为每个请求重复打开和关闭包即可直接访问请求的部件。  
  
 如果你的应用程序使用 <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>打开包，则可以调用 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 将包添加到 <xref:System.IO.Packaging.PackageStore>中。  稍后，应调用 <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> 以便在调用 <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>之前从 <xref:System.IO.Packaging.PackageStore> 中删除包。  
  
 使用 <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> 构造函数打开的 XPS 包将在创建和释放文档时自动添加并从 <xref:System.IO.Packaging.PackageStore> 中删除。  （不需要为用 <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> 构造函数打开的 XPS 包分别调用 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 或 <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>。）  
  
 通过 <xref:System.IO.Packaging.PackageStore> 访问的包的文件 i/o 权限与打开包时对包设置的 i/o 权限保持相同。  <xref:System.IO.Packaging.PackageStore> 仅提供对已添加存储的包的引用。  应用程序会正常打开、更新和关闭每个包。  
  
 如果将包添加到 <xref:System.IO.Packaging.PackageStore> 中，则可以在多线程环境中访问这些包，因为它们与 <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>的 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 分析器结合使用。  在多线程环境中操作时，应用程序必须在访问前锁定包。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPackage (uri As Uri, package As Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">要在 <see cref="T:System.IO.Packaging.PackWebRequest" /> 中比较的 <paramref name="package" /> 的键 URI。</param>
        <param name="package">要添加到存储区的包。</param>
        <summary>将 <see cref="T:System.IO.Packaging.Package" /> 添加到存储区。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 定义在调用 <xref:System.IO.Packaging.PackWebRequest>时比较的包的密钥 URI。  
  
 如果 `packageUri` 与 <xref:System.IO.Packaging.PackWebRequest> 调用中 <xref:System.IO.Packaging.PackagePart> 的 <xref:System.IO.Packaging.PackagePart.Uri%2A> 匹配，则将使用在 <xref:System.IO.Packaging.PackageStore> 中定义的包访问请求的部分。  
  
 如果 `packageUri` 与 <xref:System.IO.Packaging.PackWebRequest> 调用中 <xref:System.IO.Packaging.PackagePart> 的 <xref:System.IO.Packaging.PackagePart.Uri%2A> 不匹配，则将打开具有指定 URI 的包以访问请求的部分。  
  
 **安全说明**此方法要求对所有自定义 <xref:System.IO.Packaging.Package> （非<xref:System.IO.Packaging.ZipPackage>）类型 <xref:System.Security.Permissions.EnvironmentPermission>。  
  
   
  
## Examples  
 下面的示例显示如何使用 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 是无效的包 URI。</exception>
        <exception cref="T:System.InvalidOperationException">带有指定 <paramref name="packageUri" /> 的包已位于存储区中。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPackage (uri As Uri) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">要返回的包的统一资源标识符 (URI)。</param>
        <summary>从存储区中返回具有指定 URI 的 <see cref="T:System.IO.Packaging.Package" />。</summary>
        <returns>带有指定 <paramref name="packageUri" /> 的包；或者 <see langword="null" />（如果带有指定 <paramref name="packageUri" /> 的包不在存储区中）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 与 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 方法调用中指定的 Uri 匹配。  
  
 **安全说明**此方法要求对所有自定义 <xref:System.IO.Packaging.Package> （非<xref:System.IO.Packaging.ZipPackage>）类型 <xref:System.Security.Permissions.EnvironmentPermission>。  
  
   
  
## Examples  
 下面的示例显示如何使用 <xref:System.IO.Packaging.PackageStore.GetPackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 是无效的包 URI。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePackage (uri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">要删除的包的统一资源标识符 (URI)。</param>
        <summary>从存储区中删除具有指定 URI 的 <see cref="T:System.IO.Packaging.Package" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 与 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 方法调用中指定的 Uri 匹配。  
  
 **安全说明**此方法要求对所有自定义 <xref:System.IO.Packaging.Package> （非<xref:System.IO.Packaging.ZipPackage>）类型 <xref:System.Security.Permissions.EnvironmentPermission>。  
  
   
  
## Examples  
 下面的示例显示如何使用 <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> 方法。  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 是无效的包 URI。</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>
