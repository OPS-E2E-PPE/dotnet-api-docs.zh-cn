<Type Name="IDataflowBlock" FullName="System.Threading.Tasks.Dataflow.IDataflowBlock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6e0fb864037886b45e455cdda67d3e2ce6bfbec5" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78784074" /></Metadata><TypeSignature Language="C#" Value="public interface IDataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataflowBlock" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataflowBlock" />
  <TypeSignature Language="F#" Value="type IDataflowBlock = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.5.25.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
    <AssemblyVersion>4.6.4.0</AssemblyVersion>
    <AssemblyVersion>4.6.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>表示数据流块。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete();" />
      <MemberSignature Language="F#" Value="abstract member Complete : unit -&gt; unit" Usage="iDataflowBlock.Complete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在数据流块上调用 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> 后，该块将完成，并且其 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> 任务在处理所有以前可用的数据后将进入最终状态。 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> 不会阻止等待完成，而是会启动请求;若要等待完成，可以使用 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> 任务。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Completion As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Task ^ Completion { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Completion : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Dataflow.IDataflowBlock.Completion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
        <value>任务。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据流块在当前未处理消息时，将被视为已完成，并保证其不会再处理其他消息。 关联的块完成后，返回的 <xref:System.Threading.Tasks.Task> 将转换为已完成状态。 当块根据数据流块的定义语义成功完成其处理时，它将转换为 <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状态。 当数据流块由于未经处理的异常而提前完成处理时，它将转换为 <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Faulted> 状态，并且当数据流块由于接收取消请求而提前完成处理时，它将转换为 <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Canceled> 状态。 如果任务在 <xref:System.Threading.Tasks.TaskStatus.Faulted> 状态中完成，则其 `Exception` 属性将返回一个 <xref:System.AggregateException>，其中包含导致块失败的一个或多个异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fault">
      <MemberSignature Language="C#" Value="public void Fault (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Fault(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Fault (exception As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Fault(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member Fault : Exception -&gt; unit" Usage="iDataflowBlock.Fault exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">导致此错误的 <see cref="T:System.Exception" />。</param>
        <summary>导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在数据流块上调用 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> 后，该块将完成，并且其 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> 任务将进入最终状态。 如果对块进行错误处理，就像取消块一样，导致缓冲消息（未处理的输入消息以及 unoffered 的输出消息）丢失。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="exception" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
