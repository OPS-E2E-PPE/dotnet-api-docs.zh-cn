<Type Name="ObjectParameter" FullName="System.Data.Objects.ObjectParameter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f4b783f719421d7cfadf9f357869782ec82113d" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78814715" /></Metadata><TypeSignature Language="C#" Value="public sealed class ObjectParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectParameter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectParameter sealed" />
  <TypeSignature Language="F#" Value="type ObjectParameter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c29c6-101">表示传递给对象查询的查询参数。</span><span class="sxs-lookup"><span data-stu-id="c29c6-101">Represents a query parameter that is passed to an object query.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c29c6-102">表示传递给 <xref:System.Data.Objects.ObjectQuery%601> 或查询生成器方法的查询参数。</span><span class="sxs-lookup"><span data-stu-id="c29c6-102">Represents a query parameter that is passed to an <xref:System.Data.Objects.ObjectQuery%601> or a query builder method.</span></span> <span data-ttu-id="c29c6-103">有关详细信息，请参阅[查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="c29c6-103">For more information, see [Query Builder Methods](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100)).</span></span>

 <span data-ttu-id="c29c6-104">对象参数由名称、类型和值组成。</span><span class="sxs-lookup"><span data-stu-id="c29c6-104">Object parameters consist of a name, a type, and a value.</span></span>

 <span data-ttu-id="c29c6-105">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="c29c6-105">This class cannot be inherited.</span></span> <span data-ttu-id="c29c6-106">有关详细信息，请参阅 <xref:System.Data.Objects.ObjectParameterCollection>。</span><span class="sxs-lookup"><span data-stu-id="c29c6-106">For more information, see <xref:System.Data.Objects.ObjectParameterCollection>.</span></span>



## Examples
 <span data-ttu-id="c29c6-107">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="c29c6-107">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="c29c6-108">该示例向集合添加新参数。</span><span class="sxs-lookup"><span data-stu-id="c29c6-108">The example adds new parameters to the collection.</span></span> <span data-ttu-id="c29c6-109">它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。</span><span class="sxs-lookup"><span data-stu-id="c29c6-109">It iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md"><span data-ttu-id="c29c6-110">以对象形式查询数据（实体框架）</span><span class="sxs-lookup"><span data-stu-id="c29c6-110">Querying Data as Objects (Entity Framework)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c29c6-111">初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c29c6-111">Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectParameter (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectParameter(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectParameter : string * obj -&gt; System.Data.Objects.ObjectParameter" Usage="new System.Data.Objects.ObjectParameter (name, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c29c6-112">参数名称。</span><span class="sxs-lookup"><span data-stu-id="c29c6-112">The parameter name.</span></span> <span data-ttu-id="c29c6-113">此名称不应包含“@”参数标记（它用在 [!INCLUDE[esql](~/includes/esql-md.md)] 语句中），只能为实际名称。</span><span class="sxs-lookup"><span data-stu-id="c29c6-113">This name should not include the "@" parameter marker that is used in [!INCLUDE[esql](~/includes/esql-md.md)] statements, only the actual name.</span></span> <span data-ttu-id="c29c6-114">表达式的第一个字符必须为字母。</span><span class="sxs-lookup"><span data-stu-id="c29c6-114">The first character of the expression must be a letter.</span></span> <span data-ttu-id="c29c6-115">表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</span><span class="sxs-lookup"><span data-stu-id="c29c6-115">Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</span></span></param>
        <param name="value"><span data-ttu-id="c29c6-116">参数的初始值（及固有类型）。</span><span class="sxs-lookup"><span data-stu-id="c29c6-116">The initial value (and inherently, the type) of the parameter.</span></span></param>
        <summary><span data-ttu-id="c29c6-117">使用指定的名称和值初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c29c6-117">Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class with the specified name and value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c29c6-118">此构造函数使用指定的名称和值创建一个参数。</span><span class="sxs-lookup"><span data-stu-id="c29c6-118">This constructor creates a parameter from the specified name and value.</span></span> <span data-ttu-id="c29c6-119">根据参数的值推断其类型。</span><span class="sxs-lookup"><span data-stu-id="c29c6-119">The type of the parameter is inferred from the value.</span></span>

 <span data-ttu-id="c29c6-120">添加到 <xref:System.Data.Objects.ObjectParameterCollection> 后，该参数名称不能进行更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-120">When added to the <xref:System.Data.Objects.ObjectParameterCollection>, the parameter name cannot be changed.</span></span> <span data-ttu-id="c29c6-121">该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-121">The parameter value can be changed through the <xref:System.Data.Objects.ObjectParameter.Value%2A> property.</span></span> <span data-ttu-id="c29c6-122">编译查询后，该值不能进行更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-122">After the query has been compiled, the value cannot be changed.</span></span> <span data-ttu-id="c29c6-123">有关详细信息，请参阅[查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="c29c6-123">For more information, see [Query Builder Methods](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100)).</span></span>



## Examples
 <span data-ttu-id="c29c6-124">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="c29c6-124">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="c29c6-125">该示例向集合添加新参数。</span><span class="sxs-lookup"><span data-stu-id="c29c6-125">The example adds new parameters to the collection.</span></span> <span data-ttu-id="c29c6-126">它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。</span><span class="sxs-lookup"><span data-stu-id="c29c6-126">It iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, the type and the value of each parameter in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c29c6-127">如果任一自变量的值为 null。</span><span class="sxs-lookup"><span data-stu-id="c29c6-127">If the value of either argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c29c6-128">如果名称自变量的值无效。</span><span class="sxs-lookup"><span data-stu-id="c29c6-128">If the value of the name argument is not valid.</span></span> <span data-ttu-id="c29c6-129">参数名称必须以字母开头，并且只能包含字母、数字和下划线。</span><span class="sxs-lookup"><span data-stu-id="c29c6-129">Parameter names must start with a letter and can only contain letters, numbers, and underscores.</span></span></exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md"><span data-ttu-id="c29c6-130">以对象形式查询数据并形成结果（实体框架）</span><span class="sxs-lookup"><span data-stu-id="c29c6-130">Querying Data as Objects and Shaping Results (Entity Framework)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectParameter (string name, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectParameter(System::String ^ name, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectParameter : string * Type -&gt; System.Data.Objects.ObjectParameter" Usage="new System.Data.Objects.ObjectParameter (name, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c29c6-131">参数名称。</span><span class="sxs-lookup"><span data-stu-id="c29c6-131">The parameter name.</span></span> <span data-ttu-id="c29c6-132">此名称不应包含“@”参数标记（它用在 [!INCLUDE[esql](~/includes/esql-md.md)] 语句中），只能为实际名称。</span><span class="sxs-lookup"><span data-stu-id="c29c6-132">This name should not include the "@" parameter marker that is used in the [!INCLUDE[esql](~/includes/esql-md.md)] statements, only the actual name.</span></span> <span data-ttu-id="c29c6-133">表达式的第一个字符必须为字母。</span><span class="sxs-lookup"><span data-stu-id="c29c6-133">The first character of the expression must be a letter.</span></span> <span data-ttu-id="c29c6-134">表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</span><span class="sxs-lookup"><span data-stu-id="c29c6-134">Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</span></span></param>
        <param name="type"><span data-ttu-id="c29c6-135">参数的公共语言运行库 (CLR) 类型。</span><span class="sxs-lookup"><span data-stu-id="c29c6-135">The common language runtime (CLR) type of the parameter.</span></span></param>
        <summary><span data-ttu-id="c29c6-136">使用指定的名称和类型初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c29c6-136">Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class with the specified name and type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c29c6-137">实例化后，该参数名称不能进行更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-137">When instantiated, the parameter name cannot be changed.</span></span> <span data-ttu-id="c29c6-138">该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行设置或更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-138">The parameter value can be set or changed through the <xref:System.Data.Objects.ObjectParameter.Value%2A> property.</span></span> <span data-ttu-id="c29c6-139">编译查询后，该值不能进行更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-139">After the query has been compiled, the value cannot be changed.</span></span> <span data-ttu-id="c29c6-140">有关详细信息，请参阅[查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="c29c6-140">For more information, see [Query Builder Methods](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100)).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c29c6-141">如果任一自变量的值为 null。</span><span class="sxs-lookup"><span data-stu-id="c29c6-141">If the value of either argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c29c6-142">如果名称自变量的值无效。</span><span class="sxs-lookup"><span data-stu-id="c29c6-142">If the value of the name argument is invalid.</span></span> <span data-ttu-id="c29c6-143">参数名称必须以字母开头，并且只能包含字母、数字和下划线。</span><span class="sxs-lookup"><span data-stu-id="c29c6-143">Parameter names must start with a letter and can only contain letters, numbers, and underscores.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Data.Objects.ObjectParameter.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c29c6-144">获取参数名称，该名称只能通过构造函数进行设置。</span><span class="sxs-lookup"><span data-stu-id="c29c6-144">Gets the parameter name, which can only be set through a constructor.</span></span></summary>
        <value><span data-ttu-id="c29c6-145">参数名称，它只能通过构造函数进行设置。</span><span class="sxs-lookup"><span data-stu-id="c29c6-145">The parameter name, which can only be set through a constructor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c29c6-146">实例化后，该参数名称不能进行更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-146">When instantiated, the parameter name cannot be changed.</span></span> <span data-ttu-id="c29c6-147">该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行设置或更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-147">The parameter value can be set or changed through the <xref:System.Data.Objects.ObjectParameter.Value%2A> property.</span></span> <span data-ttu-id="c29c6-148">编译查询后，该值不能进行更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-148">After the query has been compiled, the value cannot be changed.</span></span> <span data-ttu-id="c29c6-149">有关详细信息，请参阅[查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="c29c6-149">For more information, see [Query Builder Methods](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100)).</span></span>



## Examples
 <span data-ttu-id="c29c6-150">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="c29c6-150">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="c29c6-151">该示例向集合添加新参数。</span><span class="sxs-lookup"><span data-stu-id="c29c6-151">The example adds new parameters to the collection.</span></span> <span data-ttu-id="c29c6-152">它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。</span><span class="sxs-lookup"><span data-stu-id="c29c6-152">It iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md"><span data-ttu-id="c29c6-153">以对象形式查询数据并形成结果（实体框架）</span><span class="sxs-lookup"><span data-stu-id="c29c6-153">Querying Data as Objects and Shaping Results (Entity Framework)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ParameterType">
      <MemberSignature Language="C#" Value="public Type ParameterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ParameterType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.ParameterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParameterType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ParameterType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterType : Type" Usage="System.Data.Objects.ObjectParameter.ParameterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c29c6-154">获取参数类型。</span><span class="sxs-lookup"><span data-stu-id="c29c6-154">Gets the parameter type.</span></span></summary>
        <value><span data-ttu-id="c29c6-155">参数的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="c29c6-155">The <see cref="T:System.Type" /> of the parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c29c6-156">参数类型只能通过构造函数进行设置。</span><span class="sxs-lookup"><span data-stu-id="c29c6-156">The parameter type can only be set through a constructor.</span></span>



## Examples
 <span data-ttu-id="c29c6-157">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="c29c6-157">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="c29c6-158">该示例向集合添加新参数。</span><span class="sxs-lookup"><span data-stu-id="c29c6-158">The example adds new parameters to the collection.</span></span> <span data-ttu-id="c29c6-159">它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。</span><span class="sxs-lookup"><span data-stu-id="c29c6-159">It iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md"><span data-ttu-id="c29c6-160">以对象形式查询数据并形成结果（实体框架）</span><span class="sxs-lookup"><span data-stu-id="c29c6-160">Querying Data as Objects and Shaping Results (Entity Framework)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Data.Objects.ObjectParameter.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c29c6-161">获取或设置参数值。</span><span class="sxs-lookup"><span data-stu-id="c29c6-161">Gets or sets the parameter value.</span></span></summary>
        <value><span data-ttu-id="c29c6-162">参数值。</span><span class="sxs-lookup"><span data-stu-id="c29c6-162">The parameter value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c29c6-163">编译查询后，该值不能进行更改。</span><span class="sxs-lookup"><span data-stu-id="c29c6-163">After the query has been compiled, the value cannot be changed.</span></span> <span data-ttu-id="c29c6-164">有关详细信息，请参阅[查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="c29c6-164">For more information, see [Query Builder Methods](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100)).</span></span>

 <span data-ttu-id="c29c6-165">如果新值与构造函数中声明的类型不兼容，可能引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="c29c6-165">If the new value is incompatible with the type declared in the constructor, it might cause a run-time exception.</span></span> <span data-ttu-id="c29c6-166">提供程序必须确定该值是否与声明的类型兼容。</span><span class="sxs-lookup"><span data-stu-id="c29c6-166">The provider must determine whether the value is compatible with the declared type.</span></span> <span data-ttu-id="c29c6-167">例如，如果初始类型为 <xref:System.Int32>，而新值为 <xref:System.Guid>，则可能接收到异常。</span><span class="sxs-lookup"><span data-stu-id="c29c6-167">For example, if the initial type is <xref:System.Int32> and the new value is <xref:System.Guid>, you might receive an exception.</span></span>



## Examples
 <span data-ttu-id="c29c6-168">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="c29c6-168">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="c29c6-169">该示例向集合添加新参数。</span><span class="sxs-lookup"><span data-stu-id="c29c6-169">The example adds new parameters to the collection.</span></span> <span data-ttu-id="c29c6-170">它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。</span><span class="sxs-lookup"><span data-stu-id="c29c6-170">It iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, the type and the value of each parameter in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md"><span data-ttu-id="c29c6-171">以对象形式查询数据并形成结果（实体框架）</span><span class="sxs-lookup"><span data-stu-id="c29c6-171">Querying Data as Objects and Shaping Results (Entity Framework)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
