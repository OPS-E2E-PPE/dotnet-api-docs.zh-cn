<Type Name="Touch" FullName="System.Windows.Input.Touch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9334ba7f46c5e46df676175d409786da8fcbe718" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83447365" /></Metadata><TypeSignature Language="C#" Value="public static class Touch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Touch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Touch" />
  <TypeSignature Language="VB.NET" Value="Public Class Touch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Touch abstract sealed" />
  <TypeSignature Language="F#" Value="type Touch = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个应用程序级服务，该服务处理来自操作系统的多点触控输入并引发 <see cref="E:System.Windows.Input.Touch.FrameReported" /> 事件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Touch.FrameReported> 事件包含在 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 中，以支持与 Silverlight 的兼容性。 如果不必确保与 Silverlight 兼容，请在 <xref:System.Windows.UIElement>、<xref:System.Windows.UIElement3D>或 <xref:System.Windows.ContentElement>上使用触控事件，例如 <xref:System.Windows.UIElement.TouchDown> 和 <xref:System.Windows.UIElement.TouchMove>。  
  
 <xref:System.Windows.Input.Touch.FrameReported> 事件不使用与其他 WPF 输入事件（如 <xref:System.Windows.UIElement.TouchDown> 和 <xref:System.Windows.UIElement.TouchMove>）相同的事件模型。 <xref:System.Windows.Input.Touch.FrameReported> 事件是在应用程序级别处理的单个事件，而不是作为可能通过 UI 的对象树进行路由的特定于元素的事件而公开。 因此，不能使用事件处理程序的 `sender` 参数来确定所涉及的元素。  
  
 使用 <xref:System.Windows.Input.TouchFrameEventArgs> 获取与 touch 事件相关的 <xref:System.Windows.Input.TouchPoint> 值。 从 <xref:System.Windows.Input.TouchPoint>中，可以获得触摸的 <xref:System.Windows.Input.TouchPoint.Position%2A> 并确定 <xref:System.Windows.Input.TouchAction> 是 <xref:System.Windows.Input.TouchAction.Down>、<xref:System.Windows.Input.TouchAction.Move>还是 <xref:System.Windows.Input.TouchAction.Up> 操作。 你还可以使用 <xref:System.Windows.Input.TouchPoint> 获取 <xref:System.Windows.Input.TouchDevice>。 在 <xref:System.Windows.Input.TouchDevice>中，可以确定设备 <xref:System.Windows.Input.TouchDevice.Id%2A> 并获取有关所涉及元素的信息。  
  
   
  
## Examples  
 下面的示例通过将两个手指拖到触摸屏上，使你能够在 <xref:System.Windows.Controls.Canvas> 上创建简单的模式。 每个触摸均由一个 <xref:System.Windows.Input.TouchDevice>表示。 模式是通过在触控提供的触摸点之间绘制一条线来创建的。 此示例需要 Windows 触摸屏兼容屏幕。  
  
 下面的标记将创建用户界面，该用户界面由在 <xref:System.Windows.Controls.Grid>中居中的 <xref:System.Windows.Controls.Canvas> 组成。  
  
 [!code-xaml[TouchFrameSample#000](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml#000)]  
  
 下面的代码处理 <xref:System.Windows.Input.Touch.FrameReported> 事件。 当在 <xref:System.Windows.Controls.Canvas>上按下时，<xref:System.Windows.Input.TouchDevice> 将捕获到 <xref:System.Windows.Controls.Canvas>中。 在提起触摸后，会释放 <xref:System.Windows.Input.TouchDevice>。 当触摸在 <xref:System.Windows.Controls.Canvas>间移动时，将检查 <xref:System.Windows.Input.TouchDevice.Id%2A>。 如果移动来自第一次触摸，则会记录其位置。 如果移动从第二个触摸开始，则从第一个触摸的位置到第二个触摸的位置绘制线条。  
  
 [!code-csharp[TouchFrameSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#100)]
 [!code-vb[TouchFrameSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#100)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FrameReported">
      <MemberSignature Language="C#" Value="public static event System.Windows.Input.TouchFrameEventHandler FrameReported;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TouchFrameEventHandler FrameReported" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Touch.FrameReported" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event FrameReported As TouchFrameEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Windows::Input::TouchFrameEventHandler ^ FrameReported;" />
      <MemberSignature Language="F#" Value="member this.FrameReported : System.Windows.Input.TouchFrameEventHandler " Usage="member this.FrameReported : System.Windows.Input.TouchFrameEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Shared Event FrameReported As TouchFrameEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchFrameEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在发送触摸消息时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 帧是一系列多点触控消息或触控点中的一个。 您可以通过处理 <xref:System.Windows.Input.Touch.FrameReported> 事件，并从 <xref:System.Windows.Input.TouchFrameEventArgs> 事件数据访问 <xref:System.Windows.Input.TouchPoint> 的详细信息，对触控做出反应。  
  
 <xref:System.Windows.Input.Touch.FrameReported> 事件不使用与其他 [!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)] 输入事件（如 <xref:System.Windows.UIElement.TouchDown> 和 <xref:System.Windows.UIElement.TouchMove>）相同的事件模型。 <xref:System.Windows.Input.Touch.FrameReported> 事件是在应用程序级别处理的单个事件，而不是作为可能通过 UI 的对象树进行路由的特定于元素的事件而公开。 因此，不能使用事件处理程序的 `sender` 参数来确定所涉及的元素。  
  
   
  
## Examples  
 下面的示例处理 <xref:System.Windows.Input.Touch.FrameReported> 事件。 当在 <xref:System.Windows.Controls.Canvas>上按下时，<xref:System.Windows.Input.TouchDevice> 将捕获到 <xref:System.Windows.Controls.Canvas>中。 在提起触摸后，会释放 <xref:System.Windows.Input.TouchDevice>。 当触摸在 <xref:System.Windows.Controls.Canvas>间移动时，将检查 <xref:System.Windows.Input.TouchDevice.Id%2A>。 如果移动来自第一次触摸，则会记录其位置。 如果移动从第二个触摸开始，则从第一个触摸的位置到第二个触摸的位置绘制线条。  
  
 此示例摘自 <xref:System.Windows.Input.Touch> 类概述中提供的一个更大的示例。  
  
 [!code-csharp[TouchFrameSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#110)]
 [!code-vb[TouchFrameSample#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
