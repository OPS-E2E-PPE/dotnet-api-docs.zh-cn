<Type Name="JsonSerializerOptions" FullName="System.Text.Json.JsonSerializerOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af405132229afd452216d5a334bb4c07bc5015f5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75159500" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonSerializerOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonSerializerOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializerOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonSerializerOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializerOptions sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializerOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="57e94-101">提供与 <see cref="T:System.Text.Json.JsonSerializer" /> 一起使用的选项。</span><span class="sxs-lookup"><span data-stu-id="57e94-101">Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-102">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="57e94-102">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonSerializerOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonSerializerOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="57e94-103">初始化 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="57e94-103">Initializes a new instance of the <see cref="T:System.Text.Json.JsonSerializerOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-104">获取或设置一个值，该值指示要反序列化的 JSON 有效负载中是否允许（和忽略）对象或数组中 JSON 值的列表末尾多余的逗号。</span><span class="sxs-lookup"><span data-stu-id="57e94-104">Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.</span></span></summary>
        <value><span data-ttu-id="57e94-105"><see langword="true" /> 是否允许在对象或数组中的 JSON 值列表末尾使用额外逗号（和被忽略）;否则 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-105"><see langword="true" /> if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); <see langword="false" /> otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-106">默认情况下，将 `AllowTrailingCommas` 设置为 `false`，在反序列化过程中，如果遇到尾随逗号，则会引发 <xref:System.Text.Json.JsonException>。</span><span class="sxs-lookup"><span data-stu-id="57e94-106">By default, `AllowTrailingCommas` is set to `false`, and a <xref:System.Text.Json.JsonException> is thrown during deserialization if a trailing comma is encountered.</span></span>

<span data-ttu-id="57e94-107">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas)。</span><span class="sxs-lookup"><span data-stu-id="57e94-107">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="57e94-108">此属性在序列化或反序列化发生后设置。</span><span class="sxs-lookup"><span data-stu-id="57e94-108">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Converters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt; Converters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Text.Json.Serialization.JsonConverter&gt; Converters" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Converters As IList(Of JsonConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ Converters { System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Converters : System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;" Usage="System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-109">获取已注册的用户定义的转换器的列表。</span><span class="sxs-lookup"><span data-stu-id="57e94-109">Gets the list of user-defined converters that were registered.</span></span></summary>
        <value><span data-ttu-id="57e94-110">自定义转换器的列表。</span><span class="sxs-lookup"><span data-stu-id="57e94-110">The list of custom converters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-111">进行序列化或反序列化后，不能修改该列表。</span><span class="sxs-lookup"><span data-stu-id="57e94-111">Once serialization or deserialization occurs, the list cannot be modified.</span></span>

<span data-ttu-id="57e94-112">有关详细信息，请参阅[如何编写自定义转换器](~/docs/standard/serialization/system-text-json-converters-how-to.md#registration-sample---converters-collection)。</span><span class="sxs-lookup"><span data-stu-id="57e94-112">For more information, see [How to write custom converters](~/docs/standard/serialization/system-text-json-converters-how-to.md#registration-sample---converters-collection).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBufferSize">
      <MemberSignature Language="C#" Value="public int DefaultBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DefaultBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBufferSize : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-113">获取或设置创建临时缓冲区时要使用的默认缓冲区大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="57e94-113">Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.</span></span></summary>
        <value><span data-ttu-id="57e94-114">默认缓冲区大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="57e94-114">The default buffer size in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-115">默认缓冲区大小（以字节为单位）为16384。</span><span class="sxs-lookup"><span data-stu-id="57e94-115">The default buffer size, in bytes, is 16,384.</span></span>
<span data-ttu-id="57e94-116">对于大多数工作负荷，默认大小是在从流中读取或写入流时要缓冲的合理数量的 JSON。</span><span class="sxs-lookup"><span data-stu-id="57e94-116">For most workloads, the default size is a reasonable amount of JSON to buffer while reading from a stream or writing to a stream.</span></span>
<span data-ttu-id="57e94-117">也就是说，如果不在大型对象堆上为要跟踪的垃圾回收器（GC）创建对象，它可以很好地执行。在非流式处理方案中，增加默认缓冲区大小可以提高大型 JSON 字符串或 UTF-8 字节数组的性能。</span><span class="sxs-lookup"><span data-stu-id="57e94-117">That is, it performs well without creating objects on the Large Object Heap for the Garbage Collector (GC) to track. In non-streaming scenarios, increasing the default buffer size could improve performance for large JSON strings or UTF-8 byte arrays.</span></span>
<span data-ttu-id="57e94-118">建议将此值保持不变，除非对其进行更改以使性能明显不同。</span><span class="sxs-lookup"><span data-stu-id="57e94-118">We recommend that you leave this value unchanged unless changing it makes an observable difference in performance.</span></span>


          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57e94-119">缓冲区大小小于 1。</span><span class="sxs-lookup"><span data-stu-id="57e94-119">The buffer size is less than 1.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="57e94-120">此属性在序列化或反序列化发生后设置。</span><span class="sxs-lookup"><span data-stu-id="57e94-120">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DictionaryKeyPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property DictionaryKeyPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ DictionaryKeyPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DictionaryKeyPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-121">获取或设置用于将 <see cref="T:System.Collections.IDictionary" /> 密钥名称转换为其他格式（如 camel 大小写）的策略。</span><span class="sxs-lookup"><span data-stu-id="57e94-121">Gets or sets the policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format, such as camel-casing.</span></span></summary>
        <value><span data-ttu-id="57e94-122">用于将 <see cref="T:System.Collections.IDictionary" /> 密钥名称转换为另一种格式的策略。</span><span class="sxs-lookup"><span data-stu-id="57e94-122">The policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-123">此属性可设置为 <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType>，以指定大小写大小的策略。</span><span class="sxs-lookup"><span data-stu-id="57e94-123">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> to specify a camel-casing policy.</span></span>

<span data-ttu-id="57e94-124">此属性可设置为 <xref:System.Text.Json.JsonNamingPolicy.CamelCase>，以指定大小写大小的策略。</span><span class="sxs-lookup"><span data-stu-id="57e94-124">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase> to specify a camel-casing policy.</span></span>

<span data-ttu-id="57e94-125">反序列化时，不使用此方法。</span><span class="sxs-lookup"><span data-stu-id="57e94-125">It is not used when deserializing.</span></span>

<span data-ttu-id="57e94-126">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#camel-case-dictionary-keys)。</span><span class="sxs-lookup"><span data-stu-id="57e94-126">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#camel-case-dictionary-keys).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Text.Encodings.Web.JavaScriptEncoder Encoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encodings.Web.JavaScriptEncoder Encoder" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoder As JavaScriptEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encodings::Web::JavaScriptEncoder ^ Encoder { System::Text::Encodings::Web::JavaScriptEncoder ^ get(); void set(System::Text::Encodings::Web::JavaScriptEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Text.Encodings.Web.JavaScriptEncoder with get, set" Usage="System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encodings.Web.JavaScriptEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-127">获取或设置要在转义字符串时使用的编码器，或为 <see langword="null" />（要使用默认编码器的话）。</span><span class="sxs-lookup"><span data-stu-id="57e94-127">Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</span></span></summary>
        <value><span data-ttu-id="57e94-128">JavaScript 字符编码。</span><span class="sxs-lookup"><span data-stu-id="57e94-128">The JavaScript character encoding.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-129">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#customize-character-encoding)。</span><span class="sxs-lookup"><span data-stu-id="57e94-129">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#customize-character-encoding).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.JsonConverter GetConverter (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.Json.Serialization.JsonConverter GetConverter(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConverter (typeToConvert As Type) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::Serialization::JsonConverter ^ GetConverter(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="member this.GetConverter : Type -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonSerializerOptions.GetConverter typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="57e94-130">要为其返回转换器的类型。</span><span class="sxs-lookup"><span data-stu-id="57e94-130">The type to return a converter for.</span></span></param>
        <summary><span data-ttu-id="57e94-131">返回指定类型的转换器。</span><span class="sxs-lookup"><span data-stu-id="57e94-131">Returns the converter for the specified type.</span></span></summary>
        <returns><span data-ttu-id="57e94-132">支持给定类型的第一个转换器，如果没有转换器，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-132">The first converter that supports the given type, or <see langword="null" /> if there is no converter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-133">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#sample-factory-pattern-converter)。</span><span class="sxs-lookup"><span data-stu-id="57e94-133">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#sample-factory-pattern-converter).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreNullValues">
      <MemberSignature Language="C#" Value="public bool IgnoreNullValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreNullValues" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreNullValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreNullValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreNullValues : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-134">获取或设置一个值，该值确定序列化和反序列化过程中是否忽略 <see langword="null" /> 值。</span><span class="sxs-lookup"><span data-stu-id="57e94-134">Gets or sets a value that determines whether <see langword="null" /> values are ignored during serialization and deserialization.</span></span> <span data-ttu-id="57e94-135">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-135">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="57e94-136"><see langword="true" /> 在序列化和反序列化期间忽略 null 值;否则，请参阅 langword = "false"/&gt;。</span><span class="sxs-lookup"><span data-stu-id="57e94-136"><see langword="true" /> to ignore null values during serialization and deserialization; otherwise, see langword="false" /&gt;.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-137">有关详细信息，请参阅[排除所有 null 值属性](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-null-value-properties)并[在反序列化时忽略 null](~/docs/standard/serialization/system-text-json-how-to.md#ignore-null-when-deserializing)值。</span><span class="sxs-lookup"><span data-stu-id="57e94-137">For more information, see [Exclude all null value properties](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-null-value-properties) and [Ignore null when deserializing](~/docs/standard/serialization/system-text-json-how-to.md#ignore-null-when-deserializing).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="57e94-138">此属性在序列化或反序列化发生后设置。</span><span class="sxs-lookup"><span data-stu-id="57e94-138">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreReadOnlyProperties">
      <MemberSignature Language="C#" Value="public bool IgnoreReadOnlyProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreReadOnlyProperties" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreReadOnlyProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreReadOnlyProperties { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreReadOnlyProperties : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-139">获取一个值，该值确定序列化过程中是否忽略只读属性。</span><span class="sxs-lookup"><span data-stu-id="57e94-139">Gets a value that determines whether read-only properties are ignored during serialization.</span></span> <span data-ttu-id="57e94-140">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-140">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="57e94-141"><see langword="true" /> 在序列化过程中忽略只读属性;否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-141"><see langword="true" /> to ignore read-only properties during serialization; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-142">如果属性包含公共 getter 而不是公共 setter，则该属性为只读。</span><span class="sxs-lookup"><span data-stu-id="57e94-142">A property is read-only if it contains a public getter but not a public setter.</span></span> 

<span data-ttu-id="57e94-143">无论此设置如何，只读属性都不会反序列化。</span><span class="sxs-lookup"><span data-stu-id="57e94-143">Read-only properties are not deserialized regardless of this setting.</span></span>

<span data-ttu-id="57e94-144">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-read-only-properties)。</span><span class="sxs-lookup"><span data-stu-id="57e94-144">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-read-only-properties).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="57e94-145">此属性在序列化或反序列化发生后设置。</span><span class="sxs-lookup"><span data-stu-id="57e94-145">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-146">获取或设置序列化或反序列化 JSON 时允许的最大深度，默认值 0 表示最大深度为 64。</span><span class="sxs-lookup"><span data-stu-id="57e94-146">Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.</span></span></summary>
        <value><span data-ttu-id="57e94-147">序列化或反序列化 JSON 时允许的最大深度。</span><span class="sxs-lookup"><span data-stu-id="57e94-147">The maximum depth allowed when serializing or deserializing JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-148">过去，此深度会引发 <xref:System.Text.Json.JsonException>。</span><span class="sxs-lookup"><span data-stu-id="57e94-148">Going past this depth throws a <xref:System.Text.Json.JsonException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="57e94-149">此属性在序列化或反序列化发生后设置。</span><span class="sxs-lookup"><span data-stu-id="57e94-149">This property was set after serialization or deserialization has occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="57e94-150">最大深度设置为负值。</span><span class="sxs-lookup"><span data-stu-id="57e94-150">The max depth is set to a negative value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PropertyNameCaseInsensitive">
      <MemberSignature Language="C#" Value="public bool PropertyNameCaseInsensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertyNameCaseInsensitive" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNameCaseInsensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PropertyNameCaseInsensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNameCaseInsensitive : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-151">获取或设置一个值，该值确定在反序列化过程中属性名称是否使用不区分大小写的比较。</span><span class="sxs-lookup"><span data-stu-id="57e94-151">Gets or sets a value that determines whether a property's name uses a case-insensitive comparison during deserialization.</span></span> <span data-ttu-id="57e94-152">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-152">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="57e94-153">使用不区分大小写的比较 <see langword="true" /> 比较属性名称;否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-153"><see langword="true" /> to compare property names using case-insensitive comparison; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-154">存在与不区分大小写的比较（即，`PropertyNameCaseInsensitive` `true`时）相关联的性能开销。</span><span class="sxs-lookup"><span data-stu-id="57e94-154">There is a performance cost associated with case-insensitive comparison (that is, when `PropertyNameCaseInsensitive` is `true`).</span></span>

<span data-ttu-id="57e94-155">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#case-insensitive-property-matching)。</span><span class="sxs-lookup"><span data-stu-id="57e94-155">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#case-insensitive-property-matching).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyNamingPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy PropertyNamingPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy PropertyNamingPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNamingPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ PropertyNamingPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNamingPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-156">获取或设置一个值，该值指定用于将对象的属性名称转换为其他格式（例如 camel 大小写）的策略；若为 <see langword="null" />，则保持属性名称不变。</span><span class="sxs-lookup"><span data-stu-id="57e94-156">Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or <see langword="null" /> to leave property names unchanged.</span></span></summary>
        <value><span data-ttu-id="57e94-157">属性命名策略，或 <see langword="null" /> 以保持属性名称不变。</span><span class="sxs-lookup"><span data-stu-id="57e94-157">A property naming policy, or <see langword="null" /> to leave property names unchanged.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-158">在反序列化过程中，生成的属性名称应与 JSON 有效负载匹配，并将在序列化过程中写入属性名称时使用。</span><span class="sxs-lookup"><span data-stu-id="57e94-158">The resulting property name is expected to match the JSON payload during deserialization, and will be used when writing the property name during serialization.</span></span>

<span data-ttu-id="57e94-159">此策略不用于应用了 <xref:System.Text.Json.Serialization.JsonPropertyNameAttribute> 的属性。</span><span class="sxs-lookup"><span data-stu-id="57e94-159">The policy is not used for properties that have a <xref:System.Text.Json.Serialization.JsonPropertyNameAttribute> applied.</span></span>

<span data-ttu-id="57e94-160">此属性可设置为 <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType>，以指定大小写大小的策略。</span><span class="sxs-lookup"><span data-stu-id="57e94-160">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> to specify a camel-casing policy.</span></span>

<span data-ttu-id="57e94-161">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#customize-json-names-and-values)。</span><span class="sxs-lookup"><span data-stu-id="57e94-161">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#customize-json-names-and-values).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling ReadCommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling ReadCommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadCommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling ReadCommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.ReadCommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-162">获取或设置一个值，该值定义反序列化过程中如何处理注释。</span><span class="sxs-lookup"><span data-stu-id="57e94-162">Gets or sets a value that defines how comments are handled during deserialization.</span></span></summary>
        <value><span data-ttu-id="57e94-163">一个值，该值指示是否允许、不允许或跳过注释。</span><span class="sxs-lookup"><span data-stu-id="57e94-163">A value that indicates whether comments are allowed, disallowed, or skipped.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="57e94-164">默认情况下，如果遇到注释，则会在反序列化过程中引发 <xref:System.Text.Json.JsonException>。</span><span class="sxs-lookup"><span data-stu-id="57e94-164">By default, a <xref:System.Text.Json.JsonException> is thrown during deserialization if a comment is encountered.</span></span>

<span data-ttu-id="57e94-165">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas)。</span><span class="sxs-lookup"><span data-stu-id="57e94-165">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="57e94-166">此属性在序列化或反序列化发生后设置。</span><span class="sxs-lookup"><span data-stu-id="57e94-166">This property was set after serialization or deserialization has occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="57e94-167">注释处理枚举设置为不受支持的值（或不在 <see cref="T:System.Text.Json.JsonCommentHandling" /> 枚举范围内）。</span><span class="sxs-lookup"><span data-stu-id="57e94-167">The comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling" /> enum range).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteIndented">
      <MemberSignature Language="C#" Value="public bool WriteIndented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteIndented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteIndented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteIndented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteIndented : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57e94-168">获取或设置一个值，该值定义 JSON 是否应使用整齐打印。</span><span class="sxs-lookup"><span data-stu-id="57e94-168">Gets or sets a value that defines whether JSON should use pretty printing.</span></span> <span data-ttu-id="57e94-169">默认情况下，不使用任何额外的空白来序列化 JSON。</span><span class="sxs-lookup"><span data-stu-id="57e94-169">By default, JSON is serialized without any extra white space.</span></span></summary>
        <value><span data-ttu-id="57e94-170"><see langword="true" /> 如果 JSON 应在序列化时进行整齐打印，则为;否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-170"><see langword="true" /> if JSON should pretty print on serialization; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="57e94-171">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="57e94-171">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="57e94-172">整齐打印包括：</span><span class="sxs-lookup"><span data-stu-id="57e94-172">Pretty printing includes:</span></span> 

- <span data-ttu-id="57e94-173">缩进嵌套的 JSON 标记。</span><span class="sxs-lookup"><span data-stu-id="57e94-173">Indenting nested JSON tokens.</span></span>
- <span data-ttu-id="57e94-174">添加新行</span><span class="sxs-lookup"><span data-stu-id="57e94-174">Adding new lines</span></span>
- <span data-ttu-id="57e94-175">在属性名称和值之间添加空格。</span><span class="sxs-lookup"><span data-stu-id="57e94-175">Adding white space between property names and values.</span></span> 

<span data-ttu-id="57e94-176">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#serialize-to-formatted-json)。</span><span class="sxs-lookup"><span data-stu-id="57e94-176">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#serialize-to-formatted-json).</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="57e94-177">此属性在序列化或反序列化发生后设置。</span><span class="sxs-lookup"><span data-stu-id="57e94-177">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
