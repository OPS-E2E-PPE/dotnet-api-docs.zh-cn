<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7c2488558e5dfcd1fbae73366c6bb9167525e1ca" /><Meta Name="ms.sourcegitcommit" Value="69e0a4b5c467d032ef1590520528c0a541a1787f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/24/2020" /><Meta Name="ms.locfileid" Value="76747461" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a3d54-101">提供将对象或值类型序列化为 JSON 以及将 JSON 反序列化为对象或值类型的功能。</span><span class="sxs-lookup"><span data-stu-id="a3d54-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-102">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-102">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="a3d54-103">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="a3d54-103">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="a3d54-104">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-104">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-105">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-105">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="a3d54-106">将表示单个 JSON 值的 UTF-8 编码文本分析为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="a3d54-106">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="a3d54-107">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="a3d54-107">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-108">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-108">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d54-109"><paramref name="returnType" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a3d54-109"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="a3d54-110">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="a3d54-110">The JSON is invalid.</span></span>
          
<span data-ttu-id="a3d54-111">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-111">-or-</span></span>

<span data-ttu-id="a3d54-112"><typeparamref name="returnType" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="a3d54-112"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="a3d54-113">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-113">-or-</span></span>

<span data-ttu-id="a3d54-114">单个 JSON 值以外的跨度中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="a3d54-114">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="a3d54-115">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="a3d54-115">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="a3d54-116">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-116">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-117">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-117">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="a3d54-118">将表示单个 JSON 值的文本分析为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="a3d54-118">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="a3d54-119">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="a3d54-119">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-120">使用 <xref:System.String> 的效率不如使用 UTF-8 方法，因为实现本身就使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="a3d54-120">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="a3d54-121">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-121">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d54-122"><paramref name="json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a3d54-122"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="a3d54-123">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="a3d54-123">The JSON is invalid.</span></span>
          
<span data-ttu-id="a3d54-124">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-124">-or-</span></span>

<span data-ttu-id="a3d54-125"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="a3d54-125"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="a3d54-126">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-126">-or-</span></span>

<span data-ttu-id="a3d54-127">单个 JSON 值以外的字符串中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="a3d54-127">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="a3d54-128">要从中读取 JSON 的读取器。</span><span class="sxs-lookup"><span data-stu-id="a3d54-128">The reader to read the JSON from.</span></span></param>
        <param name="returnType"><span data-ttu-id="a3d54-129">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-129">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-130">读取期间用于控制序列化程序行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-130">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="a3d54-131">从提供的读取器读取一个 JSON 值（包括对象或数组）并将它转换为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="a3d54-131">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="a3d54-132">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="a3d54-132">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-133">如果 `reader` 的 <xref:System.Text.Json.Utf8JsonReader.TokenType> 属性为 <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> 或 <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>，则对 <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> 的一次调用会使读取器前进，以确定值的开头。</span><span class="sxs-lookup"><span data-stu-id="a3d54-133">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="a3d54-134">此方法完成后，`reader` 将定位到 JSON 值中的最后一个令牌。</span><span class="sxs-lookup"><span data-stu-id="a3d54-134">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="a3d54-135">如果引发了异常，则读取器将重置为在调用方法时它所处的状态。</span><span class="sxs-lookup"><span data-stu-id="a3d54-135">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="a3d54-136">此方法会创建读取器所处理的数据的副本，因此，不需要在返回此方法之后维护数据完整性。</span><span class="sxs-lookup"><span data-stu-id="a3d54-136">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="a3d54-137">用于创建 <xref:System.Text.Json.Utf8JsonReader> 实例的 <xref:System.Text.Json.JsonReaderOptions> 在发生冲突时优先于 <xref:System.Text.Json.JsonSerializerOptions>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-137">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="a3d54-138">因此，在读取时使用 <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>和 <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-138">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="a3d54-139">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-139">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d54-140"><paramref name="returnType" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a3d54-140"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="a3d54-141">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="a3d54-141">The JSON is invalid.</span></span>
          
<span data-ttu-id="a3d54-142">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-142">-or-</span></span>

<span data-ttu-id="a3d54-143"><typeparamref name="returnType" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="a3d54-143"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="a3d54-144">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-144">-or-</span></span>

<span data-ttu-id="a3d54-145">无法从读取器中读取值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-145">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d54-146"><paramref name="reader" /> 使用的是不受支持的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-146"><paramref name="reader" /> is using unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="a3d54-147">UTF-8 编码文本的目标类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-147">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="a3d54-148">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="a3d54-148">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-149">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-149">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="a3d54-150">将表示单个 JSON 值的 UTF-8 编码文本分析为泛型类型参数指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="a3d54-150">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="a3d54-151">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="a3d54-151">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-152">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-152">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="a3d54-153">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="a3d54-153">The JSON is invalid.</span></span>
          
<span data-ttu-id="a3d54-154">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-154">-or-</span></span>

<span data-ttu-id="a3d54-155"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="a3d54-155"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="a3d54-156">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-156">-or-</span></span>

<span data-ttu-id="a3d54-157">单个 JSON 值以外的跨度中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="a3d54-157">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="a3d54-158">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-158">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="a3d54-159">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="a3d54-159">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-160">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-160">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="a3d54-161">将表示单个 JSON 值的文本分析为泛型类型参数指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="a3d54-161">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="a3d54-162">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="a3d54-162">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-163">使用 <xref:System.String> 的效率不如使用 UTF-8 方法，因为实现本身就使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="a3d54-163">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="a3d54-164">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-164">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d54-165"><paramref name="json" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a3d54-165"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="a3d54-166">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="a3d54-166">The JSON is invalid.</span></span>
          
<span data-ttu-id="a3d54-167">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-167">-or-</span></span>

<span data-ttu-id="a3d54-168"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="a3d54-168"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="a3d54-169">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-169">-or-</span></span>

<span data-ttu-id="a3d54-170">单个 JSON 值以外的字符串中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="a3d54-170">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="a3d54-171">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-171">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="a3d54-172">要从中读取 JSON 的读取器。</span><span class="sxs-lookup"><span data-stu-id="a3d54-172">The reader to read the JSON from.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-173">读取期间用于控制序列化程序行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-173">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="a3d54-174">将一个 JSON 值（包括对象或数组）从提供的读取器读取到泛型类型参数指定的类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="a3d54-174">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="a3d54-175">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="a3d54-175">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-176">如果 `reader` 的 <xref:System.Text.Json.Utf8JsonReader.TokenType> 属性为 <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> 或 <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>，则对 <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> 的一次调用会使读取器前进，以确定值的开头。</span><span class="sxs-lookup"><span data-stu-id="a3d54-176">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="a3d54-177">此方法完成后，`reader` 将定位到 JSON 值中的最后一个令牌。</span><span class="sxs-lookup"><span data-stu-id="a3d54-177">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="a3d54-178">如果引发了异常，则读取器将重置为在调用方法时它所处的状态。</span><span class="sxs-lookup"><span data-stu-id="a3d54-178">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="a3d54-179">此方法会创建读取器所处理的数据的副本，因此，不需要在返回此方法之后维护数据完整性。</span><span class="sxs-lookup"><span data-stu-id="a3d54-179">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="a3d54-180">用于创建 <xref:System.Text.Json.Utf8JsonReader> 实例的 <xref:System.Text.Json.JsonReaderOptions> 在发生冲突时优先于 <xref:System.Text.Json.JsonSerializerOptions>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-180">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="a3d54-181">因此，在读取时使用 <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>和 <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-181">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="a3d54-182">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-182">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="a3d54-183">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="a3d54-183">The JSON is invalid.</span></span>
          
<span data-ttu-id="a3d54-184">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-184">-or-</span></span>

<span data-ttu-id="a3d54-185"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="a3d54-185"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="a3d54-186">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-186">-or-</span></span>

<span data-ttu-id="a3d54-187">无法从读取器中读取值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-187">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d54-188"><paramref name="reader" /> 不受支持的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-188"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="a3d54-189">要分析的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="a3d54-189">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="a3d54-190">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-190">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-191">读取期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-191">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="a3d54-192">可能用于取消读取操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="a3d54-192">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="a3d54-193">将表示单个 JSON 值的 UTF-8 编码文本异步读取到指定类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="a3d54-193">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="a3d54-194">流会被完整读取。</span><span class="sxs-lookup"><span data-stu-id="a3d54-194">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="a3d54-195">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="a3d54-195">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-196">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-196">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d54-197"><paramref name="utf8Json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a3d54-197"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="a3d54-198">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="a3d54-198">The JSON is invalid.</span></span>
          
<span data-ttu-id="a3d54-199">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-199">-or-</span></span>

<span data-ttu-id="a3d54-200"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="a3d54-200"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="a3d54-201">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-201">-or-</span></span>

<span data-ttu-id="a3d54-202">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="a3d54-202">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="a3d54-203">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-203">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="a3d54-204">要分析的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="a3d54-204">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-205">读取期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-205">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="a3d54-206">可能用于取消读取操作的标记。</span><span class="sxs-lookup"><span data-stu-id="a3d54-206">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="a3d54-207">将表示单个 JSON 值的 UTF-8 编码文本异步读取到泛型类型参数指定的类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="a3d54-207">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="a3d54-208">流会被完整读取。</span><span class="sxs-lookup"><span data-stu-id="a3d54-208">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="a3d54-209">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="a3d54-209">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-210">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-210">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="a3d54-211">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="a3d54-211">The JSON is invalid.</span></span>
          
<span data-ttu-id="a3d54-212">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-212">-or-</span></span>

<span data-ttu-id="a3d54-213"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="a3d54-213"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="a3d54-214">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a3d54-214">-or-</span></span>

<span data-ttu-id="a3d54-215">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="a3d54-215">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a3d54-216">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-216">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="a3d54-217">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-217">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-218">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-218">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="a3d54-219">将指定类型的值转换为 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="a3d54-219">Converts the value of a specified type into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="a3d54-220">值的 JSON 字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="a3d54-220">The JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-221">使用 <xref:System.String> 不如使用 UTF-8 编码，因为在内部实现使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="a3d54-221">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="a3d54-222">另请参见 <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> 和 <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-222">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="a3d54-223">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-223">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="a3d54-224">要写入到的 JSON 编写器。</span><span class="sxs-lookup"><span data-stu-id="a3d54-224">The JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="a3d54-225">要转换并写入的值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-225">The value to convert and write.</span></span></param>
        <param name="inputType"><span data-ttu-id="a3d54-226">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-226">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-227">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-227">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="a3d54-228">将指定类型的 JSON 表示形式写入提供的编写器。</span><span class="sxs-lookup"><span data-stu-id="a3d54-228">Writes the JSON representation of the specified type to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-229">用于创建 <xref:System.Text.Json.Utf8JsonWriter> 实例的 <xref:System.Text.Json.JsonWriterOptions> 在发生冲突时优先于 <xref:System.Text.Json.JsonSerializerOptions>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-229">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="a3d54-230">因此，在编写时使用 <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>和 <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-230">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="a3d54-231">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-231">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d54-232"><paramref name="writer" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a3d54-232"><paramref name="writer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="a3d54-233">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-233">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="a3d54-234">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-234">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-235">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-235">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="a3d54-236">将泛型类型参数指定的类型的值转换为 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="a3d54-236">Converts the value of a type specified by a generic type parameter into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="a3d54-237">值的 JSON 字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="a3d54-237">A JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-238">使用 <xref:System.String> 不如使用 UTF-8 编码，因为在内部实现使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="a3d54-238">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="a3d54-239">另请参见 <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> 和 <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-239">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="a3d54-240">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-240">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="a3d54-241">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-241">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="a3d54-242">要写入到的 JSON 编写器。</span><span class="sxs-lookup"><span data-stu-id="a3d54-242">A JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="a3d54-243">要转换并写入的值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-243">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-244">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-244">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="a3d54-245">将泛型类型参数指定的类型的 JSON 表示形式写入提供的编写器。</span><span class="sxs-lookup"><span data-stu-id="a3d54-245">Writes the JSON representation of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-246">用于创建 <xref:System.Text.Json.Utf8JsonWriter> 实例的 <xref:System.Text.Json.JsonWriterOptions> 在发生冲突时优先于 <xref:System.Text.Json.JsonSerializerOptions>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-246">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="a3d54-247">因此，在编写时使用 <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>和 <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="a3d54-247">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="a3d54-248">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-248">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d54-249"><paramref name="writer" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a3d54-249"><paramref name="writer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="a3d54-250">要写入的 UTF-8 流。</span><span class="sxs-lookup"><span data-stu-id="a3d54-250">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="a3d54-251">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-251">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="a3d54-252">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-252">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-253">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-253">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="a3d54-254">可能用于取消写入操作的标记。</span><span class="sxs-lookup"><span data-stu-id="a3d54-254">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="a3d54-255">将指定类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入指定流。</span><span class="sxs-lookup"><span data-stu-id="a3d54-255">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="a3d54-256">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="a3d54-256">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-257">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-257">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="a3d54-258">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-258">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="a3d54-259">要写入的 UTF-8 流。</span><span class="sxs-lookup"><span data-stu-id="a3d54-259">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="a3d54-260">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-260">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-261">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-261">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="a3d54-262">可能用于取消写入操作的标记。</span><span class="sxs-lookup"><span data-stu-id="a3d54-262">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="a3d54-263">将泛型类型参数指定的类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入流。</span><span class="sxs-lookup"><span data-stu-id="a3d54-263">Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="a3d54-264">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="a3d54-264">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-265">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-265">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a3d54-266">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-266">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="a3d54-267">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-267">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-268">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-268">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="a3d54-269">将指定类型的值转换为编码为 UTF-8 字节的 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="a3d54-269">Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="a3d54-270">值的 JSON 字符串表示形式，编码为 UTF-8 字节。</span><span class="sxs-lookup"><span data-stu-id="a3d54-270">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-271">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-271">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="a3d54-272">值的类型。</span><span class="sxs-lookup"><span data-stu-id="a3d54-272">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="a3d54-273">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="a3d54-273">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="a3d54-274">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a3d54-274">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="a3d54-275">将泛型类型参数指定的类型的值转换为编码为 UTF-8 字节的 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="a3d54-275">Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="a3d54-276">值的 JSON 字符串表示形式，编码为 UTF-8 字节。</span><span class="sxs-lookup"><span data-stu-id="a3d54-276">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a3d54-277">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md)。</span><span class="sxs-lookup"><span data-stu-id="a3d54-277">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
