<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b9a902749e6b2868eccacb1d3333f207d087e9c9" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78786128" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e2383-101">提供高性能的 API，以便提供 UTF-8 编码 JSON 文本的只进和非缓存编写权限。</span><span class="sxs-lookup"><span data-stu-id="e2383-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-102">`Utf8JsonWriter` 在不缓存的情况下按顺序写入文本，并且默认情况下将遵循[JSON RFC](https://tools.ietf.org/html/rfc8259)，但写入注释除外。</span><span class="sxs-lookup"><span data-stu-id="e2383-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="e2383-103">当启用验证时，尝试编写无效 JSON 的方法会引发 <xref:System.InvalidOperationException>，其中包含上下文特定的错误消息。</span><span class="sxs-lookup"><span data-stu-id="e2383-103">A method that attempts to write invalid JSON when validation is enabled throws an <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="e2383-104">若要能够使用缩进和空格设置输出的格式、跳过验证或自定义转义行为，请创建 <xref:System.Text.Json.JsonWriterOptions> 的实例并将其传递给编写器。</span><span class="sxs-lookup"><span data-stu-id="e2383-104">To be able to format the output with indentation and white space, to skip validation, OR to customize the escaping behavior, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

<span data-ttu-id="e2383-105">有关详细信息，请参阅[如何序列化和反序列化 JSON](~/docs/standard/serialization/system-text-json-how-to.md#use-utf8jsonwriter)。</span><span class="sxs-lookup"><span data-stu-id="e2383-105">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#use-utf8jsonwriter).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="e2383-106">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="e2383-106">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="e2383-107">定义 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="e2383-107">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="e2383-108">默认情况下，它会编写最小化的 JSON（不含额外空格）并根据 JSON RFC 验证正在编写的 JSON 在结构上是否有效。</span><span class="sxs-lookup"><span data-stu-id="e2383-108">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="e2383-109">使用要写入输出的指定 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 和自定义选项初始化 <see cref="T:System.Buffers.IBufferWriter`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-109">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified <see cref="T:System.Buffers.IBufferWriter`1" /> to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-110"><paramref name="bufferWriter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-110"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="e2383-111">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="e2383-111">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="e2383-112">定义 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="e2383-112">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="e2383-113">默认情况下，它会编写最小化的 JSON（不含额外空格）并根据 JSON RFC 验证正在编写的 JSON 在结构上是否有效。</span><span class="sxs-lookup"><span data-stu-id="e2383-113">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="e2383-114">使用要写入输出的指定流和自定义选项初始化 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-114">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified stream to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-115"><paramref name="utf8Json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-115"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e2383-116">获取目前为止当前实例提交到输出的字节总数。</span><span class="sxs-lookup"><span data-stu-id="e2383-116">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="e2383-117">到目前为止 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 提交给输出的总字节数。</span><span class="sxs-lookup"><span data-stu-id="e2383-117">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-118">如果是 <xref:System.Buffers.IBufferWriter%601>，则此属性指示 IBufferWriter 的高级内容。</span><span class="sxs-lookup"><span data-stu-id="e2383-118">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="e2383-119">如果是 <xref:System.IO.Stream>，则此属性指示写入到流中的数据量。</span><span class="sxs-lookup"><span data-stu-id="e2383-119">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e2383-120">获取目前为止由 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 编写但尚未刷新到输出并提交的字节数。</span><span class="sxs-lookup"><span data-stu-id="e2383-120">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value><span data-ttu-id="e2383-121">目前尚未刷新到输出和提交的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 所写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="e2383-121">The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e2383-122">获取当前标记的深度。</span><span class="sxs-lookup"><span data-stu-id="e2383-122">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="e2383-123">当前标记的深度。</span><span class="sxs-lookup"><span data-stu-id="e2383-123">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-124">`CurrentDepth` 属性跟踪迄今为止写入的 JSON 文本中的嵌套对象/数组的递归深度。</span><span class="sxs-lookup"><span data-stu-id="e2383-124">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-125">提交尚未刷新的所有剩余 JSON 文本，并释放当前实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="e2383-125">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-126">对于 IBufferWriter，这将基于迄今为止编写的内容来改进基础 <xref:System.Buffers.IBufferWriter`1>。</span><span class="sxs-lookup"><span data-stu-id="e2383-126">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="e2383-127">对于 Stream，这会将数据写入流并对其进行刷新。</span><span class="sxs-lookup"><span data-stu-id="e2383-127">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="e2383-128">释放后，不能再使用 <xref:System.Text.Json.Utf8JsonWriter> 实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-128">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-129">异步提交尚未刷新的所有剩余 JSON 文本，并释放当前实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="e2383-129">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns><span data-ttu-id="e2383-130">表示异步释放操作的任务。</span><span class="sxs-lookup"><span data-stu-id="e2383-130">A task representing the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-131">对于 IBufferWriter，这将基于迄今为止编写的内容来改进基础 <xref:System.Buffers.IBufferWriter`1>。</span><span class="sxs-lookup"><span data-stu-id="e2383-131">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="e2383-132">对于 Stream，这会将数据写入流并对其进行刷新。</span><span class="sxs-lookup"><span data-stu-id="e2383-132">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="e2383-133">释放后，不能再使用 <xref:System.Text.Json.Utf8JsonWriter> 实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-133">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-134">提交目前为止编写的 JSON 文本，使其对输出目标可见。</span><span class="sxs-lookup"><span data-stu-id="e2383-134">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-135">对于 IBufferWriter，这将基于迄今为止编写的内容来改进基础 <xref:System.Buffers.IBufferWriter`1>。</span><span class="sxs-lookup"><span data-stu-id="e2383-135">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="e2383-136">如果是 <xref:System.IO.Stream>，则会将数据写入流并将其刷新。</span><span class="sxs-lookup"><span data-stu-id="e2383-136">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2383-137">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-137">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function FlushAsync (Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="e2383-138">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="e2383-138">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="e2383-139">默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-139">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="e2383-140">异步提交目前为止编写的 JSON 文本，使其对输出目标可见。</span><span class="sxs-lookup"><span data-stu-id="e2383-140">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns><span data-ttu-id="e2383-141">表示异步刷新操作的任务。</span><span class="sxs-lookup"><span data-stu-id="e2383-141">A task representing the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-142">对于 IBufferWriter，这将基于迄今为止编写的内容来改进基础 <xref:System.Buffers.IBufferWriter`1>。</span><span class="sxs-lookup"><span data-stu-id="e2383-142">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="e2383-143">在 <xref:System.IO.Stream>的情况下，这会将数据写入流并在监视取消请求时以异步方式刷新。</span><span class="sxs-lookup"><span data-stu-id="e2383-143">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2383-144">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-144">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e2383-145">获取使用此实例编写 JSON 时的自定义行为，以指示在编写时是否格式化输出，是否跳过结构化 JSON 验证以及要转义哪些字符。</span><span class="sxs-lookup"><span data-stu-id="e2383-145">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.</span></span></summary>
        <value><span data-ttu-id="e2383-146">此编写器实例的自定义行为，用于设置格式、验证和转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-146">The custom behavior of this instance of the writer for formatting, validating, and escaping.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-147">重置此实例的内部状态，以便可以重复使用它。</span><span class="sxs-lookup"><span data-stu-id="e2383-147">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-148"><xref:System.Text.Json.Utf8JsonWriter> 将继续使用原始写入器选项和原始输出（<xref:System.Buffers.IBufferWriter`1> 或 <xref:System.IO.Stream>）作为目标。</span><span class="sxs-lookup"><span data-stu-id="e2383-148">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2383-149">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-149">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="e2383-150">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="e2383-150">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="e2383-151">重置此实例的内部状态，以便可以结合 <see cref="T:System.Buffers.IBufferWriter`1" /> 的新实例重复使用它。</span><span class="sxs-lookup"><span data-stu-id="e2383-151">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-152"><xref:System.Text.Json.Utf8JsonWriter> 将继续使用原始写入器选项，但现在作为新目标写入 `bufferWriter`。</span><span class="sxs-lookup"><span data-stu-id="e2383-152">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-153"><paramref name="bufferWriter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-153"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2383-154">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-154">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="e2383-155">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="e2383-155">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="e2383-156">重置此实例的内部状态，以便可以结合 <see cref="T:System.IO.Stream" /> 的新实例重复使用它。</span><span class="sxs-lookup"><span data-stu-id="e2383-156">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-157"><xref:System.Text.Json.Utf8JsonWriter> 将继续使用原始写入器选项，但现在作为新目标写入 `utf8Json`。</span><span class="sxs-lookup"><span data-stu-id="e2383-157">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-158"><paramref name="utf8Json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-158"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e2383-159">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="e2383-159">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-160">要写入的属性的 UTF-8 编码名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-160">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="e2383-161">要编写为 Base64 编码文本的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="e2383-161">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="e2383-162">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-162">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-163">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="e2383-163">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="e2383-164">超过此限制将导致引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e2383-164">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="e2383-165">属性名称经过转义并在写入之前编码。</span><span class="sxs-lookup"><span data-stu-id="e2383-165">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-166">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-166">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-167">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-167">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-168">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-168">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="e2383-169">要编写为 Base64 编码文本的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="e2383-169">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="e2383-170">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-170">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-171">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="e2383-171">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="e2383-172">超过此限制将导致引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e2383-172">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="e2383-173">属性名称经过转义并在写入之前编码。</span><span class="sxs-lookup"><span data-stu-id="e2383-173">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-174">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-174">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-175">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-175">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-176">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-176">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="e2383-177">要编写为 Base64 编码文本的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="e2383-177">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="e2383-178">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-178">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-179">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="e2383-179">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="e2383-180">超过此限制将导致引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e2383-180">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="e2383-181">属性名称经过转义并在写入之前编码。</span><span class="sxs-lookup"><span data-stu-id="e2383-181">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-182">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-182">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-183">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-183">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-184"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-184">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-185">要写入的属性的 JSON 编码名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-185">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="e2383-186">要编写为 Base64 编码文本的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="e2383-186">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="e2383-187">将预编码属性名称和原始字节值（作为 Base64 编码的 JSON 字符串）编写为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-187">Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-188">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="e2383-188">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="e2383-189">超过此限制将导致引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e2383-189">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="e2383-190">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-190">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="e2383-191">字节在写入前进行编码。</span><span class="sxs-lookup"><span data-stu-id="e2383-191">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-192">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-192">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-193">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-193">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="e2383-194">要编写为某个 JSON 数组的 Base 64 编码的 JSON 字符串元素的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="e2383-194">The binary data to be written as a Base64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-195">将原始字节值以 Base64 编码的 JSON 字符串形式编写为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-195">Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-196">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="e2383-196">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="e2383-197">超过此限制将导致引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e2383-197">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="e2383-198">字节在写入前进行编码。</span><span class="sxs-lookup"><span data-stu-id="e2383-198">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-199">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-199">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-200">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-200">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-201">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-201">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-202">要作为 JSON 文本 <b>true</b> 或 <b>false</b> 写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-202">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-203">将指定为只读字节范围的属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-203">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-204">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-204">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-205">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-205">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-206">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-206">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-207">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-207">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-208">要作为 JSON 文本 <b>true</b> 或 <b>false</b> 写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-208">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-209">将指定为只读字符范围的属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-209">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-210">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-210">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-211">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-211">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-212">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-212">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-213">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-213">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-214">要作为 JSON 文本 <b>true</b> 或 <b>false</b> 写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-214">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-215">将指定为字符串的属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-215">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-216">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-216">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-217">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-217">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-218">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-218">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-219"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-219">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-220">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-220">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-221">要作为 JSON 文本 <b>true</b> 或 <b>false</b> 写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-221">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-222">将预编码属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-222">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-223">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-223">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-224">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-224">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-225">要以 JSON 文本 <b>true</b> 或 <b>false</b> 的形式写入 JSON 数组元素的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-225">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-226">将一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-226">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-227">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-227">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="e2383-228">要在 <c>/*..*/</c> 中编写为 JSON 注释的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-228">The UTF-8 encoded value to be written as a JSON comment within <c>/*..*/</c>.</span></span></param>
        <summary><span data-ttu-id="e2383-229">将 UTF-8 文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="e2383-229">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-230">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-230">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-231">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-231">The specified value is too large.</span></span>
        
<span data-ttu-id="e2383-232">或</span><span class="sxs-lookup"><span data-stu-id="e2383-232">-or-</span></span>

<span data-ttu-id="e2383-233"><paramref name="utf8Value" /> 包含注释分隔符（即 <c>\*/</c>）。</span><span class="sxs-lookup"><span data-stu-id="e2383-233"><paramref name="utf8Value" /> contains a comment delimiter (that is, <c>\*/</c>).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-234">要在 <c>/*..*/</c> 中编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-234">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within <c>/*..*/</c>.</span></span></param>
        <summary><span data-ttu-id="e2383-235">将 UTF-16 文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="e2383-235">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-236">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-236">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-237">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-237">The specified value is too large.</span></span>
        
<span data-ttu-id="e2383-238">或</span><span class="sxs-lookup"><span data-stu-id="e2383-238">-or-</span></span>

<span data-ttu-id="e2383-239"><paramref name="value" /> 包含注释分隔符（即 <c>\*/</c>）。</span><span class="sxs-lookup"><span data-stu-id="e2383-239"><paramref name="value" /> contains a comment delimiter (that is, <c>\*/</c>).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-240">要在 <c>/*..*/</c> 中编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-240">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within <c>/*..*/</c>.</span></span></param>
        <summary><span data-ttu-id="e2383-241">将字符串文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="e2383-241">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-242">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-242">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-243">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-243">The specified value is too large.</span></span>
        
<span data-ttu-id="e2383-244">或</span><span class="sxs-lookup"><span data-stu-id="e2383-244">-or-</span></span>

<span data-ttu-id="e2383-245"><paramref name="value" /> 包含注释分隔符（即 <c>\*/</c>）。</span><span class="sxs-lookup"><span data-stu-id="e2383-245"><paramref name="value" /> contains a comment delimiter (that is, <c>\*/</c>).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-246"><paramref name="value" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-246">The <paramref name="value" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-247">编写 JSON 数组的结尾。</span><span class="sxs-lookup"><span data-stu-id="e2383-247">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-248">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-248">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-249">编写 JSON 对象的结尾。</span><span class="sxs-lookup"><span data-stu-id="e2383-249">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-250">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-250">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-251">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-251">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="e2383-252">将指定为只读字节范围的属性名称和 JSON 文本 <b>null</b> 写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-252">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-253">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-253">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-254">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-254">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-255">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-255">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-256">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-256">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-257">将指定为只读字符范围的属性名称和 JSON 文本 <b>null</b> 写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-257">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-258">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-258">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-259">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-259">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-260">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-260">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-261">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-261">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-262">将指定为字符串的属性名称和 JSON 文本 <b>null</b> 写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-262">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-263">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-263">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-264">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-264">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-265">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-265">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-266"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-266">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-267">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-267">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-268">将预编码的属性名称和 JSON 文本 <b>null</b> 写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-268">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-269">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-269">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-270">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-270">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-271">将 JSON 文本 <b>null</b> 写为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-271">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-272">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-272">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-273">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-273">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-274">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-275">编写指定为字节只读范围的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-275">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[ 

## Remarks

<span data-ttu-id="e2383-276">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="e2383-276">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="e2383-277">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-277">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-278">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-278">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-279">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-279">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-280">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-280">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-281">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-281">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-282">编写指定为字节只读范围的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-282">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-283">使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="e2383-283">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-284">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="e2383-284">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="e2383-285">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-285">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-286">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-286">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-287">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-287">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-288">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-288">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-289">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-289">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-290">编写指定为字节只读范围的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-290">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-291">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int32>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-291">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-292">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-292">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-293">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-293">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-294">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-294">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-295">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-295">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-296">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-296">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-297">编写指定为字节只读范围的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-297">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-298">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int64>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-298">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-299">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-299">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-300">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-300">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-301">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-301">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-302">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-302">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-303">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-303">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-304">编写指定为字节只读范围的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-304">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-305">使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="e2383-305">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-306">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="e2383-306">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="e2383-307">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-307">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-308">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-308">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-309">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-309">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-310">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-310">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-311">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-311">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-312">编写指定为字节只读范围的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-312">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-313">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt32>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-313">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-314">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-314">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-315">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-315">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-316">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-316">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-317">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-317">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-318">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-319">编写指定为字节只读范围的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-319">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-320">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt64>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-320">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-321">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-321">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-322">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-322">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-323">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-323">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-324">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-324">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-325">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-325">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-326">编写指定为只读字符范围的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-326">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-327">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="e2383-327">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="e2383-328">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-328">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-329">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-329">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-330">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-330">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-331">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-331">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-332">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-332">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-333">编写指定为只读字符范围的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-333">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-334">使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="e2383-334">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-335">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="e2383-335">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="e2383-336">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-336">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-337">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-337">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-338">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-338">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-339">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-339">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-340">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-340">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-341">编写指定为只读字符范围的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-341">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-342">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int32>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-342">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-343">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-343">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-344">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-344">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-345">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-345">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-346">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-346">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-347">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-347">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-348">编写指定为只读字符范围的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-348">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-349">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int64>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-349">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-350">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-350">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-351">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-351">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-352">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-352">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-353">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-353">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-354">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-354">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-355">编写指定为只读字符范围的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-355">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-356">使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="e2383-356">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-357">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="e2383-357">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="e2383-358">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-358">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-359">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-359">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-360">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-360">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-361">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-361">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-362">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-362">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-363">编写指定为只读字符范围的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-363">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-364">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt32>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-364">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-365">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-365">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-366">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-366">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-367">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-367">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-368">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-369">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-370">编写指定为只读字符范围的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-370">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-371">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt64>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-371">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-372">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-372">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-373">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-373">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-374">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-374">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-375">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-375">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-376">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-376">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-377">编写指定为字符串的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-377">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-378">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="e2383-378">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="e2383-379">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-379">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-380">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-380">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-381">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-381">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-382"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-382">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-383">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-383">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-384">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-384">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-385">编写指定为字符串的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-385">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-386">使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="e2383-386">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-387">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="e2383-387">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="e2383-388">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-388">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-389">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-389">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-390">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-390">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-391"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-391">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-392">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-392">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-393">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-393">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-394">编写指定为字符串的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-394">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-395">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int32>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-395">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-396">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-396">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-397">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-397">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-398">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-398">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-399"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-399">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-400">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-400">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-401">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-401">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-402">编写指定为字符串的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-402">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-403">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int64>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-403">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-404">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-404">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-405">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-405">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-406">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-406">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-407"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-407">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-408">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-408">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-409">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-409">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-410">编写指定为字符串的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-410">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-411">使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="e2383-411">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-412">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="e2383-412">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="e2383-413">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-413">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-414">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-414">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-415">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-415">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-416"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-416">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-417">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-417">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-418">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-418">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-419">编写指定为字符串的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-419">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-420">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt32>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-420">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-421">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-421">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-422">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-422">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-423">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-423">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-424"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-424">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-425">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-425">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-426">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-426">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-427">编写指定为字符串的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-427">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-428">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt64>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-428">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-429">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-429">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-430">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-430">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-431">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-431">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-432"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-432">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-433">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-433">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-434">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-434">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-435">将预编码的属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-435">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-436">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="e2383-436">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="e2383-437">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-437">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-438">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-438">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-439">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-439">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-440">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-440">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-441">将预编码的属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-441">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-442">使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="e2383-442">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-443">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="e2383-443">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="e2383-444">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-444">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-445">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-445">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-446">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-446">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-447">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-447">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-448">将预编码的属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-448">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-449">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int32>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-449">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-450">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-450">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-451">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-451">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-452">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-452">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-453">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-453">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-454">将预编码的属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-454">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-455">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int64>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-455">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-456">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-456">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-457">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-457">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-458">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-458">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-459">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-459">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-460">将预编码的属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-460">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-461">使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="e2383-461">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-462">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="e2383-462">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="e2383-463">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-463">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-464">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-464">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-465">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-465">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-466">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-466">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-467">将预编码的属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-467">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-468">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt32>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-468">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-469">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-469">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-470">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-470">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-471">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-471">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-472">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-472">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-473">将预编码的属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-473">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-474">使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt64>;例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-474">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="e2383-475">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-475">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-476">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-476">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-477">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-477">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-478">编写 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-478">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-479">此方法使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Decimal> 值。</span><span class="sxs-lookup"><span data-stu-id="e2383-479">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-480">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-480">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-481">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-481">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-482">编写 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-482">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-483">此方法使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）来写入 <xref:System.Double> 值。</span><span class="sxs-lookup"><span data-stu-id="e2383-483">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-484">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="e2383-484">Uses 'G17' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-485">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-485">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-486">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-486">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-487">编写 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-487">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-488">此方法使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int32> 值。</span><span class="sxs-lookup"><span data-stu-id="e2383-488">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="e2383-489">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-489">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-490">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-490">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-491">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-491">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-492">编写 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-492">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-493">此方法使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.Int64> 值。</span><span class="sxs-lookup"><span data-stu-id="e2383-493">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="e2383-494">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-494">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-495">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-495">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-496">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-496">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-497">编写 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-497">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-498">此方法使用 .NET Core 3.0 或更高版本上的默认 <xref:System.Buffers.StandardFormat> （即 "G"）来写入 <xref:System.Single> 值。</span><span class="sxs-lookup"><span data-stu-id="e2383-498">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="e2383-499">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="e2383-499">Uses 'G9' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-500">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-500">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-501">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-501">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-502">编写 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-502">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-503">此方法使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt32> 值。</span><span class="sxs-lookup"><span data-stu-id="e2383-503">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="e2383-504">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-504">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-505">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-505">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-506">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-506">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-507">编写 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-507">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-508">此方法使用默认的 <xref:System.Buffers.StandardFormat> （即 "G"）写入 <xref:System.UInt64> 值。</span><span class="sxs-lookup"><span data-stu-id="e2383-508">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="e2383-509">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e2383-509">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-510">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-510">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-511">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-511">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="e2383-512">编写 UTF-8 属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-512">Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-513">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-513">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-514">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-514">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-515">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-515">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-516">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-516">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-517">编写属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-517">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-518">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-518">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-519">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-519">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-520">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-520">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-521">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-521">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-522">编写属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-522">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-523">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-523">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-524">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-524">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-525">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-525">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-526"><paramref name="propertyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-526"><paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-527">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-527">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-528">编写预编码属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-528">Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-529">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-529">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-530">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-530">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-531">编写 JSON 数组的开头。</span><span class="sxs-lookup"><span data-stu-id="e2383-531">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-532">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-532">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="e2383-533">或</span><span class="sxs-lookup"><span data-stu-id="e2383-533">-or-</span></span>

<span data-ttu-id="e2383-534">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-534">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-535">要编写的 JSON 数组的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-535">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="e2383-536">编写 JSON 数组的开头，将指定为字节只读范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e2383-536">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-537">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-537">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-538">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-538">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-539">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-539">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="e2383-540">或</span><span class="sxs-lookup"><span data-stu-id="e2383-540">-or-</span></span>
       
<span data-ttu-id="e2383-541">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-541">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-542">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-542">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-543">编写 JSON 数组的开头，将指定为只读字符范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e2383-543">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-544">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-544">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-545">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-545">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-546">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-546">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="e2383-547">或</span><span class="sxs-lookup"><span data-stu-id="e2383-547">-or-</span></span>
       
<span data-ttu-id="e2383-548">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-548">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-549">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-549">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-550">编写 JSON 数组的开头，将指定为字符串的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e2383-550">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-551">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-551">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-552">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-552">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-553">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-553">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="e2383-554">或</span><span class="sxs-lookup"><span data-stu-id="e2383-554">-or-</span></span>
       
<span data-ttu-id="e2383-555">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-555">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-556"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-556">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-557">要进行转码并写为 UTF-8 的 JSON 数字的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-557">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-558">编写将预编码属性名称作为键的 JSON 数组的开头。</span><span class="sxs-lookup"><span data-stu-id="e2383-558">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-559">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-559">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-560">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-560">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
    
<span data-ttu-id="e2383-561">或</span><span class="sxs-lookup"><span data-stu-id="e2383-561">-or-</span></span>

<span data-ttu-id="e2383-562">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-562">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2383-563">编写 JSON 对象的开头。</span><span class="sxs-lookup"><span data-stu-id="e2383-563">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-564">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-564">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="e2383-565">或</span><span class="sxs-lookup"><span data-stu-id="e2383-565">-or-</span></span>

<span data-ttu-id="e2383-566">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-566">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-567">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-567">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="e2383-568">编写 JSON 对象的开头，将指定为字节只读范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e2383-568">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-569">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-569">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-570">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-570">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-571">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-571">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="e2383-572">或</span><span class="sxs-lookup"><span data-stu-id="e2383-572">-or-</span></span>
       
<span data-ttu-id="e2383-573">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-573">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-574">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-574">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-575">编写 JSON 对象的开头，将指定为只读字符范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e2383-575">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-576">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-576">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-577">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-577">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-578">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-578">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="e2383-579">或</span><span class="sxs-lookup"><span data-stu-id="e2383-579">-or-</span></span>
       
<span data-ttu-id="e2383-580">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-580">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-581">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-581">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-582">编写 JSON 对象的开头，将指定为字符串的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e2383-582">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-583">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-583">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-584">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-584">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-585">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-585">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="e2383-586">或</span><span class="sxs-lookup"><span data-stu-id="e2383-586">-or-</span></span>
       
<span data-ttu-id="e2383-587">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-587">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-588"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-588">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-589">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-589">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e2383-590">编写将预编码属性名称作为键的 JSON 对象的开头。</span><span class="sxs-lookup"><span data-stu-id="e2383-590">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-591">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-591">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-592">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="e2383-592">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
          
<span data-ttu-id="e2383-593">或</span><span class="sxs-lookup"><span data-stu-id="e2383-593">-or-</span></span>

<span data-ttu-id="e2383-594">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-594">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-595">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-595">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-596">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-596">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-597">编写 UTF-8 属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-597">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-598">使用 ISO 8601-1 扩展格式写入 <xref:System.DateTime> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30：45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e2383-598">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="e2383-599">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-599">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-600">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-600">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-601">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-601">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-602">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-602">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-603">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-603">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-604">编写 UTF-8 属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-604">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-605">使用 ISO 8601-1 扩展格式写入 <xref:System.DateTimeOffset> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30： 45.7680000-07：00。</span><span class="sxs-lookup"><span data-stu-id="e2383-605">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="e2383-606">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-606">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-607">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-607">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-608">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-608">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-609">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-609">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-610">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-610">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-611">编写 UTF-8 属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-611">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-612">使用默认的 <xref:System.Buffers.StandardFormat> （即 "d"）写入 <xref:System.Guid>，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e2383-612">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="e2383-613">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-613">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-614">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-614">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-615">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-615">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-616">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-616">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e2383-617">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-617">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-618">编写 UTF-8 属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-618">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-619">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-619">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-620">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-620">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-621">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-621">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-622">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-622">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-623">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-623">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-624">编写 UTF-8 属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-624">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-625">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-625">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-626">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-626">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-627">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-627">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-628">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-628">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-629">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-629">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-630">编写 UTF-8 属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-630">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-631">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-631">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="e2383-632">如果 `null``value`，则将写入 JSON **null**值，就像调用 <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})> 方法一样。</span><span class="sxs-lookup"><span data-stu-id="e2383-632">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-633">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-633">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-634">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-634">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e2383-635">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-635">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-636">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-636">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-637">将 UTF-8 属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</span><span class="sxs-lookup"><span data-stu-id="e2383-637">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-638">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，应已对该值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-638">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="e2383-639">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-639">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-640">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-640">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-641">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-641">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-642">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-642">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-643">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-643">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-644">编写指定为只读字符范围的属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-644">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-645">使用 ISO 8601-1 扩展格式写入 <xref:System.DateTime> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30：45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e2383-645">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="e2383-646">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-646">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-647">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-647">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-648">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-648">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-649">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-649">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-650">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-650">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-651">编写指定为只读字符范围的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-651">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-652">使用 ISO 8601-1 扩展格式写入 <xref:System.DateTimeOffset> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30： 45.7680000-07：00。</span><span class="sxs-lookup"><span data-stu-id="e2383-652">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="e2383-653">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-653">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-654">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-654">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-655">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-655">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-656">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-656">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-657">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-657">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-658">编写指定为只读字符范围的属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-658">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-659">使用默认的 <xref:System.Buffers.StandardFormat> （即 "d"）写入 <xref:System.Guid>，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e2383-659">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="e2383-660">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-660">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-661">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-661">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-662">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-662">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-663">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-663">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e2383-664">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-664">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-665">编写 UTF-16 属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-665">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-666">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-666">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-667">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-667">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-668">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-668">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-669">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-669">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-670">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-670">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-671">编写 UTF-16 属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-671">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-672">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-672">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-673">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-673">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-674">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-674">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-675">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-675">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-676">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-676">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-677">编写 UTF-16 属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-677">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-678">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-678">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="e2383-679">如果 `null``value`，则将写入 JSON **null**值，就像调用 <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})> 方法一样。</span><span class="sxs-lookup"><span data-stu-id="e2383-679">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-680">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-680">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-681">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-681">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-682">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-682">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-683">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-683">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-684">将属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</span><span class="sxs-lookup"><span data-stu-id="e2383-684">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-685">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，应已对该值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-685">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="e2383-686">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-686">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-687">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-687">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-688">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-688">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-689">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-689">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-690">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-690">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-691">编写指定为字符串的属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-691">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-692">使用 ISO 8601-1 扩展格式写入 <xref:System.DateTime> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30：45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e2383-692">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="e2383-693">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-693">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-694">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-694">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-695">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-695">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-696"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-696">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-697">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-697">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-698">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-698">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-699">编写指定为字符串的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-699">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-700">使用 ISO 8601-1 扩展格式写入 <xref:System.DateTimeOffset> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30： 45.7680000-07：00。</span><span class="sxs-lookup"><span data-stu-id="e2383-700">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="e2383-701">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-701">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-702">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-702">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-703">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-703">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-704"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-704">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-705">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-705">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-706">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-706">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-707">编写指定为字符串的属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-707">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-708">使用默认的 <xref:System.Buffers.StandardFormat> （即 "d"）写入 <xref:System.Guid>，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e2383-708">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="e2383-709">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-709">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-710">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-710">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-711">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-711">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-712"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-712">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-713">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-713">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e2383-714">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-714">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-715">编写指定为字符串的属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-715">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-716">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-716">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-717">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-717">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-718">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-718">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-719"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-719">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-720">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-720">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-721">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-721">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-722">编写指定为字符串的属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-722">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-723">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-723">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-724">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-724">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-725">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-725">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-726"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-726">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-727">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-727">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-728">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-728">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-729">编写指定为字符串的属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e2383-729">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-730">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-730">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="e2383-731">如果 `null``value`，则将写入 JSON **null**值，就像调用 <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)> 方法一样。</span><span class="sxs-lookup"><span data-stu-id="e2383-731">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-732">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-732">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-733">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-733">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-734"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-734">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-735">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-735">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-736">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-736">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-737">将属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</span><span class="sxs-lookup"><span data-stu-id="e2383-737">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-738">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，应已对该值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-738">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="e2383-739">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-739">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-740">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="e2383-740">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-741">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-741">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e2383-742"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e2383-742">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-743">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-743">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-744">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-744">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-745">将预编码的属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-745">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-746">使用 ISO 8601-1 扩展格式写入 <xref:System.DateTime> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30：45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e2383-746">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="e2383-747">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-747">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-748">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-748">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-749">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-749">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-750">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-750">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-751">将预编码的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-751">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-752">使用 ISO 8601-1 扩展格式写入 <xref:System.DateTimeOffset> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30： 45.7680000-07：00。</span><span class="sxs-lookup"><span data-stu-id="e2383-752">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="e2383-753">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-753">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-754">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-754">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-755">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-755">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-756">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-756">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-757">将预编码的属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-757">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-758">使用默认的 <xref:System.Buffers.StandardFormat> （即 "d"）写入 <xref:System.Guid>，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e2383-758">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="e2383-759">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-759">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-760">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-760">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-761">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-761">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e2383-762">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-762">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-763">将预编码的属性名称和 UTF-8 文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-763">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-764">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-764">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="e2383-765">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-765">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-766">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-766">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-767">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-767">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-768">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-768">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-769">要作为 UTF-8 转码的 JSON 字符串写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-769">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-770">将预编码的属性名称和文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-770">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-771">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-771">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="e2383-772">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-772">The value is escaped before writing.</span></span>

<span data-ttu-id="e2383-773">如果 `null``value`，则将写入 JSON **null**值，就像调用 <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> 方法一样。</span><span class="sxs-lookup"><span data-stu-id="e2383-773">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-774">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-774">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-775">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-775">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-776">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-776">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-777">要作为 UTF-8 转码的 JSON 字符串写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-777">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-778">将预编码的属性名称和字符串文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-778">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-779">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-779">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="e2383-780">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-780">The value is escaped before writing.</span></span>

<span data-ttu-id="e2383-781">如果 `null``value`，则将写入 JSON **null**值，就像调用 <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> 方法一样。</span><span class="sxs-lookup"><span data-stu-id="e2383-781">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-782">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-782">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-783">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-783">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e2383-784">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e2383-784">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e2383-785">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-785">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e2383-786">将预编码的属性名称和预编码的文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="e2383-786">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-787">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，属性名称和值应已转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-787">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-788">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-788">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-789">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-789">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-790">编写 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-790">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-791">此方法使用 ISO 8601-1 扩展格式写入 <xref:System.DateTime> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30：45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e2383-791">This method writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-792">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-792">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-793">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-793">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-794">编写 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-794">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-795">此方法使用 ISO 8601-1 扩展格式写入 <xref:System.DateTimeOffset> （请参阅[系统中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）;例如，2017-06-12T05：30： 45.7680000-07：00。</span><span class="sxs-lookup"><span data-stu-id="e2383-795">This method writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-796">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-796">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-797">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e2383-797">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-798">编写 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-798">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-799">此方法使用默认的 <xref:System.Buffers.StandardFormat> （即 "d"）写入 <xref:System.Guid> 值，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e2383-799">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-800">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-800">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="e2383-801">要编写为 JSON 数组的 JSON 字符串元素的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-801">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-802">编写 UTF-8 文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-802">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-803">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-803">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-804">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-804">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-805">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-805">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-806">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-806">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-807">编写 UTF-16 文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-807">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-808">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-808">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-809">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-809">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-810">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-810">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-811">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-811">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-812">编写字符串文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-812">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="e2383-813">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-813">The value is escaped before writing.</span></span>

<span data-ttu-id="e2383-814">如果 `null``value`，则将写入 JSON **null**值，就像调用 <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue> 方法一样。</span><span class="sxs-lookup"><span data-stu-id="e2383-814">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e2383-815">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="e2383-815">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-816">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-816">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e2383-817">要写为 JSON 数组的 UTF-8 转码的 JSON 字符串元素的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="e2383-817">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e2383-818">将预编码的文本值（作为 JSON 字符串）写为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e2383-818">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e2383-819">创建 <xref:System.Text.Json.JsonEncodedText> 的实例时，应已对该值进行转义。</span><span class="sxs-lookup"><span data-stu-id="e2383-819">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e2383-820">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="e2383-820">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
