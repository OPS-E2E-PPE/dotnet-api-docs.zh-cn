<Type Name="JavaScriptConverter" FullName="System.Web.Script.Serialization.JavaScriptConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fafcfed33c88201aa61830ab9f95b2e16803c48a" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78773429" /></Metadata><TypeSignature Language="C#" Value="public abstract class JavaScriptConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptConverter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptConverter abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为自定义类型转换器提供抽象基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 利用 <xref:System.Web.Script.Serialization.JavaScriptConverter> 类，您可以实现 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 类本机不支持的托管类型的序列化和反序列化进程。 当需要更好地控制序列化和反序列化过程时，还可以使用 <xref:System.Web.Script.Serialization.JavaScriptConverter>。  
  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> 属性指示自定义转换器为其提供转换器服务的类型。  
  
 若要指示 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例必须使用某个自定义转换器，则必须将该转换器注册到该实例。 如果直接使用 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 类，则应使用 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> 方法来注册转换器。 否则，如果从 ECMAScript （JavaScript）调用 Web 方法，并想要使用自定义转换器，则可以通过在配置文件中添加 `converters` 元素来注册它。 有关详细信息，请参阅[如何：在 Microsoft Ajax 中配置 ASP.NET 服务](https://docs.microsoft.com/previous-versions/aspnet/bb763183(v=vs.100))。  
  
 当 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例序列化其已注册自定义转换器的类型时，序列化程序将调用 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> 方法。 同样，当 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例反序列化 JavaScript 对象表示法（JSON）字符串，并识别 JSON 字符串内的某个类型具有关联的自定义转换器时，序列化程序将调用 <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> 方法。  
  
   
  
## Examples  
 下面的示例演示如何为 <xref:System.Web.UI.WebControls.ListItemCollection> 类创建自定义转换器。  
  
 [!code-csharp[System.Web.Script.Serialization#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#2)]
 [!code-vb[System.Web.Script.Serialization#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>从 <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />继承时，必须重写以下成员： 
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 提供 <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />的实施者将使用的 <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> 方法。 转换器代码必须能够获取序列化程序传递给它的字典中包含的值，然后将该值转换为类型 <paramref name="T" />的对象。 您可以调用 <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> 方法，而不是重新实现自定义转换代码来实现此目的。</para></block>
    <altmember cref="T:System.Web.Configuration.Converter" />
    <related type="Article" href="https://msdn.microsoft.com/library/8290e543-7eff-47a4-aace-681f3c07229b">ASP.NET AJAX 中的 Web 服务</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public abstract object Deserialize (System.Collections.Generic.IDictionary&lt;string,object&gt; dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; dictionary, class System.Type type, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Deserialize (dictionary As IDictionary(Of String, Object), type As Type, serializer As JavaScriptSerializer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Deserialize(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ dictionary, Type ^ type, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Type * System.Web.Script.Serialization.JavaScriptSerializer -&gt; obj" Usage="javaScriptConverter.Deserialize (dictionary, type, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="dictionary">作为名称/值对存储的属性数据的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例。</param>
        <param name="type">所生成对象的类型。</param>
        <param name="serializer"><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 实例。</param>
        <summary>当在派生类中重写时，将所提供的字典转换为指定类型的对象。</summary>
        <returns>反序列化的对象。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" /> 方法将循环访问 <paramref name="dictionary" /> 参数中的值，以构造在 <paramref name="type" /> 参数中请求的类型的实例。 尽管转换器可以直接使用 <paramref name="dictionary" />中的值，但我们建议转换器实施者改用 <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> 方法。 转换器应从 <paramref name="serializer" /> 参数调用 <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 实例的此方法。  
  
<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> 方法使转换器能够从 <paramref name="dictionary" />传递属性值，然后返回预期类型的值。 在某些情况下，自定义类型的转换器可能使用自身已注册转换器的属性（例如，类型 A 的属性类型为 B，类型 B 也与自定义转换器相关联）。 在这种情况下，调用 <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> 确保为字典中包含的属性数据递归调用自定义转换器。 转换器循环访问字典中的所有项后，将返回目标类型的构造实例。  
  
如果转换器在反序列化过程中遇到问题，则会引发描述此问题的 <see cref="T:System.InvalidOperationException" /> 错误。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Serialize(object obj, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Serialize (obj As Object, serializer As JavaScriptSerializer) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Serialize(System::Object ^ obj, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Web.Script.Serialization.JavaScriptSerializer -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="javaScriptConverter.Serialize (obj, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="obj">要序列化的对象。</param>
        <param name="serializer">负责序列化的对象。</param>
        <summary>当在派生类中重写时，生成名称/值对的字典。</summary>
        <returns>一个对象，包含表示该对象数据的键/值对。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 序列化自定义转换器注册到的类型时，<xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例将调用 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" /> 的返回值必须是包含零个或多个名称/值对的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例，这些名称/值对表示要转换为 JSON 的对象数据。 转换器本身不会将数据序列化为 JSON。 相反，转换器生成名称/值对字典，其中包含属性名称（字典的字符串键）和相应的属性值（字典中的对象值）。 然后，<see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 实例将它们转换为 JSON。  
  
如果转换器遇到异常，则它应引发描述此问题的 <see cref="T:System.InvalidOperationException" /> 错误。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SupportedTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; SupportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; SupportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SupportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ SupportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedTypes : seq&lt;Type&gt;" Usage="System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在派生类中重写时，获取受支持类型的集合。</summary>
        <value>一个实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的对象，用于表示转换器支持的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> 属性列出转换器支持的类型。 在运行时，<xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例使用此属性来确定托管类型到其对应自定义转换器的映射。  
  
   
  
## Examples  
 下面的示例演示如何重写派生类中的 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> 属性。 在此示例中，转换器仅支持 <xref:System.Web.UI.WebControls.ListItemCollection> 类型。 此代码示例是为 <xref:System.Web.Script.Serialization.JavaScriptConverter> 类提供的更大示例的一部分。  
  
 [!code-csharp[System.Web.Script.Serialization#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#3)]
 [!code-vb[System.Web.Script.Serialization#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> 必须始终返回一个集合，并且集合必须至少包含一个条目。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
