<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6e2c2bf33d13e1feb3e0866a2765f0b9625d4dc" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82487227" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供依赖项对象标识符，以便对只读依赖项对象进行有限的写访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> 实例是使用 <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> 或 <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>方法，作为依赖属性注册调用的返回值获取的。  
  
 注册依赖属性的类型可使用 <xref:System.Windows.DependencyPropertyKey> 调用 <xref:System.Windows.DependencyObject.SetValue%2A> 和 <xref:System.Windows.DependencyObject.ClearValue%2A>，以便将属性值作为类逻辑的一部分进行调整。 如果密钥的访问级别允许，则相关类也可以使用该密钥和依赖属性。 例如，可以将密钥声明为内部密钥，同一程序集中的其他类型也可以设置该依赖属性。  
  
 不应将由只读依赖项属性注册返回的 <xref:System.Windows.DependencyPropertyKey> 设置为公共的，因为公开密钥会使属性可设置，因此摆将其注册为只读依赖属性的点。 此外，公开密钥会导致可用的依赖项属性行为与它 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 属性包装器实现之间不匹配，这是类设计错误。  
  
 应将 <xref:System.Windows.DependencyPropertyKey> <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 值作为类的 `public static readonly`<xref:System.Windows.DependencyProperty> 公开，而不是公开密钥本身。 这使属性可以为某些属性系统操作（如枚举本地设置值）返回有效的依赖属性标识符。 但是，对于许多属性系统操作，获取的标识符没有 <xref:System.Windows.DependencyProperty> 的全部功能。  
  
   
  
## Examples  
 下面的示例将注册一个只读依赖属性，并将该密钥用于其他类成员中的两个目的：实现 get "包装器"，并将其用作受保护确定操作的标识符，该操作根据其他属性值的计算设置值。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此专用只读依赖项对象标识符关联的依赖项对象标识符。</summary>
        <value>相关的依赖项对象标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 值，只读属性的标识符可以使用与读写依赖项属性相同的某些接口参与公共属性系统操作。  
  
 为了实现只读依赖项属性的 get 属性访问器，你应在类上创建并公开 <xref:System.Windows.DependencyProperty> 标识符。 这有两种用途：  
  
-   你自己的类需要 <xref:System.Windows.DependencyProperty> 标识符才能实现属性包装的 get 访问器。 将 <xref:System.Windows.DependencyProperty> 用作实现 get 访问器的 <xref:System.Windows.DependencyObject.GetValue%2A> 调用的参数。  
  
-   <xref:System.Windows.DependencyProperty> 标识符向属性系统公开依赖属性，以便其他依赖元数据的方法可以在标准窗体中访问它。 例如，如果你在某些 <xref:System.Windows.DependencyObject> 上调用了 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>，并且获取了本地设置的属性（值和标识符）的枚举，则为只读依赖属性返回的标识符将是你的 <xref:System.Windows.DependencyProperty> 值，而不是密钥。 如果未公开 <xref:System.Windows.DependencyProperty> 标识符，则不会以任何方式增加只读依赖项属性的安全性，它只会使涉及属性的操作对后续派生类和类实例更难使用。  
  
 若要公开类的 <xref:System.Windows.DependencyProperty> 标识符，请直接对键调用 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>。 使用此值在类上创建一个 `public static readonly`<xref:System.Windows.DependencyProperty> 标识符，该标识符与 <xref:System.Windows.DependencyPropertyKey>类似。  
  
   
  
## Examples  
 下面的示例调用 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 为类公开 `AquariumGraphic` 只读依赖项属性的 <xref:System.Windows.DependencyProperty> 标识符（`AquariumGraphicProperty`）。 该示例还显示了 <xref:System.Windows.DependencyPropertyKey> 创建（作为内部成员）和 `AquariumGraphic`的 get 访问器。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">作为此依赖项对象存在基础以及应依据其重写元数据的类型。</param>
        <param name="typeMetadata">为此类型提供的元数据。</param>
        <summary>重写由此依赖项对象标识符表示的只读依赖项对象的元数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写只读依赖项属性的元数据的方式类似于重写读写依赖项属性的元数据，并且限制在键级别进行访问，因为在元数据中指定的行为可以更改集行为（例如，默认值）。  
  
 对于读写依赖项属性，在只读依赖项属性上重写元数据时，只应在属性系统正在使用该属性之前完成此操作（这相当于为注册该属性的对象的特定实例实例化的时间）。 只应在将自身作为此方法的 `forType` 参数的类型的静态构造函数中执行 <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> 调用，或对该类执行等效的初始化操作。  
  
 此方法可以有效地转发到 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 方法，将 <xref:System.Windows.DependencyPropertyKey> 实例作为密钥参数传递。  
  
   
  
## Examples  
 下面的示例将覆盖类继承的现有只读依赖项属性的元数据。 在这种情况下，方案目标是添加基属性元数据不具有的强制值回调。 你还可以重写元数据，因为重写元数据通常是适当的（更改默认值、添加 <xref:System.Windows.FrameworkPropertyMetadataOptions> 值等）  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尝试在读写依赖项对象上进行元数据重写（无法使用此签名完成该操作）。</exception>
        <exception cref="T:System.ArgumentException">当属性存在于提供的类型上时，已为该属性建立元数据。</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
