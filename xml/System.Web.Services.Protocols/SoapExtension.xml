<Type Name="SoapExtension" FullName="System.Web.Services.Protocols.SoapExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6008300f656bd87ea908aa7d27145052c96e4607" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78771035" /></Metadata><TypeSignature Language="C#" Value="public abstract class SoapExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SoapExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SoapExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapExtension abstract" />
  <TypeSignature Language="F#" Value="type SoapExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>使用 ASP.NET 创建的 XML Web services 的 SOAP 扩展的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 允许通过扩展性机制构建与 SOAP 相关的基础结构。 ASP.NET SOAP 扩展体系结构围绕一个扩展，可以在客户端或服务器上的消息处理的特定阶段检查或修改消息。  
  
 ASP.NET SOAP 扩展派生自 <xref:System.Web.Services.Protocols.SoapExtension> 类。 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 和 <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> 方法提供了用于初始化 SOAP 扩展以提高性能的替代机制。 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> 是大多数 SOAP 扩展的核心，因为在 <xref:System.Web.Services.Protocols.SoapMessageStage>中定义的每个阶段都调用方法，从而允许 SOAP 扩展执行该特定 SOAP 扩展所需的行为。 对于需要修改 SOAP 请求或 SOAP 响应的 SOAP 扩展，<xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> 提供接收要通过网络发送的建议数据的机会。  
  
   
  
## Examples  
 以下 `TraceExtension` SOAP 扩展在应用于 XML Web service 方法时将 SOAP 请求和 SOAP 响应输出到指定的文件。 如果安装了以下 SOAP 扩展以使用 XML Web service 运行，ASPNET 用户帐户必须具有写入日志文件的目录的权限。  
  
 [!code-cpp[Classic SoapExtension Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
    <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SoapExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.Protocols.SoapExtension" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChainStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream ChainStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream ChainStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ChainStream (stream As Stream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ ChainStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member ChainStream : System.IO.Stream -&gt; System.IO.Stream&#xA;override this.ChainStream : System.IO.Stream -&gt; System.IO.Stream" Usage="soapExtension.ChainStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">包含 SOAP 请求或响应的内存缓冲区。</param>
        <summary>当在派生类中被重写时，允许 SOAP 扩展访问包含 SOAP 请求或响应的内存缓冲区。</summary>
        <returns><see cref="T:System.IO.Stream" />，它表示此 SOAP 扩展可以修改的新内存缓冲区。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> 确保具有最高优先级的 SOAP 扩展可以修改最接近发送或通过线路返回的 SOAP 消息的实际数据。  
  
 SOAP 扩展应保存传递到 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> 中的 <xref:System.IO.Stream> 的引用以及从 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>返回的 <xref:System.IO.Stream>。 如果 SOAP 扩展配置为使用 XML Web service 方法运行，则传入到 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> 的 <xref:System.IO.Stream> 包含 <xref:System.Web.Services.Protocols.SoapMessageStage.BeforeDeserialize><xref:System.Web.Services.Protocols.SoapMessageStage>中的序列化 SOAP 请求。 同样，在序列化发生时，从 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> 返回的 <xref:System.IO.Stream> 引用会写入到中，因此在 <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize><xref:System.Web.Services.Protocols.SoapMessageStage>中包含序列化的 SOAP 响应。  
  
   
  
## Examples  
 下面的示例将分别传递到 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> 中的 <xref:System.IO.Stream> 和从成员变量中的 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> 返回 <xref:System.IO.Stream> `oldStream` 和 `newStream`。  
  
 [!code-cpp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>当在派生类中重写时，允许 SOAP 扩展以一次执行的成本初始化特定于 XML Web services 方法的数据。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : Type -&gt; obj" Usage="soapExtension.GetInitializer serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">实现应用 SOAP 扩展的 XML Web services 的类的类型。</param>
        <summary>当在派生类中重写时，允许 SOAP 扩展以一次执行的成本初始化特定于实现 XML Web services 的类的数据。</summary>
        <returns><see cref="T:System.Object" />，SOAP 扩展将对其进行初始化以用于缓存。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 调用的 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 的重载取决于 SOAP 扩展的指定方式。 可以通过两种方法来指定 SOAP 扩展：  
  
-   将从 <xref:System.Web.Services.Protocols.SoapExtensionAttribute>派生的自定义属性应用于单个 XML Web service 方法。  
  
-   在 web.config 或 app.config 配置文件中添加引用。  
  
 如果添加对其中一个配置文件的引用，SOAP 扩展将针对该配置文件范围内的所有 XML Web 服务运行。 通过引用配置文件指定 SOAP 扩展时，ASP.NET 会调用传入 <xref:System.Type>的 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 重载。 通过应用自定义属性指定扩展时，ASP.NET 会调用传入 <xref:System.Web.Services.Protocols.LogicalMethodInfo> 和 <xref:System.Web.Services.Protocols.SoapExtensionAttribute>的 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>。  
  
 有关将 SOAP 扩展添加到配置文件的详细信息，请参阅[使用 ASP.NET 创建的 XML Web Services 的配置选项](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/b2c0ew36(v=vs.100))。  
  
   
  
## Examples  
 下面的代码演示了如何根据每个 XML Web service 来保存特定于 SOAP 扩展的数据。 如果使用配置文件而不是属性配置了 SOAP 扩展，SOAP 扩展可以存储应用 SOAP 扩展的每个类的数据。 此示例保存一个文件的名称，在该文件中，将根据实现 XML Web service 的类的名称将发送到 XML Web service 方法的 SOAP 消息记录到缓存中。 此代码示例是 TraceExtension SOAP 扩展的完整代码示例的一部分，可在 <xref:System.Web.Services.Protocols.SoapExtension> 类概述中找到。  
  
 [!code-cpp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CPP/traceextension.cpp#1)]
 [!code-csharp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CS/traceextension.cs#1)]
 [!code-vb[SoapExtension.GetInitializer-Type#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/VB/traceextension.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo, class System.Web.Services.Protocols.SoapExtensionAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (methodInfo As LogicalMethodInfo, attribute As SoapExtensionAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo, System::Web::Services::Protocols::SoapExtensionAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : System.Web.Services.Protocols.LogicalMethodInfo * System.Web.Services.Protocols.SoapExtensionAttribute -&gt; obj" Usage="soapExtension.GetInitializer (methodInfo, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
        <Parameter Name="attribute" Type="System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Parameters>
      <Docs>
        <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />，它表示应用 SOAP 扩展的 XML Web services 方法的特定函数原型。</param>
        <param name="attribute">应用于 XML Web services 方法的 <see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />。</param>
        <summary>当在派生类中重写时，允许 SOAP 扩展以一次执行的成本使用应用于 XML Web services 方法的特性来初始化特定于 XML Web services 方法的数据。</summary>
        <returns><see cref="T:System.Object" />，SOAP 扩展将对其进行初始化以用于缓存。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果使用配置文件配置 SOAP 扩展，请参见接受 <xref:System.Type><xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 重载。  
  
 SOAP 扩展有三个用于初始化数据的机会，它们都具有不同的用途：  
  
-   类构造函数-每次实例化 SOAP 扩展并通常用于初始化成员变量时，都会调用类构造函数。  
  
-   但是，在首次向 XML Web services 方法发出 SOAP 请求时，<xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>只调用一次。 如果将自定义属性应用于 XML Web service 方法，将调用 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 方法。 这样，SOAP 扩展就可以询问 XML Web service 方法的 <xref:System.Web.Services.Protocols.LogicalMethodInfo>，以获取原型信息或访问从 <xref:System.Web.Services.Protocols.SoapExtensionAttribute>派生的类所传递的特定于扩展的数据。 返回值由 ASP.NET 缓存并传入后续 <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> 方法。 因此，在 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 中完成的初始化实质上会被封装到一次性性能方面。  
  
-   每次向 XML Web service 方法发出 SOAP 请求时都会调用 <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>，但与类构造函数相比，在 <xref:System.Object> 中初始化的 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 会传递到该方法。  
  
   
  
## Examples  
 下面的代码演示如何使用派生自 <xref:System.Web.Services.Protocols.SoapExtensionAttribute>的类来获取中传递的 SOAP 扩展特定的数据，然后将这些数据缓存到 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>中。 此代码示例是 `TraceExtension` SOAP 扩展的完整代码示例的一部分，可在 <xref:System.Web.Services.Protocols.SoapExtension> 类概述中找到。 此代码示例依赖于传入 `attribute` 参数的 `TraceExtensionAttribute`。 在完整的代码示例中，`TraceExtensionAttribute` 派生自 <xref:System.Web.Services.Protocols.SoapExtensionAttribute> 并添加 `Filename` 属性，这是缓存中 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 存储的内容。  
  
 [!code-cpp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
        <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize (initializer As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize(System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : obj -&gt; unit" Usage="soapExtension.Initialize initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer"><see cref="T:System.Object" /> 从 ASP.NET 缓存的 <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" /> 中返回。</param>
        <summary>当在派生类中被重写时，允许 SOAP 扩展使用缓存于 <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" /> 方法中的数据初始化其自身。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SOAP 扩展有三个用于初始化数据的机会，它们都具有不同的用途：  
  
-   类构造函数-每次实例化 SOAP 扩展并通常用于初始化成员变量时，都会调用类构造函数。  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>-在首次向 XML Web services 方法发出 SOAP 请求时，只调用一次此方法。 如果将自定义属性应用于 XML Web service 方法，将调用 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 方法。 这样，SOAP 扩展就可以询问 XML Web service 方法的 <xref:System.Web.Services.Protocols.LogicalMethodInfo>，以获取原型信息或访问从 <xref:System.Web.Services.Protocols.SoapExtensionAttribute>派生的类所传递的特定于扩展的数据。 返回值由 ASP.NET 缓存并传入后续 <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> 方法。 因此，在 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 中完成的初始化实质上会被封装到一次性性能方面。  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>-每次向 XML Web service 方法发出 SOAP 请求时都会调用此方法，但对类构造函数具有优势，因为在 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 中初始化的 <xref:System.Object> 会传递到该方法。
  
> [!NOTE]
>  你还可以使用配置文件中的[\<x > 元素](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c)，添加不从 <xref:System.Web.Services.Protocols.SoapExtensionAttribute> 派生的 SOAP 扩展。 有关详细信息，请参阅[\<x > 元素](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c)和[使用 Soap 扩展修改 soap 消息](https://msdn.microsoft.com/library/97d81ace-95e7-4acc-ae39-9692a0021e95)。  
  
## Examples  
 下面的示例演示如何使用 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 方法期间缓存的数据。  
  
 [!code-cpp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.Initialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessMessage(class System.Web.Services.Protocols.SoapMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ProcessMessage (message As SoapMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ProcessMessage(System::Web::Services::Protocols::SoapMessage ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMessage : System.Web.Services.Protocols.SoapMessage -&gt; unit" Usage="soapExtension.ProcessMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapMessage" />
      </Parameters>
      <Docs>
        <param name="message">要处理的 <see cref="T:System.Web.Services.Protocols.SoapMessage" />。</param>
        <summary>当在派生类中被重写时，允许 SOAP 扩展接收要在每个 <see cref="T:System.Web.Services.Protocols.SoapMessage" /> 中处理的 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于应用到使用 ASP.NET 和客户端创建的 XML Web services 的所有 <xref:System.Web.Services.Protocols.SoapMessageStage> 阶段，都将调用 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>。 在每个 <xref:System.Web.Services.Protocols.SoapMessageStage>，从 <xref:System.Web.Services.Protocols.SoapMessage> 派生的类的实例将传递给 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>。 如果 SOAP 扩展在 XML Web service 客户端上运行，则 <xref:System.Web.Services.Protocols.SoapClientMessage> 对象将传递到 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>;否则，会传入一个 <xref:System.Web.Services.Protocols.SoapServerMessage> 对象。  
  
   
  
## Examples  
 下面的示例是用于记录 SOAP 请求和 SOAP 响应的 SOAP 扩展的 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> 部分。 通过记录 <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize><xref:System.Web.Services.Protocols.SoapMessageStage>的 <xref:System.Web.Services.Protocols.SoapMessage>，SOAP 扩展会访问要通过网络发送的 <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A>。 如果 SOAP 扩展应用到使用 ASP.NET 创建的 XML Web service 方法，则 <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> 包含 XML Web service 方法的 SOAP 响应。 如果 SOAP 扩展应用于 XML Web service 的客户端，则 <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> 包含对 XML Web service 方法的 SOAP 请求。  
  
 经典 SoapExtension. ProcessMessage 示例 # 1  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
