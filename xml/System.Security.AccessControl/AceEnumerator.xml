<Type Name="AceEnumerator" FullName="System.Security.AccessControl.AceEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5a7c6f803cc6702ecdb2fee55f8d9ec35963de12" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78833630" /></Metadata><TypeSignature Language="C#" Value="public sealed class AceEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AceEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.AceEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AceEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class AceEnumerator sealed : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type AceEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3c5ef-101">提供遍历访问控制列表 (ACL) 中的访问控制项 (ACE) 的能力。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-101">Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.GenericAce Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.AccessControl.GenericAce Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As GenericAce" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::GenericAce ^ Current { System::Security::AccessControl::GenericAce ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Security.AccessControl.GenericAce" Usage="System.Security.AccessControl.AceEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c5ef-102">获取 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中的当前元素。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-102">Gets the current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span> <span data-ttu-id="3c5ef-103">此属性获取对象的类型易于转换的版本。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-103">This property gets the type-friendly version of the object.</span></span></summary>
        <value><span data-ttu-id="3c5ef-104"><see cref="T:System.Security.AccessControl.GenericAce" /> 集合中的当前元素。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-104">The current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="aceEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3c5ef-105">将枚举器前进到 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合的下一个元素。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-105">Advances the enumerator to the next element of the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></summary>
        <returns><span data-ttu-id="3c5ef-106">如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-106"><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c5ef-107">在创建枚举器之后或在调用 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> 方法之后，枚举数将定位到集合的第一个元素之前，对 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 方法的第一次调用将枚举器移动到集合的第一个元素上。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-107">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, an enumerator is positioned before the first element of the collection, and the first call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method moves the enumerator over the first element of the collection.</span></span>  
  
 <span data-ttu-id="3c5ef-108">传递集合末尾后，对的后续调用 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 将返回 `false`，直到调用 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-108">After the end of the collection is passed, subsequent calls to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> return `false` until <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="3c5ef-109">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-109">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3c5ef-110">如果对集合进行了更改（如添加、修改或删除元素），则枚举器将无法恢复，并且对 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 或 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-110">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c5ef-111">集合在枚举器创建后被修改。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-111">The collection was modified after the enumerator was created.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="aceEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3c5ef-112">将枚举数设置为其初始位置，该位置位于 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-112">Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c5ef-113">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-113">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3c5ef-114">如果在集合中添加、修改或删除元素，则枚举器将无法恢复，并且下一次调用 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 方法或 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> 方法将引发 <xref:System.InvalidOperationException></span><span class="sxs-lookup"><span data-stu-id="3c5ef-114">If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method throws an <xref:System.InvalidOperationException></span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c5ef-115">集合在枚举器创建后被修改。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-115">The collection was modified after the enumerator was created.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="3c5ef-116">对 <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> 的所有调用都必须为枚举器生成相同的状态。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-116">All calls to <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> must result in the same state for the enumerator.</span></span> <span data-ttu-id="3c5ef-117">首选的实现是在第一个元素之前将枚举器移动到集合的开头。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-117">The preferred implementation is to move the enumerator to the beginning of the collection, before the first element.</span></span> <span data-ttu-id="3c5ef-118">如果在创建枚举器后对集合进行了修改，此操作将使枚举器失效，这与 <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> 和 <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />一致。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-118">This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> and <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IEnumerator.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c5ef-119">获取集合中的当前元素。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-119">Gets the current element in the collection.</span></span></summary>
        <value><span data-ttu-id="3c5ef-120">集合中的当前元素。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-120">The current element in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c5ef-121">在创建枚举器之后或在调用 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> 方法之后，必须先调用 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 方法，以便将枚举器前进到集合的第一个元素，然后再读取 <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>的值;否则，<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 未定义。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-121">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, you must call the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>; otherwise, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="3c5ef-122">如果最后一次调用 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 返回 `false`，则 <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 也会引发异常，指示集合的末尾。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-122"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> also throws an exception if the last call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="3c5ef-123"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 不移动枚举器的位置，并且在调用 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 或 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> 之前，对 <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 的连续调用返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-123"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> return the same object until either <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="3c5ef-124">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-124">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3c5ef-125">如果对集合进行了更改（如添加、修改或删除元素），则枚举器将无法恢复，并且对 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 或 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-125">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="3c5ef-126">如果在 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 和 <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>之间修改集合，<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 将返回其设置为的元素，即使枚举器已失效。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-126">If the collection is modified between <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> and <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c5ef-127">集合在枚举器创建后被修改。</span><span class="sxs-lookup"><span data-stu-id="3c5ef-127">The collection was modified after the enumerator was created.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
