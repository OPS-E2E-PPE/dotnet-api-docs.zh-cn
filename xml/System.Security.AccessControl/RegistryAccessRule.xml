<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5c7fe5c890b9af0cd65c5e3eb29c1de7f4ffcc0f" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78834085" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.3.0" To="Microsoft.Win32.Registry" ToVersion="4.1.1.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.4.0" To="Microsoft.Win32.Registry" ToVersion="4.1.2.0" FrameworkAlternate="dotnet-plat-ext-3.0;netcore-3.0" />
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.5.0" To="Microsoft.Win32.Registry" ToVersion="4.1.3.0" FrameworkAlternate="dotnet-plat-ext-3.1;netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一组允许或拒绝用户或组进行访问的权限。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> 类是 .NET Framework 为管理注册表项的 Windows 访问控制安全性而提供的一组类中的一种。 有关这些类及其与基础 Windows 访问控制结构的关系的概述，请参阅 <xref:System.Security.AccessControl.RegistrySecurity>。  
  
> [!NOTE]
>  Windows 访问控制安全性只能应用于注册表项。 它不能应用于存储在键中的各个键/值对。  
  
 若要获取当前应用于注册表项的规则列表，请使用 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 方法获取 <xref:System.Security.AccessControl.RegistrySecurity> 对象，然后使用其 <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> 方法获取 <xref:System.Security.AccessControl.RegistryAccessRule> 对象的集合。  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> 对象不会将一对一与基础自由随机控制访问列表（DACL）中的访问控制项映射。 获取注册表项的所有访问规则集时，该集包含当前用于表示所有访问控制项所需的最小规则数。  
  
> [!NOTE]
>  在应用和删除规则时，基础访问控制项会更改。 如果可能，将合并规则中的信息以保持最小数量的访问控制项。 因此，当您阅读当前的规则列表时，它可能看起来与您添加的所有规则的列表并不完全相同。  
  
 使用 <xref:System.Security.AccessControl.RegistryAccessRule> 对象指定对用户或组允许或拒绝的访问权限。 <xref:System.Security.AccessControl.RegistryAccessRule> 对象始终表示允许访问或拒绝访问，这两个对象都不会。  
  
 若要将规则应用于注册表项，请使用 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 方法获取 <xref:System.Security.AccessControl.RegistrySecurity> 对象。 使用 <xref:System.Security.AccessControl.RegistrySecurity> 对象的方法来添加规则，然后使用 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 方法重新附加安全对象。  
  
> [!IMPORTANT]
>  对 <xref:System.Security.AccessControl.RegistrySecurity> 对象所做的更改不会影响注册表项的访问级别，直到调用 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 方法将已更改的安全对象分配给注册表项。  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> 对象是不可变的。 将使用 <xref:System.Security.AccessControl.RegistrySecurity> 类的方法来修改注册表项的安全性，以添加或删除规则;执行此操作时，将修改基础访问控制项。  
  
   
  
## Examples  
 下面的代码示例演示使用继承和传播的访问规则。 该示例创建一个 <xref:System.Security.AccessControl.RegistrySecurity> 对象，然后创建并添加两个具有 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 标志的规则。 第一个规则没有传播标志，而第二个规则 <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> 和 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>。  
  
 程序在 <xref:System.Security.AccessControl.RegistrySecurity> 对象中显示规则，然后使用对象创建子项。 该程序创建一个子子项和一个孙级子项，然后显示每个子项的安全性。 最后，程序删除测试密钥。  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, registryRights As RegistryRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">此规则应用到的用户或组。 必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指示是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数指定默认的传播和继承。 也就是说，<xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> 和 <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="eventRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, registryRights As RegistryRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">应用此规则的用户或组的名称。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指示是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数指定默认的传播和继承。 也就是说，<xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> 和 <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>。  
  
 此构造函数等效于通过将 `identity` 传递到 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数并将新创建的 <xref:System.Security.Principal.NTAccount> 对象传递到 <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> 构造函数来创建 <xref:System.Security.Principal.NTAccount> 对象。  
  
   
  
## Examples  
 下面的代码示例将创建注册表访问规则并将其添加到 <xref:System.Security.AccessControl.RegistrySecurity> 对象中，其中显示了允许和拒绝权限的规则如何保持独立，同时合并了相同类型的兼容规则。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="registryRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="identity" /> 是一个长度为零的字符串。  
  
或 
 <paramref name="identity" /> 的长度超过 512 个字符。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, registryRights As RegistryRights, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">此规则应用到的用户或组。 必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指定允许或拒绝的权限。</param>
        <param name="inheritanceFlags"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 标志的按位组合，指定如何从其他对象继承访问权限。</param>
        <param name="propagationFlags"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 标志的按位组合，指定如何将访问权限传播到其他对象。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限、传播标志以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有注册表项都是容器，因此对于注册表项有意义的唯一继承标志是 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> 标志。 如果未指定此标志，则会忽略传播标志，并且仅影响直接密钥。 如果该标志存在，则将按下表所示传播规则。 该表假设有一个具有子子项 CS 和孙子项 GS 的子项。 也就是说，孙级子项的路径为 S\CS\GS。  
  
|传播标志|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|x|x|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|x|x||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>， <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x||  
  
 孙子项的模式控制孙级子项包含的所有子项。  
  
 例如，如果为 `inheritanceFlags` 指定了 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 标志，并且为 `propagationFlags`指定了 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 传播标志，则此规则不适用于直接子项，但会应用于其所有直接子子项及其包含的所有子项。  
  
> [!NOTE]
>  虽然您可以为 `inheritanceFlags`指定 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> 标志，但没有任何一点要这样做。 出于访问控制的目的，子项中的名称/值对不是单独的对象。 对名称/值对的访问权限由子项的权限控制。 此外，由于所有子项均为容器（即它们可以包含其他子项），因此它们不受 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 标志的影响。 最后，指定 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 标志不必要地使规则维护复杂化，因为它会干扰其他兼容规则的组合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。  
  
或 
 <paramref name="inheritanceFlags" /> 指定了一个无效值。  
  
或 
 <paramref name="propagationFlags" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="registryRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, registryRights As RegistryRights, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">应用此规则的用户或组的名称。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</param>
        <param name="inheritanceFlags"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 标志的按位组合，指定如何从其他对象继承访问权限。</param>
        <param name="propagationFlags"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 标志的按位组合，指定如何将访问权限传播到其他对象。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限、传播标志以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有注册表项都是容器，因此对于注册表项有意义的唯一继承标志是 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> 标志。 如果未指定此标志，则会忽略传播标志，并且仅影响直接密钥。 如果该标志存在，则将按下表所示传播规则。 该表假设有一个具有子子项 CS 和孙子项 GS 的子项。 也就是说，孙级子项的路径为 S\CS\GS。  
  
|传播标志|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|x|x|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|x|x||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>， <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x||  
  
 孙子项的模式控制孙级子项包含的所有子项。  
  
 例如，如果为 `inheritanceFlags` 指定了 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 标志，并且为 `propagationFlags`指定了 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 传播标志，则此规则不适用于直接子项，但会应用于其所有直接子子项及其包含的所有子项。  
  
> [!NOTE]
>  虽然您可以为 `inheritanceFlags`指定 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> 标志，但没有任何一点要这样做。 出于访问控制的目的，子项中的名称/值对不是单独的对象。 对名称/值对的访问权限由子项的权限控制。 此外，由于所有子项均为容器（即它们可以包含其他子项），因此它们不受 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 标志的影响。 最后，指定 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 标志不必要地使规则维护复杂化，因为它会干扰其他兼容规则的组合。  
  
 此构造函数等效于通过将 `identity` 传递到 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数并将新创建的 <xref:System.Security.Principal.NTAccount> 对象传递到 <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> 构造函数来创建 <xref:System.Security.Principal.NTAccount> 对象。  
  
   
  
## Examples  
 下面的代码示例演示使用继承和传播的访问规则。 该示例创建一个 <xref:System.Security.AccessControl.RegistrySecurity> 对象，然后创建并添加两个具有 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 标志的规则。 第一个规则没有传播标志，而第二个规则 <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> 和 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>。  
  
 程序在 <xref:System.Security.AccessControl.RegistrySecurity> 对象中显示规则，然后使用 <xref:System.Security.AccessControl.RegistrySecurity> 对象创建子项。 该程序创建一个子子项和一个孙级子项，然后显示每个子项的规则。 最后，程序删除测试密钥。  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。  
  
或 
 <paramref name="inheritanceFlags" /> 指定了一个无效值。  
  
或 
 <paramref name="propagationFlags" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="identity" /> 是一个长度为零的字符串。  
  
或 
 <paramref name="identity" /> 的长度超过 512 个字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取访问规则允许或拒绝的权限。</summary>
        <value><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示访问规则允许或拒绝的权限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> 对象是不可变的。 您可以创建表示不同用户、不同权限或不同 <xref:System.Security.AccessControl.AccessControlType>的新访问规则，但不能修改现有访问规则。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
