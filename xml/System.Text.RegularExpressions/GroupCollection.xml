<Type Name="GroupCollection" FullName="System.Text.RegularExpressions.GroupCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="85553489b71f4ebe112fffc72ec88c38b63c8751" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75053966" /></Metadata><TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit GroupCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.GroupCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type GroupCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="53ebd-101">返回一次匹配中捕获的组的集。</span><span class="sxs-lookup"><span data-stu-id="53ebd-101">Returns the set of captured groups in a single match.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53ebd-102"><xref:System.Text.RegularExpressions.GroupCollection> 类是一个从零开始的集合类，它包含一个或多个 <xref:System.Text.RegularExpressions.Group> 对象，这些对象提供有关正则表达式匹配中的捕获组的信息。</span><span class="sxs-lookup"><span data-stu-id="53ebd-102">The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match.</span></span> <span data-ttu-id="53ebd-103">该集合是不可变的（只读），没有公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="53ebd-103">The collection is immutable (read-only) and has no public constructor.</span></span> <span data-ttu-id="53ebd-104"><xref:System.Text.RegularExpressions.GroupCollection> 对象由 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 属性返回。</span><span class="sxs-lookup"><span data-stu-id="53ebd-104">A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="53ebd-105">集合包含一个或多个 <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> 对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-105">The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> objects.</span></span> <span data-ttu-id="53ebd-106">如果匹配成功，则集合中的第一个元素包含与整个匹配项对应的 <xref:System.Text.RegularExpressions.Group> 对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-106">If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match.</span></span> <span data-ttu-id="53ebd-107">如果正则表达式包含捕获组，则每个后续元素都表示捕获的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-107">Each subsequent element represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="53ebd-108">与已命名的捕获组匹配之前，从编号（未命名）捕获组中的匹配显示为数值顺序。</span><span class="sxs-lookup"><span data-stu-id="53ebd-108">Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.</span></span> <span data-ttu-id="53ebd-109">如果匹配不成功，则集合将包含一个 <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> 对象，该对象的 <xref:System.Text.RegularExpressions.Group.Success%2A> 属性为 `false`，其 <xref:System.Text.RegularExpressions.Capture.Value%2A> 属性等于 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="53ebd-109">If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="53ebd-110">有关详细信息，请参阅[分组构造](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)一文中的 "分组构造和正则表达式对象" 一节。</span><span class="sxs-lookup"><span data-stu-id="53ebd-110">For more information, see the "Grouping Constructs and Regular Expression Objects" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
 <span data-ttu-id="53ebd-111">若要循环访问集合的成员，应使用语言提供的集合迭代构造（如中C#的 `foreach` 和 `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="53ebd-111">To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="53ebd-112">在 Visual Basic 中），而不是检索 <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> 方法返回的枚举器。</span><span class="sxs-lookup"><span data-stu-id="53ebd-112">in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method.</span></span> <span data-ttu-id="53ebd-113">此外，你还可以从 "<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29>" 属性（中C#的索引器）访问单独的已编号捕获组，并且可以从 "<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29>" 属性访问单个命名捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-113">In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property.</span></span> <span data-ttu-id="53ebd-114">请注意，可以通过分别调用 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> 和 <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> 方法，检索包含所有捕获组的数字和名称的数组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-114">Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> methods, respectively.</span></span> <span data-ttu-id="53ebd-115">两者都是实例方法，并且需要实例化表示要匹配的正则表达式的 <xref:System.Text.RegularExpressions.Regex> 对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-115">Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53ebd-116">下面的示例将正则表达式与捕获组结合使用，以便提取有关文本中使用的商标和注册商标的信息。</span><span class="sxs-lookup"><span data-stu-id="53ebd-116">The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text.</span></span> <span data-ttu-id="53ebd-117">正则表达式模式是 `\b(\w+?)([\u00AE\u2122])`的，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="53ebd-117">The regular expression pattern is `\b(\w+?)([\u00AE\u2122])`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="53ebd-118">模式</span><span class="sxs-lookup"><span data-stu-id="53ebd-118">Pattern</span></span>|<span data-ttu-id="53ebd-119">说明</span><span class="sxs-lookup"><span data-stu-id="53ebd-119">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="53ebd-120">查找单词边界。</span><span class="sxs-lookup"><span data-stu-id="53ebd-120">Look for a word boundary.</span></span>|  
|`(\w+?)`|<span data-ttu-id="53ebd-121">查找一个或多个单词字符。</span><span class="sxs-lookup"><span data-stu-id="53ebd-121">Look for one or more word characters.</span></span> <span data-ttu-id="53ebd-122">它们共同构成了商标字名称。</span><span class="sxs-lookup"><span data-stu-id="53ebd-122">Together, these form the trademarked name.</span></span> <span data-ttu-id="53ebd-123">（请注意，此正则表达式假定商标包含一个词。）这是第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-123">(Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.</span></span>|  
|`([\u00AE\u2122])`|<span data-ttu-id="53ebd-124">查找®或™字符。</span><span class="sxs-lookup"><span data-stu-id="53ebd-124">Look for either the ® or the ™ character.</span></span> <span data-ttu-id="53ebd-125">这是第二个捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-125">This is the second capturing group.</span></span>|  
  
 <span data-ttu-id="53ebd-126">对于每个匹配项，<xref:System.Text.RegularExpressions.GroupCollection> 包含三个 <xref:System.Text.RegularExpressions.Group> 对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-126">For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects.</span></span> <span data-ttu-id="53ebd-127">第一个对象包含与整个正则表达式匹配的字符串。</span><span class="sxs-lookup"><span data-stu-id="53ebd-127">The first object contains the string that matches the entire regular expression.</span></span> <span data-ttu-id="53ebd-128">第二个对象（表示第一个捕获的组）包含产品名称。</span><span class="sxs-lookup"><span data-stu-id="53ebd-128">The second object, which represents the first captured group, contains the product name.</span></span> <span data-ttu-id="53ebd-129">第三个对象（表示第二个捕获组）包含商标或注册商标符号。</span><span class="sxs-lookup"><span data-stu-id="53ebd-129">The third object, which represents the second captured group, contains the trademark or registered trademark symbol.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.Group" />
  </Docs>
  <Members>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="groupCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="53ebd-130">一个字符串，其中包含要查找的捕获组的名称。</span><span class="sxs-lookup"><span data-stu-id="53ebd-130">A string with the name of the captured group to locate.</span></span></param>
        <summary><span data-ttu-id="53ebd-131">确定组集合是否包含由指定名称标识的捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-131">Determines whether the group collection contains a captured group identified by the specified name.</span></span></summary>
        <returns><span data-ttu-id="53ebd-132">如果组集合包含由 <see langword="true" /> 标识的捕获组，则为 <paramref name="key" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-132"><see langword="true" /> if the group collection contains a captured group identified by <paramref name="key" />; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="groupCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="53ebd-133">要将集合复制到其中的数组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-133">The array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="53ebd-134">目标数组中开始复制的位置。</span><span class="sxs-lookup"><span data-stu-id="53ebd-134">The position in the destination array where the copying is to begin.</span></span></param>
        <summary><span data-ttu-id="53ebd-135">将集合的所有元素复制到给定数组中（从给定索引处开始）。</span><span class="sxs-lookup"><span data-stu-id="53ebd-135">Copies all the elements of the collection to the given array beginning at the given index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53ebd-136">由于整个集合从给定索引处开始复制到数组中，因此目标数组的大小必须至少与集合大。</span><span class="sxs-lookup"><span data-stu-id="53ebd-136">Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="53ebd-137">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]中不存在此成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-137">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="53ebd-138">如果要开发面向 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]的应用程序，请改用 <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-138">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> method instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53ebd-139">下面的示例从句子提取每个单词并在捕获组中捕获它，然后使用 <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> 方法将每个匹配的 <xref:System.Text.RegularExpressions.GroupCollection> 对象中的元素复制到一个数组，该数组包含来自所有匹配项的捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-139">The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches.</span></span> <span data-ttu-id="53ebd-140">然后，会向控制台显示单个捕获的字词。</span><span class="sxs-lookup"><span data-stu-id="53ebd-140">The individual captured words are then displayed to the console.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb#1)]  
  
 <span data-ttu-id="53ebd-141">正则表达式的定义如下：</span><span class="sxs-lookup"><span data-stu-id="53ebd-141">The regular expression is defined as follows:</span></span>  
  
|<span data-ttu-id="53ebd-142">模式</span><span class="sxs-lookup"><span data-stu-id="53ebd-142">Pattern</span></span>|<span data-ttu-id="53ebd-143">说明</span><span class="sxs-lookup"><span data-stu-id="53ebd-143">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="53ebd-144">与字边界匹配。</span><span class="sxs-lookup"><span data-stu-id="53ebd-144">Match a word boundary.</span></span>|  
|`(\S+?)`|<span data-ttu-id="53ebd-145">匹配一个或多个非空白字符。</span><span class="sxs-lookup"><span data-stu-id="53ebd-145">Match one or more non-white space characters.</span></span> <span data-ttu-id="53ebd-146">将其分配给第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-146">Assign them to the first capturing group.</span></span>|  
|`\b`|<span data-ttu-id="53ebd-147">与字边界匹配。</span><span class="sxs-lookup"><span data-stu-id="53ebd-147">Match a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53ebd-148"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-148"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="53ebd-149"><paramref name="arrayIndex" /> 在 <paramref name="array" /> 的界限外。</span><span class="sxs-lookup"><span data-stu-id="53ebd-149"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.</span></span>

<span data-ttu-id="53ebd-150">- 或 -</span><span class="sxs-lookup"><span data-stu-id="53ebd-150">-or-</span></span>

<span data-ttu-id="53ebd-151"><paramref name="arrayIndex" /> 以及 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 在 <paramref name="array" /> 的界限外。</span><span class="sxs-lookup"><span data-stu-id="53ebd-151"><paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Text.RegularExpressions.Group[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Group(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Text::RegularExpressions::Group ^&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Text.RegularExpressions.Group[] * int -&gt; unit&#xA;override this.CopyTo : System.Text.RegularExpressions.Group[] * int -&gt; unit" Usage="groupCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Text.RegularExpressions.Group[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="53ebd-152">作为组集合中元素的复制目标位置的一维数组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-152">The one-dimensional array that is the destination of the elements copied from the group collection.</span></span> <span data-ttu-id="53ebd-153">该数组的索引必须从零开始。</span><span class="sxs-lookup"><span data-stu-id="53ebd-153">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="53ebd-154"><paramref name="array" /> 中要从其开始复制的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="53ebd-154">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="53ebd-155">从特定的数组索引开始，将组集合的元素复制到 <see cref="T:System.Text.RegularExpressions.Group" /> 数组中。</span><span class="sxs-lookup"><span data-stu-id="53ebd-155">Copies the elements of the group collection to a <see cref="T:System.Text.RegularExpressions.Group" /> array, starting at a particular array index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53ebd-156"><paramref name="array" /> 为 null。</span><span class="sxs-lookup"><span data-stu-id="53ebd-156"><paramref name="array" /> is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53ebd-157"><paramref name="arrayIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="53ebd-157"><paramref name="arrayIndex" /> is less than zero.</span></span>

<span data-ttu-id="53ebd-158">- 或 -</span><span class="sxs-lookup"><span data-stu-id="53ebd-158">-or-</span></span>

<span data-ttu-id="53ebd-159"><paramref name="arrayIndex" /> 大于 <paramref name="array" /> 的长度。</span><span class="sxs-lookup"><span data-stu-id="53ebd-159"><paramref name="arrayIndex" /> is greater than the length of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="53ebd-160"><paramref name="array" /> - <paramref name="arrayIndex" /> 的长度小于组集合计数。</span><span class="sxs-lookup"><span data-stu-id="53ebd-160">The length of <paramref name="array" /> - <paramref name="arrayIndex" /> is less than the group collection count.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-161">返回集合中的组数。</span><span class="sxs-lookup"><span data-stu-id="53ebd-161">Returns the number of groups in the collection.</span></span></summary>
        <value><span data-ttu-id="53ebd-162">集合中的组数。</span><span class="sxs-lookup"><span data-stu-id="53ebd-162">The number of groups in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53ebd-163"><xref:System.Text.RegularExpressions.GroupCollection> 对象始终至少具有一个成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-163">The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member.</span></span> <span data-ttu-id="53ebd-164">如果匹配不成功，则 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 属性返回包含单个成员的 <xref:System.Text.RegularExpressions.GroupCollection> 对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-164">If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="groupCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53ebd-165">提供一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="53ebd-165">Provides an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="53ebd-166">一个枚举器，其中包含 <see cref="T:System.Text.RegularExpressions.Group" /> 中的所有 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-166">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53ebd-167">不是调用 <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> 方法来检索枚举器，该枚举数可用于循环访问集合中的 <xref:System.Text.RegularExpressions.Group> 对象，而应使用组迭代构造（如和 `For Each`中C#的 `foreach` ...`Next`</span><span class="sxs-lookup"><span data-stu-id="53ebd-167">Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="53ebd-168">在 Visual Basic）中，由您的编程语言提供。</span><span class="sxs-lookup"><span data-stu-id="53ebd-168">in Visual Basic) that is provided by your programming language.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-169">获取一个值，指示集合是否为只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-169">Gets a value that indicates whether the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="53ebd-170">在所有情况下均为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-170"><see langword="true" /> in all cases.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-171">获取一个值，该值指示是否同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="53ebd-171">Gets a value that indicates whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="53ebd-172">在所有情况下均为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-172"><see langword="false" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="53ebd-173">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]中不存在此成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-173">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="53ebd-174">如果要开发面向 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]的应用程序，请改用 <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="53ebd-174">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53ebd-175">允许通过整数索引或字符串索引访问集合的单个成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-175">Enables access to a single member of the collection by integer or string index.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[int groupnum] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupnum As Integer) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[int] { System::Text::RegularExpressions::Group ^ get(int groupnum); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.GroupCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupnum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupnum"><span data-ttu-id="53ebd-176">要检索的集合成员的索引（从零开始）。</span><span class="sxs-lookup"><span data-stu-id="53ebd-176">The zero-based index of the collection member to be retrieved.</span></span></param>
        <summary><span data-ttu-id="53ebd-177">允许通过整数索引访问集合成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-177">Enables access to a member of the collection by integer index.</span></span></summary>
        <value><span data-ttu-id="53ebd-178">由 <paramref name="groupnum" /> 指定的集合的成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-178">The member of the collection specified by <paramref name="groupnum" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53ebd-179"><xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> 属性是 <xref:System.Text.RegularExpressions.GroupCollection> 类的索引（ C#在中）或默认属性（在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="53ebd-179">The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class.</span></span> <span data-ttu-id="53ebd-180">通过使用中C#的 `foreach` 语句或 Visual Basic 中的 `For Each` 语句，可枚举集合的成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-180">It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.</span></span>  
  
 <span data-ttu-id="53ebd-181">你还可以使用此属性按其索引号检索单个捕获的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-181">You can also use this property to retrieve individual captured groups by their index number.</span></span> <span data-ttu-id="53ebd-182">您可以通过调用实例 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> 方法，在正则表达式中检索包含所有捕获组的数量的数组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-182">You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="53ebd-183">还可以通过调用实例 <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> 方法，将命名捕获组映射到其数字。</span><span class="sxs-lookup"><span data-stu-id="53ebd-183">You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="53ebd-184">可以通过检索 <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> 属性的值来确定集合中的项数。</span><span class="sxs-lookup"><span data-stu-id="53ebd-184">You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property.</span></span> <span data-ttu-id="53ebd-185">`groupnum` 参数的有效值范围为0到集合中的项数减1之间的值。</span><span class="sxs-lookup"><span data-stu-id="53ebd-185">Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.</span></span>  
  
 <span data-ttu-id="53ebd-186"><xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Text.RegularExpressions.GroupCollection> 对象始终具有至少一个成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-186">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property always has at least one member.</span></span> <span data-ttu-id="53ebd-187">如果正则表达式引擎在特定输入字符串中找不到任何匹配项，则集合中的单个 <xref:System.Text.RegularExpressions.Group> 对象的 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 属性设置为 `false`，并将其 `Group.Value` 属性设置为 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="53ebd-187">If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="53ebd-188">如果 `groupnum` 不是集合成员的索引，或者 `groupnum` 是输入字符串中未匹配的捕获组的索引，则该方法将返回一个 <xref:System.Text.RegularExpressions.Group> 对象，其 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 属性为 `false`，其 `Group.Value` 属性为 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="53ebd-188">If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53ebd-189">下面的示例定义了一个由两个编号组组成的正则表达式。</span><span class="sxs-lookup"><span data-stu-id="53ebd-189">The following example defines a regular expression that consists of two numbered groups.</span></span> <span data-ttu-id="53ebd-190">第一组捕获一个或多个连续的数字。</span><span class="sxs-lookup"><span data-stu-id="53ebd-190">The first group captures one or more consecutive digits.</span></span> <span data-ttu-id="53ebd-191">第二个组匹配单个字符。</span><span class="sxs-lookup"><span data-stu-id="53ebd-191">The second group matches a single character.</span></span> <span data-ttu-id="53ebd-192">由于正则表达式引擎查找第一个组的零个或一个匹配项，因此即使正则表达式匹配成功，它也不会始终找到匹配项。</span><span class="sxs-lookup"><span data-stu-id="53ebd-192">Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful.</span></span> <span data-ttu-id="53ebd-193">然后，该示例说明了在使用 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> 属性检索不匹配的组、匹配组和正则表达式中未定义的组时的结果。</span><span class="sxs-lookup"><span data-stu-id="53ebd-193">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="53ebd-194">该示例定义了正则表达式模式 `(\d+)*(\w)\2`，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="53ebd-194">The example defines a regular expression pattern `(\d+)*(\w)\2`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="53ebd-195">模式</span><span class="sxs-lookup"><span data-stu-id="53ebd-195">Pattern</span></span>|<span data-ttu-id="53ebd-196">说明</span><span class="sxs-lookup"><span data-stu-id="53ebd-196">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)*`|<span data-ttu-id="53ebd-197">匹配一个或多个十进制数字的匹配项。</span><span class="sxs-lookup"><span data-stu-id="53ebd-197">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="53ebd-198">这是第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-198">This is the first capturing group.</span></span> <span data-ttu-id="53ebd-199">匹配此模式零次或一次。</span><span class="sxs-lookup"><span data-stu-id="53ebd-199">Match this pattern either zero or one time.</span></span>|  
|`(\w)`|<span data-ttu-id="53ebd-200">这是第二个捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-200">This is the second capturing group.</span></span>|  
|`\k`|<span data-ttu-id="53ebd-201">与第二个捕获组捕获的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="53ebd-201">Match the string captured by the second capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs#2)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="53ebd-202">分组构造</span><span class="sxs-lookup"><span data-stu-id="53ebd-202">Grouping Constructs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[string groupname] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupname As String) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[System::String ^] { System::Text::RegularExpressions::Group ^ get(System::String ^ groupname); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.GroupCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupname"><span data-ttu-id="53ebd-203">捕获组的名称。</span><span class="sxs-lookup"><span data-stu-id="53ebd-203">The name of a capturing group.</span></span></param>
        <summary><span data-ttu-id="53ebd-204">允许通过字符串索引访问集合成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-204">Enables access to a member of the collection by string index.</span></span></summary>
        <value><span data-ttu-id="53ebd-205">由 <paramref name="groupname" /> 指定的集合的成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-205">The member of the collection specified by <paramref name="groupname" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53ebd-206">`groupName` 可以是正则表达式中的 `(?<`*名称*`>)` 元素定义的捕获组的名称，也可以是由分组构造定义的捕获组数的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="53ebd-206">`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.</span></span> <span data-ttu-id="53ebd-207">有关正则表达式中的组的详细信息，请参阅[分组构造](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)。</span><span class="sxs-lookup"><span data-stu-id="53ebd-207">For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="53ebd-208">您可以通过调用 <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> 方法检索 <xref:System.Text.RegularExpressions.Regex> 对象中所有捕获组的名称。</span><span class="sxs-lookup"><span data-stu-id="53ebd-208">You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="53ebd-209">还可以通过调用 <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> 方法，将正则表达式中的捕获组数映射到其名称。</span><span class="sxs-lookup"><span data-stu-id="53ebd-209">You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="53ebd-210">然后，可以将数组中的各个名称传递到 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> 属性以检索捕获的字符串。</span><span class="sxs-lookup"><span data-stu-id="53ebd-210">Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.</span></span>  
  
 <span data-ttu-id="53ebd-211">如果 `groupname` 不是集合中的捕获组的名称，或者 `groupname` 是未在输入字符串中匹配的捕获组的名称，则该方法将返回一个 <xref:System.Text.RegularExpressions.Group> 对象，其 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 属性为 `false`，其 `Group.Value` 属性为 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="53ebd-211">If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53ebd-212">下面的示例定义包含两个命名组的正则表达式。</span><span class="sxs-lookup"><span data-stu-id="53ebd-212">The following example defines a regular expression that consists of two named groups.</span></span> <span data-ttu-id="53ebd-213">`numbers`第一个组捕获一个或多个连续数字。</span><span class="sxs-lookup"><span data-stu-id="53ebd-213">The first group, `numbers`, captures one or more consecutive digits.</span></span> <span data-ttu-id="53ebd-214">第二组 `letter`匹配单个字符。</span><span class="sxs-lookup"><span data-stu-id="53ebd-214">The second group, `letter`, matches a single character.</span></span> <span data-ttu-id="53ebd-215">由于正则表达式引擎查找 `numbers` 组定义的模式的零个或一个匹配项，因此即使匹配成功，也不会始终存在 `numbers` 组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-215">Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful.</span></span> <span data-ttu-id="53ebd-216">然后，该示例说明了在使用 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> 属性检索不匹配的组、匹配组和正则表达式中未定义的组时的结果。</span><span class="sxs-lookup"><span data-stu-id="53ebd-216">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="53ebd-217">该示例定义了正则表达式模式 `(?<numbers>\d+)*(?<letter>\w)\k<letter>`，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="53ebd-217">The example defines a regular expression pattern `(?<numbers>\d+)*(?<letter>\w)\k<letter>`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="53ebd-218">模式</span><span class="sxs-lookup"><span data-stu-id="53ebd-218">Pattern</span></span>|<span data-ttu-id="53ebd-219">说明</span><span class="sxs-lookup"><span data-stu-id="53ebd-219">Description</span></span>|  
|-------------|-----------------|  
|`(?<numbers>\d+)*`|<span data-ttu-id="53ebd-220">匹配一个或多个十进制数字的匹配项。</span><span class="sxs-lookup"><span data-stu-id="53ebd-220">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="53ebd-221">将此命名为 `numbers` 捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-221">Name this the `numbers` capturing group.</span></span> <span data-ttu-id="53ebd-222">匹配此模式零次或一次。</span><span class="sxs-lookup"><span data-stu-id="53ebd-222">Match this pattern either zero or one time.</span></span>|  
|`(?<letter>\w)`|<span data-ttu-id="53ebd-223">匹配单个单词字符。</span><span class="sxs-lookup"><span data-stu-id="53ebd-223">Match a single word character.</span></span> <span data-ttu-id="53ebd-224">将此命名为 `letter` 捕获组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-224">Name this the `letter` capturing group.</span></span>|  
|`\k<letter>`|<span data-ttu-id="53ebd-225">匹配 `letter` 捕获组捕获的字符串。</span><span class="sxs-lookup"><span data-stu-id="53ebd-225">Match the string captured by the `letter` capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="53ebd-226">分组构造</span><span class="sxs-lookup"><span data-stu-id="53ebd-226">Grouping Constructs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ Keys { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : seq&lt;string&gt;" Usage="System.Text.RegularExpressions.GroupCollection.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-227">获取一个字符串枚举，其中包含组集合的名称键。</span><span class="sxs-lookup"><span data-stu-id="53ebd-227">Gets a string enumeration that contains the name keys of the group collection.</span></span></summary>
        <value><span data-ttu-id="53ebd-228">组集合的名称键。</span><span class="sxs-lookup"><span data-stu-id="53ebd-228">The name keys of the group collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-229">获取可用于同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-229">Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></summary>
        <value><span data-ttu-id="53ebd-230">要同步的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的副本。</span><span class="sxs-lookup"><span data-stu-id="53ebd-230">A copy of the <see cref="T:System.Text.RegularExpressions.Match" /> object to synchronize.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="53ebd-231">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]中不存在此成员。</span><span class="sxs-lookup"><span data-stu-id="53ebd-231">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="53ebd-232">如果要开发面向 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]的应用程序，请改用 <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="53ebd-232">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Add (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Add(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As Group) Implements ICollection(Of Group).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="53ebd-233">要添加到集合中的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-233">The group to add to the collection.</span></span></param>
        <summary><span data-ttu-id="53ebd-234">将 <see cref="T:System.Text.RegularExpressions.Group" /> 添加到集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-234">Adds a <see cref="T:System.Text.RegularExpressions.Group" /> to the collection.</span></span> <span data-ttu-id="53ebd-235">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-235">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-236">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-236">This method is not supported.</span></span> <span data-ttu-id="53ebd-237">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-237">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of Group).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53ebd-238">清除集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-238">Clears the collection.</span></span> <span data-ttu-id="53ebd-239">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-239">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-240">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-240">This method is not supported.</span></span> <span data-ttu-id="53ebd-241">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-241">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Contains (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Contains(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Group) As Boolean Implements ICollection(Of Group).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="53ebd-242">要在组集合中查找的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-242">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="53ebd-243">确定组集合中是否包含特定的组项。</span><span class="sxs-lookup"><span data-stu-id="53ebd-243">Determines whether the group collection contains a specific group item.</span></span></summary>
        <returns><span data-ttu-id="53ebd-244">如果在组集合中找到该项组，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-244"><see langword="true" /> if the group item is found in the group collection; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-245">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-246">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-246">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Remove (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Remove(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As Group) As Boolean Implements ICollection(Of Group).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="53ebd-247">要删除的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-247">The group to remove.</span></span></param>
        <summary><span data-ttu-id="53ebd-248">从集合中移除 <see cref="T:System.Text.RegularExpressions.Group" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-248">Removes a <see cref="T:System.Text.RegularExpressions.Group" /> from the collection.</span></span> <span data-ttu-id="53ebd-249">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-249">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="53ebd-250">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-250">This method is not supported.</span></span> <span data-ttu-id="53ebd-251">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="53ebd-251">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-252">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-252">This method is not supported.</span></span> <span data-ttu-id="53ebd-253">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-253">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.RegularExpressions.Group&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,Group&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.RegularExpressions.Group&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#RegularExpressions#Group&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Group)) Implements IEnumerable(Of KeyValuePair(Of String, Group)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53ebd-254">提供一个循环访问组集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="53ebd-254">Provides an enumerator that iterates through the group collection.</span></span></summary>
        <returns><span data-ttu-id="53ebd-255">一个包含 <see cref="T:System.Text.RegularExpressions.Group" /> 集合中的所有名称和对象的枚举器。</span><span class="sxs-lookup"><span data-stu-id="53ebd-255">An enumerator that contains all names and objects in the <see cref="T:System.Text.RegularExpressions.Group" /> collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="53ebd-256">不是调用此方法来检索枚举器，该枚举数可用于循环访问集合中的 <xref:System.Text.RegularExpressions.Group> 对象，而应使用组迭代构造（如 `For Each`和C#中的 `foreach``Next`</span><span class="sxs-lookup"><span data-stu-id="53ebd-256">Instead of calling this method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="53ebd-257">在 Visual Basic）中，由您的编程语言提供。</span><span class="sxs-lookup"><span data-stu-id="53ebd-257">in Visual Basic) that is provided by your programming language.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt; IEnumerable&lt;Group&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Text.RegularExpressions.Group&gt; System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Text#RegularExpressions#Group&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Group) Implements IEnumerable(Of Group).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Text::RegularExpressions::Group ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53ebd-258">提供一个循环访问组集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="53ebd-258">Provides an enumerator that iterates through the group collection.</span></span></summary>
        <returns><span data-ttu-id="53ebd-259">一个包含组集合中的所有 <see cref="T:System.Text.RegularExpressions.Group" /> 对象的枚举器。</span><span class="sxs-lookup"><span data-stu-id="53ebd-259">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the group collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="53ebd-260">不是调用此方法来检索枚举器，该枚举数可用于循环访问集合中的 <xref:System.Text.RegularExpressions.Group> 对象，而应使用组迭代构造（如 `For Each`和C#中的 `foreach``Next`</span><span class="sxs-lookup"><span data-stu-id="53ebd-260">Instead of calling this method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="53ebd-261">在 Visual Basic）中，由您的编程语言提供。</span><span class="sxs-lookup"><span data-stu-id="53ebd-261">in Visual Basic) that is provided by your programming language.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;Group&gt;.IndexOf (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#IndexOf(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Group) As Integer Implements IList(Of Group).IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="53ebd-262">要在组集合中查找的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-262">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="53ebd-263">确定组集合中特定组的索引。</span><span class="sxs-lookup"><span data-stu-id="53ebd-263">Determines the index of a specific group in the group collection.</span></span></summary>
        <returns><span data-ttu-id="53ebd-264"><paramref name="item" /> 的索引（如果找到）；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="53ebd-264">The index of the <paramref name="item" /> if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-265">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-265">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-266">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.Generic.IList%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-266">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.Insert (int index, System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int32 index, class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Insert(System.Int32,System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Group) Implements IList(Of Group).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int index, System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="53ebd-267">要插入组的位置。</span><span class="sxs-lookup"><span data-stu-id="53ebd-267">The position at which to insert the group.</span></span></param>
        <param name="item"><span data-ttu-id="53ebd-268">要插入的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-268">The group to insert.</span></span></param>
        <summary><span data-ttu-id="53ebd-269">向集合中插入 <see cref="T:System.Text.RegularExpressions.Group" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-269">Inserts a <see cref="T:System.Text.RegularExpressions.Group" /> into the collection.</span></span> <span data-ttu-id="53ebd-270">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-270">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-271">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-271">This method is not supported.</span></span> <span data-ttu-id="53ebd-272">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-272">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item">
      <MemberSignature Language="C#" Value="System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Group Implements IList(Of Group).Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Text::RegularExpressions::Group ^ System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group&gt;::Item[int] { System::Text::RegularExpressions::Group ^ get(int index); void set(int index, System::Text::RegularExpressions::Group ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="53ebd-273">组集合中组的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="53ebd-273">The zero-based index of the group in the group collection.</span></span></param>
        <summary><span data-ttu-id="53ebd-274">获取集合中指定位置的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-274">Gets the group at the specified position in the collection.</span></span></summary>
        <value><span data-ttu-id="53ebd-275">所需位置中的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-275">The group in the desired position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-276">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-277">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.Generic.IList%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-277">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-278">无法设置项。</span><span class="sxs-lookup"><span data-stu-id="53ebd-278">Cannot set an item.</span></span> <span data-ttu-id="53ebd-279">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-279">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of Group).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="53ebd-280">要删除的组的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="53ebd-280">The zero-based index of the group to remove.</span></span></param>
        <summary><span data-ttu-id="53ebd-281">从指定索引处的集合删除 <see cref="T:System.Text.RegularExpressions.Group" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-281">Removes the <see cref="T:System.Text.RegularExpressions.Group" /> from the collection at the specified index.</span></span> <span data-ttu-id="53ebd-282">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-282">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-283">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-283">This method is not supported.</span></span> <span data-ttu-id="53ebd-284">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-284">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="53ebd-285">集合要被复制到的一维数组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-285">The one-dimensional array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="53ebd-286">目标数组中将开始复制的位置的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="53ebd-286">The zero-based index in the destination array where copying is to begin.</span></span></param>
        <summary><span data-ttu-id="53ebd-287">将集合的所有元素复制到指定的数组中（从指定索引处开始）。</span><span class="sxs-lookup"><span data-stu-id="53ebd-287">Copies all the elements of the collection to the specified array beginning at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-288">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-288">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-289">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.ICollection> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-289">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53ebd-290"><paramref name="array" /> 为 null。</span><span class="sxs-lookup"><span data-stu-id="53ebd-290"><paramref name="array" /> is null.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="53ebd-291"><paramref name="arrayIndex" /> 在 <paramref name="array" /> 的边界外。- 或 - <paramref name="arrayIndex" /> 加 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 在 <paramref name="array" /> 的边界外。</span><span class="sxs-lookup"><span data-stu-id="53ebd-291"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.-or-<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-292">获取一个值，该值指示对集合的访问是否同步（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="53ebd-292">Gets a value that indicates whether access to the collection is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="53ebd-293">在所有情况下均为 false。</span><span class="sxs-lookup"><span data-stu-id="53ebd-293">false in all cases.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-294">获取可用于同步对集合的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-294">Gets an object that can be used to synchronize access to the collection.</span></span></summary>
        <value><span data-ttu-id="53ebd-295">可用于同步集合访问的对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-295">An object that can be used to synchronize access to the collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="53ebd-296">要添加到组集合中的对象。</span><span class="sxs-lookup"><span data-stu-id="53ebd-296">The object to add to the group collection.</span></span></param>
        <summary><span data-ttu-id="53ebd-297">将对象添加到组集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-297">Adds an object to the group collection.</span></span> <span data-ttu-id="53ebd-298">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-298">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-299">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-299">This method is not supported.</span></span> <span data-ttu-id="53ebd-300">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-300">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53ebd-301">清除集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-301">Clears the collection.</span></span> <span data-ttu-id="53ebd-302">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-302">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-303">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-303">This method is not supported.</span></span> <span data-ttu-id="53ebd-304">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-304">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="53ebd-305">要在组集合中查找的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-305">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="53ebd-306">确定组集合中是否包含特定的组项。</span><span class="sxs-lookup"><span data-stu-id="53ebd-306">Determines whether the group collection contains a specific group item.</span></span></summary>
        <returns><span data-ttu-id="53ebd-307">如果在组集合中找到该项组，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-307"><see langword="true" /> if the group item is found in the group collection; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-308">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-308">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-309">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-309">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="53ebd-310">要在组集合中查找的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-310">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="53ebd-311">确定组集合中特定组的索引。</span><span class="sxs-lookup"><span data-stu-id="53ebd-311">Determines the index of a specific group in the group collection.</span></span></summary>
        <returns><span data-ttu-id="53ebd-312"><paramref name="item" /> 的索引（如果找到）；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="53ebd-312">The index of the <paramref name="item" /> if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-313">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-313">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-314">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-314">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="53ebd-315">要插入组的位置。</span><span class="sxs-lookup"><span data-stu-id="53ebd-315">The position at which to insert the group.</span></span></param>
        <param name="value"><span data-ttu-id="53ebd-316">要插入的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-316">The group to insert.</span></span></param>
        <summary><span data-ttu-id="53ebd-317">向集合中插入 <see cref="T:System.Text.RegularExpressions.Group" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-317">Inserts a <see cref="T:System.Text.RegularExpressions.Group" /> into the collection.</span></span> <span data-ttu-id="53ebd-318">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-318">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-319">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-319">This method is not supported.</span></span> <span data-ttu-id="53ebd-320">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-320">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-321">获取一个值，该值指示组集合是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="53ebd-321">Gets a value indicating whether the group collection has a fixed size.</span></span></summary>
        <value><span data-ttu-id="53ebd-322">始终为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-322"><see langword="true" /> always.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-323">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-324">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-324">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="53ebd-325">组集合中组的零索引位置。</span><span class="sxs-lookup"><span data-stu-id="53ebd-325">The zero-index position of the group in the group collection.</span></span></param>
        <summary><span data-ttu-id="53ebd-326">获取所需位置中的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-326">Gets the group in the desired position.</span></span></summary>
        <value><span data-ttu-id="53ebd-327">所需位置中的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-327">The group in the desired position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-328">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-328">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-329">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-329">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-330">无法设置项。</span><span class="sxs-lookup"><span data-stu-id="53ebd-330">Cannot set an item.</span></span> <span data-ttu-id="53ebd-331">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-331">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="53ebd-332">要删除的组。</span><span class="sxs-lookup"><span data-stu-id="53ebd-332">The group to remove.</span></span></param>
        <summary><span data-ttu-id="53ebd-333">从集合中移除 <see cref="T:System.Text.RegularExpressions.Group" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-333">Removes a <see cref="T:System.Text.RegularExpressions.Group" /> from the collection.</span></span> <span data-ttu-id="53ebd-334">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-334">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-335">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-335">This method is not supported.</span></span> <span data-ttu-id="53ebd-336">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-336">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="53ebd-337">要删除的组的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="53ebd-337">The zero-based index of the group to remove.</span></span></param>
        <summary><span data-ttu-id="53ebd-338">从指定索引处的集合删除 <see cref="T:System.Text.RegularExpressions.Group" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-338">Removes the <see cref="T:System.Text.RegularExpressions.Group" /> from the collection at the specified index.</span></span> <span data-ttu-id="53ebd-339">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-339">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53ebd-340">不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="53ebd-340">This method is not supported.</span></span> <span data-ttu-id="53ebd-341">这是一个只读集合。</span><span class="sxs-lookup"><span data-stu-id="53ebd-341">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (string key, out System.Text.RegularExpressions.Group value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(string key, [out] class System.Text.RegularExpressions.Group&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As String, ByRef value As Group) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(System::String ^ key, [Runtime::InteropServices::Out] System::Text::RegularExpressions::Group ^ % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : string * Group -&gt; bool&#xA;override this.TryGetValue : string * Group -&gt; bool" Usage="groupCollection.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="value" Type="System.Text.RegularExpressions.Group" RefType="out" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="53ebd-342">一个字符串，其中包含要查找的组名称键。</span><span class="sxs-lookup"><span data-stu-id="53ebd-342">A string with the group name key to look for.</span></span></param>
        <param name="value"><span data-ttu-id="53ebd-343">当方法返回时，如果找到名称为 <paramref name="key" /> 的组，则返回该组；否则，如果未找到，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-343">When the method returns, the group whose name is <paramref name="key" />, if it is found; otherwise, <see langword="null" /> if not found.</span></span></param>
        <summary><span data-ttu-id="53ebd-344">尝试检索由提供的名称键标识的组（如果它存在于组集合中）。</span><span class="sxs-lookup"><span data-stu-id="53ebd-344">Attempts to retrieve a group identified by the provided name key, if it exists in the group collection.</span></span></summary>
        <returns><span data-ttu-id="53ebd-345">如果由提供的名称键标识的组存在，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="53ebd-345"><see langword="true" /> if a group identified by the provided name key exists; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Text.RegularExpressions.Group&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IEnumerable(Of Group)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt; ^ Values { System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : seq&lt;System.Text.RegularExpressions.Group&gt;" Usage="System.Text.RegularExpressions.GroupCollection.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53ebd-346">获取包含组集合中的所有组的组枚举。</span><span class="sxs-lookup"><span data-stu-id="53ebd-346">Gets a group enumeration with all the groups in the group collection.</span></span></summary>
        <value><span data-ttu-id="53ebd-347">组枚举。</span><span class="sxs-lookup"><span data-stu-id="53ebd-347">A group enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="53ebd-348">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="53ebd-348">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="53ebd-349">它只能在 <xref:System.Text.RegularExpressions.GroupCollection> 实例被强制转换为 <xref:System.Collections.Generic.IEnumerable%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="53ebd-349">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
