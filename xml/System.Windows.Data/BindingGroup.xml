<Type Name="BindingGroup" FullName="System.Windows.Data.BindingGroup">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26d67ada62687df5ed3ea106b8fcd618cc36fc45" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82489229" /></Metadata><TypeSignature Language="C#" Value="public class BindingGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BindingGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingGroup : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type BindingGroup = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含绑定集合和用于验证对象的 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingGroup> 在多个绑定之间创建关系，可以同时验证和更新这些绑定。 例如，假设应用程序提示用户输入地址。 然后，应用程序使用用户提供的值填充 `Address`类型的对象，该对象具有属性、`Street`、`City`、`ZipCode`和 `Country`。 应用程序具有一个包含四个 <xref:System.Windows.Controls.TextBox> 控件的面板，其中每个控件都绑定到对象的一个属性。 可以在 <xref:System.Windows.Data.BindingGroup> 中使用 <xref:System.Windows.Controls.ValidationRule> 来验证 `Address` 对象。 如果绑定参与相同的 <xref:System.Windows.Data.BindingGroup>，则可以确保邮政编码对地址的国家/地区有效。  
  
 设置 <xref:System.Windows.FrameworkElement> 或 <xref:System.Windows.FrameworkContentElement>上的 <xref:System.Windows.FrameworkElement.BindingGroup%2A> 属性。 子元素从其父元素继承 <xref:System.Windows.Data.BindingGroup>，就像任何其他可继承的属性一样。 如果发生以下情况之一，则会将子代元素上的绑定添加到 <xref:System.Windows.Data.BindingGroup>：  
  
-   绑定的源和具有 <xref:System.Windows.Data.BindingGroup> 的元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 是同一对象，但未设置 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 属性。  
  
-   绑定的 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 属性等于 <xref:System.Windows.FrameworkContentElement.BindingGroup%2A> 的 <xref:System.Windows.Data.BindingGroup.Name%2A>，未显式设置为 `null`。  
  
 在地址示例中，假定 <xref:System.Windows.Controls.Panel> 的 <xref:System.Windows.FrameworkElement.DataContext%2A> 设置为 `Address`类型的对象。 将每个 <xref:System.Windows.Controls.TextBox> 的绑定添加到面板的 <xref:System.Windows.Data.BindingGroup> 中。  
  
 将 <xref:System.Windows.Controls.ValidationRule> 对象添加到 <xref:System.Windows.Data.BindingGroup>中。 当 <xref:System.Windows.Controls.ValidationRule> 运行时，将 <xref:System.Windows.Data.BindingGroup> 作为 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法的第一个参数传递。 您可以使用该 <xref:System.Windows.Data.BindingGroup> 上的 <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> 或 <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> 方法来获取该对象的建议值，并使用 <xref:System.Windows.Data.BindingGroup.Items%2A> 属性获取绑定的源。  
  
 <xref:System.Windows.Data.BindingGroup> 同时更新绑定的源，而不是单独更新每个绑定。 当调用其中一种方法来验证数据（<xref:System.Windows.Data.BindingGroup.ValidateWithoutUpdate%2A>、<xref:System.Windows.Data.BindingGroup.UpdateSources%2A>或 <xref:System.Windows.Data.BindingGroup.CommitEdit%2A>）时，将对该示例中的每个 <xref:System.Windows.Controls.TextBox> 的绑定进行验证并可能更新。 当绑定是 <xref:System.Windows.Data.BindingGroup>的一部分时，除非显式设置 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 属性，否则将不会更新绑定的源，直到在 <xref:System.Windows.Data.BindingGroup>上调用 <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> 或 <xref:System.Windows.Data.BindingGroup.CommitEdit%2A>。  
  
   
  
## Examples  
 下面的示例创建一个应用程序，该应用程序提示用户输入商品的描述和价格以及产品/服务的到期日期。 应用程序将在窗体下显示项的当前信息。 用户可以提交或取消更改。  
  
 应用程序执行以下操作来实现此行为。  
  
-   创建 <xref:System.Windows.Data.BindingGroup>，并在创建应用程序 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 时将其添加到根 <xref:System.Windows.Controls.StackPanel>。  
  
-   在应用程序的逻辑中调用 <xref:System.Windows.Data.BindingGroup.BeginEdit%2A>、<xref:System.Windows.Data.BindingGroup.CommitEdit%2A>和 <xref:System.Windows.Data.BindingGroup.CancelEdit%2A>，以便回滚更改。  
  
-   调用 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法中的 <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> 以获取用户的输入，然后检查100美元的项是否至少有七天可用。  
  
 下面的示例创建了应用程序的 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。 根 <xref:System.Windows.Controls.StackPanel> 具有一个包含验证项的 <xref:System.Windows.Controls.ValidationRule> 的 <xref:System.Windows.Data.BindingGroup>，如前文所述。 `Price` 属性和 `OfferExpires` 属性上的绑定对象将成为 <xref:System.Windows.Data.BindingGroup> 的一部分，并且每个绑定都有一个 <xref:System.Windows.Controls.ValidationRule> 以确保价格和日期分别为有效值。 单个属性的验证规则在 <xref:System.Windows.Data.BindingGroup>上的 <xref:System.Windows.Controls.ValidationRule> 之前运行。  
  
 [!code-xaml[BindingGroupSnippets#WindowLayout](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#windowlayout)]  
  
 下面的示例演示应用程序的事件处理程序。 当用户单击 "提交" 按钮时，应用程序会调用 <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> 来运行与 <xref:System.Windows.Data.BindingGroup>关联的每个 <xref:System.Windows.Controls.ValidationRule>。 如果每个 <xref:System.Windows.Controls.ValidationRule> 成功，则 <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> 会将值保存到对象并结束编辑事务。 如果 <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> 成功，则应用程序将开始另一个编辑事务。 当 <xref:System.Windows.Controls.ValidationRule> 失败时，将发生 <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> 事件，原因是应用程序 <xref:System.Windows.Data.BindingGroup.NotifyOnValidationError%2A> 设置为 <xref:System.Windows.Data.BindingGroup> 上的 `true` （在上一示例中）。 `ItemError` 处理 <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> 事件，并向用户显示有关验证错误的信息。 该示例还处理 <xref:System.Windows.Controls.StackPanel> 的 <xref:System.Windows.FrameworkElement.Loaded> 事件，以及 "**取消**" 按钮的 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 事件。  
  
 [!code-csharp[BindingGroupSnippets#WindowLogic](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#windowlogic)]
 [!code-vb[BindingGroupSnippets#WindowLogic](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#windowlogic)]  
  
 下面的示例演示自定义 <xref:System.Windows.Controls.ValidationRule> `ValidateDateAndPrice`，它已添加到第一个示例中的 <xref:System.Windows.Data.BindingGroup>。 <xref:System.Windows.Controls.ValidationRule> 使用其 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法中的 <xref:System.Windows.Data.BindingGroup> 来获取用户在表单中输入的值，并检查项目是否超过100美元，是否可用于至少7天。  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BindingGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Data.BindingGroup" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public void BeginEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.BeginEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginEdit();" />
      <MemberSignature Language="F#" Value="member this.BeginEdit : unit -&gt; unit" Usage="bindingGroup.BeginEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>开始 <see cref="T:System.Windows.Data.BindingGroup" /> 中源上的编辑事务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Data.BindingGroup> 中的源支持放弃挂起的更改，则可以调用 <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> 以开始编辑事务，调用 <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> 保存挂起的更改，调用 <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> 以放弃挂起的更改。  
  
 对于实现 <xref:System.ComponentModel.IEditableObject>的 <xref:System.Windows.Data.BindingGroup.Items%2A> 中的每个对象，<xref:System.Windows.Data.BindingGroup.BeginEdit%2A> 调用 <xref:System.ComponentModel.IEditableObject.BeginEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 下面的示例在窗口加载以开始编辑事务时调用 <xref:System.Windows.Data.BindingGroup.BeginEdit%2A>。  
  
 [!code-csharp[BindingGroupSnippets#BeginEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#beginedit)]
 [!code-vb[BindingGroupSnippets#BeginEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#beginedit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingExpressions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Data.BindingExpressionBase&gt; BindingExpressions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Data.BindingExpressionBase&gt; BindingExpressions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.BindingExpressions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingExpressions As Collection(Of BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ BindingExpressions { System::Collections::ObjectModel::Collection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingExpressions : System.Collections.ObjectModel.Collection&lt;System.Windows.Data.BindingExpressionBase&gt;" Usage="System.Windows.Data.BindingGroup.BindingExpressions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Data.BindingExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Data.BindingExpression" /> 对象的集合，其中包含有关 <see cref="T:System.Windows.Data.BindingGroup" /> 中每个绑定的信息。</summary>
        <value>一个 <see cref="T:System.Windows.Data.BindingExpression" /> 对象的集合，其中包含有关 <see cref="T:System.Windows.Data.BindingGroup" /> 中每个绑定的信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果发生以下情况之一，则 <xref:System.Windows.Data.BindingExpression> 属于 <xref:System.Windows.Data.BindingGroup>：  
  
-   绑定的源和具有 <xref:System.Windows.Data.BindingGroup> 的元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 是同一对象，但未设置 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A>。  
  
-   绑定的 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 属性和 <xref:System.Windows.Data.BindingGroup> 的 <xref:System.Windows.Data.BindingGroup.Name%2A> 设置为相同的非 null 值，并且 <xref:System.Windows.Data.BindingGroup> 属于绑定的目标元素的父元素。  
  
-   向 <xref:System.Windows.Data.BindingGroup.BindingExpressions%2A>添加 <xref:System.Windows.Data.BindingExpression>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelEdit();" />
      <MemberSignature Language="F#" Value="member this.CancelEdit : unit -&gt; unit" Usage="bindingGroup.CancelEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>结束编辑事务并放弃挂起的更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果源对象能够执行此操作并结束编辑事务，则此方法会导致源放弃挂起的更改。 然后，方法用保存的源值更新目标属性。  
  
 对于实现 <xref:System.ComponentModel.IEditableObject>的 <xref:System.Windows.Data.BindingGroup.Items%2A> 中的每个对象，<xref:System.Windows.Data.BindingGroup.CancelEdit%2A> 调用 <xref:System.ComponentModel.IEditableObject.CancelEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 下面的示例调用 <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> 放弃挂起的更改，然后调用 <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> 准备重新编辑的源。  
  
 [!code-csharp[BindingGroupSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[BindingGroupSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRestoreValues">
      <MemberSignature Language="C#" Value="public bool CanRestoreValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRestoreValues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.CanRestoreValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRestoreValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRestoreValues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRestoreValues : bool" Usage="System.Windows.Data.BindingGroup.CanRestoreValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取绑定中的每个源是否都可以放弃挂起的更改并还原原始值。</summary>
        <value>如果绑定中的每个源都可以放弃挂起的更改并还原原始值，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果源实现 <xref:System.ComponentModel.IEditableObject>，则可能放弃挂起的更改。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public bool CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CommitEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.CommitEdit" />
      <MemberSignature Language="VB.NET" Value="Public Function CommitEdit () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CommitEdit();" />
      <MemberSignature Language="F#" Value="member this.CommitEdit : unit -&gt; bool" Usage="bindingGroup.CommitEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>运行所有 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象，并且在所有验证规则都成功时，更新绑定源。</summary>
        <returns>如果每个 <see langword="true" /> 都成功且将值提交到了源，则为 <see cref="T:System.Windows.Controls.ValidationRule" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果每个 <xref:System.Windows.Controls.ValidationRule> 成功，则此方法会导致源提交挂起的更改并结束编辑事务（如果源对象可以这样做）。  
  
 对于实现 <xref:System.ComponentModel.IEditableObject>的 <xref:System.Windows.Data.BindingGroup.Items%2A> 中的每个对象，<xref:System.Windows.Data.BindingGroup.CommitEdit%2A> 调用 <xref:System.ComponentModel.IEditableObject.EndEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 下面的示例调用 <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> 来保存挂起的更改，然后调用 <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> 来准备重新编辑的源。  
  
 [!code-csharp[BindingGroupSnippets#BeginEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#beginedit)]
 [!code-vb[BindingGroupSnippets#BeginEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#beginedit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object item, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(object item, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.GetValue(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (item As Object, propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ item, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="override this.GetValue : obj * string -&gt; obj" Usage="bindingGroup.GetValue (item, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="item">包含指定属性的对象。</param>
        <param name="propertyName">要获取其建议值的属性。</param>
        <summary>返回指定的属性和项的建议值。</summary>
        <returns>建议的属性值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Controls.ValidationRule.Validate%2A?displayProperty=nameWithType> 方法中的此方法获取要提交到源的值。 返回值的类型取决于出现 <xref:System.Windows.Controls.ValidationRule> 的阶段。 例如，如果 <xref:System.Windows.Controls.TextBox> 是绑定到类型为 integer 的属性的数据，并且调用 <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> 的 <xref:System.Windows.Controls.ValidationRule> 的 <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> 设置为 <xref:System.Windows.Controls.ValidationStep.RawProposedValue>，则该方法将返回一个字符串。 如果 <xref:System.Windows.Controls.ValidationRule> 的 <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> 设置为 <xref:System.Windows.Controls.ValidationStep.ConvertedProposedValue>，则该方法将返回绑定的转换器返回的任何类型。 在此示例中，<xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> 通常返回整数。  
  
   
  
## Examples  
 下面的示例是一个应用程序的一部分，该应用程序提示用户输入多个客户，并为每个客户分配一个销售代表。 应用程序将检查销售代表和客户是否属于同一区域。 该示例演示 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法，该方法使用 <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> 方法获取客户输入的值。  
  
 [!code-csharp[BindingGroupSnippets#ItemBindGroupValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml.cs#itembindgroupvalidationrule)]
 [!code-vb[BindingGroupSnippets#ItemBindGroupValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window2.xaml.vb#itembindgroupvalidationrule)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定项和属性之间没有绑定。</exception>
        <exception cref="T:System.Windows.Data.ValueUnavailableException">由于转换错误或早期验证规则失败，指定的属性值不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasValidationError">
      <MemberSignature Language="C#" Value="public bool HasValidationError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.HasValidationError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValidationError { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValidationError : bool" Usage="System.Windows.Data.BindingGroup.HasValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Windows.Data.BindingGroup" /> 是否具有一个失败的验证规则。</summary>
        <value>如果 <see langword="true" /> 具有一个失败的验证规则，则为 <see cref="T:System.Windows.Data.BindingGroup" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Windows.Data.BindingGroup.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示 <see cref="T:System.Windows.Data.BindingGroup" /> 是否包含尚未写入到源中的建议值的值。</summary>
        <value>如果 <see langword="true" /> 包含尚未写入到源的建议值，则为 <see cref="T:System.Windows.Data.BindingGroup" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Collections.IList Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Items { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Collections.IList" Usage="System.Windows.Data.BindingGroup.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Data.BindingGroup" /> 中的绑定对象所使用的源。</summary>
        <value><see cref="T:System.Windows.Data.BindingGroup" /> 中的绑定对象所使用的源。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用作源的每个对象都会添加到 <xref:System.Windows.Data.BindingGroup.Items%2A> 属性一次，即使该对象用作多个绑定的源也是如此。 通常，<xref:System.Windows.Data.BindingGroup.Items%2A>中只有一个项，这是使用 <xref:System.Windows.Data.BindingGroup>的元素 <xref:System.Windows.FrameworkElement.DataContext%2A> 的对象。 但 <xref:System.Windows.Data.BindingGroup> 可以有多个源。 例如，如果绑定对象共享相同的 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 但使用不同的源对象，则用作源的每个对象都在 <xref:System.Windows.Data.BindingGroup.Items%2A>中。  
  
 如果绑定的路径解析为源的嵌套属性，则 <xref:System.Windows.Data.BindingGroup.Items%2A> 中也可以有多个对象。 例如，假设 <xref:System.Windows.Controls.TextBox> 控件的绑定是 <xref:System.Windows.Data.BindingGroup> 的一部分，并且其 <xref:System.Windows.FrameworkElement.DataContext%2A> 是 `Customer` 对象，该对象的属性类型为 `Address`。 如果 <xref:System.Windows.Data.Binding> 的 <xref:System.Windows.Data.Binding.Path%2A> 是 `Address.ZipCode` 属性，则 `Address` 将添加到 <xref:System.Windows.Data.BindingGroup.Items%2A> 属性。  
  
   
  
## Examples  
 以下示例是应用程序的一部分，用于检查用户是否已将两个对象的属性设置为相等值。 第一个示例创建两个 <xref:System.Windows.Controls.TextBox> 控件，其中每个控件都是绑定到不同源的数据。 第一个 <xref:System.Windows.Controls.TextBox> 的绑定从 <xref:System.Windows.Controls.TextBox> 控件的父元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 获取其源 `object1`（<xref:System.Windows.Controls.StackPanel>）。 在第二个 <xref:System.Windows.Controls.TextBox>上，绑定的源设置为 `object2`。 该示例还创建了一个显示验证错误的 <xref:System.Windows.Controls.Label>。  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 下面的示例演示上一示例使用的 <xref:System.Windows.Controls.ValidationRule>。 在 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法中，该示例从 <xref:System.Windows.Data.BindingGroup> 中获取每个源对象，并检查对象的属性是否相等。  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Data.BindingGroup.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置标识 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称，该名称可用于在 <see cref="T:System.Windows.Data.BindingGroup" /> 中包括和排除绑定对象。</summary>
        <value>标识 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `null`<xref:System.Windows.Data.BindingGroup.Name%2A>，则其源与具有 <xref:System.Windows.Data.BindingGroup> 的元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 具有相同对象的绑定会加入到 <xref:System.Windows.Data.BindingGroup>中。  
  
 可以通过将 <xref:System.Windows.Data.BindingGroup> 的 <xref:System.Windows.Data.BindingGroup.Name%2A> 和绑定的 "<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>" 属性设置为相同的值，将具有不同于父元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 的绑定包括 <xref:System.Windows.Data.BindingGroup>。 您可以通过将 <xref:System.Windows.Data.BindingGroup> 的 <xref:System.Windows.Data.BindingGroup.Name%2A> 和绑定的 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 属性设置为不同的值，排除与具有 <xref:System.Windows.Data.BindingGroup> 的父元素 <xref:System.Windows.FrameworkElement.DataContext%2A> 具有相同源的绑定。  
  
   
  
## Examples  
 以下示例是应用程序的一部分，用于检查用户是否已将两个对象的属性设置为相等值。 第一个示例创建两个 <xref:System.Windows.Controls.TextBox> 控件，其中每个控件都是绑定到不同源的数据。 第一个 <xref:System.Windows.Controls.TextBox> 的绑定是 <xref:System.Windows.Data.BindingGroup> 的一部分，因为 <xref:System.Windows.Controls.TextBox> 继承其父 <xref:System.Windows.Data.BindingGroup> 的 <xref:System.Windows.FrameworkElement.DataContext%2A> 和 <xref:System.Windows.Controls.StackPanel>。  
  
 第二个 <xref:System.Windows.Controls.TextBox> 上的绑定是 <xref:System.Windows.Data.BindingGroup> 的一部分，因为 <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> 的 <xref:System.Windows.Data.BindingGroup> 和 <xref:System.Windows.Data.Binding> 的 <xref:System.Windows.Data.BindingGroup.Name%2A> 都设置为 `bindingGroup`。  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 下面的示例演示上一示例使用的 <xref:System.Windows.Controls.ValidationRule>。 在 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法中，该示例从 <xref:System.Windows.Data.BindingGroup> 中获取每个源对象，并检查对象的属性是否相等。  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.NotifyOnValidationError" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnValidationError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnValidationError : bool with get, set" Usage="System.Windows.Data.BindingGroup.NotifyOnValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="E:System.Windows.Controls.Validation.Error" /> 的状态更改时是否发生 <see cref="T:System.Windows.Controls.ValidationRule" /> 事件。</summary>
        <value>如果在 <see langword="true" /> 的状态更改时发生 <see cref="E:System.Windows.Controls.Validation.Error" /> 事件，则为 <see cref="T:System.Windows.Controls.ValidationRule" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> 附加事件发生在具有 <xref:System.Windows.Data.BindingGroup>的元素上。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Windows.Data.BindingGroup>，并将 <xref:System.Windows.Data.BindingGroup.NotifyOnValidationError%2A> 设置为 `true`，以便在 <xref:System.Windows.Controls.ValidationRule> 失败时应用程序可以处理 <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> 事件。  
  
 [!code-xaml[BindingGroupSnippets#BindingGroup](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#bindinggroup)]  
  
 下面的示例处理 <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> 事件。  
  
 [!code-csharp[BindingGroupSnippets#ErrorHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#errorhandler)]
 [!code-vb[BindingGroupSnippets#ErrorHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#errorhandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Owner { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Windows.DependencyObject" Usage="System.Windows.Data.BindingGroup.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Data.BindingGroup" /> 分配到的对象。</summary>
        <value><see cref="T:System.Windows.Data.BindingGroup" /> 分配给的对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharesProposedValues">
      <MemberSignature Language="C#" Value="public bool SharesProposedValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SharesProposedValues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.SharesProposedValues" />
      <MemberSignature Language="VB.NET" Value="Public Property SharesProposedValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SharesProposedValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SharesProposedValues : bool with get, set" Usage="System.Windows.Data.BindingGroup.SharesProposedValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Data.BindingGroup" /> 是否重新使用尚未提交到源的目标值。</summary>
        <value>如果 <see langword="true" /> 重新使用尚未提交到源的目标值，则为 <see cref="T:System.Windows.Data.BindingGroup" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建议的值是在绑定的目标上已更改但尚未提交到源的值。 例如，假设 <xref:System.Windows.Controls.TextBox> 上有一个双向绑定，而 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 属性设置为 "<xref:System.Windows.Data.UpdateSourceTrigger.Explicit>"。 如果用户更改了 <xref:System.Windows.Controls.TextBox>的值，则建议的值是在将其提交到源之前 <xref:System.Windows.Controls.TextBox> 中的值。  
  
 当 `true`<xref:System.Windows.Data.BindingGroup.SharesProposedValues%2A> 时，<xref:System.Windows.Data.BindingGroup> 使用建议的值，System.windows.data.bindinggroup> 一个绑定离开了，而另一个具有相同源的绑定联接了 System.windows.data.bindinggroup>。  例如，假设应用程序允许用户编辑多个字段，并通过单击按钮来更新源对象。 未编辑字段时，应用程序会将其显示在 <xref:System.Windows.Controls.TextBlock>中。 当用户开始编辑某个字段时，应用程序会将 <xref:System.Windows.Controls.TextBlock> 替换为 <xref:System.Windows.Controls.TextBox>。 当用户完成字段编辑后，应用程序会将 <xref:System.Windows.Controls.TextBox> 替换为 <xref:System.Windows.Controls.TextBlock>。 由于在用户单击该按钮之前不会更新源，因此必须有一种方法来使 <xref:System.Windows.Controls.TextBlock> 显示建议的值。 通过将 <xref:System.Windows.Data.BindingGroup.SharesProposedValues%2A> 设置为 `true`，应用程序将显示用户对字段所做的更改，即使未更新源也是如此。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (object item, string propertyName, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(object item, string propertyName, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.TryGetValue(System.Object,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (item As Object, propertyName As String, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(System::Object ^ item, System::String ^ propertyName, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : obj * string * obj -&gt; bool" Usage="bindingGroup.TryGetValue (item, propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item">包含指定属性的对象。</param>
        <param name="propertyName">要获取其建议值的属性。</param>
        <param name="value">此方法在返回时包含一个表示建议的属性值的对象。 此参数在传递时尚未初始化。</param>
        <summary>尝试获取指定属性和项的建议值。</summary>
        <returns>如果值为指定属性的建议值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有指定项和属性的绑定，或指定属性的值不可用，则 <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> 返回 `false`，因为存在转换错误或早期验证规则失败。  
  
 使用 <xref:System.Windows.Controls.ValidationRule.Validate%2A?displayProperty=nameWithType> 方法中的此方法获取要提交到源的值。 `value` 类型取决于 <xref:System.Windows.Controls.ValidationRule> 发生的阶段。 例如，如果 <xref:System.Windows.Controls.TextBox> 是绑定到类型为 integer 的属性的数据，则 `value` 是一个字符串（如果调用 <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> 的 <xref:System.Windows.Controls.ValidationRule> 将其 <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> 设置为 <xref:System.Windows.Controls.ValidationStep.RawProposedValue>。 如果 <xref:System.Windows.Controls.ValidationRule> 的 <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> 设置为 <xref:System.Windows.Controls.ValidationStep.ConvertedProposedValue>，则 `value` 类型为绑定的转换器返回的任何类型。 在此示例中，`value` 通常为一个整数。  
  
   
  
## Examples  
 下面的示例创建一个名为 `ValidateDateAndPrice`的自定义 <xref:System.Windows.Controls.ValidationRule>。 在 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法中，该示例使用 <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> 方法和 <xref:System.Windows.Data.BindingGroup.Items%2A> 属性获取用户在窗体中输入的值。 然后，该示例将检查某一项是否超过100美元，该项目将在至少7天内可用。 此示例摘自 <xref:System.Windows.Data.BindingGroup> 类的更大示例  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSources">
      <MemberSignature Language="C#" Value="public bool UpdateSources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UpdateSources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.UpdateSources" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateSources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool UpdateSources();" />
      <MemberSignature Language="F#" Value="member this.UpdateSources : unit -&gt; bool" Usage="bindingGroup.UpdateSources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果所有验证规则都成功，则对绑定和将 <see cref="T:System.Windows.Controls.ValidationRule" /> 属性设置为 <see cref="P:System.Windows.Controls.ValidationRule.ValidationStep" />、<see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" /> 或 <see cref="F:System.Windows.Controls.ValidationStep.ConvertedProposedValue" /> 的 <see cref="F:System.Windows.Controls.ValidationStep.UpdatedValue" /> 对象运行转换器，并将目标值保存到源对象。</summary>
        <returns>如果所有验证规则都成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果每个 <xref:System.Windows.Controls.ValidationRule> 成功，则此方法会更新源，但不会导致源提交挂起的更改并结束编辑事务。 也就是说，如果源对象实现 <xref:System.ComponentModel.IEditableObject>。 调用此方法不会导致调用 <xref:System.ComponentModel.IEditableObject.EndEdit%2A>。 使用 <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> 方法让源提交挂起的更改。  
  
   
  
## Examples  
 下面的示例是一个应用程序的一部分，该应用程序提示用户输入多个客户，并为每个客户分配一个销售代表。 应用程序将检查销售代表和客户是否属于同一区域。 如果所有验证规则都成功，则示例将调用 <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> 来验证绑定并将值保存到源。  
  
 [!code-csharp[BindingGroupSnippets#UpdateSources](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml.cs#updatesources)]
 [!code-vb[BindingGroupSnippets#UpdateSources](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window2.xaml.vb#updatesources)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataError">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnNotifyDataError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnNotifyDataError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnNotifyDataError : bool with get, set" Usage="System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否包含 <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />。</summary>
        <value>如果包含 <see langword="true" />，则为 <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />；否则为 <see langword="false" />。 默认为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`<xref:System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError%2A> 时，绑定会检查并报告实现 <xref:System.ComponentModel.INotifyDataErrorInfo>的数据源引发的错误。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateWithoutUpdate">
      <MemberSignature Language="C#" Value="public bool ValidateWithoutUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValidateWithoutUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.ValidateWithoutUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateWithoutUpdate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValidateWithoutUpdate();" />
      <MemberSignature Language="F#" Value="member this.ValidateWithoutUpdate : unit -&gt; bool" Usage="bindingGroup.ValidateWithoutUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>对绑定和将 <see cref="T:System.Windows.Controls.ValidationRule" /> 属性设置为 <see cref="P:System.Windows.Controls.ValidationRule.ValidationStep" /> 或 <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" /> 的 <see cref="F:System.Windows.Controls.ValidationStep.ConvertedProposedValue" /> 对象运行转换器。</summary>
        <returns>如果验证规则成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法时，源不会更新。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationErrors">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt; ValidationErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Controls.ValidationError&gt; ValidationErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidationErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationErrors As ReadOnlyCollection(Of ValidationError)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Controls::ValidationError ^&gt; ^ ValidationErrors { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Controls::ValidationError ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationErrors : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt;" Usage="System.Windows.Data.BindingGroup.ValidationErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取促使 <see cref="T:System.Windows.Controls.ValidationError" /> 有效的 <see cref="T:System.Windows.Data.BindingGroup" /> 对象的集合。</summary>
        <value>导致 <see cref="T:System.Windows.Controls.ValidationError" /> 无效的 <see cref="T:System.Windows.Data.BindingGroup" /> 对象的集合。  如果没有错误，此值为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationRules As Collection(Of ValidationRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ ValidationRules { System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationRules : System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;" Usage="System.Windows.Data.BindingGroup.ValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象的集合，这些对象验证 <see cref="T:System.Windows.Data.BindingGroup" /> 中的源对象。</summary>
        <value><see cref="T:System.Windows.Controls.ValidationRule" /> 对象的集合，这些对象验证 <see cref="T:System.Windows.Data.BindingGroup" /> 中的源对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 向 <xref:System.Windows.Data.BindingGroup>中添加 <xref:System.Windows.Controls.ValidationRule> 时，<xref:System.Windows.Data.BindingGroup> 作为 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法的第一个参数传入。 可以通过使用 <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> 或 <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> 方法来获取对象的建议值。 可以从 <xref:System.Windows.Data.BindingGroup.Items%2A> 属性获取作为绑定源的对象。  
  
   
  
## Examples  
 下面的示例将自定义 <xref:System.Windows.Controls.ValidationRule>`ValidateDateAndPrice`添加到 <xref:System.Windows.Data.BindingGroup>。  
  
 [!code-xaml[BindingGroupSnippets#BindingGroup](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#bindinggroup)]  
  
 下面的示例展示了 `ValidateDateAndPrice` 类。 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法使用 <xref:System.Windows.Data.BindingGroup> 获取用户在窗体中输入的值，并检查项是否超过100美元，它是否可用于至少7天。  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
