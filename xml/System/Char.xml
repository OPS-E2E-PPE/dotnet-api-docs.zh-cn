<Type Name="Char" FullName="System.Char">
  <Metadata><Meta Name="ms.openlocfilehash" Value="326388202f057b22d00fd1ecbaacf5feb5e48969" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83537982" /></Metadata><TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Char" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IComparable(Of Char), IConvertible, IEquatable(Of Char)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type char = struct&#xA;    interface IConvertible" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public struct Char : IComparable, IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IEquatable&lt;char&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IEquatable`1&lt;char&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IComparable(Of Char), IEquatable(Of Char)" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IComparable&lt;char&gt;, IEquatable&lt;char&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type char = struct" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Char&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c0b7a-101">将字符表示为 UTF-16 代码单位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-101">Represents a character as a UTF-16 code unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="c0b7a-102">.NET 使用 <xref:System.Char> 结构来通过使用 UTF-16 编码来表示 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-102">.NET uses the <xref:System.Char> structure to represent Unicode code points by using UTF-16 encoding.</span></span> <span data-ttu-id="c0b7a-103"><xref:System.Char> 对象的值是它的16位数字（序号）值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-103">The value of a <xref:System.Char> object is its 16-bit numeric (ordinal) value.</span></span>

<span data-ttu-id="c0b7a-104">如果你不熟悉 Unicode、标量值、代码点、代理项对、UTF-16 和 <xref:System.Text.Rune> 类型，请参阅[.net 中的字符编码简介](/dotnet/standard/base-types/character-encoding-introduction)。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-104">If you aren't familiar with Unicode, scalar values, code points, surrogate pairs, UTF-16, and the <xref:System.Text.Rune> type, see [Introduction to character encoding in .NET](/dotnet/standard/base-types/character-encoding-introduction).</span></span>

<span data-ttu-id="c0b7a-105">以下各节检查 <xref:System.Char> 对象与字符之间的关系，并讨论使用 <xref:System.Char> 实例执行的一些常见任务。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-105">The following sections examine the relationship between a <xref:System.Char> object and a character and discuss some common tasks performed with <xref:System.Char> instances.</span></span> <span data-ttu-id="c0b7a-106">建议你考虑 .NET Core 3.0 中引入的 <xref:System.Text.Rune> 类型，作为执行某些任务的 <xref:System.Char> 的替代方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-106">We recommend that you consider the <xref:System.Text.Rune> type, introduced in .NET Core 3.0, as an alternative to <xref:System.Char> for performing some of these tasks.</span></span>

- [<span data-ttu-id="c0b7a-107">Char 对象、Unicode 字符和字符串</span><span class="sxs-lookup"><span data-stu-id="c0b7a-107">Char objects, Unicode characters, and strings</span></span>](#Relationship)
- [<span data-ttu-id="c0b7a-108">字符和字符类别</span><span class="sxs-lookup"><span data-stu-id="c0b7a-108">Characters and character categories</span></span>](#Categories)
- [<span data-ttu-id="c0b7a-109">字符和文本元素</span><span class="sxs-lookup"><span data-stu-id="c0b7a-109">Characters and text elements</span></span>](#Elements)
- [<span data-ttu-id="c0b7a-110">常见操作</span><span class="sxs-lookup"><span data-stu-id="c0b7a-110">Common operations</span></span>](#Operations)
- [<span data-ttu-id="c0b7a-111">Char 值和互操作</span><span class="sxs-lookup"><span data-stu-id="c0b7a-111">Char values and interop</span></span>](#Interop)

<a name="Relationship"></a>
## <a name="char-objects-unicode-characters-and-strings"></a><span data-ttu-id="c0b7a-112">Char 对象、Unicode 字符和字符串</span><span class="sxs-lookup"><span data-stu-id="c0b7a-112">Char objects, Unicode characters, and strings</span></span>
 <span data-ttu-id="c0b7a-113"><xref:System.String> 对象是表示文本字符串的 <xref:System.Char> 结构的有序集合。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-113">A <xref:System.String> object is a sequential collection of <xref:System.Char> structures that represents a string of text.</span></span> <span data-ttu-id="c0b7a-114">大多数 Unicode 字符可以由单个 <xref:System.Char> 对象表示，但是编码为基字符、代理项对和/或组合字符序列的字符由多个 <xref:System.Char> 对象表示。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-114">Most Unicode characters can be represented by a single <xref:System.Char> object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple <xref:System.Char> objects.</span></span> <span data-ttu-id="c0b7a-115">出于此原因，<xref:System.String> 对象中的 <xref:System.Char> 结构不一定等效于单个 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-115">For this reason, a <xref:System.Char> structure in a <xref:System.String> object is not necessarily equivalent to a single Unicode character.</span></span>

 <span data-ttu-id="c0b7a-116">在以下情况下，多个16位代码单元用于表示单个 Unicode 字符：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-116">Multiple 16-bit code units are used to represent single Unicode characters in the following cases:</span></span>

-   <span data-ttu-id="c0b7a-117">字形，可能包含单个字符或后跟一个或多个组合字符的基本字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-117">Glyphs, which may consist of a single character or of a base character followed by one or more combining characters.</span></span> <span data-ttu-id="c0b7a-118">例如，字符ä由一个 <xref:System.Char> 对象表示，其代码单元为 U + 0061，后跟一个其代码单元为 U + 0308 的 <xref:System.Char> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-118">For example, the character ä is represented by a <xref:System.Char> object whose code unit is U+0061 followed by a <xref:System.Char> object whose code unit is U+0308.</span></span> <span data-ttu-id="c0b7a-119">（字符ä还可以由具有 U + 00E4 的代码单位的单个 <xref:System.Char> 对象定义。）下面的示例说明字符ä由两个 <xref:System.Char> 对象组成。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-119">(The character ä can also be defined by a single <xref:System.Char> object that has a code unit of U+00E4.) The following example illustrates that the character ä consists of two <xref:System.Char> objects.</span></span>

     [!code-csharp[System.Char.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/grapheme1.cs#1)]
     [!code-vb[System.Char.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/grapheme1.vb#1)]

-   <span data-ttu-id="c0b7a-120">Unicode 基本多语言平面（BMP）以外的字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-120">Characters outside the Unicode Basic Multilingual Plane (BMP).</span></span> <span data-ttu-id="c0b7a-121">Unicode 除了支持表示平面0的 BMP 外，还支持十六个平面。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-121">Unicode supports sixteen planes in addition to the BMP, which represents plane 0.</span></span> <span data-ttu-id="c0b7a-122">Unicode 码位由包含平面的21位值用 UTF-32 表示。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-122">A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane.</span></span> <span data-ttu-id="c0b7a-123">例如，U + 1D160 表示音乐符号第8说明字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-123">For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character.</span></span> <span data-ttu-id="c0b7a-124">由于 UTF-16 编码只有16位，因此 BMP 外的字符由 UTF-16 中的代理项对表示。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-124">Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16.</span></span> <span data-ttu-id="c0b7a-125">下面的示例说明了32等效于 U + 1D160，即音乐符号第8注释字符，为 U + D834 U + DD60。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-125">The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60.</span></span> <span data-ttu-id="c0b7a-126">U + D834 为高代理项;高代理项范围是从 U + D800 到 U + DBFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-126">U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF.</span></span> <span data-ttu-id="c0b7a-127">U + DD60 是低代理项;低代理项范围是从 U + DC00 到 U + DFFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-127">U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.</span></span>

     [!code-csharp[System.Char.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/surrogate1.cs#2)]
     [!code-vb[System.Char.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/surrogate1.vb#2)]

<a name="Categories"></a>
## <a name="characters-and-character-categories"></a><span data-ttu-id="c0b7a-128">字符和字符类别</span><span class="sxs-lookup"><span data-stu-id="c0b7a-128">Characters and character categories</span></span>
<span data-ttu-id="c0b7a-129">每个 Unicode 字符或有效代理项对属于一个 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-129">Each Unicode character or valid surrogate pair belongs to a Unicode category.</span></span> <span data-ttu-id="c0b7a-130">在 .NET Framework 中，Unicode 类别由 <xref:System.Globalization.UnicodeCategory> 枚举的成员表示，并包含诸如 <xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>和 <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>的值，例如。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-130">In the .NET Framework, Unicode categories are represented by members of the <xref:System.Globalization.UnicodeCategory> enumeration and include values such as <xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>, and <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>, for example.</span></span>

<span data-ttu-id="c0b7a-131">若要确定字符的 Unicode 类别，请调用 <xref:System.Char.GetUnicodeCategory%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-131">To determine the Unicode category of a character, call the <xref:System.Char.GetUnicodeCategory%2A> method.</span></span> <span data-ttu-id="c0b7a-132">例如，下面的示例调用 <xref:System.Char.GetUnicodeCategory%2A> 以显示字符串中每个字符的 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-132">For example, the following example calls the <xref:System.Char.GetUnicodeCategory%2A> to display the Unicode category of each character in a string.</span></span> <span data-ttu-id="c0b7a-133">仅当 <xref:System.String> 实例中没有代理项对时，此示例才能正常运行。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-133">The example works correctly only if there are no surrogate pairs in the <xref:System.String> instance.</span></span>

 [!code-csharp[System.Char.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/GetUnicodeCategory3.cs#6)]
 [!code-vb[System.Char.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/GetUnicodeCategory3.vb#6)]

 <span data-ttu-id="c0b7a-134">在内部，对于 ASCII 范围外的字符（U + 0000 到 U + 00FF），<xref:System.Char.GetUnicodeCategory%2A> 方法取决于 <xref:System.Globalization.CharUnicodeInfo> 类报告的 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-134">Internally, for characters outside the ASCII range (U+0000 through U+00FF), the <xref:System.Char.GetUnicodeCategory%2A> method depends on Unicode categories reported by the <xref:System.Globalization.CharUnicodeInfo> class.</span></span> <span data-ttu-id="c0b7a-135">从 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]开始，将根据[Unicode 标准版本 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)对 unicode 字符进行分类。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-135">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="c0b7a-136">在从 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 到 [!INCLUDE[net_v461](~/includes/net-v461-md.md)]的 .NET Framework 版本中，将根据[Unicode 标准版本 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)进行分类。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-136">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>

<a name="Elements"></a>
## <a name="characters-and-text-elements"></a><span data-ttu-id="c0b7a-137">字符和文本元素</span><span class="sxs-lookup"><span data-stu-id="c0b7a-137">Characters and text elements</span></span>
 <span data-ttu-id="c0b7a-138">因为单个字符可由多个 <xref:System.Char> 对象表示，所以，处理单个 <xref:System.Char> 对象并不总是有意义的。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-138">Because a single character can be represented by multiple <xref:System.Char> objects, it is not always meaningful to work with individual <xref:System.Char> objects.</span></span> <span data-ttu-id="c0b7a-139">例如，下面的示例将表示爱琴大学数字0到9的 Unicode 码位转换为 UTF-16 编码的代码单元。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-139">For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units.</span></span> <span data-ttu-id="c0b7a-140">由于它错误地表示包含字符的 <xref:System.Char> 对象，它会错误地报告生成的字符串具有20个字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-140">Because it erroneously equates <xref:System.Char> objects with characters, it inaccurately reports that the resulting string has 20 characters.</span></span>

 [!code-csharp[System.Char.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2.cs#3)]
 [!code-vb[System.Char.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2.vb#3)]

 <span data-ttu-id="c0b7a-141">可以执行以下操作，以避免 <xref:System.Char> 对象表示单个字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-141">You can do the following to avoid the assumption that a <xref:System.Char> object represents a single character.</span></span>

-   <span data-ttu-id="c0b7a-142">您可以完整地处理 <xref:System.String> 对象，而不是使用其各个字符来表示和分析语言内容。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-142">You can work with a <xref:System.String> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.</span></span>

-   <span data-ttu-id="c0b7a-143">可以使用 <xref:System.String.EnumerateRunes%2A?displayProperty=nameWithType>，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-143">You can use <xref:System.String.EnumerateRunes%2A?displayProperty=nameWithType> as shown in the following example:</span></span>

    :::code language="csharp" source="~/snippets/System.Text/Rune/csharp/CountLettersInString.cs" id="SnippetGoodExample":::

-   <span data-ttu-id="c0b7a-144">您可以使用 <xref:System.Globalization.StringInfo> 类来处理文本元素，而不是单个 <xref:System.Char> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-144">You can use the <xref:System.Globalization.StringInfo> class to work with text elements instead of individual <xref:System.Char> objects.</span></span> <span data-ttu-id="c0b7a-145">下面的示例使用 <xref:System.Globalization.StringInfo> 对象对字符串中的文本元素的数目进行计数，其中包含从零到9的爱琴大学数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-145">The following example uses the <xref:System.Globalization.StringInfo> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine.</span></span> <span data-ttu-id="c0b7a-146">由于它将代理项对视为单个字符，因此它会正确地报告该字符串包含十个字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-146">Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.</span></span>

     [!code-csharp[System.Char.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2a.cs#4)]
     [!code-vb[System.Char.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2a.vb#4)]

-   <span data-ttu-id="c0b7a-147">如果字符串包含具有一个或多个组合字符的基字符，则可以调用 <xref:System.String.Normalize%2A?displayProperty=nameWithType> 方法，将子字符串转换为单个 UTF-16 编码的代码单元。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-147">If a string contains a base character that has one or more combining characters, you can call the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the substring to a single UTF-16 encoded code unit.</span></span> <span data-ttu-id="c0b7a-148">下面的示例调用 <xref:System.String.Normalize%2A?displayProperty=nameWithType> 方法，将基字符 U + 0061 （拉丁小写字母 A）和组合字符 U + 0308 （组合分音符）转换为 U + 00E4 （拉丁文小写字母 A，分音符）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-148">The following example calls the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS).</span></span>

     [!code-csharp[System.Char.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/normalized.cs#5)]
     [!code-vb[System.Char.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/normalized.vb#5)]

<a name="Operations"></a>
## <a name="common-operations"></a><span data-ttu-id="c0b7a-149">常见操作</span><span class="sxs-lookup"><span data-stu-id="c0b7a-149">Common operations</span></span>
 <span data-ttu-id="c0b7a-150"><xref:System.Char> 结构提供了一些方法来比较 <xref:System.Char> 对象、将当前 <xref:System.Char> 对象的值转换为另一种类型的对象，并确定 <xref:System.Char> 对象的 Unicode 类别：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-150">The <xref:System.Char> structure provides methods to compare <xref:System.Char> objects, convert the value of the current <xref:System.Char> object to an object of another type, and determine the Unicode category of a <xref:System.Char> object:</span></span>

|<span data-ttu-id="c0b7a-151">要执行此操作</span><span class="sxs-lookup"><span data-stu-id="c0b7a-151">To do this</span></span>|<span data-ttu-id="c0b7a-152">使用这些 `System.Char` 方法</span><span class="sxs-lookup"><span data-stu-id="c0b7a-152">Use these `System.Char` methods</span></span>|
|----------------|-------------------------------------|
|<span data-ttu-id="c0b7a-153">比较 <xref:System.Char> 对象</span><span class="sxs-lookup"><span data-stu-id="c0b7a-153">Compare <xref:System.Char> objects</span></span>|<span data-ttu-id="c0b7a-154"><xref:System.Char.CompareTo%2A> 和 <xref:System.Char.Equals%2A></span><span class="sxs-lookup"><span data-stu-id="c0b7a-154"><xref:System.Char.CompareTo%2A> and <xref:System.Char.Equals%2A></span></span>|
|<span data-ttu-id="c0b7a-155">将码位转换为字符串</span><span class="sxs-lookup"><span data-stu-id="c0b7a-155">Convert a code point to a string</span></span>|<xref:System.Char.ConvertFromUtf32%2A><br /><br />  <span data-ttu-id="c0b7a-156">另请参阅 <xref:System.Text.Rune> 类型。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-156">See also the <xref:System.Text.Rune> type.</span></span>|
|<span data-ttu-id="c0b7a-157">将 <xref:System.Char> 对象或 <xref:System.Char> 对象的代理项对转换为码位</span><span class="sxs-lookup"><span data-stu-id="c0b7a-157">Convert a <xref:System.Char> object or a surrogate pair of <xref:System.Char> objects to a code point</span></span>|<span data-ttu-id="c0b7a-158">对于单个字符： <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c0b7a-158">For a single character: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span></span><br /><br /> <span data-ttu-id="c0b7a-159">对于代理项对或字符串中的字符： <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c0b7a-159">For a surrogate pair or a character in a string: <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span></span><br /><br />  <span data-ttu-id="c0b7a-160">另请参阅 <xref:System.Text.Rune> 类型。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-160">See also the <xref:System.Text.Rune> type.</span></span>|
|<span data-ttu-id="c0b7a-161">获取字符的 Unicode 类别</span><span class="sxs-lookup"><span data-stu-id="c0b7a-161">Get the Unicode category of a character</span></span>|<xref:System.Char.GetUnicodeCategory%2A><br /><br />  <span data-ttu-id="c0b7a-162">另请参阅 <xref:System.Text.Rune.GetUnicodeCategory%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-162">See also <xref:System.Text.Rune.GetUnicodeCategory%2A?displayProperty=nameWithType>.</span></span>|
|<span data-ttu-id="c0b7a-163">确定字符是否在特定的 Unicode 类别中，如数字、字母、标点、控制字符等</span><span class="sxs-lookup"><span data-stu-id="c0b7a-163">Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on</span></span>|<span data-ttu-id="c0b7a-164"><xref:System.Char.IsControl%2A>、<xref:System.Char.IsDigit%2A>、<xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLetter%2A>、<xref:System.Char.IsLetterOrDigit%2A>、<xref:System.Char.IsLower%2A>、<xref:System.Char.IsLowSurrogate%2A>、<xref:System.Char.IsNumber%2A>、<xref:System.Char.IsPunctuation%2A>、<xref:System.Char.IsSeparator%2A>、<xref:System.Char.IsSurrogate%2A>、<xref:System.Char.IsSurrogatePair%2A>、<xref:System.Char.IsSymbol%2A>、<xref:System.Char.IsUpper%2A>和 <xref:System.Char.IsWhiteSpace%2A></span><span class="sxs-lookup"><span data-stu-id="c0b7a-164"><xref:System.Char.IsControl%2A>, <xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>, <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>, <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>, <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, and <xref:System.Char.IsWhiteSpace%2A></span></span><br /><br />  <span data-ttu-id="c0b7a-165">另请参阅 <xref:System.Text.Rune> 类型上的相应方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-165">See also corresponding methods on the <xref:System.Text.Rune> type.</span></span>|
|<span data-ttu-id="c0b7a-166">将表示数字的 <xref:System.Char> 对象转换为数值类型</span><span class="sxs-lookup"><span data-stu-id="c0b7a-166">Convert a <xref:System.Char> object that represents a number to a numeric value type</span></span>|<xref:System.Char.GetNumericValue%2A><br /><br /> <span data-ttu-id="c0b7a-167">另请参阅 <xref:System.Text.Rune.GetNumericValue%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-167">See also <xref:System.Text.Rune.GetNumericValue%2A?displayProperty=nameWithType>.</span></span>|
|<span data-ttu-id="c0b7a-168">将字符串中的字符转换为 <xref:System.Char> 对象</span><span class="sxs-lookup"><span data-stu-id="c0b7a-168">Convert a character in a string into a <xref:System.Char> object</span></span>|<span data-ttu-id="c0b7a-169"><xref:System.Char.Parse%2A> 和 <xref:System.Char.TryParse%2A></span><span class="sxs-lookup"><span data-stu-id="c0b7a-169"><xref:System.Char.Parse%2A> and <xref:System.Char.TryParse%2A></span></span>|
|<span data-ttu-id="c0b7a-170">将 <xref:System.Char> 对象转换为 <xref:System.String> 对象</span><span class="sxs-lookup"><span data-stu-id="c0b7a-170">Convert a <xref:System.Char> object to a <xref:System.String> object</span></span>|<xref:System.Char.ToString%2A>|
|<span data-ttu-id="c0b7a-171">更改 <xref:System.Char> 对象的大小写</span><span class="sxs-lookup"><span data-stu-id="c0b7a-171">Change the case of a <xref:System.Char> object</span></span>|<span data-ttu-id="c0b7a-172"><xref:System.Char.ToLower%2A>、<xref:System.Char.ToLowerInvariant%2A>、<xref:System.Char.ToUpper%2A> 和 <xref:System.Char.ToUpperInvariant%2A></span><span class="sxs-lookup"><span data-stu-id="c0b7a-172"><xref:System.Char.ToLower%2A>, <xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>, and <xref:System.Char.ToUpperInvariant%2A></span></span><br /><br />  <span data-ttu-id="c0b7a-173">另请参阅 <xref:System.Text.Rune> 类型上的相应方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-173">See also corresponding methods on the <xref:System.Text.Rune> type.</span></span>|

<a name="Interop"></a>
## <a name="char-values-and-interop"></a><span data-ttu-id="c0b7a-174">Char 值和互操作</span><span class="sxs-lookup"><span data-stu-id="c0b7a-174">Char values and interop</span></span>
<span data-ttu-id="c0b7a-175">当托管的 <xref:System.Char> 类型（表示为 Unicode UTF-16 编码的代码单元）被传递到非托管代码时，互操作封送拆收器默认情况下将字符集转换为 ANSI。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-175">When a managed <xref:System.Char> type, which is represented as a Unicode UTF-16 encoded code unit, is passed to unmanaged code, the interop marshaler converts the character set to ANSI by default.</span></span> <span data-ttu-id="c0b7a-176">可以将 <xref:System.Runtime.InteropServices.DllImportAttribute> 特性应用到平台调用声明，并将 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 特性应用于 COM 互操作声明，以控制 <xref:System.Char> 类型使用的封送字符集。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-176">You can apply the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to platform invoke declarations and the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to a COM interop declaration to control which character set a marshaled <xref:System.Char> type uses.</span></span>



## Examples
 <span data-ttu-id="c0b7a-177">下面的代码示例演示了 <xref:System.Char>中的某些方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-177">The following code example demonstrates some of the methods in <xref:System.Char>.</span></span>

 [!code-cpp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char [Type Level]/CPP/charstructure.cpp#23)]
 [!code-csharp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char [Type Level]/CS/charstructure.cs#23)]
 [!code-vb[System.Char &#91;Type Level&#93;#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char [Type Level]/VB/charstructure.vb#23)]

 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c0b7a-178">此类型的所有成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-178">All members of this type are thread safe.</span></span> <span data-ttu-id="c0b7a-179">看似修改实例状态的成员实际上返回用新值初始化的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-179">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="c0b7a-180">与任何其他类型一样，读取和写入包含此类型的实例的共享变量时，必须通过锁保护以保证线程安全。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-180">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-181">将此实例与指定的对象或值类型进行比较，并指示此实例在排序顺序中是位于指定的对象或值类型之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-181">Compares this instance to a specified object or value type, and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or value type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(char value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : char -&gt; int&#xA;override this.CompareTo : char -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c0b7a-182">一个要比较的 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-182">A <see cref="T:System.Char" /> object to compare.</span></span></param>
        <summary><span data-ttu-id="c0b7a-183">将此实例与指定的 <see cref="T:System.Char" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Char" /> 对象之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-183">Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-184">一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-184">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="c0b7a-185">返回值</span><span class="sxs-lookup"><span data-stu-id="c0b7a-185">Return Value</span></span>

 </term><description> <span data-ttu-id="c0b7a-186">说明</span><span class="sxs-lookup"><span data-stu-id="c0b7a-186">Description</span></span>

 </description></listheader><item><term> <span data-ttu-id="c0b7a-187">小于零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-187">Less than zero</span></span>

 </term><description> <span data-ttu-id="c0b7a-188">此实例位于 <paramref name="value" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-188">This instance precedes <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="c0b7a-189">零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-189">Zero</span></span>

 </term><description> <span data-ttu-id="c0b7a-190">此实例在排序顺序中的位置与 <paramref name="value" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-190">This instance has the same position in the sort order as <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="c0b7a-191">大于零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-191">Greater than zero</span></span>

 </term><description> <span data-ttu-id="c0b7a-192">此实例位于 <paramref name="value" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-192">This instance follows <paramref name="value" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-193">此方法实现 <xref:System.IComparable%601?displayProperty=nameWithType> 接口，并比 <xref:System.Char.CompareTo%2A?displayProperty=nameWithType> 方法稍微好些，因为它不必将 `value` 参数转换为对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-193">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Char.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>

 <span data-ttu-id="c0b7a-194">此方法执行的比较基于此实例的编码值和 `value`，而不是其字典特性。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-194">The comparison performed by this method is based on the encoded values of this instance and `value`, not their lexicographical characteristics.</span></span>

 <span data-ttu-id="c0b7a-195">如果 <xref:System.Char.CompareTo%2A> 方法参数类型的位数（比实例类型更少），则某些编程语言会执行隐式的扩大转换，该转换将参数的值转换为具有更多位数的值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-195">If the <xref:System.Char.CompareTo%2A> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</span></span>

 <span data-ttu-id="c0b7a-196">例如，假设实例类型为 <xref:System.Int32> 并且参数类型为 <xref:System.Byte>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-196">For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>.</span></span> <span data-ttu-id="c0b7a-197">Microsoft C#编译器生成说明，以将参数的值表示为 <xref:System.Int32> 对象，然后生成 <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> 方法来比较 <xref:System.Int32> 实例的值和 <xref:System.Int32> 参数表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-197">The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.</span></span>

 <span data-ttu-id="c0b7a-198">通常，对数值类型执行隐式扩大转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-198">Typically, implicit widening conversions are performed on numeric types.</span></span> <span data-ttu-id="c0b7a-199">请查阅编程语言的文档，以确定其编译器是否执行扩大转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-199">Consult your programming language's documentation to determine if its compiler performs widening conversions.</span></span> <span data-ttu-id="c0b7a-200">如果实例和参数类型不匹配且适当的转换不可用，则编译器将生成指示参数的指令，并调用采用 <xref:System.Object> 参数的 <xref:System.Char.CompareTo%2A> 重载。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-200">If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <xref:System.Char.CompareTo%2A> overload that takes an <xref:System.Object> parameter.</span></span>



## Examples
 <span data-ttu-id="c0b7a-201">下面的代码示例演示了多个值和引用类型的 `CompareTo` 方法的泛型和非泛型版本。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-201">The following code example demonstrates generic and non-generic versions of the `CompareTo` method for several value and reference types.</span></span>

 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c0b7a-202">要与此实例比较的对象，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-202">An object to compare this instance to, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-203">将此实例与指定的对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Object" /> 之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-203">Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-204">一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-204">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="c0b7a-205">返回值</span><span class="sxs-lookup"><span data-stu-id="c0b7a-205">Return Value</span></span>

 </term><description> <span data-ttu-id="c0b7a-206">说明</span><span class="sxs-lookup"><span data-stu-id="c0b7a-206">Description</span></span>

 </description></listheader><item><term> <span data-ttu-id="c0b7a-207">小于零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-207">Less than zero</span></span>

 </term><description> <span data-ttu-id="c0b7a-208">此实例位于 <paramref name="value" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-208">This instance precedes <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="c0b7a-209">零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-209">Zero</span></span>

 </term><description> <span data-ttu-id="c0b7a-210">此实例在排序顺序中的位置与 <paramref name="value" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-210">This instance has the same position in the sort order as <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="c0b7a-211">大于零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-211">Greater than zero</span></span>

 </term><description> <span data-ttu-id="c0b7a-212">此实例位于 <paramref name="value" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-212">This instance follows <paramref name="value" />.</span></span>

<span data-ttu-id="c0b7a-213">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c0b7a-213">-or-</span></span>

 <span data-ttu-id="c0b7a-214"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-214"><paramref name="value" /> is <see langword="null" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-215"><xref:System.Char.CompareTo%2A> 方法实现 <xref:System.IComparable> 接口。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-215">The <xref:System.Char.CompareTo%2A> method implements the <xref:System.IComparable> interface.</span></span>

 <span data-ttu-id="c0b7a-216">`value` 参数必须 `null` 或 <xref:System.Char>的实例;否则，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-216">The `value` parameter must be `null` or an instance of <xref:System.Char>; otherwise, an exception is thrown.</span></span>

 <span data-ttu-id="c0b7a-217">此方法所执行的比较基于此实例的编码值并 `value`，而不一定是其字典中的特征。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-217">The comparison performed by this method is based on the encoded values of this instance and `value`, not necessarily their lexicographical characteristics.</span></span> <span data-ttu-id="c0b7a-218">无论其值如何，<xref:System.Char>的任何实例都视为大于 `null`。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-218">Any instance of <xref:System.Char>, regardless of its value, is considered greater than `null`.</span></span>



## Examples
 <span data-ttu-id="c0b7a-219">下面的代码示例演示 <xref:System.Char.CompareTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-219">The following code example demonstrates <xref:System.Char.CompareTo%2A>.</span></span>

 [!code-cpp[System.Char.CompareTo#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.CompareTo/CPP/compareto.cpp#19)]
 [!code-csharp[System.Char.CompareTo#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.CompareTo/CS/compareto.cs#19)]
 [!code-vb[System.Char.CompareTo#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.CompareTo/VB/compareto.vb#19)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c0b7a-220"><paramref name="value" /> 不是 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-220"><paramref name="value" /> is not a <see cref="T:System.Char" /> object.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFromUtf32">
      <MemberSignature Language="C#" Value="public static string ConvertFromUtf32 (int utf32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ConvertFromUtf32(int32 utf32) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertFromUtf32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertFromUtf32 (utf32 As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ConvertFromUtf32(int utf32);" />
      <MemberSignature Language="F#" Value="static member ConvertFromUtf32 : int -&gt; string" Usage="System.char.ConvertFromUtf32 utf32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf32" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="utf32"><span data-ttu-id="c0b7a-221">21 位 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-221">A 21-bit Unicode code point.</span></span></param>
        <summary><span data-ttu-id="c0b7a-222">将指定的 Unicode 码位转换为 UTF-16 编码字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-222">Converts the specified Unicode code point into a UTF-16 encoded string.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-223">由一个 <see cref="T:System.Char" /> 对象或一个 <see cref="T:System.Char" /> 对象的代理项对组成的字符串，等效于 <paramref name="utf32" /> 参数所指定的码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-223">A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-224">使用此方法可以在使用 <xref:System.Char.IsLowSurrogate%28System.Char%29> 和 <xref:System.Char.IsHighSurrogate%28System.Char%29>等方法测试字符串之前，将21位 Unicode 码位转换为 UTF-16 编码字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-224">Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <xref:System.Char.IsLowSurrogate%28System.Char%29> and <xref:System.Char.IsHighSurrogate%28System.Char%29>.</span></span>

 <span data-ttu-id="c0b7a-225">基本多语言平面（BMP）外的有效码位始终产生有效的代理项对。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-225">A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair.</span></span> <span data-ttu-id="c0b7a-226">但是，根据 Unicode 标准，BMP 内的有效码位可能不会生成有效的结果，因为在转换中未使用任何语言处理。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-226">However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion.</span></span> <span data-ttu-id="c0b7a-227">出于此原因，请使用 <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> 类将大容量 UTF-16 32 数据转换为大容量 UTF-16 数据。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-227">For that reason, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class to convert bulk UTF-32 data into bulk UTF-16 data.</span></span>



## Examples
 <span data-ttu-id="c0b7a-228">下面的代码示例演示 <xref:System.Char.ConvertToUtf32%2A> 和 <xref:System.Char.ConvertFromUtf32%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-228">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>

 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-229"><paramref name="utf32" /> 不是一个从 U+0 到 U+10FFFF 范围内的有效 21 位 Unicode 码位（从 U+D800 到 U+DFFF 范围的代理项对除外）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-229"><paramref name="utf32" /> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertToUtf32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-230">将 UTF-16 编码的代理项对的值转换为 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-230">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (highSurrogate As Char, lowSurrogate As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : char * char -&gt; int" Usage="System.char.ConvertToUtf32 (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lowSurrogate" Type="System.Char" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="c0b7a-231">高代理项代码单位（即代码单位从 U+D800 到 U+DBFF）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-231">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="c0b7a-232">低代理项代码单位（即代码单位从 U+DC00 到 U+DFFF）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-232">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</span></span></param>
        <summary><span data-ttu-id="c0b7a-233">将 UTF-16 编码的代理项对的值转换为 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-233">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-234"><paramref name="highSurrogate" /> 和 <paramref name="lowSurrogate" /> 参数表示的 21 位 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-234">The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-235">使用此方法将代理项对转换为21位 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-235">Use this method to convert a surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="c0b7a-236">若要将 UTF-16 数据转换为32数据，请使用 <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-236">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>

 <span data-ttu-id="c0b7a-237">通常，UTF-16 编码表示一个 Unicode 字符作为16位代码单元。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-237">Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit.</span></span> <span data-ttu-id="c0b7a-238">但是，它还支持代理项对，这允许将单个抽象字符表示为 2 16 位代码单元。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-238">However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units.</span></span> <span data-ttu-id="c0b7a-239">这两个 <xref:System.Char> 对象的代码单位必须是从 U + D800 到 U + DBFF （对于第一个（高）代理）以及从 U + DC00 到 U + DFFF （对于第二个（低）代理）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-239">These two <xref:System.Char> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate.</span></span> <span data-ttu-id="c0b7a-240">仅 UTF-16 编码支持代理项对。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-240">Surrogate pairs are supported only by UTF-16 encoding.</span></span> <span data-ttu-id="c0b7a-241">此方法允许将 UTF-16 代理项对所表示的字符转换为使用 32 UTF-16 编码的字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-241">This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding.</span></span>



## Examples
 <span data-ttu-id="c0b7a-242">下面的代码示例演示 <xref:System.Char.ConvertToUtf32%2A> 和 <xref:System.Char.ConvertFromUtf32%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-242">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>

 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-243"><paramref name="highSurrogate" /> 不在 U + D800 到 U + DBFF 的范围内，或者 <paramref name="lowSurrogate" /> 不在 U + DC00 到 U+DFFF 的范围内。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-243"><paramref name="highSurrogate" /> is not in the range U+D800 through U+DBFF, or <paramref name="lowSurrogate" /> is not in the range U+DC00 through U+DFFF.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : string * int -&gt; int" Usage="System.char.ConvertToUtf32 (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-244">包含字符或代理项对的字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-244">A string that contains a character or surrogate pair.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-245">字符或代理项对在 <paramref name="s" /> 中的索引位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-245">The index position of the character or surrogate pair in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-246">将字符串中指定位置的 UTF-16 编码字符或代理项对的值转换为 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-246">Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-247">字符或代理项对表示的 21 位 Unicode 码位，该字符或代理项对在 <paramref name="s" /> 参数中的位置由 <paramref name="index" /> 参数指定。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-247">The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-248">使用此方法将字符或代理项对转换为21位 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-248">Use this method to convert a character or surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="c0b7a-249">若要将 UTF-16 数据转换为32数据，请使用 <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-249">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>



## Examples
 <span data-ttu-id="c0b7a-250">下面的代码示例演示 <xref:System.Char.ConvertToUtf32%2A> 和 <xref:System.Char.ConvertFromUtf32%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-250">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>

 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-251"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-251"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-252"><paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-252"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c0b7a-253">指定的索引位置包含代理项对，且对中的第一个字符不是有效的高代理项或对中的第二个字符不是有效的低代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-253">The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-254">返回一个值，该值指示此实例是否与指定的对象或 <see cref="T:System.Char" /> 值相等。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-254">Returns a value that indicates whether this instance is equal to a specified object or <see cref="T:System.Char" /> value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (char obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(char obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(char obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : char -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="c0b7a-255">要与此实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-255">An object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="c0b7a-256">返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-256">Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-257">如果 <see langword="true" /> 参数与此实例的值相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-257"><see langword="true" /> if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-258">此方法实现 <xref:System.IEquatable%601?displayProperty=nameWithType> 接口，并比 <xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> 略好，因为它不需要取消装箱 `obj` 参数。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-258">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> because it does not need to unbox the `obj` parameter.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="c0b7a-259">要与此示例比较的对象，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-259">An object to compare with this instance or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-260">返回一个值，该值指示此实例是否与指定的对象相等。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-260">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-261">如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Char" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-261"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-262">此方法所执行的比较基于此实例的编码值并 `obj`，而不一定是其字典中的特征。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-262">The comparison performed by this method is based on the encoded values of this instance and `obj`, not necessarily their lexicographical characteristics.</span></span>



## Examples
 <span data-ttu-id="c0b7a-263">下面的代码示例演示 <xref:System.Char.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-263">The following code example demonstrates <xref:System.Char.Equals%2A>.</span></span>

 [!code-cpp[System.Char.Equals#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Equals/CPP/equals.cpp#20)]
 [!code-csharp[System.Char.Equals#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Equals/CS/equals.cs#20)]
 [!code-vb[System.Char.Equals#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Equals/VB/equals.vb#20)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="char.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0b7a-264">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-264">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-265">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-265">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-266">将指定的数字 Unicode 字符转换为双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-266">Converts a specified numeric Unicode character to a double-precision floating-point number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (c As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char c);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.char.GetNumericValue c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-267">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-267">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="c0b7a-268">将指定的数字 Unicode 字符转换为双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-268">Converts the specified numeric Unicode character to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-269">如果该字符表示数字，则数值为 <paramref name="c" />；否则为 -1.0。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-269">The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-270">`c` 参数必须是数字值的 <xref:System.Char> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-270">The `c` parameter must be the <xref:System.Char> representation of a numeric value.</span></span> <span data-ttu-id="c0b7a-271">例如，如果 `c` 为 "5"，则返回值为5。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-271">For example, if `c` is "5", the return value is 5.</span></span> <span data-ttu-id="c0b7a-272">但是，如果 `c` 为 "z"，则返回值为-1.0。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-272">However, if `c` is "z", the return value is -1.0.</span></span>

 <span data-ttu-id="c0b7a-273">当且仅当字符是以下 <xref:System.Globalization.UnicodeCategory> 类别之一的成员时，它具有关联的数值： `DecimalDigitNumber`、`LetterNumber`或 `OtherNumber`。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-273">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>

 <span data-ttu-id="c0b7a-274"><xref:System.Char.GetNumericValue%2A> 方法假定 `c` 对应于单个语言字符，并检查是否可以将该字符转换为十进制数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-274">The <xref:System.Char.GetNumericValue%2A> method assumes that `c` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit.</span></span> <span data-ttu-id="c0b7a-275">但 Unicode 标准中的一些数字由两个构成代理项对的 <xref:System.Char> 对象表示。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-275">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="c0b7a-276">例如，爱琴大学编号系统由代码点 U + 10107 到 U + 10133 组成。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-276">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="c0b7a-277">下面的示例使用 <xref:System.Char.ConvertFromUtf32%2A> 方法来实例化表示爱琴大学1的字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-277">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="c0b7a-278">如示例的输出所示，如果传递给此字符的高代理项或低代理项，则 <xref:System.Char.GetNumericValue%28System.Char%29> 方法返回-1。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-278">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</span></span>

 [!code-csharp[System.Char.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#2)]
 [!code-vb[System.Char.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#2)]



## Examples
 <span data-ttu-id="c0b7a-279">下面的示例演示 <xref:System.Char.GetNumericValue%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-279">The following example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>

 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.GetNumericValue(System.Text.Rune)" />
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.char.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-280">一个 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-280">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-281"><paramref name="s" /> 中的字符位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-281">The character position in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-282">将指定字符串中位于指定位置的数字 Unicode 字符转换为双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-282">Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-283">如果 <paramref name="index" /> 中位于 <paramref name="s" /> 处的字符表示数字，则为该字符的数值；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-283">The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-284">`s` 参数必须是数字值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-284">The `s` parameter must be the string representation of a numeric value.</span></span> <span data-ttu-id="c0b7a-285">例如，如果中位于 `index` `s` 的字符为 "5"，则返回值为5。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-285">For example, if the character at position `index` in `s` is "5", the return value is 5.</span></span> <span data-ttu-id="c0b7a-286">但是，如果位于 `s` 中位置 `index` 的字符为 "z"，则返回值为-1。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-286">However, if the character at position `index` in `s` is "z", the return value is -1.</span></span>

 <span data-ttu-id="c0b7a-287">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-287">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-288">当且仅当字符是以下 <xref:System.Globalization.UnicodeCategory> 类别之一的成员时，它具有关联的数值： `DecimalDigitNumber`、`LetterNumber`或 `OtherNumber`。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-288">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>

 <span data-ttu-id="c0b7a-289">如果位置 `index` 的 <xref:System.Char> 对象是有效代理项对中的第一个字符，则 <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> 方法将确定代理项对是否构成数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-289">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="c0b7a-290">例如，爱琴大学编号系统由代码点 U + 10107 到 U + 10133 组成。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-290">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="c0b7a-291">下面的示例使用 <xref:System.Char.ConvertFromUtf32%2A> 方法来实例化表示每个爱琴大学数的字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-291">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number.</span></span> <span data-ttu-id="c0b7a-292">如示例中的输出所示，如果向传递了爱琴大学数字的高代理项，则 <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> 方法将返回正确的数字值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-292">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number.</span></span> <span data-ttu-id="c0b7a-293">但是，如果将其传递到低代理项，则它仅考虑隔离中的低代理项，并返回-1。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-293">However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</span></span>

 [!code-csharp[System.Char.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#3)]
 [!code-vb[System.Char.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#3)]



## Examples
 <span data-ttu-id="c0b7a-294">下面的代码示例演示 <xref:System.Char.GetNumericValue%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-294">The following code example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>

 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-295"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-295"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-296"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-296"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="char.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0b7a-297">返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Char" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-297">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-298">枚举常数 <see cref="F:System.TypeCode.Char" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-298">The enumerated constant, <see cref="F:System.TypeCode.Char" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-299">将 Unicode 字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值标识的组中。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-299">Categorizes a Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (c As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char c);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-300">要分类的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-300">The Unicode character to categorize.</span></span></param>
        <summary><span data-ttu-id="c0b7a-301">将指定的 Unicode 字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值标识的组中。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-301">Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-302">一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值，它标识包含 <paramref name="c" /> 的组。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-302">A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-303">将特定字符作为参数传递时，<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 方法不会始终返回与 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> 方法相同的 <xref:System.Globalization.UnicodeCategory> 值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-303">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="c0b7a-304"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> 方法旨在反映 Unicode 标准的当前版本。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-304">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="c0b7a-305">相反，尽管 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 方法通常反映 Unicode 标准的当前版本，但它可能会根据标准版的以前版本返回字符类别，或返回与当前标准不同的类别，以便保留向后兼容性。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-305">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="c0b7a-306">因此，建议使用 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> 方法，而不是 <xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-306">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="c0b7a-307">从 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]开始，将根据[Unicode 标准版本 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)对 unicode 字符进行分类。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-307">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="c0b7a-308">在从 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 到 [!INCLUDE[net_v461](~/includes/net-v461-md.md)]的 .NET Framework 版本中，将根据[Unicode 标准版本 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)进行分类。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-308">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>



## Examples
 <span data-ttu-id="c0b7a-309">下面的代码示例演示 <xref:System.Char.GetUnicodeCategory%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-309">The following code example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>

 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)" />
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-310">一个 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-310">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-311"><paramref name="s" /> 中的字符位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-311">The character position in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-312">将指定字符串中位于指定位置的字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值标识的组中。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-312">Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-313">一个 <see cref="T:System.Globalization.UnicodeCategory" /> 枚举常数，标识包含 <paramref name="index" /> 中位于 <paramref name="s" /> 处的字符的组。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-313">A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-314">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-314">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-315">将特定字符作为参数传递时，<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 方法不会始终返回与 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 方法相同的 <xref:System.Globalization.UnicodeCategory> 值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-315">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="c0b7a-316"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 方法旨在反映 Unicode 标准的当前版本。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-316">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="c0b7a-317">相反，尽管 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 方法通常反映 Unicode 标准的当前版本，但它可能会根据标准版的以前版本返回字符类别，或返回与当前标准不同的类别，以便保留向后兼容性。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-317">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="c0b7a-318">因此，建议使用 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> 方法，而不是 <xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-318">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="c0b7a-319">从 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]开始，将根据[Unicode 标准版本 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)对 unicode 字符进行分类。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-319">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="c0b7a-320">在从 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 到 [!INCLUDE[net_v461](~/includes/net-v461-md.md)]的 .NET Framework 版本中，将根据[Unicode 标准版本 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)进行分类。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-320">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>



## Examples
 <span data-ttu-id="c0b7a-321">下面的示例演示 <xref:System.Char.GetUnicodeCategory%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-321">The following example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>

 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-322"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-322"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-323"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-323"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsControl">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-324">指示指定的 Unicode 字符是否属于控制字符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-324">Indicates whether a specified Unicode character is categorized as a control character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-325">控制字符是格式设置和其他非打印字符，如 ACK、BELOW、CR、FF、LF 和 VT。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-325">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="c0b7a-326">Unicode 标准将从 \U0000 到 \U001F、\U007F 和从 \U0080 到 \U009F 的代码点分配给控制字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-326">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="c0b7a-327">根据 Unicode 标准，这些值将被解释为控制字符，除非应用程序使用它们。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-327">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="c0b7a-328">有效控制字符是 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-328">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsControl(System.Text.Rune)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(char c);" />
      <MemberSignature Language="F#" Value="static member IsControl : char -&gt; bool" Usage="System.char.IsControl c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-329">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-329">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-330">指示指定的 Unicode 字符是否属于控制字符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-330">Indicates whether the specified Unicode character is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-331">如果 <see langword="true" /> 是控制字符，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-331"><see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[


## Examples
 <span data-ttu-id="c0b7a-332">下面的示例列出了每个控制字符的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-332">The following example lists the Unicode code point of each of the control characters.</span></span>

 [!code-cpp[System.Char.IsControl#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol1.cpp#1)]
 [!code-csharp[System.Char.IsControl#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl1.cs#1)]
 [!code-vb[System.Char.IsControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl1.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsControl : string * int -&gt; bool" Usage="System.char.IsControl (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-333">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-333">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-334"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-334">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-335">指示指定字符串中位于指定位置处的字符是否属于控制字符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-335">Indicates whether the character at the specified position in a specified string is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-336">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个控制字符，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-336"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[


## Examples
 <span data-ttu-id="c0b7a-337">下面的示例对字符串中的字符进行枚举，并确定是否有任何控件字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-337">The following example enumerates the characters in a string and determines whether any are control characters.</span></span>

 [!code-cpp[System.Char.IsControl#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol2.cpp#2)]
 [!code-csharp[System.Char.IsControl#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl2.cs#2)]
 [!code-vb[System.Char.IsControl#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl2.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-338"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-338"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-339"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-339"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-340">指示 Unicode 字符是否属于十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-340">Indicates whether a Unicode character is categorized as a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-341">有效数字是 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-341">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>

## Examples
 <span data-ttu-id="c0b7a-342">下面的代码示例演示 <xref:System.Char.IsDigit%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-342">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp" id="Snippet4":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb" id="Snippet4":::

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsDigit : char -&gt; bool" Usage="System.char.IsDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-343">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-343">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-344">指示指定的 Unicode 字符是否属于十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-344">Indicates whether the specified Unicode character is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-345">如果 <see langword="true" /> 是十进制数，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-345"><see langword="true" /> if <paramref name="c" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-346">此方法确定 <xref:System.Char> 是否为10基数数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-346">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="c0b7a-347">这与 <xref:System.Char.IsNumber%2A>的对比，后者确定 `Char` 是否为任何数值 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-347">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a `Char` is of any numeric Unicode category.</span></span> <span data-ttu-id="c0b7a-348">数字包含字符，如分数、下标、上标、罗马数字、货币分子、encircled 数和特定于脚本的数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-348">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>

 <span data-ttu-id="c0b7a-349">有效数字是 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-349">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsDigit(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsDigit : string * int -&gt; bool" Usage="System.char.IsDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-350">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-350">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-351"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-351">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-352">指示指定字符串中位于指定位置处的字符是否属于十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-352">Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-353">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个十进制数，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-353"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-354">此方法确定 <xref:System.Char> 是否为10基数数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-354">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="c0b7a-355">这与 <xref:System.Char.IsNumber%2A>的对比，后者确定 <xref:System.Char> 是否为任何数值 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-355">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="c0b7a-356">数字包含字符，如分数、下标、上标、罗马数字、货币分子、encircled 数和特定于脚本的数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-356">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>

 <span data-ttu-id="c0b7a-357">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-357">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-358">有效数字是 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-358">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-359"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-359"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-360"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-360"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsHighSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-361">指示指定的 <see cref="T:System.Char" /> 对象是否是一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-361">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : char -&gt; bool" Usage="System.char.IsHighSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-362">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-362">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-363">指示指定的 <see cref="T:System.Char" /> 对象是否是一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-363">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-364">如果 <see langword="true" /> 参数的数值范围是从 U+D800 到 U+DBFF，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-364"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-365">除了使用16位码位来表示单个字符之外，UTF-16 编码还允许使用 2 16 位码位（称为代理项对）表示抽象字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-365">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="c0b7a-366">此对中的第一个元素为高代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-366">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="c0b7a-367">其码位的范围可以是从 U + D800 到 U + DBFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-367">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="c0b7a-368">单个代理项本身不具有任何解释;仅当用作代理项对的一部分时，它才有意义。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-368">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>



## Examples
 <span data-ttu-id="c0b7a-369">下面的代码示例演示 <xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>和 <xref:System.Char.IsSurrogatePair%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-369">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Rune" />
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : string * int -&gt; bool" Usage="System.char.IsHighSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-370">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-370">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-371"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-371">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-372">指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为高代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-372">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-373">如果 <see langword="true" /> 中指定字符的数值范围是从 U+D800 到 U+DBFF，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-373"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-374">`index` 参数是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-374">The `index` parameter is zero-based.</span></span>

 <span data-ttu-id="c0b7a-375">除了使用16位码位来表示单个字符之外，UTF-16 编码还允许使用 2 16 位码位（称为代理项对）表示抽象字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-375">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="c0b7a-376">此对中的第一个元素为高代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-376">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="c0b7a-377">其码位的范围可以是从 U + D800 到 U + DBFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-377">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="c0b7a-378">单个代理项本身不具有任何解释;仅当用作代理项对的一部分时，它才有意义。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-378">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>



## Examples
 <span data-ttu-id="c0b7a-379">下面的代码示例演示 <xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>和 <xref:System.Char.IsSurrogatePair%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-379">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-380"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-380"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-381"><paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-381"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-382">指示 Unicode 字符是否属于 Unicode 字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-382">Indicates whether a Unicode character is categorized as a Unicode letter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-383">此方法确定 <xref:System.Char> 是否为 Unicode 字母的任何类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-383">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="c0b7a-384">Unicode 字母包括：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-384">Unicode letters include the following:</span></span>

-   <span data-ttu-id="c0b7a-385">大写字母，如 U + 0041 （拉丁文大写字母 A）到 U + 005A （拉丁文大写字母 Z）或 U + 0400 （西里尔文大写字母 IE WITH 抑音符）到 U + 042F （西里尔文大写字母 YA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-385">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="c0b7a-386">这些字符是 <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-386">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-387">小写字母，如 U + 0061 （拉丁小写字母 A）到 U + 007A （拉丁文小写字母 Z）或 U + 03AC （带 TONOS 的希腊文小写字母 ALPHA）到 U + 03CE （带 TONOS 的希腊文小写字母 OMEGA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-387">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="c0b7a-388">这些字符是 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-388">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-389">词首字母大写，例如 U + 01C5 （带有小写字母 Z 和抑扬符的拉丁文大写字母 D）或 U + 1FFC （带 PROSGEGRAMMENI 的希腊文大写字母 OMEGA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-389">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="c0b7a-390">这些字符是 <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-390">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-391">修饰符，如 U + 02B0 （修饰符字母小型 H）到 U + 02C1 （修饰符号反向喉塞音符停止）或 U + 1D2C （修饰符字母大写 A）到 U + 1D61 （修饰符字母小写 CHI）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-391">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="c0b7a-392">这些字符是 <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-392">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-393">其他字母，如 U + 05D0 （希伯来语字母 ALEF）到 U + 05EA （希伯来语字母 TAV）、U + 0621 （阿拉伯文字母喉塞音符）到 U + 063A （阿拉伯字母 GHAIN）或 U + 4E00 （\<CJK 象形字，First >）到 U + 9FC3 （\<CJK 表意字符，最后 >）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-393">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="c0b7a-394">这些字符是 <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-394">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetter : char -&gt; bool" Usage="System.char.IsLetter c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-395">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-395">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-396">指示指定的 Unicode 字符是否属于 Unicode 字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-396">Indicates whether the specified Unicode character is categorized as a Unicode letter.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-397">如果 <see langword="true" /> 是一个字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-397"><see langword="true" /> if <paramref name="c" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-398">此方法确定 <xref:System.Char> 是否为 Unicode 字母的任何类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-398">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="c0b7a-399">Unicode 字母包括：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-399">Unicode letters include the following:</span></span>

-   <span data-ttu-id="c0b7a-400">大写字母，如 U + 0041 （拉丁文大写字母 A）到 U + 005A （拉丁文大写字母 Z）或 U + 0400 （西里尔文大写字母 IE WITH 抑音符）到 U + 042F （西里尔文大写字母 YA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-400">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="c0b7a-401">这些字符是 <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-401">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-402">小写字母，如 U + 0061 （拉丁小写字母 A）到 U + 007A （拉丁文小写字母 Z）或 U + 03AC （带 TONOS 的希腊文小写字母 ALPHA）到 U + 03CE （带 TONOS 的希腊文小写字母 OMEGA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-402">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="c0b7a-403">这些字符是 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-403">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-404">词首字母大写，例如 U + 01C5 （带有小写字母 Z 和抑扬符的拉丁文大写字母 D）或 U + 1FFC （带 PROSGEGRAMMENI 的希腊文大写字母 OMEGA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-404">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="c0b7a-405">这些字符是 <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-405">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-406">修饰符，如 U + 02B0 （修饰符字母小型 H）到 U + 02C1 （修饰符号反向喉塞音符停止）或 U + 1D2C （修饰符字母大写 A）到 U + 1D61 （修饰符字母小写 CHI）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-406">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="c0b7a-407">这些字符是 <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-407">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-408">其他字母，如 U + 05D0 （希伯来语字母 ALEF）到 U + 05EA （希伯来语字母 TAV）、U + 0621 （阿拉伯文字母喉塞音符）到 U + 063A （阿拉伯字母 GHAIN）或 U + 4E00 （\<CJK 象形字，First >）到 U + 9FC3 （\<CJK 表意字符，最后 >）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-408">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="c0b7a-409">这些字符是 <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-409">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>



## Examples
 <span data-ttu-id="c0b7a-410">下面的代码示例演示 <xref:System.Char.IsLetter%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-410">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>

 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsLetter(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetter : string * int -&gt; bool" Usage="System.char.IsLetter (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-411">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-411">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-412"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-412">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-413">指示指定字符串中位于指定位置处的指定字符串是否属于 Unicode 字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-413">Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-414">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-414"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-415">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-415">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-416">此方法确定字符串中位于指定索引位置处的字符是否为 Unicode 字母的任何类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-416">This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter.</span></span> <span data-ttu-id="c0b7a-417">Unicode 字母包括：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-417">Unicode letters include the following:</span></span>

-   <span data-ttu-id="c0b7a-418">大写字母，如 U + 0041 （拉丁文大写字母 A）到 U + 005A （拉丁文大写字母 Z）或 U + 0400 （西里尔文大写字母 IE WITH 抑音符）到 U + 042F （西里尔文大写字母 YA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-418">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="c0b7a-419">这些字符是 <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-419">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-420">小写字母，如 U + 0061 （拉丁小写字母 A）到 U + 007A （拉丁文小写字母 Z）或 U + 03AC （带 TONOS 的希腊文小写字母 ALPHA）到 U + 03CE （带 TONOS 的希腊文小写字母 OMEGA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-420">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="c0b7a-421">这些字符是 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-421">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-422">词首字母大写，例如 U + 01C5 （带有小写字母 Z 和抑扬符的拉丁文大写字母 D）或 U + 1FFC （带 PROSGEGRAMMENI 的希腊文大写字母 OMEGA）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-422">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="c0b7a-423">这些字符是 <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-423">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-424">修饰符，如 U + 02B0 （修饰符字母小型 H）到 U + 02C1 （修饰符号反向喉塞音符停止）或 U + 1D2C （修饰符字母大写 A）到 U + 1D61 （修饰符字母小写 CHI）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-424">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="c0b7a-425">这些字符是 <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-425">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="c0b7a-426">其他字母，如 U + 05D0 （希伯来语字母 ALEF）到 U + 05EA （希伯来语字母 TAV）、U + 0621 （阿拉伯文字母喉塞音符）到 U + 063A （阿拉伯字母 GHAIN）或 U + 4E00 （\<CJK 象形字，First >）到 U + 9FC3 （\<CJK 表意字符，最后 >）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-426">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="c0b7a-427">这些字符是 <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-427">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>



## Examples
 <span data-ttu-id="c0b7a-428">下面的代码示例演示 <xref:System.Char.IsLetter%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-428">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>

 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-429"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-429"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-430"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-430"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetterOrDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-431">指示 Unicode 字符是否属于字母或十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-431">Indicates whether a Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-432">有效字母和十进制数字是 <xref:System.Globalization.UnicodeCategory>： `UppercaseLetter`、`LowercaseLetter`、`TitlecaseLetter`、`ModifierLetter`、`OtherLetter`或 `DecimalDigitNumber`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-432">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : char -&gt; bool" Usage="System.char.IsLetterOrDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-433">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-433">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-434">指示指定的 Unicode 字符是否属于字母或十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-434">Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-435">如果 <see langword="true" /> 是字母或十进制数，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-435"><see langword="true" /> if <paramref name="c" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-436">有效字母和十进制数字是 <xref:System.Globalization.UnicodeCategory>： `UppercaseLetter`、`LowercaseLetter`、`TitlecaseLetter`、`ModifierLetter`、`OtherLetter`或 `DecimalDigitNumber`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-436">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>



## Examples
 <span data-ttu-id="c0b7a-437">下面的代码示例演示 <xref:System.Char.IsLetterOrDigit%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-437">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>

 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsLetterOrDigit(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : string * int -&gt; bool" Usage="System.char.IsLetterOrDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-438">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-438">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-439"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-439">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-440">指示指定字符串中位于指定位置处的字符是否属于字母或十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-440">Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-441">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个字母或十进制数，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-441"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-442">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-442">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-443">有效字母和十进制数字是 <xref:System.Globalization.UnicodeCategory>： `UppercaseLetter`、`LowercaseLetter`、`TitlecaseLetter`、`ModifierLetter`、`OtherLetter`或 `DecimalDigitNumber`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-443">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>



## Examples
 <span data-ttu-id="c0b7a-444">下面的代码示例演示 <xref:System.Char.IsLetterOrDigit%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-444">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>

 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-445"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-445"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-446"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-446"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-447">指示 Unicode 字符是否属于小写字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-447">Indicates whether a Unicode character is categorized as a lowercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(char c);" />
      <MemberSignature Language="F#" Value="static member IsLower : char -&gt; bool" Usage="System.char.IsLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-448">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-448">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-449">指示指定的 Unicode 字符是否属于小写字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-449">Indicates whether the specified Unicode character is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-450">如果 <see langword="true" /> 是一个小写字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-450"><see langword="true" /> if <paramref name="c" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-451">有效的小写字母是 <xref:System.Globalization.UnicodeCategory>： `LowercaseLetter`中以下类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-451">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>



## Examples
 <span data-ttu-id="c0b7a-452">下面的代码示例演示 <xref:System.Char.IsLower%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-452">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>

 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsLower(System.Text.Rune)" />
        <altmember cref="M:System.Text.Rune.IsUpper(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLower : string * int -&gt; bool" Usage="System.char.IsLower (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-453">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-453">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-454"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-454">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-455">指示指定字符串中位于指定位置处的字符是否属于小写字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-455">Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-456">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个小写字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-456"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-457">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-457">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-458">有效的小写字母是 <xref:System.Globalization.UnicodeCategory>： `LowercaseLetter`中以下类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-458">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>



## Examples
 <span data-ttu-id="c0b7a-459">下面的代码示例演示 <xref:System.Char.IsLower%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-459">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>

 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-460"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-460"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-461"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-461"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLowSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-462">指示指定的 <see cref="T:System.Char" /> 对象是否是一个低代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-462">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : char -&gt; bool" Usage="System.char.IsLowSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-463">要计算的字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-463">The character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-464">指示指定的 <see cref="T:System.Char" /> 对象是否是一个低代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-464">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-465">如果 <see langword="true" /> 参数的数值范围是从 U+DC00 到 U+DFFF，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-465"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-466">除了使用16位码位来表示单个字符之外，UTF-16 编码还允许使用 2 16 位码位（称为代理项对）表示抽象字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-466">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="c0b7a-467">此对中的第二个元素是低代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-467">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="c0b7a-468">其码位的范围可以是从 U + DC00 到 U + DFFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-468">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="c0b7a-469">单个代理项本身不具有任何解释;仅当用作代理项对的一部分时，它才有意义。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-469">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>



## Examples
 <span data-ttu-id="c0b7a-470">下面的代码示例演示 <xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>和 <xref:System.Char.IsSurrogatePair%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-470">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Rune" />
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : string * int -&gt; bool" Usage="System.char.IsLowSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-471">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-471">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-472"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-472">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-473">指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为低代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-473">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-474">如果 <see langword="true" /> 中指定字符的数值范围是从 U+DC00 到 U+DFFF，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-474"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-475">`index` 参数是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-475">The `index` parameter is zero-based.</span></span>

 <span data-ttu-id="c0b7a-476">除了使用16位码位来表示单个字符之外，UTF-16 编码还允许使用 2 16 位码位（称为代理项对）表示抽象字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-476">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="c0b7a-477">此对中的第二个元素是低代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-477">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="c0b7a-478">其码位的范围可以是从 U + DC00 到 U + DFFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-478">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="c0b7a-479">单个代理项本身不具有任何解释;仅当用作代理项对的一部分时，它才有意义。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-479">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>



## Examples
 <span data-ttu-id="c0b7a-480">下面的代码示例演示 <xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>和 <xref:System.Char.IsSurrogatePair%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-480">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-481"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-481"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-482"><paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-482"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNumber">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-483">指示 Unicode 字符是否属于数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-483">Indicates whether a Unicode character is categorized as a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(char c);" />
      <MemberSignature Language="F#" Value="static member IsNumber : char -&gt; bool" Usage="System.char.IsNumber c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-484">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-484">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-485">指示指定的 Unicode 字符是否属于数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-485">Indicates whether the specified Unicode character is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-486">如果 <see langword="true" /> 是一个数字，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-486"><see langword="true" /> if <paramref name="c" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-487">此方法确定 <xref:System.Char> 是否是任何数值 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-487">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="c0b7a-488">除了包含数字以外，数字还包括字符、分数、下标、上标、罗马数字、货币分子和 encircled 数。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-488">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="c0b7a-489">此方法与 <xref:System.Char.IsDigit%2A> 方法进行了对比，后者确定 <xref:System.Char> 是否为10基数数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-489">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="c0b7a-490"><xref:System.Char.IsNumber%28System.Char%29> 方法不用于确定字符串是否包含数字字符（例如，通过对字符串中的每个字符调用方法）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-490">The <xref:System.Char.IsNumber%28System.Char%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="c0b7a-491">若要确定字符串是否包含数字字符，请调用 `TryParse` 方法的重载之一（如 <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> 或整数或浮点类型的 <xref:System.Double.TryParse%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-491">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>

 <span data-ttu-id="c0b7a-492">有效数字是 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>、<xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>或 <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-492">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>

 <span data-ttu-id="c0b7a-493"><xref:System.Char.IsNumber%28System.Char%29> 方法假定 `c` 对应于单个语言字符，并检查该字符是否表示数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-493">The <xref:System.Char.IsNumber%28System.Char%29> method assumes that `c` corresponds to a single linguistic character and checks whether that character represents a number.</span></span> <span data-ttu-id="c0b7a-494">但 Unicode 标准中的一些数字由两个构成代理项对的 <xref:System.Char> 对象表示。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-494">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="c0b7a-495">例如，爱琴大学编号系统由代码点 U + 10107 到 U + 10133 组成。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-495">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="c0b7a-496">下面的示例使用 <xref:System.Char.ConvertFromUtf32%2A> 方法来实例化表示爱琴大学1的字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-496">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="c0b7a-497">如示例的输出所示，如果传递给此字符的高代理项或低代理项，则 <xref:System.Char.IsNumber%28System.Char%29> 方法返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-497">As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either a high surrogate or a low surrogate of this character.</span></span>

 [!code-csharp[System.Char.IsNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#1)]
 [!code-vb[System.Char.IsNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#1)]



## Examples
 <span data-ttu-id="c0b7a-498">下面的示例演示 <xref:System.Char.IsNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-498">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>

 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsNumber(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsNumber : string * int -&gt; bool" Usage="System.char.IsNumber (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-499">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-499">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-500"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-500">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-501">指示指定字符串中位于指定位置的字符是否属于数字类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-501">Indicates whether the character at the specified position in a specified string is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-502">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个数字，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-502"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-503">此方法确定 <xref:System.Char> 是否是任何数值 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-503">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="c0b7a-504">除了包含数字以外，数字还包括字符、分数、下标、上标、罗马数字、货币分子和 encircled 数。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-504">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="c0b7a-505">此方法与 <xref:System.Char.IsDigit%2A> 方法进行了对比，后者确定 <xref:System.Char> 是否为10基数数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-505">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>

 <span data-ttu-id="c0b7a-506">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-506">Character positions in a string are indexed starting from zero.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="c0b7a-507"><xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> 方法不用于确定字符串是否包含数字字符（例如，通过对字符串中的每个字符调用方法）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-507">The <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="c0b7a-508">若要确定字符串是否包含数字字符，请调用 `TryParse` 方法的重载之一（如 <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> 或整数或浮点类型的 <xref:System.Double.TryParse%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-508">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>

 <span data-ttu-id="c0b7a-509">有效数字是 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>、<xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>或 <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> 类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-509">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>

 <span data-ttu-id="c0b7a-510">如果位置 `index` 的 <xref:System.Char> 对象是有效代理项对中的第一个字符，则 <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> 方法将确定代理项对是否构成数字。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-510">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="c0b7a-511">例如，爱琴大学编号系统由代码点 U + 10107 到 U + 10133 组成。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-511">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="c0b7a-512">下面的示例使用 <xref:System.Char.ConvertFromUtf32%2A> 方法来实例化表示爱琴大学1的字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-512">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="c0b7a-513">如示例的输出所示，如果向传递了爱琴大学 NUMBER ONE 的高代理项，则 <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> 方法返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-513">As the output from the example shows, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method returns `true` if it is passed the high surrogate of AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="c0b7a-514">但是，如果将其传递到低代理项，则只考虑低代理项的类别，并返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-514">However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns `false`.</span></span>

 [!code-csharp[System.Char.IsNumber#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#2)]
 [!code-vb[System.Char.IsNumber#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#2)]



## Examples
 <span data-ttu-id="c0b7a-515">下面的示例演示 <xref:System.Char.IsNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-515">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>

 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-516"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-516"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-517"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-517"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPunctuation">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-518">指示 Unicode 字符是否属于标点符号类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-518">Indicates whether a Unicode character is categorized as a punctuation mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-519">有效的标点符号是 <xref:System.Globalization.UnicodeCategory>： `ConnectorPunctuation`、`DashPunctuation`、`OpenPunctuation`、`ClosePunctuation`、`InitialQuotePunctuation`、`FinalQuotePunctuation`或 `OtherPunctuation`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-519">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="c0b7a-520">其中包含下表中列出的 Unicode 码位的字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-520">They include characters with the Unicode code points listed in the following table.</span></span>

|||||
|-|-|-|-|
|<span data-ttu-id="c0b7a-521">U + 0021 到 U + 0023</span><span class="sxs-lookup"><span data-stu-id="c0b7a-521">U+0021 to U+0023</span></span>|<span data-ttu-id="c0b7a-522">U + 060C 和 U + 060D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-522">U+060C and U+060D</span></span>|<span data-ttu-id="c0b7a-523">U + 1800 到 U + 180A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-523">U+1800 to U+180A</span></span>|<span data-ttu-id="c0b7a-524">U + 3014 到 U + 301F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-524">U+3014 to U+301F</span></span>|
|<span data-ttu-id="c0b7a-525">U + 0025 到 U + 002A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-525">U+0025 to U+002A</span></span>|<span data-ttu-id="c0b7a-526">U+061B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-526">U+061B</span></span>|<span data-ttu-id="c0b7a-527">U + 1944 和 U + 1945</span><span class="sxs-lookup"><span data-stu-id="c0b7a-527">U+1944 and U+1945</span></span>|<span data-ttu-id="c0b7a-528">U+3030</span><span class="sxs-lookup"><span data-stu-id="c0b7a-528">U+3030</span></span>|
|<span data-ttu-id="c0b7a-529">U + 002C 到 U + 002F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-529">U+002C to U+002F</span></span>|<span data-ttu-id="c0b7a-530">U + 061E 和 U + 061F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-530">U+061E and U+061F</span></span>|<span data-ttu-id="c0b7a-531">U + 19DE 和 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-531">U+19DE and U+19DF</span></span>|<span data-ttu-id="c0b7a-532">U+303D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-532">U+303D</span></span>|
|<span data-ttu-id="c0b7a-533">U + 003A 和 U + 003B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-533">U+003A and U+003B</span></span>|<span data-ttu-id="c0b7a-534">U + 066A 到 U + 066D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-534">U+066A to U+066D</span></span>|<span data-ttu-id="c0b7a-535">U + 1A1E 和 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-535">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="c0b7a-536">U+30A0</span><span class="sxs-lookup"><span data-stu-id="c0b7a-536">U+30A0</span></span>|
|<span data-ttu-id="c0b7a-537">U + 003F 和 U + 0040</span><span class="sxs-lookup"><span data-stu-id="c0b7a-537">U+003F and U+0040</span></span>|<span data-ttu-id="c0b7a-538">U+06D4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-538">U+06D4</span></span>|<span data-ttu-id="c0b7a-539">U + 1B5A 到 U + 1B60</span><span class="sxs-lookup"><span data-stu-id="c0b7a-539">U+1B5A to U+1B60</span></span>|<span data-ttu-id="c0b7a-540">U+30FB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-540">U+30FB</span></span>|
|<span data-ttu-id="c0b7a-541">U + 005B 到 U + 005D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-541">U+005B to U+005D</span></span>|<span data-ttu-id="c0b7a-542">U + 0700 到 U + 070D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-542">U+0700 to U+070D</span></span>|<span data-ttu-id="c0b7a-543">U + 2010 到 U + 2027</span><span class="sxs-lookup"><span data-stu-id="c0b7a-543">U+2010 to U+2027</span></span>|<span data-ttu-id="c0b7a-544">U + A874 到 U + A877</span><span class="sxs-lookup"><span data-stu-id="c0b7a-544">U+A874 to U+A877</span></span>|
|<span data-ttu-id="c0b7a-545">U+005F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-545">U+005F</span></span>|<span data-ttu-id="c0b7a-546">U + 07F7 到 U + 07F9</span><span class="sxs-lookup"><span data-stu-id="c0b7a-546">U+07F7 to U+07F9</span></span>|<span data-ttu-id="c0b7a-547">U + 2030 到 U + 2043</span><span class="sxs-lookup"><span data-stu-id="c0b7a-547">U+2030 to U+2043</span></span>|<span data-ttu-id="c0b7a-548">U + FD3E 和 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-548">U+FD3E and U+FD3F</span></span>|
|<span data-ttu-id="c0b7a-549">U+007B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-549">U+007B</span></span>|<span data-ttu-id="c0b7a-550">U + 0964 和 U + 0965</span><span class="sxs-lookup"><span data-stu-id="c0b7a-550">U+0964 and U+0965</span></span>|<span data-ttu-id="c0b7a-551">U + 2045 到 U + 2051</span><span class="sxs-lookup"><span data-stu-id="c0b7a-551">U+2045 to U+2051</span></span>|<span data-ttu-id="c0b7a-552">U + FE10 到 U + FE19</span><span class="sxs-lookup"><span data-stu-id="c0b7a-552">U+FE10 to U+FE19</span></span>|
|<span data-ttu-id="c0b7a-553">U+007D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-553">U+007D</span></span>|<span data-ttu-id="c0b7a-554">U+0970</span><span class="sxs-lookup"><span data-stu-id="c0b7a-554">U+0970</span></span>|<span data-ttu-id="c0b7a-555">U + 2053 到 U + 205E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-555">U+2053 to U+205E</span></span>|<span data-ttu-id="c0b7a-556">U + FE30 到 U + FE52</span><span class="sxs-lookup"><span data-stu-id="c0b7a-556">U+FE30 to U+FE52</span></span>|
|<span data-ttu-id="c0b7a-557">U+00A1</span><span class="sxs-lookup"><span data-stu-id="c0b7a-557">U+00A1</span></span>|<span data-ttu-id="c0b7a-558">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-558">U+0DF4</span></span>|<span data-ttu-id="c0b7a-559">U + 207D 和 U + 207E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-559">U+207D and  U+207E</span></span>|<span data-ttu-id="c0b7a-560">U + FE54 到 U + FE61</span><span class="sxs-lookup"><span data-stu-id="c0b7a-560">U+FE54 to U+FE61</span></span>|
|<span data-ttu-id="c0b7a-561">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-561">U+00AB</span></span>|<span data-ttu-id="c0b7a-562">U + 0E4F 到 U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-562">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="c0b7a-563">U + 208D 和 U + 208E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-563">U+208D and U+208E</span></span>|<span data-ttu-id="c0b7a-564">U+FE63</span><span class="sxs-lookup"><span data-stu-id="c0b7a-564">U+FE63</span></span>|
|<span data-ttu-id="c0b7a-565">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="c0b7a-565">U+00AD</span></span>|<span data-ttu-id="c0b7a-566">U + 0F04 到 U + 0F12</span><span class="sxs-lookup"><span data-stu-id="c0b7a-566">U+0F04 to U+0F12</span></span>|<span data-ttu-id="c0b7a-567">U + 2329 和 U + 232A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-567">U+2329 and U+232A</span></span>|<span data-ttu-id="c0b7a-568">U+FE68</span><span class="sxs-lookup"><span data-stu-id="c0b7a-568">U+FE68</span></span>|
|<span data-ttu-id="c0b7a-569">U+00B7</span><span class="sxs-lookup"><span data-stu-id="c0b7a-569">U+00B7</span></span>|<span data-ttu-id="c0b7a-570">U + 0F3A 到 U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-570">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="c0b7a-571">U + 2768 到 U + 2775</span><span class="sxs-lookup"><span data-stu-id="c0b7a-571">U+2768 to U+2775</span></span>|<span data-ttu-id="c0b7a-572">U + FE6A 和 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-572">U+FE6A and U+FE6B</span></span>|
|<span data-ttu-id="c0b7a-573">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-573">U+00BB</span></span>|<span data-ttu-id="c0b7a-574">U+0F85</span><span class="sxs-lookup"><span data-stu-id="c0b7a-574">U+0F85</span></span>|<span data-ttu-id="c0b7a-575">U + 27C5 到 U + 27C6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-575">U+27C5 to U+27C6</span></span>|<span data-ttu-id="c0b7a-576">U + FF01 到 U + FF03</span><span class="sxs-lookup"><span data-stu-id="c0b7a-576">U+FF01 to U+FF03</span></span>|
|<span data-ttu-id="c0b7a-577">U+00BF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-577">U+00BF</span></span>|<span data-ttu-id="c0b7a-578">U + 0FD0 和 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="c0b7a-578">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="c0b7a-579">U + 27E6 到 U + 27EB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-579">U+27E6 to U+27EB</span></span>|<span data-ttu-id="c0b7a-580">U + FF05 到 U + FF0A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-580">U+FF05 to U+FF0A</span></span>|
|<span data-ttu-id="c0b7a-581">U+037E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-581">U+037E</span></span>|<span data-ttu-id="c0b7a-582">U + 104A 到 U + 104F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-582">U+104A to U+104F</span></span>|<span data-ttu-id="c0b7a-583">U + 2983 到 U + 2998</span><span class="sxs-lookup"><span data-stu-id="c0b7a-583">U+2983 to U+2998</span></span>|<span data-ttu-id="c0b7a-584">U + FF0C 到 U + FF0F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-584">U+FF0C to U+FF0F</span></span>|
|<span data-ttu-id="c0b7a-585">U+0387</span><span class="sxs-lookup"><span data-stu-id="c0b7a-585">U+0387</span></span>|<span data-ttu-id="c0b7a-586">U+10FB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-586">U+10FB</span></span>|<span data-ttu-id="c0b7a-587">U + 29D8 到 U + 29DB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-587">U+29D8 to U+29DB</span></span>|<span data-ttu-id="c0b7a-588">U + FF1A 和 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-588">U+FF1A and U+FF1B</span></span>|
|<span data-ttu-id="c0b7a-589">U + 055A 到 U + 055F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-589">U+055A to U+055F</span></span>|<span data-ttu-id="c0b7a-590">U + 1361 到 U + 1368</span><span class="sxs-lookup"><span data-stu-id="c0b7a-590">U+1361 to U+1368</span></span>|<span data-ttu-id="c0b7a-591">U + 29FC 和 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="c0b7a-591">U+29FC and U+29FD</span></span>|<span data-ttu-id="c0b7a-592">U + FF1F 和 U + FF20</span><span class="sxs-lookup"><span data-stu-id="c0b7a-592">U+FF1F and U+FF20</span></span>|
|<span data-ttu-id="c0b7a-593">U + 0589 和 U + 058A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-593">U+0589 and U+058A</span></span>|<span data-ttu-id="c0b7a-594">U + 166D 和 U + 166E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-594">U+166D and U+166E</span></span>|<span data-ttu-id="c0b7a-595">U + 2CF9 到 U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="c0b7a-595">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="c0b7a-596">U + FF3B 到 U + FF3D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-596">U+FF3B to U+FF3D</span></span>|
|<span data-ttu-id="c0b7a-597">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="c0b7a-597">U+05BE</span></span>|<span data-ttu-id="c0b7a-598">U + 169B 和 U + 169C</span><span class="sxs-lookup"><span data-stu-id="c0b7a-598">U+169B and U+169C</span></span>|<span data-ttu-id="c0b7a-599">U + 2CFE 和 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-599">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="c0b7a-600">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-600">U+FF3F</span></span>|
|<span data-ttu-id="c0b7a-601">U+05C0</span><span class="sxs-lookup"><span data-stu-id="c0b7a-601">U+05C0</span></span>|<span data-ttu-id="c0b7a-602">U + 16EB 到 U + 16ED</span><span class="sxs-lookup"><span data-stu-id="c0b7a-602">U+16EB to U+16ED</span></span>|<span data-ttu-id="c0b7a-603">U + 2E00 到 U + 2E17</span><span class="sxs-lookup"><span data-stu-id="c0b7a-603">U+2E00 to U+2E17</span></span>|<span data-ttu-id="c0b7a-604">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-604">U+FF5B</span></span>|
|<span data-ttu-id="c0b7a-605">U+05C3</span><span class="sxs-lookup"><span data-stu-id="c0b7a-605">U+05C3</span></span>|<span data-ttu-id="c0b7a-606">U + 1735 和 U + 1736</span><span class="sxs-lookup"><span data-stu-id="c0b7a-606">U+1735 and U+1736</span></span>|<span data-ttu-id="c0b7a-607">U + 2E1C 和 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-607">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="c0b7a-608">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-608">U+FF5D</span></span>|
|<span data-ttu-id="c0b7a-609">U+05C6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-609">U+05C6</span></span>|<span data-ttu-id="c0b7a-610">U + 17D4 到 U + 17D6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-610">U+17D4 to U+17D6</span></span>|<span data-ttu-id="c0b7a-611">U + 3001 到 U + 3003</span><span class="sxs-lookup"><span data-stu-id="c0b7a-611">U+3001 to U+3003</span></span>|<span data-ttu-id="c0b7a-612">U + FF5F 到 U + FF65</span><span class="sxs-lookup"><span data-stu-id="c0b7a-612">U+FF5F to U+FF65</span></span>|
|<span data-ttu-id="c0b7a-613">U + 05F3 和 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-613">U+05F3 and U+05F4</span></span>|<span data-ttu-id="c0b7a-614">U + 17D8 到 U + 17DA</span><span class="sxs-lookup"><span data-stu-id="c0b7a-614">U+17D8 to U+17DA</span></span>|<span data-ttu-id="c0b7a-615">U + 3008 到 U + 3011</span><span class="sxs-lookup"><span data-stu-id="c0b7a-615">U+3008 to U+3011</span></span>||

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(char c);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : char -&gt; bool" Usage="System.char.IsPunctuation c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-616">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-616">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-617">指示指定的 Unicode 字符是否属于标点符号类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-617">Indicates whether the specified Unicode character is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-618">如果 <see langword="true" /> 是一个标点符号，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-618"><see langword="true" /> if <paramref name="c" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-619">有效的标点符号是 <xref:System.Globalization.UnicodeCategory>： `ConnectorPunctuation`、`DashPunctuation`、`OpenPunctuation`、`ClosePunctuation`、`InitialQuotePunctuation`、`FinalQuotePunctuation`或 `OtherPunctuation`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-619">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="c0b7a-620">其中包含下表中列出的 Unicode 码位的字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-620">They include characters with the Unicode code points listed in the following table.</span></span>

|||||
|-|-|-|-|
|<span data-ttu-id="c0b7a-621">U + 0021 到 U + 0023</span><span class="sxs-lookup"><span data-stu-id="c0b7a-621">U+0021 to U+0023</span></span>|<span data-ttu-id="c0b7a-622">U + 060C 和 U + 060D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-622">U+060C and U+060D</span></span>|<span data-ttu-id="c0b7a-623">U + 1800 到 U + 180A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-623">U+1800 to U+180A</span></span>|<span data-ttu-id="c0b7a-624">U + 3014 到 U + 301F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-624">U+3014 to U+301F</span></span>|
|<span data-ttu-id="c0b7a-625">U + 0025 到 U + 002A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-625">U+0025 to U+002A</span></span>|<span data-ttu-id="c0b7a-626">U+061B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-626">U+061B</span></span>|<span data-ttu-id="c0b7a-627">U + 1944 和 U + 1945</span><span class="sxs-lookup"><span data-stu-id="c0b7a-627">U+1944 and U+1945</span></span>|<span data-ttu-id="c0b7a-628">U+3030</span><span class="sxs-lookup"><span data-stu-id="c0b7a-628">U+3030</span></span>|
|<span data-ttu-id="c0b7a-629">U + 002C 到 U + 002F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-629">U+002C to U+002F</span></span>|<span data-ttu-id="c0b7a-630">U + 061E 和 U + 061F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-630">U+061E and U+061F</span></span>|<span data-ttu-id="c0b7a-631">U + 19DE 和 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-631">U+19DE and U+19DF</span></span>|<span data-ttu-id="c0b7a-632">U+303D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-632">U+303D</span></span>|
|<span data-ttu-id="c0b7a-633">U + 003A 和 U + 003B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-633">U+003A and U+003B</span></span>|<span data-ttu-id="c0b7a-634">U + 066A 到 U + 066D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-634">U+066A to U+066D</span></span>|<span data-ttu-id="c0b7a-635">U + 1A1E 和 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-635">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="c0b7a-636">U+30A0</span><span class="sxs-lookup"><span data-stu-id="c0b7a-636">U+30A0</span></span>|
|<span data-ttu-id="c0b7a-637">U + 003F 和 U + 0040</span><span class="sxs-lookup"><span data-stu-id="c0b7a-637">U+003F and U+0040</span></span>|<span data-ttu-id="c0b7a-638">U+06D4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-638">U+06D4</span></span>|<span data-ttu-id="c0b7a-639">U + 1B5A 到 U + 1B60</span><span class="sxs-lookup"><span data-stu-id="c0b7a-639">U+1B5A to U+1B60</span></span>|<span data-ttu-id="c0b7a-640">U+30FB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-640">U+30FB</span></span>|
|<span data-ttu-id="c0b7a-641">U + 005B 到 U + 005D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-641">U+005B to U+005D</span></span>|<span data-ttu-id="c0b7a-642">U + 0700 到 U + 070D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-642">U+0700 to U+070D</span></span>|<span data-ttu-id="c0b7a-643">U + 2010 到 U + 2027</span><span class="sxs-lookup"><span data-stu-id="c0b7a-643">U+2010 to U+2027</span></span>|<span data-ttu-id="c0b7a-644">U + A874 到 U + A877</span><span class="sxs-lookup"><span data-stu-id="c0b7a-644">U+A874 to U+A877</span></span>|
|<span data-ttu-id="c0b7a-645">U+005F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-645">U+005F</span></span>|<span data-ttu-id="c0b7a-646">U + 07F7 到 U + 07F9</span><span class="sxs-lookup"><span data-stu-id="c0b7a-646">U+07F7 to U+07F9</span></span>|<span data-ttu-id="c0b7a-647">U + 2030 到 U + 2043</span><span class="sxs-lookup"><span data-stu-id="c0b7a-647">U+2030 to U+2043</span></span>|<span data-ttu-id="c0b7a-648">U + FD3E 和 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-648">U+FD3E and U+FD3F</span></span>|
|<span data-ttu-id="c0b7a-649">U+007B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-649">U+007B</span></span>|<span data-ttu-id="c0b7a-650">U + 0964 和 U + 0965</span><span class="sxs-lookup"><span data-stu-id="c0b7a-650">U+0964 and U+0965</span></span>|<span data-ttu-id="c0b7a-651">U + 2045 到 U + 2051</span><span class="sxs-lookup"><span data-stu-id="c0b7a-651">U+2045 to U+2051</span></span>|<span data-ttu-id="c0b7a-652">U + FE10 到 U + FE19</span><span class="sxs-lookup"><span data-stu-id="c0b7a-652">U+FE10 to U+FE19</span></span>|
|<span data-ttu-id="c0b7a-653">U+007D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-653">U+007D</span></span>|<span data-ttu-id="c0b7a-654">U+0970</span><span class="sxs-lookup"><span data-stu-id="c0b7a-654">U+0970</span></span>|<span data-ttu-id="c0b7a-655">U + 2053 到 U + 205E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-655">U+2053 to U+205E</span></span>|<span data-ttu-id="c0b7a-656">U + FE30 到 U + FE52</span><span class="sxs-lookup"><span data-stu-id="c0b7a-656">U+FE30 to U+FE52</span></span>|
|<span data-ttu-id="c0b7a-657">U+00A1</span><span class="sxs-lookup"><span data-stu-id="c0b7a-657">U+00A1</span></span>|<span data-ttu-id="c0b7a-658">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-658">U+0DF4</span></span>|<span data-ttu-id="c0b7a-659">U + 207D 和 U + 207E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-659">U+207D and  U+207E</span></span>|<span data-ttu-id="c0b7a-660">U + FE54 到 U + FE61</span><span class="sxs-lookup"><span data-stu-id="c0b7a-660">U+FE54 to U+FE61</span></span>|
|<span data-ttu-id="c0b7a-661">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-661">U+00AB</span></span>|<span data-ttu-id="c0b7a-662">U + 0E4F 到 U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-662">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="c0b7a-663">U + 208D 和 U + 208E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-663">U+208D and U+208E</span></span>|<span data-ttu-id="c0b7a-664">U+FE63</span><span class="sxs-lookup"><span data-stu-id="c0b7a-664">U+FE63</span></span>|
|<span data-ttu-id="c0b7a-665">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="c0b7a-665">U+00AD</span></span>|<span data-ttu-id="c0b7a-666">U + 0F04 到 U + 0F12</span><span class="sxs-lookup"><span data-stu-id="c0b7a-666">U+0F04 to U+0F12</span></span>|<span data-ttu-id="c0b7a-667">U + 2329 和 U + 232A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-667">U+2329 and U+232A</span></span>|<span data-ttu-id="c0b7a-668">U+FE68</span><span class="sxs-lookup"><span data-stu-id="c0b7a-668">U+FE68</span></span>|
|<span data-ttu-id="c0b7a-669">U+00B7</span><span class="sxs-lookup"><span data-stu-id="c0b7a-669">U+00B7</span></span>|<span data-ttu-id="c0b7a-670">U + 0F3A 到 U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-670">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="c0b7a-671">U + 2768 到 U + 2775</span><span class="sxs-lookup"><span data-stu-id="c0b7a-671">U+2768 to U+2775</span></span>|<span data-ttu-id="c0b7a-672">U + FE6A 和 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-672">U+FE6A and U+FE6B</span></span>|
|<span data-ttu-id="c0b7a-673">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-673">U+00BB</span></span>|<span data-ttu-id="c0b7a-674">U+0F85</span><span class="sxs-lookup"><span data-stu-id="c0b7a-674">U+0F85</span></span>|<span data-ttu-id="c0b7a-675">U + 27C5 到 U + 27C6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-675">U+27C5 to U+27C6</span></span>|<span data-ttu-id="c0b7a-676">U + FF01 到 U + FF03</span><span class="sxs-lookup"><span data-stu-id="c0b7a-676">U+FF01 to U+FF03</span></span>|
|<span data-ttu-id="c0b7a-677">U+00BF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-677">U+00BF</span></span>|<span data-ttu-id="c0b7a-678">U + 0FD0 和 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="c0b7a-678">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="c0b7a-679">U + 27E6 到 U + 27EB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-679">U+27E6 to U+27EB</span></span>|<span data-ttu-id="c0b7a-680">U + FF05 到 U + FF0A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-680">U+FF05 to U+FF0A</span></span>|
|<span data-ttu-id="c0b7a-681">U+037E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-681">U+037E</span></span>|<span data-ttu-id="c0b7a-682">U + 104A 到 U + 104F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-682">U+104A to U+104F</span></span>|<span data-ttu-id="c0b7a-683">U + 2983 到 U + 2998</span><span class="sxs-lookup"><span data-stu-id="c0b7a-683">U+2983 to U+2998</span></span>|<span data-ttu-id="c0b7a-684">U + FF0C 到 U + FF0F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-684">U+FF0C to U+FF0F</span></span>|
|<span data-ttu-id="c0b7a-685">U+0387</span><span class="sxs-lookup"><span data-stu-id="c0b7a-685">U+0387</span></span>|<span data-ttu-id="c0b7a-686">U+10FB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-686">U+10FB</span></span>|<span data-ttu-id="c0b7a-687">U + 29D8 到 U + 29DB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-687">U+29D8 to U+29DB</span></span>|<span data-ttu-id="c0b7a-688">U + FF1A 和 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-688">U+FF1A and U+FF1B</span></span>|
|<span data-ttu-id="c0b7a-689">U + 055A 到 U + 055F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-689">U+055A to U+055F</span></span>|<span data-ttu-id="c0b7a-690">U + 1361 到 U + 1368</span><span class="sxs-lookup"><span data-stu-id="c0b7a-690">U+1361 to U+1368</span></span>|<span data-ttu-id="c0b7a-691">U + 29FC 和 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="c0b7a-691">U+29FC and U+29FD</span></span>|<span data-ttu-id="c0b7a-692">U + FF1F 和 U + FF20</span><span class="sxs-lookup"><span data-stu-id="c0b7a-692">U+FF1F and U+FF20</span></span>|
|<span data-ttu-id="c0b7a-693">U + 0589 和 U + 058A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-693">U+0589 and U+058A</span></span>|<span data-ttu-id="c0b7a-694">U + 166D 和 U + 166E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-694">U+166D and U+166E</span></span>|<span data-ttu-id="c0b7a-695">U + 2CF9 到 U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="c0b7a-695">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="c0b7a-696">U + FF3B 到 U + FF3D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-696">U+FF3B to U+FF3D</span></span>|
|<span data-ttu-id="c0b7a-697">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="c0b7a-697">U+05BE</span></span>|<span data-ttu-id="c0b7a-698">U + 169B 和 U + 169C</span><span class="sxs-lookup"><span data-stu-id="c0b7a-698">U+169B and U+169C</span></span>|<span data-ttu-id="c0b7a-699">U + 2CFE 和 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-699">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="c0b7a-700">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-700">U+FF3F</span></span>|
|<span data-ttu-id="c0b7a-701">U+05C0</span><span class="sxs-lookup"><span data-stu-id="c0b7a-701">U+05C0</span></span>|<span data-ttu-id="c0b7a-702">U + 16EB 到 U + 16ED</span><span class="sxs-lookup"><span data-stu-id="c0b7a-702">U+16EB to U+16ED</span></span>|<span data-ttu-id="c0b7a-703">U + 2E00 到 U + 2E17</span><span class="sxs-lookup"><span data-stu-id="c0b7a-703">U+2E00 to U+2E17</span></span>|<span data-ttu-id="c0b7a-704">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-704">U+FF5B</span></span>|
|<span data-ttu-id="c0b7a-705">U+05C3</span><span class="sxs-lookup"><span data-stu-id="c0b7a-705">U+05C3</span></span>|<span data-ttu-id="c0b7a-706">U + 1735 和 U + 1736</span><span class="sxs-lookup"><span data-stu-id="c0b7a-706">U+1735 and U+1736</span></span>|<span data-ttu-id="c0b7a-707">U + 2E1C 和 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-707">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="c0b7a-708">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-708">U+FF5D</span></span>|
|<span data-ttu-id="c0b7a-709">U+05C6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-709">U+05C6</span></span>|<span data-ttu-id="c0b7a-710">U + 17D4 到 U + 17D6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-710">U+17D4 to U+17D6</span></span>|<span data-ttu-id="c0b7a-711">U + 3001 到 U + 3003</span><span class="sxs-lookup"><span data-stu-id="c0b7a-711">U+3001 to U+3003</span></span>|<span data-ttu-id="c0b7a-712">U + FF5F 到 U + FF65</span><span class="sxs-lookup"><span data-stu-id="c0b7a-712">U+FF5F to U+FF65</span></span>|
|<span data-ttu-id="c0b7a-713">U + 05F3 和 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-713">U+05F3 and U+05F4</span></span>|<span data-ttu-id="c0b7a-714">U + 17D8 到 U + 17DA</span><span class="sxs-lookup"><span data-stu-id="c0b7a-714">U+17D8 to U+17DA</span></span>|<span data-ttu-id="c0b7a-715">U + 3008 到 U + 3011</span><span class="sxs-lookup"><span data-stu-id="c0b7a-715">U+3008 to U+3011</span></span>||



## Examples
 <span data-ttu-id="c0b7a-716">下面的代码示例演示 <xref:System.Char.IsPunctuation%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-716">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>

 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsPunctuation(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : string * int -&gt; bool" Usage="System.char.IsPunctuation (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-717">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-717">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-718"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-718">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-719">指示指定字符串中位于指定位置处的字符是否属于标点符号类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-719">Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-720">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个标点符号，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-720"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-721">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-721">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-722">有效的标点符号是 <xref:System.Globalization.UnicodeCategory>： `ConnectorPunctuation`、`DashPunctuation`、`OpenPunctuation`、`ClosePunctuation`、`InitialQuotePunctuation`、`FinalQuotePunctuation`或 `OtherPunctuation`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-722">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="c0b7a-723">其中包含下表中列出的 Unicode 码位的字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-723">They include characters with the Unicode code points listed in the following table.</span></span>

|||||
|-|-|-|-|
|<span data-ttu-id="c0b7a-724">U + 0021 到 U + 0023</span><span class="sxs-lookup"><span data-stu-id="c0b7a-724">U+0021 to U+0023</span></span>|<span data-ttu-id="c0b7a-725">U + 060C 和 U + 060D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-725">U+060C and U+060D</span></span>|<span data-ttu-id="c0b7a-726">U + 1800 到 U + 180A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-726">U+1800 to U+180A</span></span>|<span data-ttu-id="c0b7a-727">U + 3014 到 U + 301F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-727">U+3014 to U+301F</span></span>|
|<span data-ttu-id="c0b7a-728">U + 0025 到 U + 002A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-728">U+0025 to U+002A</span></span>|<span data-ttu-id="c0b7a-729">U+061B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-729">U+061B</span></span>|<span data-ttu-id="c0b7a-730">U + 1944 和 U + 1945</span><span class="sxs-lookup"><span data-stu-id="c0b7a-730">U+1944 and U+1945</span></span>|<span data-ttu-id="c0b7a-731">U+3030</span><span class="sxs-lookup"><span data-stu-id="c0b7a-731">U+3030</span></span>|
|<span data-ttu-id="c0b7a-732">U + 002C 到 U + 002F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-732">U+002C to U+002F</span></span>|<span data-ttu-id="c0b7a-733">U + 061E 和 U + 061F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-733">U+061E and U+061F</span></span>|<span data-ttu-id="c0b7a-734">U + 19DE 和 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-734">U+19DE and U+19DF</span></span>|<span data-ttu-id="c0b7a-735">U+303D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-735">U+303D</span></span>|
|<span data-ttu-id="c0b7a-736">U + 003A 和 U + 003B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-736">U+003A and U+003B</span></span>|<span data-ttu-id="c0b7a-737">U + 066A 到 U + 066D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-737">U+066A to U+066D</span></span>|<span data-ttu-id="c0b7a-738">U + 1A1E 和 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-738">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="c0b7a-739">U+30A0</span><span class="sxs-lookup"><span data-stu-id="c0b7a-739">U+30A0</span></span>|
|<span data-ttu-id="c0b7a-740">U + 003F 和 U + 0040</span><span class="sxs-lookup"><span data-stu-id="c0b7a-740">U+003F and U+0040</span></span>|<span data-ttu-id="c0b7a-741">U+06D4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-741">U+06D4</span></span>|<span data-ttu-id="c0b7a-742">U + 1B5A 到 U + 1B60</span><span class="sxs-lookup"><span data-stu-id="c0b7a-742">U+1B5A to U+1B60</span></span>|<span data-ttu-id="c0b7a-743">U+30FB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-743">U+30FB</span></span>|
|<span data-ttu-id="c0b7a-744">U + 005B 到 U + 005D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-744">U+005B to U+005D</span></span>|<span data-ttu-id="c0b7a-745">U + 0700 到 U + 070D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-745">U+0700 to U+070D</span></span>|<span data-ttu-id="c0b7a-746">U + 2010 到 U + 2027</span><span class="sxs-lookup"><span data-stu-id="c0b7a-746">U+2010 to U+2027</span></span>|<span data-ttu-id="c0b7a-747">U + A874 到 U + A877</span><span class="sxs-lookup"><span data-stu-id="c0b7a-747">U+A874 to U+A877</span></span>|
|<span data-ttu-id="c0b7a-748">U+005F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-748">U+005F</span></span>|<span data-ttu-id="c0b7a-749">U + 07F7 到 U + 07F9</span><span class="sxs-lookup"><span data-stu-id="c0b7a-749">U+07F7 to U+07F9</span></span>|<span data-ttu-id="c0b7a-750">U + 2030 到 U + 2043</span><span class="sxs-lookup"><span data-stu-id="c0b7a-750">U+2030 to U+2043</span></span>|<span data-ttu-id="c0b7a-751">U + FD3E 和 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-751">U+FD3E and U+FD3F</span></span>|
|<span data-ttu-id="c0b7a-752">U+007B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-752">U+007B</span></span>|<span data-ttu-id="c0b7a-753">U + 0964 和 U + 0965</span><span class="sxs-lookup"><span data-stu-id="c0b7a-753">U+0964 and U+0965</span></span>|<span data-ttu-id="c0b7a-754">U + 2045 到 U + 2051</span><span class="sxs-lookup"><span data-stu-id="c0b7a-754">U+2045 to U+2051</span></span>|<span data-ttu-id="c0b7a-755">U + FE10 到 U + FE19</span><span class="sxs-lookup"><span data-stu-id="c0b7a-755">U+FE10 to U+FE19</span></span>|
|<span data-ttu-id="c0b7a-756">U+007D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-756">U+007D</span></span>|<span data-ttu-id="c0b7a-757">U+0970</span><span class="sxs-lookup"><span data-stu-id="c0b7a-757">U+0970</span></span>|<span data-ttu-id="c0b7a-758">U + 2053 到 U + 205E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-758">U+2053 to U+205E</span></span>|<span data-ttu-id="c0b7a-759">U + FE30 到 U + FE52</span><span class="sxs-lookup"><span data-stu-id="c0b7a-759">U+FE30 to U+FE52</span></span>|
|<span data-ttu-id="c0b7a-760">U+00A1</span><span class="sxs-lookup"><span data-stu-id="c0b7a-760">U+00A1</span></span>|<span data-ttu-id="c0b7a-761">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-761">U+0DF4</span></span>|<span data-ttu-id="c0b7a-762">U + 207D 和 U + 207E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-762">U+207D and  U+207E</span></span>|<span data-ttu-id="c0b7a-763">U + FE54 到 U + FE61</span><span class="sxs-lookup"><span data-stu-id="c0b7a-763">U+FE54 to U+FE61</span></span>|
|<span data-ttu-id="c0b7a-764">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-764">U+00AB</span></span>|<span data-ttu-id="c0b7a-765">U + 0E4F 到 U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-765">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="c0b7a-766">U + 208D 和 U + 208E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-766">U+208D and U+208E</span></span>|<span data-ttu-id="c0b7a-767">U+FE63</span><span class="sxs-lookup"><span data-stu-id="c0b7a-767">U+FE63</span></span>|
|<span data-ttu-id="c0b7a-768">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="c0b7a-768">U+00AD</span></span>|<span data-ttu-id="c0b7a-769">U + 0F04 到 U + 0F12</span><span class="sxs-lookup"><span data-stu-id="c0b7a-769">U+0F04 to U+0F12</span></span>|<span data-ttu-id="c0b7a-770">U + 2329 和 U + 232A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-770">U+2329 and U+232A</span></span>|<span data-ttu-id="c0b7a-771">U+FE68</span><span class="sxs-lookup"><span data-stu-id="c0b7a-771">U+FE68</span></span>|
|<span data-ttu-id="c0b7a-772">U+00B7</span><span class="sxs-lookup"><span data-stu-id="c0b7a-772">U+00B7</span></span>|<span data-ttu-id="c0b7a-773">U + 0F3A 到 U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-773">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="c0b7a-774">U + 2768 到 U + 2775</span><span class="sxs-lookup"><span data-stu-id="c0b7a-774">U+2768 to U+2775</span></span>|<span data-ttu-id="c0b7a-775">U + FE6A 和 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-775">U+FE6A and U+FE6B</span></span>|
|<span data-ttu-id="c0b7a-776">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-776">U+00BB</span></span>|<span data-ttu-id="c0b7a-777">U+0F85</span><span class="sxs-lookup"><span data-stu-id="c0b7a-777">U+0F85</span></span>|<span data-ttu-id="c0b7a-778">U + 27C5 到 U + 27C6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-778">U+27C5 to U+27C6</span></span>|<span data-ttu-id="c0b7a-779">U + FF01 到 U + FF03</span><span class="sxs-lookup"><span data-stu-id="c0b7a-779">U+FF01 to U+FF03</span></span>|
|<span data-ttu-id="c0b7a-780">U+00BF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-780">U+00BF</span></span>|<span data-ttu-id="c0b7a-781">U + 0FD0 和 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="c0b7a-781">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="c0b7a-782">U + 27E6 到 U + 27EB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-782">U+27E6 to U+27EB</span></span>|<span data-ttu-id="c0b7a-783">U + FF05 到 U + FF0A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-783">U+FF05 to U+FF0A</span></span>|
|<span data-ttu-id="c0b7a-784">U+037E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-784">U+037E</span></span>|<span data-ttu-id="c0b7a-785">U + 104A 到 U + 104F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-785">U+104A to U+104F</span></span>|<span data-ttu-id="c0b7a-786">U + 2983 到 U + 2998</span><span class="sxs-lookup"><span data-stu-id="c0b7a-786">U+2983 to U+2998</span></span>|<span data-ttu-id="c0b7a-787">U + FF0C 到 U + FF0F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-787">U+FF0C to U+FF0F</span></span>|
|<span data-ttu-id="c0b7a-788">U+0387</span><span class="sxs-lookup"><span data-stu-id="c0b7a-788">U+0387</span></span>|<span data-ttu-id="c0b7a-789">U+10FB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-789">U+10FB</span></span>|<span data-ttu-id="c0b7a-790">U + 29D8 到 U + 29DB</span><span class="sxs-lookup"><span data-stu-id="c0b7a-790">U+29D8 to U+29DB</span></span>|<span data-ttu-id="c0b7a-791">U + FF1A 和 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-791">U+FF1A and U+FF1B</span></span>|
|<span data-ttu-id="c0b7a-792">U + 055A 到 U + 055F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-792">U+055A to U+055F</span></span>|<span data-ttu-id="c0b7a-793">U + 1361 到 U + 1368</span><span class="sxs-lookup"><span data-stu-id="c0b7a-793">U+1361 to U+1368</span></span>|<span data-ttu-id="c0b7a-794">U + 29FC 和 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="c0b7a-794">U+29FC and U+29FD</span></span>|<span data-ttu-id="c0b7a-795">U + FF1F 和 U + FF20</span><span class="sxs-lookup"><span data-stu-id="c0b7a-795">U+FF1F and U+FF20</span></span>|
|<span data-ttu-id="c0b7a-796">U + 0589 和 U + 058A</span><span class="sxs-lookup"><span data-stu-id="c0b7a-796">U+0589 and U+058A</span></span>|<span data-ttu-id="c0b7a-797">U + 166D 和 U + 166E</span><span class="sxs-lookup"><span data-stu-id="c0b7a-797">U+166D and U+166E</span></span>|<span data-ttu-id="c0b7a-798">U + 2CF9 到 U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="c0b7a-798">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="c0b7a-799">U + FF3B 到 U + FF3D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-799">U+FF3B to U+FF3D</span></span>|
|<span data-ttu-id="c0b7a-800">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="c0b7a-800">U+05BE</span></span>|<span data-ttu-id="c0b7a-801">U + 169B 和 U + 169C</span><span class="sxs-lookup"><span data-stu-id="c0b7a-801">U+169B and U+169C</span></span>|<span data-ttu-id="c0b7a-802">U + 2CFE 和 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="c0b7a-802">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="c0b7a-803">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="c0b7a-803">U+FF3F</span></span>|
|<span data-ttu-id="c0b7a-804">U+05C0</span><span class="sxs-lookup"><span data-stu-id="c0b7a-804">U+05C0</span></span>|<span data-ttu-id="c0b7a-805">U + 16EB 到 U + 16ED</span><span class="sxs-lookup"><span data-stu-id="c0b7a-805">U+16EB to U+16ED</span></span>|<span data-ttu-id="c0b7a-806">U + 2E00 到 U + 2E17</span><span class="sxs-lookup"><span data-stu-id="c0b7a-806">U+2E00 to U+2E17</span></span>|<span data-ttu-id="c0b7a-807">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="c0b7a-807">U+FF5B</span></span>|
|<span data-ttu-id="c0b7a-808">U+05C3</span><span class="sxs-lookup"><span data-stu-id="c0b7a-808">U+05C3</span></span>|<span data-ttu-id="c0b7a-809">U + 1735 和 U + 1736</span><span class="sxs-lookup"><span data-stu-id="c0b7a-809">U+1735 and U+1736</span></span>|<span data-ttu-id="c0b7a-810">U + 2E1C 和 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-810">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="c0b7a-811">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="c0b7a-811">U+FF5D</span></span>|
|<span data-ttu-id="c0b7a-812">U+05C6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-812">U+05C6</span></span>|<span data-ttu-id="c0b7a-813">U + 17D4 到 U + 17D6</span><span class="sxs-lookup"><span data-stu-id="c0b7a-813">U+17D4 to U+17D6</span></span>|<span data-ttu-id="c0b7a-814">U + 3001 到 U + 3003</span><span class="sxs-lookup"><span data-stu-id="c0b7a-814">U+3001 to U+3003</span></span>|<span data-ttu-id="c0b7a-815">U + FF5F 到 U + FF65</span><span class="sxs-lookup"><span data-stu-id="c0b7a-815">U+FF5F to U+FF65</span></span>|
|<span data-ttu-id="c0b7a-816">U + 05F3 和 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="c0b7a-816">U+05F3 and U+05F4</span></span>|<span data-ttu-id="c0b7a-817">U + 17D8 到 U + 17DA</span><span class="sxs-lookup"><span data-stu-id="c0b7a-817">U+17D8 to U+17DA</span></span>|<span data-ttu-id="c0b7a-818">U + 3008 到 U + 3011</span><span class="sxs-lookup"><span data-stu-id="c0b7a-818">U+3008 to U+3011</span></span>||



## Examples
 <span data-ttu-id="c0b7a-819">下面的代码示例演示 <xref:System.Char.IsPunctuation%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-819">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>

 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-820"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-820"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-821"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-821"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSeparator">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-822">指示 Unicode 字符是否属于分隔符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-822">Indicates whether a Unicode character is categorized as a separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-823">Unicode 标准可识别三个子类别的分隔符：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-823">The Unicode standard recognizes three subcategories of separators:</span></span>

-   <span data-ttu-id="c0b7a-824">空格分隔符（<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 类别），其中包含字符，如 \u0020。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-824">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>

-   <span data-ttu-id="c0b7a-825">行分隔符（<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 类别），其中包括 \u2028。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-825">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>

-   <span data-ttu-id="c0b7a-826">段落分隔符（<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 类别），其中包括 \u2029。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-826">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>

> [!NOTE]
>  <span data-ttu-id="c0b7a-827">Unicode 标准将字符 \u000A （LF）、\u000C （FF）和 \u000D （CR）归类为控制字符（<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 类别的成员），而不是作为分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-827">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(char c);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : char -&gt; bool" Usage="System.char.IsSeparator c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-828">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-828">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-829">指示指定的 Unicode 字符是否属于分隔符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-829">Indicates whether the specified Unicode character is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-830">如果 <see langword="true" /> 是分隔符，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-830"><see langword="true" /> if <paramref name="c" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-831">Unicode 标准可识别三个子类别的分隔符：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-831">The Unicode standard recognizes three subcategories of separators:</span></span>

-   <span data-ttu-id="c0b7a-832">空格分隔符（<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 类别），其中包含字符，如 \u0020。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-832">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>

-   <span data-ttu-id="c0b7a-833">行分隔符（<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 类别），其中包括 \u2028。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-833">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>

-   <span data-ttu-id="c0b7a-834">段落分隔符（<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 类别），其中包括 \u2029。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-834">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>

> [!NOTE]
>  <span data-ttu-id="c0b7a-835">Unicode 标准将字符 \u000A （LF）、\u000C （FF）和 \u000D （CR）归类为控制字符（<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 类别的成员），而不是作为分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-835">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>



## Examples
 <span data-ttu-id="c0b7a-836">下面的示例列出归类为分隔符的 <xref:System.Char> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-836">The following example lists the <xref:System.Char> objects that are classified as separator characters.</span></span>

 [!code-cpp[System.Char.IsSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator1.cpp#1)]
 [!code-csharp[System.Char.IsSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator1.cs#1)]
 [!code-vb[System.Char.IsSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator1.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsSeparator(System.Text.Rune)" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : string * int -&gt; bool" Usage="System.char.IsSeparator (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-837">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-837">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-838"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-838">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-839">指示指定字符串中位于指定位置处的字符是否属于分隔符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-839">Indicates whether the character at the specified position in a specified string is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-840">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个分隔符，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-840"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-841">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-841">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-842">Unicode 标准可识别三个子类别的分隔符：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-842">The Unicode standard recognizes three subcategories of separators:</span></span>

-   <span data-ttu-id="c0b7a-843">空格分隔符（<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 类别），其中包含字符，如 \u0020。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-843">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>

-   <span data-ttu-id="c0b7a-844">行分隔符（<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 类别），其中包括 \u2028。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-844">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>

-   <span data-ttu-id="c0b7a-845">段落分隔符（<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 类别），其中包括 \u2029。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-845">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>

> [!NOTE]
>  <span data-ttu-id="c0b7a-846">Unicode 标准将字符 \u000A （LF）、\u000C （FF）和 \u000D （CR）归类为控制字符（<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 类别的成员），而不是作为分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-846">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>



## Examples
 <span data-ttu-id="c0b7a-847">下面的示例演示 <xref:System.Char.IsSeparator%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-847">The following example demonstrates <xref:System.Char.IsSeparator%2A>.</span></span>

 [!code-cpp[System.Char.IsSeparator#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator.cpp#10)]
 [!code-csharp[System.Char.IsSeparator#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator.cs#10)]
 [!code-vb[System.Char.IsSeparator#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator.vb#10)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-848"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-848"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-849"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-849"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-850">指示字符是否具有代理项代码单位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-850">Indicates whether a character has a surrogate code unit.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : char -&gt; bool" Usage="System.char.IsSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-851">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-851">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-852">指示指定的字符是否具有指定的代理项代码单位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-852">Indicates whether the specified character has a surrogate code unit.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-853">如果 <see langword="true" /> 为高代理项或低代理项，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-853"><see langword="true" /> if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-854">代理项是一个具有 UTF-16 代码单元的 <xref:System.Char> 对象，范围是从 U + D800 到 U + DFFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-854">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="c0b7a-855">此范围内具有代码单元的每个字符都属于 <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-855">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="c0b7a-856">单个代理项代码单元没有自身的解释，但只有在用作代理项对的一部分时才有意义。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-856">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="c0b7a-857">有关代理项对的详细信息，请参阅[unicode 主页](https://go.microsoft.com/fwlink/?linkid=37123)上的 unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-857">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?linkid=37123).</span></span>



## Examples
 <span data-ttu-id="c0b7a-858">下面的示例演示 <xref:System.Char.IsSurrogate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-858">The following example demonstrates the <xref:System.Char.IsSurrogate%2A> method.</span></span>

 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : string * int -&gt; bool" Usage="System.char.IsSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-859">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-859">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-860"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-860">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-861">指示指定字符串中位于指定位置的字符是否具有代理项代码单位。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-861">Indicates whether the character at the specified position in a specified string has a surrogate code unit.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-862">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个高代理项或低代理项，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-862"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-863">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-863">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-864">代理项是一个具有 UTF-16 代码单元的 <xref:System.Char> 对象，范围是从 U + D800 到 U + DFFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-864">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="c0b7a-865">此范围内具有代码单元的每个字符都属于 <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> 类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-865">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="c0b7a-866">单个代理项代码单元没有自身的解释，但只有在用作代理项对的一部分时才有意义。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-866">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="c0b7a-867">有关代理项对的详细信息，请参阅[unicode 主页](https://go.microsoft.com/fwlink/?linkid=37123)上的 unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-867">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?linkid=37123).</span></span>



## Examples
 <span data-ttu-id="c0b7a-868">下面的代码示例演示 <xref:System.Char.IsSurrogate%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-868">The following code example demonstrates <xref:System.Char.IsSurrogate%2A>.</span></span>

 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-869"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-869"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-870"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-870"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogatePair">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-871">指示两个指定的 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-871">Indicates whether two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (highSurrogate As Char, lowSurrogate As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : char * char -&gt; bool" Usage="System.char.IsSurrogatePair (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lowSurrogate" Type="System.Char" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="c0b7a-872">要作为代理项对的高代理项进行计算的字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-872">The character to evaluate as the high surrogate of a surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="c0b7a-873">要作为代理项对的低代理项进行计算的字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-873">The character to evaluate as the low surrogate of a surrogate pair.</span></span></param>
        <summary><span data-ttu-id="c0b7a-874">指示两个指定的 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-874">Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-875">如果 <see langword="true" /> 参数的数值范围是从 U+D800 到 U+DBFF，且 <paramref name="highSurrogate" /> 参数的数值是从 U+DC00 到 U+DFFF，则为 <paramref name="lowSurrogate" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-875"><see langword="true" /> if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-876">通常，单个字符由单个16位 Unicode 代码单元表示。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-876">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="c0b7a-877">UTF-16 编码还支持代理项对，这允许由 2 16 位代码单元表示单个抽象字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-877">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="c0b7a-878">其值可以从 U + D800 到 U + DBFF 范围内的第一个代码单元为高代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-878">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="c0b7a-879">第二个代码单位（其值可以从 U + DC00 到 U + DFFF）为低代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-879">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="c0b7a-880">单个代理项码位不具有自己的解释。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-880">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="c0b7a-881">有关代理项和 Unicode 标准的详细信息，请参阅[unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-881">For more information about surrogates and the Unicode Standard, see the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>



## Examples
 <span data-ttu-id="c0b7a-882">下面的代码示例演示 <xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>和 <xref:System.Char.IsSurrogatePair%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-882">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : string * int -&gt; bool" Usage="System.char.IsSurrogatePair (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-883">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-883">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-884"><paramref name="s" /> 中要计算的字符对的开始位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-884">The starting position of the pair of characters to evaluate within <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-885">指示字符串中指定位置处的两个相邻 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-885">Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-886">如果 <see langword="true" /> 参数包括 <paramref name="s" /> 和 <paramref name="index" /> + 1 位置处的相邻字符，并且 <paramref name="index" /> 位置处字符的数值范围从 U+D800 到 U+DBFF，<paramref name="index" />+1 位置处字符的数值范围从 U+DC00 到 U+DFFF，则为 <paramref name="index" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-886"><see langword="true" /> if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-887">通常，单个字符由单个16位 Unicode 代码单元表示。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-887">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="c0b7a-888">UTF-16 编码还支持代理项对，这允许由 2 16 位代码单元表示单个抽象字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-888">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="c0b7a-889">其值可以从 U + D800 到 U + DBFF 范围内的第一个代码单元为高代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-889">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="c0b7a-890">第二个代码单位（其值可以从 U + DC00 到 U + DFFF）为低代理项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-890">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="c0b7a-891">单个代理项码位不具有自己的解释。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-891">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="c0b7a-892">有关代理项和 Unicode 标准的详细信息，请参阅[unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-892">For more information about surrogates and the Unicode Standard, see the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>



## Examples
 <span data-ttu-id="c0b7a-893">下面的代码示例演示 <xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>和 <xref:System.Char.IsSurrogatePair%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-893">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-894"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-894"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-895"><paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-895"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSymbol">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-896">指示 Unicode 字符是否属于符号字符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-896">Indicates whether a Unicode character is categorized as a symbol character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-897">有效符号是 <xref:System.Globalization.UnicodeCategory>： `MathSymbol`、`CurrencySymbol`、`ModifierSymbol`和 `OtherSymbol`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-897">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>

 <span data-ttu-id="c0b7a-898">Unicode 标准中的符号是一组松散定义的字符，包括以下内容：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-898">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>

-   <span data-ttu-id="c0b7a-899">货币符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-899">Currency symbols.</span></span>

-   <span data-ttu-id="c0b7a-900">Letterlike 符号，其中包含一组数学字母数字符号以及符号，如 c/o、No 和™。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-900">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>

-   <span data-ttu-id="c0b7a-901">数字形式，例如下标和上标。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-901">Number forms, such as subscripts and superscripts.</span></span>

-   <span data-ttu-id="c0b7a-902">数学运算符和箭头。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-902">Mathematical operators and arrows.</span></span>

-   <span data-ttu-id="c0b7a-903">几何符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-903">Geometric symbols.</span></span>

-   <span data-ttu-id="c0b7a-904">技术符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-904">Technical symbols.</span></span>

-   <span data-ttu-id="c0b7a-905">盲文模式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-905">Braille patterns.</span></span>

-   <span data-ttu-id="c0b7a-906">丁贝符.</span><span class="sxs-lookup"><span data-stu-id="c0b7a-906">Dingbats.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(char c);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : char -&gt; bool" Usage="System.char.IsSymbol c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-907">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-907">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-908">指示指定的 Unicode 字符是否属于符号字符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-908">Indicates whether the specified Unicode character is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-909">如果 <see langword="true" /> 是符号字符，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-909"><see langword="true" /> if <paramref name="c" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-910">有效符号是 <xref:System.Globalization.UnicodeCategory>： `MathSymbol`、`CurrencySymbol`、`ModifierSymbol`和 `OtherSymbol`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-910">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>

 <span data-ttu-id="c0b7a-911">Unicode 标准中的符号是一组松散定义的字符，包括以下内容：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-911">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>

-   <span data-ttu-id="c0b7a-912">货币符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-912">Currency symbols.</span></span>

-   <span data-ttu-id="c0b7a-913">Letterlike 符号，其中包含一组数学字母数字符号以及符号，如 c/o、No 和™。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-913">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>

-   <span data-ttu-id="c0b7a-914">数字形式，例如下标和上标。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-914">Number forms, such as subscripts and superscripts.</span></span>

-   <span data-ttu-id="c0b7a-915">数学运算符和箭头。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-915">Mathematical operators and arrows.</span></span>

-   <span data-ttu-id="c0b7a-916">几何符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-916">Geometric symbols.</span></span>

-   <span data-ttu-id="c0b7a-917">技术符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-917">Technical symbols.</span></span>

-   <span data-ttu-id="c0b7a-918">盲文模式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-918">Braille patterns.</span></span>

-   <span data-ttu-id="c0b7a-919">丁贝符.</span><span class="sxs-lookup"><span data-stu-id="c0b7a-919">Dingbats.</span></span>



## Examples
 <span data-ttu-id="c0b7a-920">下面的代码示例演示 <xref:System.Char.IsSymbol%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-920">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>

 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsSymbol(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : string * int -&gt; bool" Usage="System.char.IsSymbol (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-921">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-921">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-922"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-922">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-923">指示指定字符串中位于指定位置处的字符是否属于符号字符类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-923">Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-924">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个符号字符，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-924"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-925">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-925">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-926">有效符号是 <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>： `MathSymbol`、`CurrencySymbol`、`ModifierSymbol`和 `OtherSymbol`中下列类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-926">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>

 <span data-ttu-id="c0b7a-927">Unicode 标准中的符号是一组松散定义的字符，包括以下内容：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-927">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>

-   <span data-ttu-id="c0b7a-928">货币符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-928">Currency symbols.</span></span>

-   <span data-ttu-id="c0b7a-929">Letterlike 符号，其中包含一组数学字母数字符号以及符号，如 c/o、No 和™。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-929">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>

-   <span data-ttu-id="c0b7a-930">数字形式，例如下标和上标。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-930">Number forms, such as subscripts and superscripts.</span></span>

-   <span data-ttu-id="c0b7a-931">数学运算符和箭头。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-931">Mathematical operators and arrows.</span></span>

-   <span data-ttu-id="c0b7a-932">几何符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-932">Geometric symbols.</span></span>

-   <span data-ttu-id="c0b7a-933">技术符号。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-933">Technical symbols.</span></span>

-   <span data-ttu-id="c0b7a-934">盲文模式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-934">Braille patterns.</span></span>

-   <span data-ttu-id="c0b7a-935">丁贝符.</span><span class="sxs-lookup"><span data-stu-id="c0b7a-935">Dingbats.</span></span>



## Examples
 <span data-ttu-id="c0b7a-936">下面的代码示例演示 <xref:System.Char.IsSymbol%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-936">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>

 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-937"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-937"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-938"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-938"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-939">指示 Unicode 字符是否属于大写字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-939">Indicates whether a Unicode character is categorized as an uppercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(char c);" />
      <MemberSignature Language="F#" Value="static member IsUpper : char -&gt; bool" Usage="System.char.IsUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-940">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-940">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-941">指示指定的 Unicode 字符是否属于大写字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-941">Indicates whether the specified Unicode character is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-942">如果 <see langword="true" /> 是一个大写字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-942"><see langword="true" /> if <paramref name="c" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-943">有效的大写字母是 <xref:System.Globalization.UnicodeCategory>： `UppercaseLetter`中以下类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-943">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsUpper(System.Text.Rune)" />
        <altmember cref="M:System.Text.Rune.IsLower(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsLower(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsUpper : string * int -&gt; bool" Usage="System.char.IsUpper (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-944">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-944">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-945"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-945">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-946">指示指定字符串中位于指定位置处的字符是否属于大写字母类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-946">Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-947">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个大写字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-947"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-948">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-948">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-949">有效的大写字母是 <xref:System.Globalization.UnicodeCategory>： `UppercaseLetter`中以下类别的成员。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-949">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-950"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-950"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-951"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-951"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsWhiteSpace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-952">指示 Unicode 字符是否属于空格类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-952">Indicates whether a Unicode character is categorized as white space.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-953">空白字符是以下 Unicode 字符：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-953">White space characters are the following Unicode characters:</span></span>

-   <span data-ttu-id="c0b7a-954"><xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 类别的成员，包括字符空间（U + 0020）、无间断空格（U + 00A0）、欧甘空格标记（U + 1680）、EN 四（U + 2000）、EM 四（U + 2001）、半角空格（u + 2002）、EM 空间（U + 2003）、每半 em 空间（u + 2004）、四个每 EM 空格（u + 2005）、六个每全身空间（U + 2006）、图 SPACE （U + 2007）、标点空间（u + 2008）、细空间（U + 2009）、头发空间（U + 200A）、窄无间断空格（u + 202F）、中数学空间（u + 205F）和表意空间（U + 3000）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-954">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>

-   <span data-ttu-id="c0b7a-955"><xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 类别的成员，仅包含行分隔符（U + 2028）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-955">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>

-   <span data-ttu-id="c0b7a-956"><xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 类别的成员，仅由段落分隔符（U + 2029）组成。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-956">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>

-   <span data-ttu-id="c0b7a-957">字符表（U + 0009）、换行符（U + 000A）、行表（U + 000B）、换行（U + 000C）、回车符（u + 000D）和下一行（U + 0085）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-957">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(char c);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : char -&gt; bool" Usage="System.char.IsWhiteSpace c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-958">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-958">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="c0b7a-959">指示指定的 Unicode 字符是否属于空格类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-959">Indicates whether the specified Unicode character is categorized as white space.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-960">如果 <see langword="true" /> 是空格，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-960"><see langword="true" /> if <paramref name="c" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-961">空白字符是以下 Unicode 字符：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-961">White space characters are the following Unicode characters:</span></span>

-   <span data-ttu-id="c0b7a-962"><xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 类别的成员，包括字符空间（U + 0020）、无间断空格（U + 00A0）、欧甘空格标记（U + 1680）、EN 四（U + 2000）、EM 四（U + 2001）、半角空格（u + 2002）、EM 空间（U + 2003）、每半 em 空间（u + 2004）、四个每 EM 空格（u + 2005）、六个每全身空间（U + 2006）、图 SPACE （U + 2007）、标点空间（u + 2008）、细空间（U + 2009）、头发空间（U + 200A）、窄无间断空格（u + 202F）、中数学空间（u + 205F）和表意空间（U + 3000）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-962">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>

-   <span data-ttu-id="c0b7a-963"><xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 类别的成员，仅包含行分隔符（U + 2028）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-963">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>

-   <span data-ttu-id="c0b7a-964"><xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 类别的成员，仅由段落分隔符（U + 2029）组成。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-964">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>

-   <span data-ttu-id="c0b7a-965">字符表（U + 0009）、换行符（U + 000A）、行表（U + 000B）、换行（U + 000C）、回车符（u + 000D）和下一行（U + 0085）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-965">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>



## Examples
 <span data-ttu-id="c0b7a-966">下面的示例演示 <xref:System.Char.IsWhiteSpace%28System.Char%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-966">The following example demonstrates the <xref:System.Char.IsWhiteSpace%28System.Char%29> method.</span></span>

 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsWhiteSpace(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : string * int -&gt; bool" Usage="System.char.IsWhiteSpace (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-967">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-967">A string.</span></span></param>
        <param name="index"><span data-ttu-id="c0b7a-968"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-968">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-969">指示指定字符串中位于指定位置处的字符是否属于空格类别。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-969">Indicates whether the character at the specified position in a specified string is categorized as white space.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-970">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是空格，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-970"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-971">字符串中的字符位置从零开始索引。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-971">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="c0b7a-972">空白字符是以下 Unicode 字符：</span><span class="sxs-lookup"><span data-stu-id="c0b7a-972">White space characters are the following Unicode characters:</span></span>

-   <span data-ttu-id="c0b7a-973"><xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 类别的成员，包括字符空间（U + 0020）、无间断空格（U + 00A0）、欧甘空格标记（U + 1680）、EN 四（U + 2000）、EM 四（U + 2001）、半角空格（u + 2002）、EM 空间（U + 2003）、每半 em 空间（u + 2004）、四个每 EM 空格（u + 2005）、六个每全身空间（U + 2006）、图 SPACE （U + 2007）、标点空间（u + 2008）、细空间（U + 2009）、头发空间（U + 200A）、窄无间断空格（u + 202F）、中数学空间（u + 205F）和表意空间（U + 3000）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-973">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>

-   <span data-ttu-id="c0b7a-974"><xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 类别的成员，仅包含行分隔符（U + 2028）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-974">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>

-   <span data-ttu-id="c0b7a-975"><xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 类别的成员，仅由段落分隔符（U + 2029）组成。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-975">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>

-   <span data-ttu-id="c0b7a-976">字符表（U + 0009）、换行符（U + 000A）、行表（U + 000B）、换行（U + 000C）、回车符（u + 000D）和下一行（U + 0085）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-976">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>



## Examples
 <span data-ttu-id="c0b7a-977">下面的代码示例演示 <xref:System.Char.IsWhiteSpace%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-977">The following code example demonstrates <xref:System.Char.IsWhiteSpace%2A>.</span></span>

 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-978"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-978"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0b7a-979"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-979"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const char MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MaxValue;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : char" Usage="System.char.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0b7a-980">表示 <see cref="T:System.Char" /> 的最大可能值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-980">Represents the largest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="c0b7a-981">此字段是常量。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-981">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-982">此常量的值为十六进制0xFFFF。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-982">The value of this constant is hexadecimal 0xFFFF.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const char MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MinValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MinValue;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : char" Usage="System.char.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0b7a-983">表示 <see cref="T:System.Char" /> 的最小可能值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-983">Represents the smallest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="c0b7a-984">此字段是常量。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-984">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-985">此常量的值为十六进制0x00。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-985">The value of this constant is hexadecimal 0x00.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static char Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; char" Usage="System.char.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-986">包含单个字符的字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-986">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c0b7a-987">将指定字符串的值转换为它的等效 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-987">Converts the value of the specified string to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-988">一个等效于 <paramref name="s" /> 中唯一字符的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-988">A Unicode character equivalent to the sole character in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c0b7a-989">下面的代码示例演示 <xref:System.Char.Parse%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-989">The following code example demonstrates <xref:System.Char.Parse%2A>.</span></span>

 [!code-cpp[System.Char.Parse#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Parse/CPP/parse.cpp#15)]
 [!code-csharp[System.Char.Parse#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Parse/CS/parse.cs#15)]
 [!code-vb[System.Char.Parse#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Parse/VB/parse.vb#15)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-990"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-990"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c0b7a-991"><paramref name="s" /> 的长度不是 1。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-991">The length of <paramref name="s" /> is not 1.</span></span></exception>
        <altmember cref="M:System.Char.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-other.md"><span data-ttu-id="c0b7a-992">在 .NET Framework 中分析其他字符串</span><span class="sxs-lookup"><span data-stu-id="c0b7a-992">Parsing Other Strings in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="char.System.IComparable.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c0b7a-993">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-993">The object to compare.</span></span></param>
        <summary><span data-ttu-id="c0b7a-994">将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-994">Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-995">一个值，指示要比较的对象的相对顺序。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-995">A value that indicates the relative order of the objects being compared.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c0b7a-996">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-996">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-997">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IComparable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-997">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IComparable> interface.</span></span>

| <span data-ttu-id="c0b7a-998">值</span><span class="sxs-lookup"><span data-stu-id="c0b7a-998">Value</span></span>             | <span data-ttu-id="c0b7a-999">含义</span><span class="sxs-lookup"><span data-stu-id="c0b7a-999">Meaning</span></span>                                                                 |
|-------------------|-------------------------------------------------------------------------|
| <span data-ttu-id="c0b7a-1000">小于零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1000">Less than zero</span></span>    | <span data-ttu-id="c0b7a-1001">此实例在排序顺序中位于 `value` 之前。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1001">This instance precedes `value` in the sort order.</span></span>                       |
| <span data-ttu-id="c0b7a-1002">零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1002">Zero</span></span>              | <span data-ttu-id="c0b7a-1003">此实例在排序顺序中的位置与 `value` 相同。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1003">This instance occurs in the same position in the sort order as `value`.</span></span> |
| <span data-ttu-id="c0b7a-1004">大于零</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1004">Greater than zero</span></span> | <span data-ttu-id="c0b7a-1005">此实例在排序顺序中位于 `value` 之后。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1005">This instance follows `value` in the sort order.</span></span>                        |

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.GetTypeCode : unit -&gt; TypeCode&#xA;override this.System.IConvertible.GetTypeCode : unit -&gt; TypeCode" Usage="char.System.IConvertible.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0b7a-1006">返回此实例的 <see cref="T:System.TypeCode" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1006">Returns the <see cref="T:System.TypeCode" /> for this instance.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1007">枚举常数，它是实现该接口的类或值类型的 <see cref="T:System.TypeCode" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1007">The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c0b7a-1008">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1008">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1009">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1009">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToBoolean : IFormatProvider -&gt; bool&#xA;override this.System.IConvertible.ToBoolean : IFormatProvider -&gt; bool" Usage="char.System.IConvertible.ToBoolean provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1010">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1010">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1011">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1011">**Note** This conversion is not supported.</span></span> <span data-ttu-id="c0b7a-1012">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1012">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1013">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1013">This conversion is not supported.</span></span> <span data-ttu-id="c0b7a-1014">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1014">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c0b7a-1015">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1015">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToByte : IFormatProvider -&gt; byte&#xA;override this.System.IConvertible.ToByte : IFormatProvider -&gt; byte" Usage="char.System.IConvertible.ToByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1016">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1016">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1017">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1017">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1018">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1018">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1019">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1019">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1020">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1020">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1021">建议的替代项是改为调用 <xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1021">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToChar : IFormatProvider -&gt; char&#xA;override this.System.IConvertible.ToChar : IFormatProvider -&gt; char" Usage="char.System.IConvertible.ToChar provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1022">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1022">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1023">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1023">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1024">当前 <see cref="T:System.Char" /> 对象的值未更改。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1024">The value of the current <see cref="T:System.Char" /> object unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1025">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1025">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1026">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1026">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime&#xA;override this.System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime" Usage="char.System.IConvertible.ToDateTime provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1027">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1027">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1028">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1028">**Note** This conversion is not supported.</span></span> <span data-ttu-id="c0b7a-1029">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1029">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1030">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1030">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c0b7a-1031">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1031">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal&#xA;override this.System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal" Usage="char.System.IConvertible.ToDecimal provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1032">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1032">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1033">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1033">**Note** This conversion is not supported.</span></span> <span data-ttu-id="c0b7a-1034">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1034">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1035">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1035">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c0b7a-1036">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1036">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDouble : IFormatProvider -&gt; double&#xA;override this.System.IConvertible.ToDouble : IFormatProvider -&gt; double" Usage="char.System.IConvertible.ToDouble provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1037">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1037">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1038">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1038">**Note** This conversion is not supported.</span></span> <span data-ttu-id="c0b7a-1039">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1039">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1040">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1040">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c0b7a-1041">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1041">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt16 : IFormatProvider -&gt; int16&#xA;override this.System.IConvertible.ToInt16 : IFormatProvider -&gt; int16" Usage="char.System.IConvertible.ToInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1042">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1042">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1043">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1043">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1044">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1044">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1045">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1045">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1046">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1046">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1047">建议的替代项是改为调用 <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1047">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt32 : IFormatProvider -&gt; int&#xA;override this.System.IConvertible.ToInt32 : IFormatProvider -&gt; int" Usage="char.System.IConvertible.ToInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1048">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1048">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1049">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1049">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1050">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1050">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1051">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1051">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1052">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1052">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1053">建议的替代项是改为调用 <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1053">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt64 : IFormatProvider -&gt; int64&#xA;override this.System.IConvertible.ToInt64 : IFormatProvider -&gt; int64" Usage="char.System.IConvertible.ToInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1054">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1054">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1055">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1055">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1056">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1056">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1057">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1057">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1058">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1058">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1059">建议的替代项是改为调用 <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1059">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte&#xA;override this.System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte" Usage="char.System.IConvertible.ToSByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1060">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1060">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1061">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1061">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1062">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1062">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1063">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1063">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1064">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1064">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1065">建议的替代项是改为调用 <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1065">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSingle : IFormatProvider -&gt; single&#xA;override this.System.IConvertible.ToSingle : IFormatProvider -&gt; single" Usage="char.System.IConvertible.ToSingle provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1066">该参数将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1066">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1067">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1067">**Note** This conversion is not supported.</span></span> <span data-ttu-id="c0b7a-1068">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1068">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1069">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1069">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c0b7a-1070">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1070">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToString : IFormatProvider -&gt; string&#xA;override this.System.IConvertible.ToString : IFormatProvider -&gt; string" Usage="char.System.IConvertible.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1071">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1071">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1072">使用指定的区域性特定格式设置信息将此实例的值转换为等效的字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1072">Converts the value of this instance to an equivalent string, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1073">与此实例的值等效的字符串。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1073">A string equivalent to the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="c0b7a-1074">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1074">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1075">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1075">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToType (type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToType : Type * IFormatProvider -&gt; obj&#xA;override this.System.IConvertible.ToType : Type * IFormatProvider -&gt; obj" Usage="char.System.IConvertible.ToType (type, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c0b7a-1076">一个 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1076">A <see cref="T:System.Type" /> object.</span></span></param>
        <param name="provider"><span data-ttu-id="c0b7a-1077">一个 <see cref="T:System.IFormatProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1077">An <see cref="T:System.IFormatProvider" /> object.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1078">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1078">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1079">指定类型的对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1079">An object of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1080">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1080">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1081">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1081">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1082">建议的替代项是改为调用 <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1082">The recommended alternative is to call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method instead.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-1083"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1083"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c0b7a-1084">当前 <see cref="T:System.Char" /> 对象的值不能转换为 <paramref name="type" /> 参数指定的类型。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1084">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16&#xA;override this.System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16" Usage="char.System.IConvertible.ToUInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1085">一个 <see cref="T:System.IFormatProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1085">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="c0b7a-1086">（由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1086">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="c0b7a-1087">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1087">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1088">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1088">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1089">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1089">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1090">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1090">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1091">建议的替代项是改为调用 <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1091">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32&#xA;override this.System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32" Usage="char.System.IConvertible.ToUInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1092">一个 <see cref="T:System.IFormatProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1092">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="c0b7a-1093">（由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1093">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="c0b7a-1094">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1094">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1095">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1095">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1096">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1096">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1097">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1097">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1098">建议的替代项是改为调用 <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1098">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64&#xA;override this.System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64" Usage="char.System.IConvertible.ToUInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1099">一个 <see cref="T:System.IFormatProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1099">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="c0b7a-1100">（由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1100">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="c0b7a-1101">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1101">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1102">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1102">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1103">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1103">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c0b7a-1104">它只能在 <xref:System.Char> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1104">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="c0b7a-1105">建议的替代项是改为调用 <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1105">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-1106">将 Unicode 字符的值转换为它的小写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1106">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c);" />
      <MemberSignature Language="F#" Value="static member ToLower : char -&gt; char" Usage="System.char.ToLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-1107">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1107">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1108">将 Unicode 字符的值转换为它的小写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1108">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1109"><paramref name="c" /> 的小写等效项，或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1109">The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1110">大小写规则是从当前区域性获取的。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1110">Casing rules are obtained from the current culture.</span></span>

 <span data-ttu-id="c0b7a-1111">使用 <xref:System.String.ToLower%2A?displayProperty=nameWithType> 将字符串转换为小写。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1111">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>



## Examples
 <span data-ttu-id="c0b7a-1112">下面的示例演示 <xref:System.Char.ToLower%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1112">The following example demonstrates <xref:System.Char.ToLower%2A>.</span></span>

 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="c0b7a-1113">如[使用字符串的最佳做法](~/docs/standard/base-types/best-practices-strings.md)中所述，我们建议避免调用替换默认值的字符大小写方法和字符串大小写方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1113">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="c0b7a-1114">相反，应调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1114">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="c0b7a-1115">若要使用当前区域性的大小写约定将字符转换为小写，请使用其 <paramref name="culture" /> 参数的值 <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> 调用 <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1115">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToLower (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-1116">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1116">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="c0b7a-1117">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1117">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1118">使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的小写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1118">Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1119"><paramref name="c" /> 的小写等效项（根据 <paramref name="culture" /> 进行修改），或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1119">The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1120">使用 <xref:System.String.ToLower%2A?displayProperty=nameWithType> 将字符串转换为小写。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1120">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>



## Examples
 <span data-ttu-id="c0b7a-1121">下面的代码示例演示 <xref:System.Char.ToLower%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1121">The following code example demonstrates <xref:System.Char.ToLower%2A>.</span></span>

 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-1122"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1122"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static char ToLowerInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLowerInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLowerInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLowerInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLowerInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : char -&gt; char" Usage="System.char.ToLowerInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-1123">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1123">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1124">使用固定区域性的大小写规则，将 Unicode 字符的值转换为其小写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1124">Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1125"><paramref name="c" /> 参数的小写等效项，或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1125">The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1126">如果你的应用程序不受当前区域性的影响，并且依赖于以可预测方式更改的字符的大小写，则使用 <xref:System.Char.ToLowerInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1126">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the <xref:System.Char.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="c0b7a-1127"><xref:System.Char.ToLowerInvariant%2A> 方法等效于 `ToLower(Char, CultureInfo.InvariantCulture)`。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1127">The <xref:System.Char.ToLowerInvariant%2A> method is equivalent to `ToLower(Char, CultureInfo.InvariantCulture)`.</span></span>

 <span data-ttu-id="c0b7a-1128">使用 <xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> 将字符串转换为小写。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1128">Use <xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.ToLowerInvariant(System.Text.Rune)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-1129">将此实例的值转换为其等效的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1129">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="char.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0b7a-1130">将此实例的值转换为其等效的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1130">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1131">此实例的值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1131">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c0b7a-1132">下面的代码示例演示 <xref:System.Char.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1132">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>

 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (c As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char c);" />
      <MemberSignature Language="F#" Value="static member ToString : char -&gt; string" Usage="System.char.ToString c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-1133">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1133">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1134">将指定的 Unicode 字符转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1134">Converts the specified Unicode character to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1135"><paramref name="c" /> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1135">The string representation of the value of <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c0b7a-1136">下面的代码示例演示 <xref:System.Char.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1136">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>

 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="char.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c0b7a-1137">（保留）一个对象，用于提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1137">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1138">使用指定的区域性特定格式信息将此实例的值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1138">Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1139">此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1139">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1140">忽略 `provider` 参数;它不参与此操作。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1140">The `provider` parameter is ignored; it does not participate in this operation.</span></span>



## Examples
 <span data-ttu-id="c0b7a-1141">下面的代码示例演示 <xref:System.Char.ToString%2A>的重载。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1141">The following code example demonstrates an overload of <xref:System.Char.ToString%2A>.</span></span>

 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0b7a-1142">将 Unicode 字符的值转换为它的大写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1142">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char -&gt; char" Usage="System.char.ToUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-1143">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1143">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1144">将 Unicode 字符的值转换为它的大写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1144">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1145"><paramref name="c" /> 的大写等效项，或者，如果 <paramref name="c" /> 已经是大写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1145">The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1146">大小写规则是从当前区域性获取的。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1146">Casing rules are obtained from the current culture.</span></span>

 <span data-ttu-id="c0b7a-1147">使用 <xref:System.String.ToUpper%2A?displayProperty=nameWithType> 将字符串转换为大写。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1147">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>



## Examples
 <span data-ttu-id="c0b7a-1148">下面的示例将数组中的每个字符转换为其大写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1148">The following example converts each character in an array to its uppercase equivalent.</span></span>

 [!code-csharp[System.Char.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper1.cs#1)]
 [!code-vb[System.Char.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper1.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="c0b7a-1149">如[使用字符串的最佳做法](~/docs/standard/base-types/best-practices-strings.md)中所述，我们建议避免调用替换默认值的字符大小写方法和字符串大小写方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1149">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="c0b7a-1150">相反，应调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1150">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="c0b7a-1151">若要使用当前区域性的大小写约定将字符转换为大写，请使用其 <paramref name="culture" /> 参数的值 <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> 调用 <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1151">To convert a character to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToUpper (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-1152">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1152">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="c0b7a-1153">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1153">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1154">使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的大写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1154">Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1155"><paramref name="c" /> 的大写等效项（根据 <paramref name="culture" /> 进行修改），或者，如果 <paramref name="c" /> 已经是大写字母、没有大写等效项或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1155">The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1156">使用 <xref:System.String.ToUpper%2A?displayProperty=nameWithType> 将字符串转换为大写。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1156">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>



## Examples
 <span data-ttu-id="c0b7a-1157">下面的示例将数组中的每个字符转换为其对应的 en-us 区域性的大写等效项、固定区域性和 tr。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1157">The following example converts each character in an array to its uppercase equivalent for the en-US culture, the invariant culture, and the tr-TR culture.</span></span> <span data-ttu-id="c0b7a-1158">在此示例中，每个小写字母的大写等效项对于除一种情况外的所有区域性都是相同的。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1158">In this example, the uppercase equivalent of each lowercase letter is identical for all cultures except for one case.</span></span> <span data-ttu-id="c0b7a-1159">小写的 "i" 字符（U + 0069）转换为 en-us 和固定区域性中的 "I" （U + 0049），但不能转换为 tr-TR 区域性中的 "i" （U + 0130）。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1159">The lowercase "i" character (U+0069) converts to "I" (U+0049) in the en-US and invariant cultures, but to "İ" (U+0130) in the tr-TR culture.</span></span>

 [!code-csharp[System.Char.ToUpper#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper5.cs#2)]
 [!code-vb[System.Char.ToUpper#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper5.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0b7a-1160"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1160"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static char ToUpperInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpperInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpperInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpperInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpperInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : char -&gt; char" Usage="System.char.ToUpperInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="c0b7a-1161">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1161">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1162">使用固定区域性的大小写规则，将 Unicode 字符的值转换为其大写等效项。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1162">Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1163"><paramref name="c" /> 参数的小写等效项，或者，如果 <paramref name="c" /> 已经是大写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1163">The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1164">如果你的应用程序不受当前区域性的影响，并且依赖于以可预测方式更改的字符的大小写，请使用 <xref:System.Char.ToUpperInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1164">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the <xref:System.Char.ToUpperInvariant%2A> method.</span></span>  <span data-ttu-id="c0b7a-1165"><xref:System.Char.ToUpperInvariant%2A> 方法等效于 `ToUpper(Char, CultureInfo.InvariantCulture)`。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1165">The <xref:System.Char.ToUpperInvariant%2A> method is equivalent to `ToUpper(Char, CultureInfo.InvariantCulture)`.</span></span>

 <span data-ttu-id="c0b7a-1166">使用 <xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> 将字符串转换为大写。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1166">Use <xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.ToUpperInvariant(System.Text.Rune)" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out char result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] char&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.TryParse(System.String,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] char % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * char -&gt; bool" Usage="System.char.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Char" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c0b7a-1167">包含单个字符的字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1167">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <param name="result"><span data-ttu-id="c0b7a-1168">此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中的唯一字符等效的 Unicode 字符；如果转换失败，则包含未定义的值。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1168">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed.</span></span> <span data-ttu-id="c0b7a-1169">如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <paramref name="s" /> 的长度不为 1，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1169">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or the length of <paramref name="s" /> is not 1.</span></span> <span data-ttu-id="c0b7a-1170">此参数在传递时尚未初始化。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1170">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="c0b7a-1171">将指定字符串的值转换为它的等效 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1171">Converts the value of the specified string to its equivalent Unicode character.</span></span> <span data-ttu-id="c0b7a-1172">一个指示转换是成功还是失败的返回代码。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1172">A return code indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="c0b7a-1173">如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1173"><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c0b7a-1174"><xref:System.Char.TryParse%2A> 方法类似于 <xref:System.Char.Parse%2A> 方法，但如果转换失败，则 <xref:System.Char.TryParse%2A> 方法不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1174">The <xref:System.Char.TryParse%2A> method is like the <xref:System.Char.Parse%2A> method, except the <xref:System.Char.TryParse%2A> method does not throw an exception if the conversion fails.</span></span>



## Examples
 <span data-ttu-id="c0b7a-1175">下面的代码示例演示了多个基类型的 <xref:System.Char.TryParse%2A> 方法的重载，以及 <xref:System.DateTime> 基类型的 <xref:System.DateTime.TryParseExact%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1175">The following code example demonstrates overloads of the <xref:System.Char.TryParse%2A> method for several base types, and the <xref:System.DateTime.TryParseExact%2A> method for the <xref:System.DateTime> base type.</span></span>

 [!code-cpp[T.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.TryParse/CPP/tp.cpp#1)]
 [!code-csharp[T.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.TryParse/CS/tp.cs#1)]
 [!code-vb[T.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.TryParse/VB/tp.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="M:System.Char.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-other.md"><span data-ttu-id="c0b7a-1176">在 .NET Framework 中分析其他字符串</span><span class="sxs-lookup"><span data-stu-id="c0b7a-1176">Parsing Other Strings in the .NET Framework</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
