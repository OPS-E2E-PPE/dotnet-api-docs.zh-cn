<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2807c60dd598b1659c5585f8fb52e07d73619806" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75039965" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">要比较的对象的类型。</typeparam>
    <param name="obj">要按照由此委托表示的方法中定义的条件进行比较的对象。</param>
    <summary>表示一种方法，该方法定义一组条件并确定指定对象是否符合这些条件。</summary>
    <returns>如果 <see langword="true" /> 符合由此委托表示的方法中定义的条件，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Array> 和 <xref:System.Collections.Generic.List%601> 类的多个方法使用此委托来搜索集合中的元素。  
  
 通常，<xref:System.Predicate%601> 委托由 lambda 表达式表示。 由于本地范围变量可供 lambda 表达式使用，因此可以很容易地测试编译时不是确切已知的条件。 下面的示例对此进行模拟，其中定义了一个 `HockeyTeam` 类，该类包含有关全国 Hockey 联盟团队和其成立年份的信息。 该示例定义了表示年份的整数值的数组，并将数组的一个元素随机分配给 `foundedBeforeYear`，该变量在本地作用域为该示例的 `Main` 方法。 由于本地范围变量可用于 lambda 表达式，因此传递到 <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> 方法的 lambda 表达式可以为以该年份或之前的每个团队返回 `HockeyTeam` 对象。  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 下面的代码示例将 <xref:System.Predicate%601> 委托与 <xref:System.Array.Find%2A?displayProperty=nameWithType> 方法一起使用以搜索 <xref:System.Drawing.Point> 结构的数组。 该示例显式定义了一个名为 `predicate` 的 <xref:System.Predicate%601> 委托，并为其分配一个名为 `FindPoints` 的方法，如果 <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> 和 <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> 字段的乘积大于100000，该方法将返回 `true`。 请注意，使用 lambda 表达式而不是显式定义 <xref:System.Predicate%601>类型的委托，如第二个示例所示。  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 下面的示例与前面的示例相同，不同之处在于它使用 lambda 表达式来表示 <xref:System.Predicate%601> 委托。  `points` 数组的每个元素都将传递给 lambda 表达式，直到表达式查找满足搜索条件的元素。 在这种情况下，如果 X 和 Y 字段的乘积大于100000，lambda 表达式将返回 `true`。  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>
