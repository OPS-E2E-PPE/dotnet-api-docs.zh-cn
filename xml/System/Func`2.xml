<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="beab42b0b9b42dd4f48e90c53133a1b3c6b7b745" /><Meta Name="ms.sourcegitcommit" Value="f11e0152a1dd5d85dbd684f07123f1829eed3f3a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/17/2020" /><Meta Name="ms.locfileid" Value="76164528" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" Index="0" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="3828e-101">此委托封装的方法的参数类型。</span><span class="sxs-lookup"><span data-stu-id="3828e-101">The type of the parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="3828e-102">此委托封装的方法的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="3828e-102">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg"><span data-ttu-id="3828e-103">此委托封装的方法的参数。</span><span class="sxs-lookup"><span data-stu-id="3828e-103">The parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="3828e-104">封装一个方法，该方法具有一个参数，且返回由 <typeparamref name="TResult" /> 参数指定的类型的值。</span><span class="sxs-lookup"><span data-stu-id="3828e-104">Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="3828e-105">此委托封装的方法的返回值。</span><span class="sxs-lookup"><span data-stu-id="3828e-105">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3828e-106">您可以使用此委托来表示一个方法，该方法可作为参数传递，而无需显式声明自定义委托。</span><span class="sxs-lookup"><span data-stu-id="3828e-106">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="3828e-107">封装的方法必须对应于由此委托定义的方法签名。</span><span class="sxs-lookup"><span data-stu-id="3828e-107">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="3828e-108">这意味着，封装的方法必须具有一个通过值传递给它的参数，并且必须返回一个值。</span><span class="sxs-lookup"><span data-stu-id="3828e-108">This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3828e-109">若要引用一个方法，该方法具有一个参数并返回 `void` （或者在 Visual Basic 中，该方法被声明为 `Sub` 而不是 `Function`），请改用泛型 <xref:System.Action%601> 委托。</span><span class="sxs-lookup"><span data-stu-id="3828e-109">To reference a method that has one parameter and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%601> delegate instead.</span></span>  
  
 <span data-ttu-id="3828e-110">使用 <xref:System.Func%602> 委托时，无需显式定义使用单个参数封装方法的委托。</span><span class="sxs-lookup"><span data-stu-id="3828e-110">When you use the <xref:System.Func%602> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="3828e-111">例如，下面的代码显式声明名为 `ConvertMethod` 的委托，并向其委托实例分配对 `UppercaseString` 方法的引用。</span><span class="sxs-lookup"><span data-stu-id="3828e-111">For example, the following code explicitly declares a delegate named `ConvertMethod` and assigns a reference to the `UppercaseString` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="3828e-112">下面的示例通过实例化 <xref:System.Func%602> 委托简化了此代码，而不是显式定义一个新委托并为其分配一个命名方法。</span><span class="sxs-lookup"><span data-stu-id="3828e-112">The following example simplifies this code by instantiating the <xref:System.Func%602> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp-interactive[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 <span data-ttu-id="3828e-113">你还可以在中C#使用匿名方法的 <xref:System.Func%602> 委托，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="3828e-113">You can also use the <xref:System.Func%602> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="3828e-114">（有关匿名方法的介绍，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。）</span><span class="sxs-lookup"><span data-stu-id="3828e-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp-interactive[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 <span data-ttu-id="3828e-115">你还可以将 lambda 表达式分配给 <xref:System.Func%602> 委托，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="3828e-115">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="3828e-116">（有关 lambda 表达式的介绍，请参阅[Lambda 表达式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)和[lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。）</span><span class="sxs-lookup"><span data-stu-id="3828e-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp-interactive[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="3828e-117">Lambda 表达式的基础类型是泛型 `Func` 委托之一。</span><span class="sxs-lookup"><span data-stu-id="3828e-117">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="3828e-118">这样，便可以将 lambda 表达式作为参数传递，而无需将其显式分配给委托。</span><span class="sxs-lookup"><span data-stu-id="3828e-118">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="3828e-119">具体来说，因为 <xref:System.Linq> 命名空间中的许多类型的方法都具有 <xref:System.Func%602> 参数，所以可以将这些方法传递给 lambda 表达式，而无需显式实例化 <xref:System.Func%602> 委托。</span><span class="sxs-lookup"><span data-stu-id="3828e-119">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%602> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%602> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3828e-120">下面的示例演示如何声明和使用 <xref:System.Func%602> 委托。</span><span class="sxs-lookup"><span data-stu-id="3828e-120">The following example demonstrates how to declare and use a <xref:System.Func%602> delegate.</span></span> <span data-ttu-id="3828e-121">此示例声明一个 <xref:System.Func%602> 变量，并为其分配一个 lambda 表达式，该表达式将字符串中的字符转换为大写。</span><span class="sxs-lookup"><span data-stu-id="3828e-121">This example declares a <xref:System.Func%602> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</span></span> <span data-ttu-id="3828e-122">然后将封装此方法的委托传递给 <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> 方法，以将字符串数组中的字符串更改为大写。</span><span class="sxs-lookup"><span data-stu-id="3828e-122">The delegate that encapsulates this method is subsequently passed to the <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> method to change the strings in an array of strings to uppercase.</span></span>  

 [!code-csharp-interactive[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="3828e-123">Lambda 表达式（C# 编程指南）</span><span class="sxs-lookup"><span data-stu-id="3828e-123">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="3828e-124">Lambda 表达式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3828e-124">Lambda Expressions (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="3828e-125">委托（C# 编程指南）</span><span class="sxs-lookup"><span data-stu-id="3828e-125">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="3828e-126">委托 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3828e-126">Delegates (Visual Basic)</span></span></related>
  </Docs>
</Type>
