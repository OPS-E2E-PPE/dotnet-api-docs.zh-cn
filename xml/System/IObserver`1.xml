<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4739ea15e99660a7981b2c93bdf660344d5f949" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82483028" /></Metadata><TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <TypeSignature Language="F#" Value="type IObserver&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">提供通知信息的对象。</typeparam>
    <summary>提供用于接收基于推送的通知的机制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObserver%601> 和 <xref:System.IObservable%601> 接口为基于推送的通知（也称为观察者设计模式）提供通用机制。 <xref:System.IObservable%601> 接口表示发送通知的类（提供程序）;<xref:System.IObserver%601> 接口表示接收它们的类（观察者）。 `T` 表示提供通知信息的类。  
  
 <xref:System.IObserver%601> 实现通过将自身的实例传递给提供程序的 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> 方法，安排从提供程序（<xref:System.IObservable%601> 实现）接收通知。 此方法返回一个 <xref:System.IDisposable> 对象，该对象可用于在提供程序完成发送通知之前取消订阅观察程序。  
  
 <xref:System.IObserver%601> 接口定义了观察程序必须实现的以下三种方法：  
  
-   <xref:System.IObserver%601.OnNext%2A> 方法，该方法通常由提供程序调用，以向观察者提供新数据或状态信息。  
  
-   <xref:System.IObserver%601.OnError%2A> 方法，该方法通常由提供程序调用，以指示数据不可用、不可访问或已损坏，或者提供程序遇到了一些其他错误情况。  
  
-   <xref:System.IObserver%601.OnCompleted%2A> 方法，该方法通常由提供程序调用，以指示已完成向观察者发送通知。  
  
   
  
## Examples  
 下面的示例演示观察者设计模式。 它定义包含纬度和经度信息的 `Location` 类。  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationReporter` 类提供 <xref:System.IObserver%601> 实现。 它显示有关当前控制台位置的信息。 其构造函数包含一个 `name` 参数，该参数允许 `LocationReporter` 实例在其字符串输出中标识自身。 它还包括一个 `Subscribe` 方法，该方法包装对提供程序的 <xref:System.IObservable%601.Subscribe%2A> 方法的调用。 这使方法可以将返回 <xref:System.IDisposable> 引用分配给私有变量。 `LocationReporter` 类还包括一个 `Unsubscribe` 方法，该方法调用 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> 方法返回的对象的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 方法。 下面的代码定义 `LocationReporter` 类。  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 `LocationTracker` 类提供 <xref:System.IObservable%601> 实现。 它的 `TrackLocation` 方法传递了一个包含纬度和经度数据的可以为 null 的 `Location` 对象。 如果未 `null``Location` 值，则 `TrackLocation` 方法会调用每个观察程序的 <xref:System.IObserver%601.OnNext%2A> 方法。  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 如果 `null``Location` 值，`TrackLocation` 方法将实例化 `LocationNotFoundException` 对象，如下例所示。 然后，它调用每个观察程序的 <xref:System.IObserver%601.OnError%2A> 方法，并向其传递 `LocationNotFoundException` 对象。 请注意，`LocationNotFoundException` 派生自 <xref:System.Exception>，但不添加任何新成员。  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 观察者通过调用其 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> 方法（该方法将对观察程序对象的引用分配给私有泛型 <xref:System.Collections.Generic.List%601> 对象）注册，以接收来自 `TrackLocation` 对象的通知。 方法返回 `Unsubscriber` 对象，该对象是一个 <xref:System.IDisposable> 实现，它使观察程序可以停止接收通知。 `LocationTracker` 类还包括 `EndTransmission` 方法。 当没有更多的位置数据可用时，方法会调用每个观察程序的 <xref:System.IObserver%601.OnCompleted%2A> 方法，然后清除观察程序的内部列表。  
  
 然后，以下代码实例化提供程序和观察程序。  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberSignature Language="F#" Value="abstract member OnCompleted : unit -&gt; unit" Usage="iObserver.OnCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知观察者提供程序已完成发送基于推送的通知。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用观察程序的 <xref:System.IObserver%601.OnCompleted%2A> 实现时，<xref:System.IObserver%601.OnCompleted%2A> 方法可以选择调用在调用 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> 方法时返回到观察者的 <xref:System.IDisposable> 对象的 <xref:System.IDisposable.Dispose%2A> 方法。  
  
   
  
## Examples  
 下面的示例在纬度/经度跟踪应用程序中提供 <xref:System.IObserver%601.OnCompleted%2A> 方法的实现。 方法只是报告没有更多数据可用，并调用提供程序的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现。 有关完整示例，请参阅 <xref:System.IObserver%601> 主题的 "示例" 部分。  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberSignature Language="F#" Value="abstract member OnError : Exception -&gt; unit" Usage="iObserver.OnError error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">提供有关错误的附加信息的对象。</param>
        <summary>通知观察者提供程序遇到错误情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管 `error` 是派生自 <xref:System.Exception?displayProperty=nameWithType>的对象，但它不一定表示由提供程序引发的异常。 它还可以表示例程或预期的错误情况，如缺少或不可用的数据。 应将 <xref:System.IObserver%601.OnError%2A> 方法视为信息性，提供程序不应期望观察者提供错误处理。  
  
   
  
## Examples  
 下面的示例在纬度/经度跟踪应用程序中提供 <xref:System.IObserver%601.OnError%2A> 方法的实现。 方法只报告当前不可用的数据;它不会使用作为参数传递给它的 <xref:System.Exception> 对象。 有关完整示例，请参阅 <xref:System.IObserver%601> 主题的 "示例" 部分。  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c834760f-ddd4-417f-abb7-a059679d5b8c">观察程序设计模式最佳做法</related>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberSignature Language="F#" Value="abstract member OnNext : 'T -&gt; unit" Usage="iObserver.OnNext value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">当前通知信息。</param>
        <summary>向观察者提供新数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 观察程序调用提供程序的 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> 方法后，该提供程序调用观察程序的 <xref:System.IObserver%601.OnNext%2A> 方法来提供通知。  
  
   
  
## Examples  
 下面的示例在纬度/经度跟踪应用程序中提供 <xref:System.IObserver%601.OnNext%2A> 方法的实现。 有关完整示例，请参阅 <xref:System.IObserver%601> 主题的 "示例" 部分。  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
