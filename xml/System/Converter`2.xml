<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="390d6f4f327d433b128a0da1014f522b22c48ee3" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75173254" /></Metadata><TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <TypeSignature Language="F#" Value="type Converter&lt;'Input, 'Output&gt; = delegate of 'Input -&gt; 'Output" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput">要转换的对象的类型。</typeparam>
    <typeparam name="TOutput">要将输入对象转换到的类型。</typeparam>
    <param name="input">要转换的对象。</param>
    <summary>表示将对象从一种类型转换为另一种类型的方法。</summary>
    <returns><typeparamref name="TOutput" />，它表示已转换的 <typeparamref name="TInput" />。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此委托由 <xref:System.Array> 类的 <xref:System.Array.ConvertAll%2A> 方法和 <xref:System.Collections.Generic.List%601> 类的 <xref:System.Collections.Generic.List`1.ConvertAll*> 方法用于将集合中的每个元素从一种类型转换为另一种类型。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个示例演示了 <xref:System.Converter%602> 委托与 <xref:System.Array> 类的 <xref:System.Array.ConvertAll%2A> 方法，第二个示例演示了具有 <xref:System.Collections.Generic.List%601> 泛型类的 <xref:System.Collections.Generic.List`1.ConvertAll*> 方法的委托。  
  
 示例 1  
  
 下面的代码示例定义了一个名为 `PointFToPoint` 的方法，该方法将 <xref:System.Drawing.PointF> 结构转换为 <xref:System.Drawing.Point> 结构。 然后，该示例创建一个 <xref:System.Drawing.PointF> 结构的数组，创建一个 `Converter<PointF, Point>` 委托（在 Visual Basic 中为`Converter(Of PointF, Point)`）以表示 `PointFToPoint` 方法，并将该委托传递给 <xref:System.Array.ConvertAll%2A> 方法。 <xref:System.Array.ConvertAll%2A> 方法将输入列表的每个元素传递到 `PointFToPoint` 方法，并将转换后的元素放入 <xref:System.Drawing.Point> 结构的新列表中。 将显示这两个列表。  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 示例 2  
  
 下面的代码示例定义了一个名为 `PointFToPoint` 的方法，该方法将 <xref:System.Drawing.PointF> 结构转换为 <xref:System.Drawing.Point> 结构。 然后，该示例创建一个 <xref:System.Collections.Generic.List%601> 的 <xref:System.Drawing.PointF> 结构，在 Visual Basic 中创建一个 `Converter\<PointF, Point>``Converter(Of PointF, Point)` 委托来表示 `PointFToPoint` 方法，并将该委托传递给 <xref:System.Collections.Generic.List`1.ConvertAll*> 方法。 <xref:System.Collections.Generic.List`1.ConvertAll*> 方法将输入列表的每个元素传递到 `PointFToPoint` 方法，并将转换后的元素放入 <xref:System.Drawing.Point> 结构的新列表中。 将显示这两个列表。  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
