<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dae77b331be178bf2ec565bb32fdb1525ebede13" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78800194" /></Metadata><TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>为用于监视缓存项所依赖数据的状态更改的派生自定义类型提供基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor> 类用作专用于特定缓存实现的派生监视器类的基类。 <xref:System.Runtime.Caching.ChangeMonitor> 实例监视缓存项所依赖的数据的状态更改。 例如，该项可以是其内容被缓存的文件或数据实体。 如果更新了文件或数据实体，则还必须更改关联的缓存项。 可监视的常见项包括数据实体（如数据库字段、值、行或表）、其他缓存项以及文件和文件属性。  
  
 依赖关系更改是依赖项状态的更改。 在典型缓存实现中，在 <xref:System.Runtime.Caching.ChangeMonitor> 实例通知缓存依赖关系发生了更改时，缓存会执行所需的操作，如使插入的缓存项无效。  
  
 可以自定义派生 <xref:System.Runtime.Caching.ChangeMonitor> 类来监视特定不同数据存储的依赖项更改。 例如，文件系统、物理内存或数据库有缓存实现。 <xref:System.Runtime.Caching.ChangeMonitor> 类检查缓存外发生的更改，然后将更改通知缓存发生了更改。  
  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 包括派生自 <xref:System.Runtime.Caching.ChangeMonitor> 类的以下类：  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 其中每个类都适用于不同类型的依赖项。 例如，派生 <xref:System.Runtime.Caching.FileChangeMonitor> 类监视缓存项所依赖的文件系统数据（文件和文件夹）的缓存更改。  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
    <block subset="none" type="overrides"><para>如果创建自定义缓存实现或派生的更改监视器类型，则必须遵循特定的准则。 下面的列表总结了这些准则。 有关详细信息，请参阅各个方法或属性的文档。  
  
-派生类的构造函数必须设置 <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> 属性，开始监视，并在方法返回前调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 方法。 如果构造函数在构造过程中遇到错误并且必须释放资源，则构造函数只能在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 方法后调用 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> 重载，因为 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> 重载将在初始化未完成时引发 <see cref="T:System.InvalidOperationException" /> 异常。  
  
-如果在初始化完成之前所监视的数据发生更改，则构造函数必须先调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法，然后才能调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 方法。  
  
-实例化派生 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类型后，必须将监视器插入到自定义 <see cref="T:System.Runtime.Caching.ObjectCache" /> 实现中。 或者，如果使用了更改监视器，请调用 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法。  
  
-将 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例插入到 <see cref="T:System.Runtime.Caching.ObjectCache" /> 实现中后，<see cref="T:System.Runtime.Caching.ObjectCache" /> 实例需要释放更改监视器。 即使插入无效并引发异常，<see cref="T:System.Runtime.Caching.ObjectCache" /> 实现也必须调用 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> 重载。  
  
-在将派生的更改监视器插入缓存后，<see cref="T:System.Runtime.Caching.ObjectCache" /> 实现必须通过传递 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 对象来调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />。 只能调用一次 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 方法。 如果已发生依赖项更改，则调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 时将立即调用 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 实例。 否则，将只调用一次 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 的实例。 当调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法时，如果 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例检测到更改，则调用此一次性调用，或在 <see cref="T:System.Runtime.Caching.ChangeMonitor" />上调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法（以先发生者为准）时发生。  
  
-<see cref="T:System.Runtime.Caching.ObjectCache" /> 实现提供的 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 实例应删除关联的缓存条目，并使用 <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> 枚举指定一个原因。  
  
-<see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例可在缓存实现调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 方法之前或之后调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法。 如果在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 之前调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法，则基 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实现将通知缓存此发生了此情况，并将在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 时触发回调立即传递到 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />。 传递给 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法的任何状态数据均由更改监视器保存，并在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 方法时传递给 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 方法。  
  
-更改监视器必须实现 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 方法。 有关更多信息，请参见 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 方法文档。  
  
-必须调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法重载才能释放 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例。 调用 Dispose 的规则如下所示： 
-在将某个项插入缓存之前，调用方负责释放 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 的实例。  
  
-一旦将与之关联的 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例传递到缓存，则缓存实施者必须确保调用 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法，即使插入操作失败也是如此。  
  
-在项及其关联的 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例传递到缓存后，调用方不能释放依赖项，因为调用 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法时，调用将被视为依赖项已更改。 因此，将自动调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法。  
  
-考虑到这些规则，必须通过以下方式之一调用 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法： 
-如果用户决定不将派生的更改监视器实例插入到缓存中，则必须调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法重载。  
  
-如果实现尝试将更改监视器实例插入对象缓存但插入失败，则缓存实现将负责调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 重载。 当插入尝试导致异常时，缓存实现必须释放任何关联的依赖项。  
  
-如果缓存项已移除，则缓存实现也必须释放依赖项。  
  
-<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法在调用通过 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />注册的回调后，会自动调用 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法。  
  
 <block subset="none" type="note"><para>  
 仅当之前已完成 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例的初始化时，才会在事件激发期间自动调用 dispose 方法。  
  
</para></block>  
  
 当派生的更改监视器的构造函数调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 方法时，如果更改监视器的状态已更改（即，当构造函数仍处于活动状态时所监视的状态已更改），则 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 方法将自动释放更改监视器。  
  
-无论是否通过调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 方法设置了 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 对象，<see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> 属性都将设置为 <see langword="true" /> 派生的更改监视器实例调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法之后。</para></block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/xsbfdd8c(v=vs.100)">ASP.NET Caching</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类的新实例。 从派生类中的构造函数调用此构造函数以初始化基类。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor> 类具有无参数的构造函数。 但是，从基本 <xref:System.Runtime.Caching.ChangeMonitor> 类继承并定义自定义更改监视行为的类必须在构造函数中执行初始化。 有关详细信息，请参阅对继承者的说明部分。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生类的构造函数必须设置 <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> 属性，开始监视，然后在返回 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 类之前调用它。 如果在初始化完成之前依赖项发生更改（例如，如果在缓存中找不到依赖缓存键），则构造函数必须先调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法，然后再调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 方法。 在这种情况下，构造函数只能在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 方法后调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法，因为在初始化未完成的情况下，<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法会引发异常。</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法用于发布 <xref:System.Runtime.Caching.ChangeMonitor> 实例和相关资源。 调用 public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法来协调处置过程与派生的更改监视器类（如初始化）的密钥生命周期事件，并释放 <xref:System.Runtime.Caching.ChangeMonitor> 实例，以便可以对实例进行垃圾回收。 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法由派生的更改监视器类实现，以释放其托管和非托管资源。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类的当前实例占用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第一次调用时，<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法只调用一次派生类的 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法。 对 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法的后续调用不起作用。 调用方法后，<xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> 属性设置为 `true`。  
  
 必须调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 重载才能释放 <xref:System.Runtime.Caching.ChangeMonitor> 实例。 下面是用于调用 dispose 方法的规则：  
  
-   在将某个项插入缓存之前，调用方负责释放 <xref:System.Runtime.Caching.ChangeMonitor> 实例。  
  
-   缓存项及其关联的 <xref:System.Runtime.Caching.ChangeMonitor> 实例传递到缓存后，必须确保调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 的缓存实施者，即使插入失败也是如此。  
  
-   在项及其关联的 <xref:System.Runtime.Caching.ChangeMonitor> 实例传递到缓存后，调用方不能释放依赖项，因为调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法时，调用将被视为依赖项已更改。 因此，将自动调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法。  
  
-   考虑这些规则时，必须通过以下方式之一调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法：  
  
    -   如果用户决定不将派生的更改监视器实例插入到缓存中，则必须调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法重载。  
  
    -   如果实现尝试将更改监视器实例插入对象缓存但插入失败，则缓存实现负责调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 重载。 当插入尝试导致异常时，缓存实现必须释放任何关联的依赖项。  
  
    -   如果删除了该缓存项，则缓存实现也必须释放该依赖项。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法在调用通过 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 方法注册的回调后，会自动调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法。  
  
> [!NOTE]
>  仅当先前完成 <xref:System.Runtime.Caching.ChangeMonitor> 实例的初始化时，才会触发事件激发过程中的自动释放。  
  
 当派生的更改监视器的构造函数调用 <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> 方法时，如果更改监视器的状态已更改（即，当构造函数仍处于活动状态时，所监视的状态已发生更改），则 <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> 方法将自动释放更改监视器。  
  
> [!NOTE]
>  用户不应调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法。 但是，您不能阻止用户调用方法。 因此，如果这样做，则调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法。 在这种情况下，将通知缓存项，就好像依赖项发生了更改。  
  
 若要防止派生类重写 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法，该方法不是显式接口实现。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 基方法的派生更改监视器类中，初始化未完成。</exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要释放托管资源和非托管资源，以及对 <see langword="true" /> 实例的任何引用，则为 <see cref="T:System.Runtime.Caching.ChangeMonitor" />；若要仅释放非托管资源，则为 <see langword="false" />。 传递 <see langword="false" /> 时，<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 方法由 <see langword="finalizer" /> 线程调用，所有外部托管引用由于已经作为垃圾回收，因此可能不再有效。</param>
        <summary>释放所有托管资源和非托管资源，以及对 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例的任何引用。 此重载必须由派生的更改监视器类实现。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 `true``disposing` 值的值时，将释放所有托管资源和非托管资源并释放对此对象的任何引用，以便可以对派生的更改监视器实例进行垃圾回收。 保证基本 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法只调用一次已实现的 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <paramref name="disposing" /> 的值 <see langword="true" />时，更改监视器必须实现 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 重载才能释放所有托管资源和非托管资源。 <paramref name="disposing" /> 值为 <see langword="true" /> 的 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 方法重载只调用一次，即首次释放实例时。 更改监视器不能直接调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 重载。 派生的更改监视器可对基 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类调用不太公共参数的 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法。  
  
或者，更改监视器可以实现终结器方法。 在这种情况下，终结器可以调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 方法，并向其传递 <paramref name="disposing" /> <see langword="false" />的值。 但是，这通常是不必要的。 监视依赖项更改通常由维护对更改监视器实例的引用的服务执行。 引用阻止对实例进行垃圾回收，因此不需要终结器方法。 若要避免内存泄漏，在依赖项发生更改时，<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法将释放更改监视器实例（除非初始化尚未完成）。</para></block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示由 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类监视的状态已发生更改。</summary>
        <value>如果由 <see langword="true" /> 实例监视的状态已发生更改，则为 <see cref="T:System.Runtime.Caching.ChangeMonitor" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在派生的 <xref:System.Runtime.Caching.ChangeMonitor> 类中检查此属性的值，以查看依赖关系是否已更改。  
  
 当发生依赖项更改时（即调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法时），该值设置为 `true`。 派生类调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法后，无论是否已通过调用 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 方法通知 <xref:System.Runtime.Caching.OnChangedCallback> 实例，<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 属性的值都将为 `true`。  
  
> [!NOTE]
>  调用方可以检查 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 属性，以查看依赖关系是否已更改。 但在多线程环境中，更简单、更易于维护的方法是将数据插入缓存实现，而不检查 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 属性。 如果已更改一个或多个关联的依赖项，则缓存实现必须检查 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 属性，并且不能执行插入或设置操作。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从派生类的构造函数进行调用以指示初始化已完成。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在派生类中完成初始化之前依赖项发生了更改，则派生类的构造函数必须调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法。  
  
 调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法时，<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 属性会自动设置为更改监视器 `true`。 因此，当更改监视器的构造函数调用 <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> 方法时，基类将自动调用 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法。 如果初始化完成，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法会自动释放派生的更改监视器实例。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生类的构造函数必须在构造函数返回前调用基 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 方法。 派生类的构造函数只能在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 之后调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法，因为 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法在初始化未完成时引发异常。</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示释放 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类的派生实例。</summary>
        <value>如果释放该实例，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在基 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法调用派生类中的 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 方法以释放实例之前，属性设置为 `true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NotifyOnChanged (onChangedCallback As OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">对在某个依赖项更改时要调用的方法的引用。</param>
        <summary>由缓存实施者调用来注册回调，并在某个依赖项已更改时通过 <see cref="T:System.Runtime.Caching.ObjectCache" /> 委托通知 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 缓存实施者使用此方法来连接到更改监视器。 如果将一个或多个更改监视器与缓存项关联，则会将包含已填充的更改监视器属性的 <xref:System.Runtime.Caching.CacheItemPolicy> 实例传递到缓存项。 支持更改监视器的缓存实施者负责遍历 <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> 属性，并将 <xref:System.Runtime.Caching.OnChangedCallback> 委托注册到它找到的每个更改监视器。  
  
 由于 <xref:System.Runtime.Caching.OnChangedCallback> 委托包含可选状态参数，因此具体的更改监视器实现可以传递可选状态信息。 缓存实施者确定是否可以执行自定义更改监视器作为回调的一部分传递的状态类型的显式依赖项。  
  
> [!NOTE]
>  基本缓存扩展性 API 不要求显式依赖于状态类型。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 方法的实现自动确定在调用 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 方法时监视器的状态是否已更改。 如果 `true`<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 属性，则方法将通过 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法自动调用已注册的 <xref:System.Runtime.Caching.OnChangedCallback> 事件处理程序。 之所以发生这种情况，是因为在缓存实现创建更改监视器的时间可能会导致缓存实现获得监视器并向其自身进行线路操作，因此，基础监视状态已更改。 如果状态已更改，则 `null`传递到 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法的对象。  
  
 只能调用一次 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 方法，并将在后续调用时引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已调用回调方法。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="onChangedCallback" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>1. 必须调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 方法，以获得任何依赖项更改的通知。 如果已发生依赖项更改，则调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 时将调用 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 实例。 否则，在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 方法或调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法时（以先发生者为准），<see cref="T:System.Runtime.Caching.OnChangedCallback" /> 实例将被调用一次。 缓存实现提供的 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 实例应删除缓存项，如果缓存调用方请求该缓存项，则将必要的更改或更新事件返回给原始缓存调用方。  
  
2.  对象缓存实现必须删除与依赖项更改关联的缓存项。</para></block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">更改事件的数据。 此值可为 <see langword="null" />。</param>
        <summary>由派生类调用以在某个依赖项发生更改时引发事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，当发生依赖项更改时，将调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法。 当释放更改监视器实例时，也会调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法，但仅当尚未调用回调时才会进行处置。  
  
 如果在调用 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 方法之前调用 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法，则缓存实现将保存对 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 方法的调用的状态数据。 此外，当调用 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 方法时，将立即调用 <xref:System.Runtime.Caching.OnChangedCallback> 方法的回调。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类实例的值。</summary>
        <value>某个更改监视器实例的标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> 属性值通常包含依赖关系名称组合的字符串数据，这些数据可唯一地标识符 <xref:System.Runtime.Caching.ChangeMonitor> 实例所监视的数据。 <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> 属性的值是一个字符串。 字符串的值用于分配 <xref:System.Runtime.Caching.ChangeMonitor> 实例的唯一 ID。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>通过重写属性，可以为属性的字符串值定义自定义实现，以便为其分配唯一 ID。</para></block>
        <block subset="none" type="overrides"><para>在派生类中，必须在构造函数中设置属性的值。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
