<Type Name="ImportCatalogPart" FullName="System.Web.UI.WebControls.WebParts.ImportCatalogPart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33d3df079e6df5b1f48d82e8c41afd8c6ce19b00" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77107546" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImportCatalogPart extends System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImportCatalogPart&#xA;Inherits CatalogPart" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImportCatalogPart sealed : System::Web::UI::WebControls::WebParts::CatalogPart" />
  <TypeSignature Language="F#" Value="type ImportCatalogPart = class&#xA;    inherit CatalogPart" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogPart</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>导入 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件（或用作 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的其他 ASP.NET 服务器控件）的描述文件，以便用户可以将具有预定义设置的此控件添加到网页上。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>" 控件使用户能够导入描述文件，该文件描述用户要添加到 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 区域的 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件或服务器控件上的设置。  
  
 用户导入说明文件后，文件中引用的 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件将显示在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中，用户可以将该控件添加到页面中。  
  
 说明文件与控件本身并不相同。 它是以结尾的 XML 文件。WebPart 扩展和包含名称/值对（主要是用于描述控件状态的属性值）。 根据指定的 XML 格式创建说明文件，如[Web 部件控件说明文件](https://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8)主题中所述。  
  
 对于说明文件所引用的控件，可以将其编译为程序集，也可以是在 .ascx 文件中定义的用户控件。 在这两种情况下，导入的说明文件中引用的控件必须位于承载试图导入控件的页面的 Web 服务器上。 说明文件引用包含控件的控件名称和程序集（或文件），说明文件包含影响控件属性值、外观和行为的设置。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件使用户能够共享控件上的设置。 复杂控件可以有许多属性和设置。 例如，在大型公司内的典型 intranet 网站中，自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件可能包含多个属性，这些属性存储特定于用户环境的值，例如其数据库连接、部门信息等。 控件可能还包含许多影响其外观的属性。 一位用户可以在特定站点上对控件进行个性化设置并使其正常工作，导出控件的描述文件，然后与其他用户共享说明文件，他们可以导入该文件以将完全配置的控件添加到其他 intranet允许其进行个性化设置的站点。 只要包含控件的编译的程序集或用户控件文件存在于承载其站点的 Web 服务器上，用户就可以将该控件添加到其他网站。  
  
 用户将说明文件（及其关联服务器控件）导入到网页的机制是 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件，页面开发人员必须将其添加到网页中。 当用户将页面切换到目录显示模式时，将显示 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件，用户可通过此控件浏览到。对应于要导入的服务器控件的 WebPart 说明文件。 按照 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件提供的 UI 和说明操作，用户可以将所需的服务器控件添加到网页中，其外观和属性完全按导入的说明文件中的指定进行配置。  
  
 用户必须先基于现有 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件创建（导出）文件，然后才能导入 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的说明文件。 如果满足以下条件，则可以为控件导出说明文件：  
  
-   控件具有标记有 `Personalizable` 特性的属性。  
  
-   在 `<webParts>` 元素上，web.config 文件的 `enableExport` 属性值设置为 `true`。  
  
-   开发人员将控件的 <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> 属性的值设置为不允许导出的 <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.None>默认值以外的值。 如果 <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> 属性值设置为 <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.NonSensitiveData>，则当用户导出说明文件时，不会导出包含带有 `Personalizable` 特性的 <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> 参数的任何属性。 这样，控件开发人员就可以防止在某些情况下导出敏感数据（如连接字符串）。  
  
 用户可以导出已启用导出的控件，方法是单击显示在控件的谓词菜单中的导出谓词，然后按照说明保存。控件的 WebPart 说明文件。 然后，其他用户可以导入此文件，以配置其自己的控件实例。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类包含多个属性。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> 属性包含文本，其中包含用户浏览查找说明文件时的说明。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> 属性包含的文本将用作导入的控件在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中的标签。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> 包含在导入控件说明时发生错误时显示的文本。 如果开发人员未分配标题，则 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> 属性将重写基属性，以分配 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的默认标题。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> 属性包含用户单击以上传说明文件的按钮的文本，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> 属性包含上载过程的说明。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类还包含几个唯一方法。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法为目录中的每个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件检索 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 对象，这使 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件可以显示每个服务器控件的信息，而无需创建它的实例。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> 方法根据传递给方法的说明获取特定 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的实例。  
  
 存在一些与使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件相关的固有风险。 例如，可能会通过用于导入的说明文件将恶意数据导入到 Web 应用程序。 如果有人在说明文件中放置了恶意脚本代码作为字符串属性的值，则当用户导入说明文件并将引用的服务器控件添加到网页时，可能会执行该脚本。 若要最大程度地降低导入包含恶意数据的说明文件的风险，具有字符串类型属性的服务器控件应始终对属性数据进行编码。 另一个风险是通过说明文件导入类型（请参阅[Web 部件控件说明文件](https://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8)）。 恶意用户可能会提交请求以将多个程序集加载到 <xref:System.AppDomain>中，导致过度使用内存量。  
  
 若要避免与导入相关的风险，可以通过不使用导入功能或 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件来完全禁用该功能。 也可以限制用户有权访问控件。 你可以使用角色管理以编程方式执行此操作（请参阅使用[角色管理授权](https://docs.microsoft.com/previous-versions/aspnet/9ab2fxh0(v=vs.100))）。 例如，当加载页面时，你可以进行测试以查看用户是否属于特定角色，如 "管理员" 角色。 如果用户处于角色中，则可以通过编程方式将 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件添加到该用户的页面中。 你还可以使用声明性方法来限制可使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的用户集。  在包含目录的网页中，可以放置两个 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件：一个用于可导入的用户，一个用于无法导入的用户。 可以导入的用户的区域将包含 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件。 区域本身可以放置在 <xref:System.Web.UI.WebControls.LoginView> 控件内，这使你可以将区域中的控件限制为仅限经过身份验证的用户或指定的角色。  
  
   
  
## Examples  
 下面的代码示例演示如何在网页上以声明方式和编程方式使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件。 该示例包含四个部分：  
  
-   使您能够在 Web 部件页上更改显示模式的用户控件。  
  
-   包含 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件和 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的网页。  
  
-   一个源代码文件，其中包含两个自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件。  
  
-   说明如何在浏览器中加载页面时工作。  
  
 此代码示例的第一部分是用户控件，该控件使用户能够更改网页上的显示模式。 应将以下源代码放置在文件中，并将其命名为 Displaymodemenucs 或 Displaymodemenuvb （具体取决于所使用的语言）。 有关显示模式的详细信息以及此控件中源代码的说明，请参阅[演练：在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/DisplayModeMenuVB.ascx#7)]  
  
 此代码示例的第二部分是网页。 页面顶部是两个 `register` 指令，一个用于用户控件，一个用于包含两个自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的已编译组件。 请注意，该页具有对 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的声明性引用，该控件嵌套在声明性元素的适当层次结构内。 另请注意，在 `<asp:importcatalogpart>` 元素上以声明方式分配了几个属性值。 此外，`Button1_Click` 方法还会更新 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件上的多个属性值。  
  
 在该页的 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 控件中，将声明两个自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件。 `<aspSample:userinfowebpart>` 控件上有一个 `exportmode="all"` 特性。 此属性是使用户能够导出控件的描述文件所必需的，因此，要使用说明文件导入该控件的其他用户可以导入该文件。  
  
> [!NOTE]
>  若要允许 Web 部件应用程序的用户导出 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的描述文件，还必须通过将 `enableExport="true"` 特性添加到 web.config 文件中的 `<webParts>` 元素（该元素是 `<system.web>` 元素的子元素），在 Web 应用程序中启用导出功能。 默认情况下，导出处于禁用状态，因此，如果尚未对应用程序启用导出功能，请编辑 Web.config 文件并立即执行此操作。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#1)]  
  
 此代码示例的第三部分是两个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的源代码。 请注意，这些控件上的某些属性标有 `WebBrowsable` 特性。 这使得 <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> 控件可以动态生成用户界面（UI），以便用户在控件处于编辑模式时编辑这些属性。 这些属性还带有 `WebDisplayName` 特性标记，用于指定在编辑 UI 中的每个控件旁显示的标签文本。 要使代码示例运行，必须编译此源代码。 可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。 此代码示例使用动态编译。 有关演示两种编译方法的演练，请参阅[演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 使用 `<aspSample:TextDisplayWebPart>` 元素在网页上引用名为 `TextDisplayWebPart` 的自定义控件。 其他控件（称为 `UserInfoWebPart`）最初也是在网页上进行声明的，尽管稍后会将其删除，以便演示为控件导入说明文件的能力。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/userinfowebpart.vb#6)]  
  
 现在运行代码示例。 在浏览器中加载网页。 第一步是编辑 `UserInfoWebPart` 控件。 使用 "**显示模式**" 下拉列表控件并选择 "**编辑**"，将页面切换到编辑模式。 单击 `UserInfoWebPart` 控件的谓词菜单（标题栏中的向下箭头），然后单击 "**编辑**"。 当编辑 UI 出现时，多个编辑控件将出现在 `UserInfoWebPart` 控件下，可用于编辑其字段值。 编辑某些字段，单击 **"确定**"，然后使用 "**显示模式**" 下拉方式将页面返回到浏览模式。  
  
 第二步是导出。`UserInfoWebPart` 控件的 WebPart 说明文件。 单击自定义控件上的谓词菜单（由标题栏中的向下箭头表示），然后单击 "**导出**"。 按照说明保存。控件的 WebPart 说明文件。 现在关闭网页，并在编辑器中编辑页面源。 删除 `<aspSample:userinfowebpart>` 控件声明元素，然后保存并关闭该文件。 （您要执行此步骤来模拟尚无 `UserInfoWebPart` 控件的用户，以便您可以将控件导入该页）。  
  
 再次在浏览器中加载网页。 不应显示 `UserInfoWebPart` 控件，因为已将其删除。 使用 "**显示模式**" 下拉列表控件并选择 "**目录**"，将页面切换到目录模式。 在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中，单击 "**浏览**" 按钮，并浏览到。创建的 WebPart 文件，然后单击 "**上传**" 按钮。 控件的引用应显示在旁边，旁边有一个复选框。 选中该复选框，然后单击 "**添加**" 将控件添加到页面中。  
  
 在此页视图中，单击页面底部附近的 "**更新 ImportCatalogPart** " 按钮，查看以编程方式更新 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件上的多个属性值的效果。 单击按钮后，观察 UI 中各个属性的更改方式。  
  
 最后，单击 "**关闭**" 以退出目录模式并将页面返回到浏览模式。 `UserInfoWebPart` 控件现在应显示在页面中，其中包含之前导出它时的值。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.PageCatalogPart" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart" />
    <related type="Article" href="https://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8">Web 部件控件说明文件</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImportCatalogPart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ImportCatalogPart();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A> 构造函数是默认构造函数;不会在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类中声明任何构造函数，因此在创建类的新实例时，不会执行任何特殊任务。 .NET Framework 在内部使用构造函数来创建类的实例。  
  
 通常无需在自己的代码中以编程方式使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A> 构造函数。 控件的预期用途是使页面开发人员能够在设计时以声明方式将其添加到页面中。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="BrowseHelpText">
      <MemberSignature Language="C#" Value="public string BrowseHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BrowseHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText" />
      <MemberSignature Language="VB.NET" Value="Public Property BrowseHelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BrowseHelpText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BrowseHelpText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条文本消息，该消息指示用户浏览至一个说明文件的位置。</summary>
        <value>包含文本消息的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> 属性为用户提供了在添加导入控件的过程中必须执行的第一件事的简单概述：通过键入路径或浏览到文件来提供说明文件的位置。 为此属性提供自定义值的一个典型原因是，如果您有用户的特殊说明（例如，他们要浏览到的特定网络共享来找到说明文件）。  
  
   
  
## Examples  
 下面的代码示例演示如何以声明方式和编程方式使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> 属性。 有关运行此示例所需的完整代码和说明，请参阅 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类概述的 "示例" 部分。  
  
 在下面的代码部分中，请注意，将以声明方式为控件设置 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> 属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此代码段中，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> 属性值以编程方式分配。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当你在浏览器中加载页面时，可以使用 "**显示模式**" 下拉列表控件选择**目录模式**，然后将页面切换到目录模式。 在目录模式下页面并上传说明文件时，请注意 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的用户界面（UI）中显示的各种文本字符串。 如果单击 "**上传说明文件**" 按钮，则会更改 UI 中多个属性的文本，包括 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> 属性的文本。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected internal override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CreateChildControls ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CreateChildControls();" />
      <MemberSignature Language="F#" Value="override this.CreateChildControls : unit -&gt; unit" Usage="importCatalogPart.CreateChildControls " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public override string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DefaultButton As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DefaultButton { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultButton : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用户界面 (UI) 上视为默认按钮的按钮，该按钮用于在呈现包含它的窗体时接收焦点。 此属性不应在网页开发人员代码中调用。</summary>
        <value>一个字符串，包含接收 <see cref="T:System.Web.UI.WebControls.Button" /> 控件中的默认焦点的 <see cref="T:System.Web.UI.WebControls.Panel" /> 的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的代码重写从 <xref:System.Web.UI.WebControls.Panel> 类继承的基属性，以在设计器中隐藏该属性，并防止其受主题影响。 尽管该属性是公共的，但此属性由 Web 部件控件集在内部使用，用于呈现此控件的默认情况，而不应由页面开发人员使用。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅 <xref:System.Web.UI.ThemeableAttribute> 和[ASP.NET 主题和外观](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Panel.DefaultButton" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableWebPartDescriptions">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAvailableWebPartDescriptions () As WebPartDescriptionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::WebPartDescriptionCollection ^ GetAvailableWebPartDescriptions();" />
      <MemberSignature Language="F#" Value="override this.GetAvailableWebPartDescriptions : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" Usage="importCatalogPart.GetAvailableWebPartDescriptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回目录中可用 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的说明的集合。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" />，它包含目录中每个控件的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法为在 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 类中声明的抽象基方法提供实现。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法返回目录中每个控件的说明信息。 请注意，在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的情况下，一次只能在目录中有一个服务器控件，即使在有多个控件的情况下，该方法也会起作用。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 对象是一个对象，该对象包含有关 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的基本信息，包括其 ID、对控件的对象引用，以及从 <xref:System.Web.UI.WebControls.WebParts.Part> 类继承的几个重要属性的值，如 <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> 和 <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法可提高性能。 创建目录时，它需要有关其包含的每个控件的信息，包括标题、描述、图标（如果存在）和 ID。 无需创建每个控件的实例即可获取此信息，创建目录的 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 区域将调用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法，而调用仅返回控件的说明信息，而不是控件的实例。  
  
   
  
## Examples  
 下面的代码示例演示如何在网页上使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法。 该示例包含四个部分：  
  
-   使您能够在 Web 部件页上更改显示模式的用户控件。  
  
-   包含 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件和 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件以及使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法的代码的网页。  
  
-   一个源代码文件，其中包含两个自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件。  
  
-   说明如何在浏览器中加载页面时工作。  
  
 此代码示例的第一部分是用户控件，该控件使用户能够更改网页上的显示模式。 应将以下源代码放置在文件中，并将其命名为 Displaymodemenucs 或 Displaymodemenuvb （具体取决于所使用的语言）。 有关显示模式的详细信息以及此控件中源代码的说明，请参阅[演练：在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 此代码示例的第二部分是网页。 页面顶部是两个 `register` 指令，一个用于用户控件，一个用于包含两个自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的已编译组件。 这两个控件在页的标记中以声明方式引用。 在对 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的声明性引用（都以 `aspSample` 前缀开头），请注意，每个控件都添加了 `exportMode="all"` 特性。 此特性使你能够导出。控件的 WebPart 说明文件，你将在后面的步骤中使用该文件将控件导入页。  
  
> [!NOTE]
>  若要允许 Web 部件应用程序的用户导出 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的描述文件，还必须通过将 `enableExport="true"` 特性添加到 web.config 文件中的 `<webParts>` 元素（该元素是 `<system.web>` 元素的子元素），在 Web 应用程序中启用导出功能。 默认情况下，导出处于禁用状态，因此，如果尚未对应用程序启用导出功能，请编辑 Web.config 文件并立即执行此操作。  
  
 网页还具有对 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的声明性引用，该控件嵌套在声明性元素的适当层次结构内。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法在 `Button1_Click` 方法的代码中调用。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 此代码示例的第三部分是两个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的源代码。 要使代码示例运行，必须编译此源代码。 可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。 此代码示例使用动态编译。 有关演示两种编译方法的演练，请参阅[演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 现在运行代码示例。 在浏览器中加载网页。 第一步是导出。每个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的 WebPart 说明文件（适用于 `TextDisplayWebPart` 和 `UserInfoWebPart` 控件）。 对于每个控件，单击控件上的谓词菜单（由标题栏中的向下箭头表示），然后单击 "**导出**"。 按照说明保存。控件的 WebPart 说明文件。 为每个控件导出说明文件后，关闭网页，并在编辑器中编辑页面源。 删除 `<aspSample:userinfowebpart>` 和 `<aspSample:textdisplaywebpart>` 控件声明元素，然后保存并关闭该文件。 （您要执行此步骤来模拟尚未获得这些控件的用户，以便您可以将这些控件导入该页）。  
  
 再次在浏览器中加载网页。 使用 "**显示模式**" 下拉列表控件并选择 "**目录**"，将页面切换到目录模式。 在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中，单击 "**浏览**" 按钮，浏览到。创建的 Web 部件文件，选择一个，然后单击 "**上传**" 按钮。 控件的引用应显示在旁边，旁边有一个复选框。 选中该复选框，然后单击 "**添加**" 将控件添加到页面中。 为另一个控件重复此过程。  
  
 在此页视图中，单击页面底部附近的 "**获取 WebPart 说明**" 按钮，查看以编程方式访问当前在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中加载的控件说明的 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 对象的效果。 用于访问说明详细信息的方法（在页源的 `Button1_Click` 方法中找到）是 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> 方法。 按钮下面的标签显示有关控件的基本详细信息。  
  
 添加第一个控件后，重复该过程，将第二个控件添加到该页。 最后，单击 "**关闭**" 以退出目录模式并将页面返回到浏览模式。 这两个自定义控件现在应显示在页面中，其中包含之前导出说明文件时的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="GetWebPart">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPart GetWebPart(class System.Web.UI.WebControls.WebParts.WebPartDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetWebPart (description As WebPartDescription) As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::WebPart ^ GetWebPart(System::Web::UI::WebControls::WebParts::WebPartDescription ^ description);" />
      <MemberSignature Language="F#" Value="override this.GetWebPart : System.Web.UI.WebControls.WebParts.WebPartDescription -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="importCatalogPart.GetWebPart description" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Web.UI.WebControls.WebParts.WebPartDescription" />
      </Parameters>
      <Docs>
        <param name="description"><see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" />，包含控件的详细信息。</param>
        <summary>根据传入方法的说明值，返回对 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的引用。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件，它的说明与 <paramref name="description" /> 中的值匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> 方法返回对 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的引用，其说明详细信息与传入方法的 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 对象的值匹配。 通常，此方法与 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> 方法一起使用，后者用于检索目录中的控件说明。 然后，可以通过将单个 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 对象传递到 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> 方法，按需检索或操作单个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件。  
  
   
  
## Examples  
 下面的代码示例演示如何在网页上使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> 方法。 该示例包含四个部分：  
  
-   使您能够在 Web 部件页上更改显示模式的用户控件。  
  
-   包含 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 控件和 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件以及使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> 方法的代码的网页。  
  
-   一个源代码文件，其中包含两个自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件。  
  
-   说明如何在浏览器中加载页面时工作。  
  
 此代码示例的第一部分是用户控件，该控件使用户能够更改网页上的显示模式。 应将以下源代码放置在文件中，并将其命名为 Displaymodemenucs 或 Displaymodemenuvb （具体取决于所使用的语言）。 有关显示模式的详细信息以及此控件中源代码的说明，请参阅[演练：在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 此代码示例的第二部分是网页。 页面顶部是两个 `register` 指令，一个用于用户控件，一个用于包含两个自定义 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的已编译组件。 这两个控件在页的标记中以声明方式引用。 在对 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的声明性引用（都以 `aspSample` 前缀开头），请注意，每个控件都添加了 `exportMode="all"` 特性。 此特性使你能够导出。控件的 WebPart 说明文件，你将在后面的步骤中使用该文件将控件导入页。  
  
> [!NOTE]
>  若要允许 Web 部件应用程序的用户导出 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的描述文件，还必须通过将 `enableExport="true"` 特性添加到 web.config 文件中的 `<webParts>` 元素（该元素是 `<system.web>` 元素的子元素），在 Web 应用程序中启用导出功能。 默认情况下，导出处于禁用状态，因此，如果尚未对应用程序启用导出功能，请编辑 Web.config 文件并立即执行此操作。  
  
 网页还具有对 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的声明性引用，该控件嵌套在声明性元素的适当层次结构内。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> 方法在 `Button2_Click` 方法的代码中调用。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 此代码示例的第三部分是两个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的源代码。 要使代码示例运行，必须编译此源代码。 可以显式编译该程序集，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在站点的 App_Code 文件夹中，它将在运行时动态编译。 此代码示例使用动态编译。 有关演示两种编译方法的演练，请参阅[演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 现在运行代码示例。 在浏览器中加载网页。 第一步是导出。每个 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件的 WebPart 说明文件（适用于 `TextDisplayWebPart` 和 `UserInfoWebPart` 控件）。 对于每个控件，单击控件上的谓词菜单（由标题栏中的向下箭头表示），然后单击 "**导出**"。 按照说明保存。控件的 WebPart 说明文件。 为每个控件导出说明文件后，关闭网页，并在编辑器中编辑页面源。 删除 `<aspSample:userinfowebpart>` 和 `<aspSample:textdisplaywebpart>` 控件声明元素，然后保存并关闭该文件。 （您要执行此步骤来模拟尚未获得这些控件的用户，以便您可以将这些控件导入该页）。  
  
 再次在浏览器中加载网页。 使用 "**显示模式**" 下拉列表控件并选择 "**目录**"，将页面切换到目录模式。 在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中，单击 "**浏览**" 按钮，浏览到。创建的 Web 部件文件，选择一个，然后单击 "**上传**" 按钮。 控件的引用应显示在旁边，旁边有一个复选框。 将控件说明上载到 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件后，请单击页面底部附近的 "**使用 GetWebPart** " 按钮。 这将演示调用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> 方法并向其传递当前在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中加载的控件说明的效果。 请注意，会将关联的服务器控件立即添加到网页，而用户无需单击 "**添加**" 按钮。 在页源的 `Button2_Click` 方法中调用的 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> 方法返回与 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中加载的当前说明关联的 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件。 接下来，将调用 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> 方法，并将 <xref:System.Web.UI.WebControls.WebParts.WebPart> 控件直接添加到页面中。 此示例演示如何从 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件以编程方式添加控件，而无需用户干预。  
  
 添加第一个控件后，重复该过程，将第二个控件添加到该页。 最后，单击 "**关闭**" 以退出目录模式并将页面返回到浏览模式。 这两个自定义控件现在应显示在页面中，其中包含之前导出说明文件时的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="description" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="description" /> 不是可用的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> 值。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="ImportedPartLabelText">
      <MemberSignature Language="C#" Value="public string ImportedPartLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImportedPartLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Property ImportedPartLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImportedPartLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ImportedPartLabelText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当用户导入一个说明文件后显示的文本，该文本说明或描述导入控件目录中的相应导入控件。</summary>
        <value>包含标签的文本的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> 属性通常用于包含简短的常规标签，用于描述 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件中包含的控件。  
  
   
  
## Examples  
 下面的代码示例演示如何以声明方式和编程方式使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> 属性。 有关运行此示例所需的完整代码和说明，请参阅 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类概述的 "示例" 部分。  
  
 在下面的代码部分中，请注意，将以声明方式为控件设置 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> 属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此代码段中，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> 属性值以编程方式分配。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当你在浏览器中加载页面时，可以使用 "**显示模式**" 下拉列表控件选择**目录模式**，然后将页面切换到目录模式。 在目录模式下页面并上传说明文件时，请注意 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的用户界面（UI）中显示的各种文本字符串。 如果单击 "**上传说明文件**" 按钮，则会更改 UI 中多个属性的文本，包括 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> 属性的文本。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="importCatalogPart.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="importCatalogPart.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartImportErrorLabelText">
      <MemberSignature Language="C#" Value="public string PartImportErrorLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PartImportErrorLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Property PartImportErrorLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PartImportErrorLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PartImportErrorLabelText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条错误消息，该信息在导入过程中发生错误时显示。</summary>
        <value>包含标签的文本的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在页面尝试导入说明文件时出现问题或错误，则 "<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>" 属性对于通知用户很有用。  
  
   
  
## Examples  
 下面的代码示例演示如何以声明方式和编程方式使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> 属性。 有关运行此示例所需的完整代码和说明，请参阅 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类概述的 "示例" 部分。  
  
 在下面的代码部分中，请注意，将以声明方式为控件设置 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> 属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此代码段中，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> 属性值以编程方式分配。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当你在浏览器中加载页面时，可以使用 "**显示模式**" 下拉列表控件选择**目录模式**，然后将页面切换到目录模式。 在目录模式下页面并上传说明文件时，请注意 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的用户界面（UI）中显示的各种文本字符串。 如果单击 "**上传说明文件**" 按钮，则会更改 UI 中多个属性的文本，包括 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> 属性的文本。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="importCatalogPart.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected internal override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderContents (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.RenderContents : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="importCatalogPart.RenderContents writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="importCatalogPart.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public override string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" /> 控件的标题栏中显示的标题。</summary>
        <value>用作控件标题的字符串。 默认值是 Web 部件控件集提供的、计算出的控件名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当控件在目录模式中可见时，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> 属性值显示在 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的标题栏中。 当在页中声明控件时，可以通过使用 `Title` 特性设置属性的值。 如果未提供标题的值，则使用特定于区域性的默认值描述此控件允许用户编辑的属性类型。  
  
   
  
## Examples  
 下面的代码示例演示如何以声明方式和编程方式使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> 属性。 有关运行此示例所需的完整代码和说明，请参阅 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类概述的 "示例" 部分。  
  
 在下面的代码部分中，请注意，将以声明方式为控件设置 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> 属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此代码段中，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> 属性值以编程方式分配。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当你在浏览器中加载页面时，可以使用 "**显示模式**" 下拉列表控件选择**目录模式**，然后将页面切换到目录模式。 在目录模式下页面并上传说明文件时，请注意 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的用户界面（UI）中显示的各种文本字符串。 如果单击 "**上传说明文件**" 按钮，则会更改 UI 中多个属性的文本，包括 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> 属性的文本。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="UploadButtonText">
      <MemberSignature Language="C#" Value="public string UploadButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadButtonText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText" />
      <MemberSignature Language="VB.NET" Value="Public Property UploadButtonText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UploadButtonText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UploadButtonText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.Button" /> 控件的文本，该控件初始化说明文件的上载。</summary>
        <value>用作 <see cref="T:System.Web.UI.WebControls.Button" /> 的文本的字符串。 该默认值是一个由 Web 部件控件集提供的、特定于区域性的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> 属性提供了启动上载过程的 <xref:System.Web.UI.WebControls.Button> 控件的文本。 如果将自定义文本分配给此属性，或分配到 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> 属性，则文本应清楚地表明用户正在上传说明文件。 文本不应说，也不表示上载过程实际上载控件本身。  
  
   
  
## Examples  
 下面的代码示例演示如何以声明方式和编程方式使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> 属性。 有关运行此示例所需的完整代码和说明，请参阅 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类概述的 "示例" 部分。  
  
 在下面的代码部分中，请注意，将以声明方式为控件设置 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> 属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此代码段中，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> 属性值以编程方式分配。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当你在浏览器中加载页面时，可以使用 "**显示模式**" 下拉列表控件选择**目录模式**，然后将页面切换到目录模式。 在目录模式下页面并上传说明文件时，请注意 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的用户界面（UI）中显示的各种文本字符串。 如果单击 "**上传说明文件**" 按钮，则会更改 UI 中多个属性的文本，包括 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> 属性的文本。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="UploadHelpText">
      <MemberSignature Language="C#" Value="public string UploadHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText" />
      <MemberSignature Language="VB.NET" Value="Public Property UploadHelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UploadHelpText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UploadHelpText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条文本消息，该消息告诉用户如何上载说明文件。</summary>
        <value>用作用户上载说明文件时的提示的字符串。 该默认值是一个由 Web 部件控件集提供的、特定于区域性的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> 属性为用户提供了一个简短的句子或短语说明，告诉他们单击一个按钮上传说明文件。 如果将自定义文本分配给此属性，或分配到 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> 属性，则文本应清楚地表明用户正在上传说明文件。 文本不应说，也不表示上载过程实际上载控件本身。  
  
   
  
## Examples  
 下面的代码示例演示如何以声明方式和编程方式使用 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> 属性。 有关运行此示例所需的完整代码和说明，请参阅 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 类概述的 "示例" 部分。  
  
 在下面的代码部分中，请注意，将以声明方式为控件设置 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> 属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此代码段中，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> 属性值以编程方式分配。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当你在浏览器中加载页面时，可以使用 "**显示模式**" 下拉列表控件选择**目录模式**，然后将页面切换到目录模式。 在目录模式下页面并上传说明文件时，请注意 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 控件的用户界面（UI）中显示的各种文本字符串。 如果单击 "**上传说明文件**" 按钮，则会更改 UI 中多个属性的文本，包括 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> 属性的文本。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
  </Members>
</Type>
