<Type Name="Thread" FullName="System.Threading.Thread">
  <Metadata><Meta Name="ms.openlocfilehash" Value="28940d1ccf8cfc682bfdfb25e8a009feb7873360" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83536240" /></Metadata><TypeSignature Language="C#" Value="public sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Thread" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread&#xA;Inherits CriticalFinalizerObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
  <TypeSignature Language="F#" Value="type Thread = class&#xA;    inherit CriticalFinalizerObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
  <TypeSignature Language="C#" Value="public sealed class Thread" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Thread extends System.Object" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type Thread = class" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public sealed class Thread : System.Runtime.InteropServices._Thread" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Thread extends System.Object implements class System.Runtime.InteropServices._Thread" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread&#xA;Implements _Thread" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed : System::Runtime::InteropServices::_Thread" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type Thread = class&#xA;    interface _Thread" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C#" Value="public sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.Runtime.InteropServices._Thread" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread&#xA;Inherits CriticalFinalizerObject&#xA;Implements _Thread" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, System::Runtime::InteropServices::_Thread" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Thread = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface _Thread" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.Runtime.InteropServices._Thread" FrameworkAlternate="xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Thread</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Thread))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="990c0-101">创建和控制线程，设置其优先级并获取其状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-101">Creates and controls a thread, sets its priority, and gets its status.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-102">进程启动时，公共语言运行时将自动创建单个前台线程以执行应用程序代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-102">When a process starts, the common language runtime automatically creates a single foreground thread to execute application code.</span></span> <span data-ttu-id="990c0-103">除了此主前台线程，进程还可以创建一个或多个线程来执行与进程关联的程序代码的一部分。</span><span class="sxs-lookup"><span data-stu-id="990c0-103">Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process.</span></span> <span data-ttu-id="990c0-104">这些线程可以在前台或后台执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-104">These threads can execute either in the foreground or in the background.</span></span> <span data-ttu-id="990c0-105">此外，还可以使用 <xref:System.Threading.ThreadPool> 类来执行由公共语言运行时管理的工作线程上的代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-105">In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime.</span></span>  
  
 <span data-ttu-id="990c0-106">在本节中</span><span class="sxs-lookup"><span data-stu-id="990c0-106">In this section</span></span>  
  
 <span data-ttu-id="990c0-107">[启动线程](#Starting) </span><span class="sxs-lookup"><span data-stu-id="990c0-107">[Starting a thread](#Starting) </span></span>  
 <span data-ttu-id="990c0-108">[检索线程对象](#Retrieving) </span><span class="sxs-lookup"><span data-stu-id="990c0-108">[Retrieving Thread objects](#Retrieving) </span></span>  
 <span data-ttu-id="990c0-109">[前台和后台线程](#Foreground) </span><span class="sxs-lookup"><span data-stu-id="990c0-109">[Foreground and background threads](#Foreground) </span></span>  
 <span data-ttu-id="990c0-110">[区域性和线程](#Culture) </span><span class="sxs-lookup"><span data-stu-id="990c0-110">[Culture and threads](#Culture) </span></span>  
 [<span data-ttu-id="990c0-111">获取和控制线程的相关信息</span><span class="sxs-lookup"><span data-stu-id="990c0-111">Getting information about and controlling threads</span></span>](#Properties)   
   
<a name="Starting"></a>   
## <a name="starting-a-thread"></a><span data-ttu-id="990c0-112">启动线程</span><span class="sxs-lookup"><span data-stu-id="990c0-112">Starting a thread</span></span>  
 <span data-ttu-id="990c0-113">您可以通过提供委托来启动线程，该委托表示线程在其类构造函数中执行的方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-113">You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor.</span></span> <span data-ttu-id="990c0-114">然后调用 <xref:System.Threading.Thread.Start%2A> 方法开始执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-114">You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution.</span></span>  
  
 <span data-ttu-id="990c0-115"><xref:System.Threading.Thread> 构造函数可以采用两种委托类型中的任意一种，具体取决于是否可以将参数传递给要执行的方法：</span><span class="sxs-lookup"><span data-stu-id="990c0-115">The <xref:System.Threading.Thread> constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:</span></span>  
  
-   <span data-ttu-id="990c0-116">如果该方法没有参数，则将 <xref:System.Threading.ThreadStart> 委托传递给构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-116">If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor.</span></span> <span data-ttu-id="990c0-117">它具有签名：</span><span class="sxs-lookup"><span data-stu-id="990c0-117">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ThreadStart()  
    ```  
  
    ```vb  
    Public Delegate Sub ThreadStart()  
    ```  
  
     <span data-ttu-id="990c0-118">下面的示例创建并启动一个线程来执行 `ExecuteInForeground` 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-118">The following example creates and starts a thread that executes the `ExecuteInForeground` method.</span></span> <span data-ttu-id="990c0-119">方法显示有关某些线程属性的信息，然后执行循环，其中每半秒暂停一次，并显示已用的秒数。</span><span class="sxs-lookup"><span data-stu-id="990c0-119">The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds.</span></span> <span data-ttu-id="990c0-120">当线程至少执行五秒后，循环结束，线程终止执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-120">When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.</span></span>  
  
     [!code-csharp[System.Threading.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart1.cs#1)]
     [!code-vb[System.Threading.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart1.vb#1)]  
  
-   <span data-ttu-id="990c0-121">如果该方法具有参数，则将 <xref:System.Threading.ParameterizedThreadStart> 委托传递给构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-121">If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor.</span></span> <span data-ttu-id="990c0-122">它具有签名：</span><span class="sxs-lookup"><span data-stu-id="990c0-122">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ParameterizedThreadStart(object obj)  
    ```  
  
    ```vb  
    Public Delegate Sub ParameterizedThreadStart(obj As Object)  
    ```  
  
     <span data-ttu-id="990c0-123">然后，由委托执行的方法可以将参数强制C#转换（在中）或将参数转换（Visual Basic）到相应的类型。</span><span class="sxs-lookup"><span data-stu-id="990c0-123">The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.</span></span>  
  
     <span data-ttu-id="990c0-124">下面的示例与上一个示例相同，不同之处在于它调用 <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-124">The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor.</span></span> <span data-ttu-id="990c0-125">此版本的 `ExecuteInForeground` 方法有一个参数，该参数表示执行循环的大约毫秒数。</span><span class="sxs-lookup"><span data-stu-id="990c0-125">This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute.</span></span>  
  
     [!code-csharp[System.Threading.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart2.cs#2)]
     [!code-vb[System.Threading.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart2.vb#2)]  
  
 <span data-ttu-id="990c0-126">启动线程后，不需要保留对 <xref:System.Threading.Thread> 对象的引用。</span><span class="sxs-lookup"><span data-stu-id="990c0-126">It is not necessary to retain a reference to a <xref:System.Threading.Thread> object once you have started the thread.</span></span> <span data-ttu-id="990c0-127">线程将继续执行，直到线程过程完成。</span><span class="sxs-lookup"><span data-stu-id="990c0-127">The thread continues to execute until the thread procedure is complete.</span></span>  
  
<a name="Retrieving"></a>   
## <a name="retrieving-thread-objects"></a><span data-ttu-id="990c0-128">检索线程对象</span><span class="sxs-lookup"><span data-stu-id="990c0-128">Retrieving Thread objects</span></span>  
 <span data-ttu-id="990c0-129">可以使用 static （`Shared` Visual Basic） <xref:System.Threading.Thread.CurrentThread%2A> 属性从线程正在执行的代码中检索对当前正在执行的线程的引用。</span><span class="sxs-lookup"><span data-stu-id="990c0-129">You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing.</span></span> <span data-ttu-id="990c0-130">下面的示例使用 <xref:System.Threading.Thread.CurrentThread%2A> 属性显示有关主应用程序线程、另一个前台线程、一个后台线程和一个线程池线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-130">The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.</span></span>  
  
 [!code-csharp[System.Threading.Thread#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/Instance1.cs#4)]
 [!code-vb[System.Threading.Thread#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/Instance1.vb#4)]  
  
<a name="Foreground"></a>   
## <a name="foreground-and-background-threads"></a><span data-ttu-id="990c0-131">前台和后台线程</span><span class="sxs-lookup"><span data-stu-id="990c0-131">Foreground and background threads</span></span>  
 <span data-ttu-id="990c0-132"><xref:System.Threading.Thread> 类的实例表示前台线程或后台线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-132">Instances of the <xref:System.Threading.Thread> class represent either foreground threads or background threads.</span></span> <span data-ttu-id="990c0-133">后台线程与前台线程完全相同，但有一种例外情况：如果所有前台线程均已终止，后台线程并不会使进程保持运行。</span><span class="sxs-lookup"><span data-stu-id="990c0-133">Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated.</span></span> <span data-ttu-id="990c0-134">所有前台线程停止后，运行时将停止所有后台线程并关闭。</span><span class="sxs-lookup"><span data-stu-id="990c0-134">Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.</span></span>  
  
 <span data-ttu-id="990c0-135">默认情况下，以下线程在前台执行：</span><span class="sxs-lookup"><span data-stu-id="990c0-135">By default, the following threads execute in the foreground:</span></span>  
  
-   <span data-ttu-id="990c0-136">主应用程序线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-136">The main application thread.</span></span>  
  
-   <span data-ttu-id="990c0-137">通过调用 <xref:System.Threading.Thread> 类构造函数创建的所有线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-137">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="990c0-138">默认情况下，以下线程在后台执行：</span><span class="sxs-lookup"><span data-stu-id="990c0-138">The following threads execute in the background by default:</span></span>  
  
-   <span data-ttu-id="990c0-139">线程池线程，线程池是由运行时维护的工作线程池。</span><span class="sxs-lookup"><span data-stu-id="990c0-139">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span>  <span data-ttu-id="990c0-140">您可以使用 <xref:System.Threading.ThreadPool> 类配置线程池和计划线程池线程上的工作。</span><span class="sxs-lookup"><span data-stu-id="990c0-140">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="990c0-141">基于任务的异步操作会在线程池线程上自动执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-141">Task-based asynchronous operations automatically execute on thread pool threads.</span></span> <span data-ttu-id="990c0-142">基于任务的异步操作使用 <xref:System.Threading.Tasks.Task> 和 <xref:System.Threading.Tasks.Task%601> 类实现[基于任务的异步模式](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-142">Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span></span>  
  
-   <span data-ttu-id="990c0-143">从非托管代码进入托管执行环境的所有线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-143">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
 <span data-ttu-id="990c0-144">你可以随时通过设置 "<xref:System.Threading.Thread.IsBackground%2A>" 属性来更改要在后台中执行的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-144">You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time.</span></span>  <span data-ttu-id="990c0-145">当应用程序正在运行但不应阻止应用程序终止时（如监视文件系统更改或传入套接字连接），后台线程适用于应该继续执行的任何操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-145">Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.</span></span>  
  
 <span data-ttu-id="990c0-146">下面的示例演示前台和后台线程之间的差异。</span><span class="sxs-lookup"><span data-stu-id="990c0-146">The following example illustrates the difference between foreground and background threads.</span></span> <span data-ttu-id="990c0-147">它类似于[启动线程](#Starting)部分中的第一个示例，只不过它会将线程设置为在后台执行，然后再启动它。</span><span class="sxs-lookup"><span data-stu-id="990c0-147">It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it.</span></span> <span data-ttu-id="990c0-148">如输出所示，循环在执行5秒之前中断。</span><span class="sxs-lookup"><span data-stu-id="990c0-148">As the output shows, the loop is interrupted before it executes for five seconds.</span></span>  
  
 [!code-csharp[System.Threading.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/BackgroundEx1.cs#3)]
 [!code-vb[System.Threading.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/BackgroundEx1.vb#3)]  
  
<a name="Culture"></a>   
## <a name="culture-and-threads"></a><span data-ttu-id="990c0-149">区域性和线程</span><span class="sxs-lookup"><span data-stu-id="990c0-149">Culture and threads</span></span>  
 <span data-ttu-id="990c0-150">每个线程都具有由 <xref:System.Threading.Thread.CurrentCulture%2A> 属性表示的区域性，以及由 <xref:System.Threading.Thread.CurrentUICulture%2A> 属性表示的 UI 区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-150">Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property.</span></span>  <span data-ttu-id="990c0-151">当前区域性支持诸如分析和格式化、字符串比较和排序等区分区域性的操作，还可控制线程使用的书写体系和日历。</span><span class="sxs-lookup"><span data-stu-id="990c0-151">The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread.</span></span> <span data-ttu-id="990c0-152">当前 UI 区域性提供对资源文件中的资源进行区分区域性的检索。</span><span class="sxs-lookup"><span data-stu-id="990c0-152">The current UI culture provides for culture-sensitive retrieval of resources in resource files.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="990c0-153">与当前线程以外的任何线程一起使用时，<xref:System.Threading.Thread.CurrentCulture> 和 <xref:System.Threading.Thread.CurrentUICulture> 属性将无法可靠运行。</span><span class="sxs-lookup"><span data-stu-id="990c0-153">The <xref:System.Threading.Thread.CurrentCulture> and <xref:System.Threading.Thread.CurrentUICulture> properties don't work reliably when used with any thread other than the current thread.</span></span> <span data-ttu-id="990c0-154">在 .NET Framework 中，虽然为当前线程以外的线程设置这些属性，但读取这些属性是可靠的。</span><span class="sxs-lookup"><span data-stu-id="990c0-154">In .NET Framework, reading these properties is reliable, although setting these properties for a thread other than the current thread is not.</span></span> <span data-ttu-id="990c0-155">在 .NET Core 中，如果线程尝试在另一个线程上读取或写入这些属性，则会引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-155">On .NET Core, an <xref:System.InvalidOperationException> is thrown if a thread attempts to read or write these properties on a different thread.</span></span>
> <span data-ttu-id="990c0-156">建议使用 <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> 和 <xref:System.Globalization.CultureInfo.CurrentUICulture?displayProperty=nameWithType> 属性检索和设置当前区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-156">We recommend that you use the <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.CurrentUICulture?displayProperty=nameWithType> properties to retrieve and set the current culture.</span></span>

 <span data-ttu-id="990c0-157">实例化新线程时，其区域性和 UI 区域性由当前系统区域性和 UI 区域性定义，而不是由从中创建新线程的线程的区域性和 UI 区域性定义。</span><span class="sxs-lookup"><span data-stu-id="990c0-157">When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created.</span></span> <span data-ttu-id="990c0-158">这意味着，如果当前系统区域性为英语（美国）并且主应用程序线程的当前区域性为法语（法国），则通过从主线程调用 <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> 构造函数而创建的新线程的区域性为 "英语（美国）"，而不是 "法语（法国）"。</span><span class="sxs-lookup"><span data-stu-id="990c0-158">This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France).</span></span> <span data-ttu-id="990c0-159">有关详细信息，请参阅 <xref:System.Globalization.CultureInfo> 类主题中的 "区域性和线程" 一节。</span><span class="sxs-lookup"><span data-stu-id="990c0-159">For more information, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-160">对于面向 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 和更高版本的应用程序执行异步操作的线程，这种情况并不是如此，在这种情况下，区域性和 UI 区域性是异步操作的上下文的一部分;默认情况下，执行异步操作的线程继承从中启动异步操作的线程的区域性和 UI 区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-160">This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched.</span></span> <span data-ttu-id="990c0-161">有关详细信息，请参阅 <xref:System.Globalization.CultureInfo> 类主题中的“区域性和基于任务的异步操作”一节。</span><span class="sxs-lookup"><span data-stu-id="990c0-161">For more information, see the "Culture and task-based asynchronous operations" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
 <span data-ttu-id="990c0-162">可以执行以下任一操作，以确保在应用程序中执行的所有线程共享相同的区域性和 UI 区域性：</span><span class="sxs-lookup"><span data-stu-id="990c0-162">You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:</span></span>  
  
-   <span data-ttu-id="990c0-163">可以向 <xref:System.Threading.ParameterizedThreadStart> 委托或 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> 方法传递表示区域性的 <xref:System.Globalization.CultureInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="990c0-163">You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="990c0-164">对于在 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 及更高版本上运行的应用，可以通过设置 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> 和 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> 属性的值，定义要分配给在应用程序域中创建的所有线程的区域性和 UI 区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-164">For apps running on the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="990c0-165">请注意，这是每个应用程序的域设置。</span><span class="sxs-lookup"><span data-stu-id="990c0-165">Note that this is a per-application domain setting.</span></span>  

 <span data-ttu-id="990c0-166">有关详细信息和示例，请参阅 <xref:System.Globalization.CultureInfo> 类主题中的 "区域性和线程" 一节。</span><span class="sxs-lookup"><span data-stu-id="990c0-166">For more information and examples, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>

<a name="Properties"></a>   
## <a name="getting-information-about-and-controlling-threads"></a><span data-ttu-id="990c0-167">获取和控制线程的相关信息</span><span class="sxs-lookup"><span data-stu-id="990c0-167">Getting information about and controlling threads</span></span>  
 <span data-ttu-id="990c0-168">您可以检索提供有关线程信息的多个属性值。</span><span class="sxs-lookup"><span data-stu-id="990c0-168">You can retrieve a number of property values that provide information about a thread.</span></span> <span data-ttu-id="990c0-169">在某些情况下，还可以设置这些属性值来控制线程的操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-169">In some cases, you can also set these property values to control the operation of the thread.</span></span> <span data-ttu-id="990c0-170">这些线程属性包括：</span><span class="sxs-lookup"><span data-stu-id="990c0-170">These thread properties include:</span></span>  
  
-   <span data-ttu-id="990c0-171">名称。</span><span class="sxs-lookup"><span data-stu-id="990c0-171">A name.</span></span> <span data-ttu-id="990c0-172"><xref:System.Threading.Thread.Name%2A> 是一种只写的属性，可用于标识线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-172"><xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread.</span></span>  <span data-ttu-id="990c0-173">它的默认值为 `null`。</span><span class="sxs-lookup"><span data-stu-id="990c0-173">Its default value is `null`.</span></span>  
  
-   <span data-ttu-id="990c0-174">哈希代码，可以通过调用 <xref:System.Threading.Thread.GetHashCode%2A> 方法来检索。</span><span class="sxs-lookup"><span data-stu-id="990c0-174">A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method.</span></span> <span data-ttu-id="990c0-175">哈希代码可用于唯一标识线程;在线程的生存期内，无论从中获取值的应用程序域如何，其哈希代码都不会与其他任何线程的值相冲突。</span><span class="sxs-lookup"><span data-stu-id="990c0-175">The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.</span></span>  
  
-   <span data-ttu-id="990c0-176">线程 ID。</span><span class="sxs-lookup"><span data-stu-id="990c0-176">A thread ID.</span></span> <span data-ttu-id="990c0-177">只读 <xref:System.Threading.Thread.ManagedThreadId%2A> 属性的值由运行时分配并在其进程中唯一标识一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-177">The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="990c0-178">因为非托管宿主可以控制托管线程和非托管线程之间的关系，所以操作系统 [ThreadId](/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadid) 与托管线程之间没有固定的关系。</span><span class="sxs-lookup"><span data-stu-id="990c0-178">An operating-system [ThreadId](/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadid) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.</span></span> <span data-ttu-id="990c0-179">具体而言，一个复杂的主机可以使用[CLR 宿主 API](~/docs/framework/unmanaged-api/hosting/index.md)为同一操作系统线程计划多个托管线程，或在不同的操作系统线程之间移动托管线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-179">Specifically, a sophisticated host can use the [CLR Hosting API](~/docs/framework/unmanaged-api/hosting/index.md) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.</span></span>  
  
-   <span data-ttu-id="990c0-180">线程的当前状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-180">The thread's current state.</span></span> <span data-ttu-id="990c0-181">在其存在的持续时间内，线程始终处于由 <xref:System.Threading.ThreadState> 属性定义的一个或多个状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-181">For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property.</span></span>  
  
-   <span data-ttu-id="990c0-182">计划优先级级别，由 <xref:System.Threading.ThreadPriority> 属性定义。</span><span class="sxs-lookup"><span data-stu-id="990c0-182">A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property.</span></span> <span data-ttu-id="990c0-183">虽然您可以将此值设置为请求线程的优先级，但并不保证操作系统接受此值。</span><span class="sxs-lookup"><span data-stu-id="990c0-183">Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.</span></span>  
  
-   <span data-ttu-id="990c0-184">只读 <xref:System.Threading.Thread.IsThreadPoolThread%2A> 属性，指示线程是否为线程池线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-184">The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread.</span></span>  
  
-   <span data-ttu-id="990c0-185">
          <xref:System.Threading.Thread.IsBackground%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="990c0-185">The <xref:System.Threading.Thread.IsBackground%2A> property.</span></span> <span data-ttu-id="990c0-186">有关详细信息，请参阅[前台和后台线程](#Foreground)部分。</span><span class="sxs-lookup"><span data-stu-id="990c0-186">For more information, see the [Foreground and background threads](#Foreground) section.</span></span>  
  
## Examples  
 <span data-ttu-id="990c0-187">下面的示例演示简单的线程处理功能。</span><span class="sxs-lookup"><span data-stu-id="990c0-187">The following example demonstrates simple threading functionality.</span></span>  
  
 [!code-cpp[Classic Thread Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Thread Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Thread Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Thread Example/CS/source.cs#1)]
 [!code-vb[Classic Thread Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Thread Example/VB/source.vb#1)]  
  
 <span data-ttu-id="990c0-188">此代码生成与下面类似的输出：</span><span class="sxs-lookup"><span data-stu-id="990c0-188">This code produces output similar to the following:</span></span>  
  
```  
[VB, C++, C#]  
Main thread: Start a second thread.  
Main thread: Do some work.  
ThreadProc: 0  
Main thread: Do some work.  
ThreadProc: 1  
Main thread: Do some work.  
ThreadProc: 2  
Main thread: Do some work.  
ThreadProc: 3  
Main thread: Call Join(), to wait until ThreadProc ends.  
ThreadProc: 4  
ThreadProc: 5  
ThreadProc: 6  
ThreadProc: 7  
ThreadProc: 8  
ThreadProc: 9  
Main thread: ThreadProc.Join has returned.  Press Enter to end program.  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="990c0-189">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="990c0-189">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-190">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-190">Threads and Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md"><span data-ttu-id="990c0-191">使用线程和线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-191">Using Threads and Threading</span></span></related>
    <related type="ExternalDocumentation" href="https://referencesource.microsoft.com/#mscorlib/system/threading/thread.cs#3980e012bae82e96"><span data-ttu-id="990c0-192">Thread 类的引用源</span><span class="sxs-lookup"><span data-stu-id="990c0-192">Reference Source for the Thread Class</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="990c0-193">初始化 <see cref="T:System.Threading.Thread" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="990c0-193">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ParameterizedThreadStart -&gt; System.Threading.Thread" Usage="new System.Threading.Thread start" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="990c0-194">一个委托，它表示此线程开始执行时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-194">A delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <summary><span data-ttu-id="990c0-195">初始化 <see cref="T:System.Threading.Thread" /> 类的新实例，指定允许对象在线程启动时传递给线程的委托。</span><span class="sxs-lookup"><span data-stu-id="990c0-195">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-196">创建线程时，它不会开始执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-196">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="990c0-197">若要计划线程的执行，请调用 <xref:System.Threading.Thread.Start%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-197">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span> <span data-ttu-id="990c0-198">若要将数据对象传递到线程，请使用 <xref:System.Threading.Thread.Start%28System.Object%29> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="990c0-198">To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-199">Visual Basic 用户在创建线程时可以省略 <xref:System.Threading.ThreadStart> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-199">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="990c0-200">传递方法时，请使用 `AddressOf` 运算符，例如 `Dim t As New Thread(AddressOf ThreadProc)`。</span><span class="sxs-lookup"><span data-stu-id="990c0-200">Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="990c0-201">Visual Basic 自动调用 <xref:System.Threading.ThreadStart> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-201">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-202">下面的示例演示了用静态方法和实例方法创建和使用 <xref:System.Threading.ParameterizedThreadStart> 委托的语法。</span><span class="sxs-lookup"><span data-stu-id="990c0-202">The following example shows the syntax for creating and using a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="990c0-203"><paramref name="start" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-203"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <altmember cref="T:System.AppDomain" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="990c0-204">创建线程</span><span class="sxs-lookup"><span data-stu-id="990c0-204">Creating Threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ThreadStart -&gt; System.Threading.Thread" Usage="new System.Threading.Thread start" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="990c0-205">表示开始执行此线程时要调用的方法的 <see cref="T:System.Threading.ThreadStart" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="990c0-205">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <summary><span data-ttu-id="990c0-206">初始化 <see cref="T:System.Threading.Thread" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="990c0-206">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-207">创建线程时，它不会开始执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-207">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="990c0-208">若要计划线程的执行，请调用 <xref:System.Threading.Thread.Start%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-208">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-209">Visual Basic 用户在创建线程时可以省略 <xref:System.Threading.ThreadStart> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-209">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="990c0-210">传递方法时，请使用 `AddressOf` 运算符，例如 `Dim t As New Thread(AddressOf ThreadProc)`。</span><span class="sxs-lookup"><span data-stu-id="990c0-210">Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="990c0-211">Visual Basic 自动调用 <xref:System.Threading.ThreadStart> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-211">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-212">下面的代码示例演示如何创建执行静态方法的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-212">The following code example shows how to create a thread that executes a static method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor/VB/source.vb#1)]  
  
 <span data-ttu-id="990c0-213">下面的代码示例演示如何创建执行实例方法的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-213">The following code example shows how to create a thread that executes an instance method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="990c0-214">
          <paramref name="start" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-214">The <paramref name="start" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="990c0-215">创建线程</span><span class="sxs-lookup"><span data-stu-id="990c0-215">Creating Threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start, int maxStackSize);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ParameterizedThreadStart * int -&gt; System.Threading.Thread" Usage="new System.Threading.Thread (start, maxStackSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxStackSize" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="990c0-216">表示开始执行此线程时要调用的方法的 <see cref="T:System.Threading.ParameterizedThreadStart" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="990c0-216">A <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="990c0-217">线程要使用的最大堆栈大小（以字节为单位）；如果为 0，则使用可执行文件的文件头中指定的默认最大堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-217">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span></span>  
  
<span data-ttu-id="990c0-218">重要事项：对于部分受信任的代码，如果 <paramref name="maxStackSize" /> 大于默认堆栈大小，则会将其忽略。</span><span class="sxs-lookup"><span data-stu-id="990c0-218">Important   For partially trusted code, <paramref name="maxStackSize" /> is ignored if it is greater than the default stack size.</span></span> <span data-ttu-id="990c0-219">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="990c0-219">No exception is thrown.</span></span></param>
        <summary><span data-ttu-id="990c0-220">初始化 <see cref="T:System.Threading.Thread" /> 类的新实例，指定允许对象在线程启动时传递给线程的委托，并指定线程的最大堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-220">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-221">避免使用此构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="990c0-221">Avoid using this constructor overload.</span></span> <span data-ttu-id="990c0-222"><xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> 构造函数重载使用的默认堆栈大小是线程的建议堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-222">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="990c0-223">如果线程存在内存问题，最可能的原因是编程错误，如无限递归。</span><span class="sxs-lookup"><span data-stu-id="990c0-223">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-224">从 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]开始，只有完全受信任的代码才能将 `maxStackSize` 设置为大于默认堆栈大小（1 mb）的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-224">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="990c0-225">如果为 `maxStackSize` 指定较大的值，则当代码在部分信任的情况下运行时，将忽略 `maxStackSize` 并使用默认堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-225">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="990c0-226">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="990c0-226">No exception is thrown.</span></span> <span data-ttu-id="990c0-227">任何信任级别的代码都可以将 `maxStackSize` 设置为小于默认堆栈大小的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-227">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-228">如果你正在开发将由部分信任的代码使用的完全受信任的库，并且你需要启动需要大型堆栈的线程，则必须在创建该线程之前断言完全信任，否则将使用默认堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-228">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="990c0-229">除非你完全控制在线程上运行的代码，否则不要执行此操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-229">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="990c0-230">如果 `maxStackSize` 小于最小堆栈大小，则使用最小堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-230">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="990c0-231">如果 `maxStackSize` 不是页面大小的倍数，则会将其舍入到页面大小的下一个较大倍数。</span><span class="sxs-lookup"><span data-stu-id="990c0-231">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="990c0-232">例如，如果你使用的是 Windows Vista 上的 .NET Framework 2.0 版，256KB （262144字节）是最小堆栈大小，而页面大小为64KB （65536个字节）。</span><span class="sxs-lookup"><span data-stu-id="990c0-232">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-233">在 Windows XP 和 Windows Server 2003 之前的 Microsoft Windows 版本上，将忽略 `maxStackSize`，并使用可执行文件头中指定的堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-233">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="990c0-234">如果指定非常小的堆栈大小，则可能需要禁用堆栈溢出探测。</span><span class="sxs-lookup"><span data-stu-id="990c0-234">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="990c0-235">当堆栈受到严格约束时，探测本身就会导致堆栈溢出。</span><span class="sxs-lookup"><span data-stu-id="990c0-235">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="990c0-236">若要禁用堆栈溢出探测，请将以下项添加到应用程序配置文件中。</span><span class="sxs-lookup"><span data-stu-id="990c0-236">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="990c0-237"><paramref name="start" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-237"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="990c0-238"><paramref name="maxStackSize" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="990c0-238"><paramref name="maxStackSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start, int maxStackSize);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ThreadStart * int -&gt; System.Threading.Thread" Usage="new System.Threading.Thread (start, maxStackSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxStackSize" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="990c0-239">表示开始执行此线程时要调用的方法的 <see cref="T:System.Threading.ThreadStart" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="990c0-239">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="990c0-240">线程要使用的最大堆栈大小（以字节为单位）；如果为 0，则使用可执行文件的文件头中指定的默认最大堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-240">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span></span>  
  
<span data-ttu-id="990c0-241">重要事项：对于部分受信任的代码，如果 <paramref name="maxStackSize" /> 大于默认堆栈大小，则会将其忽略。</span><span class="sxs-lookup"><span data-stu-id="990c0-241">Important   For partially trusted code, <paramref name="maxStackSize" /> is ignored if it is greater than the default stack size.</span></span> <span data-ttu-id="990c0-242">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="990c0-242">No exception is thrown.</span></span></param>
        <summary><span data-ttu-id="990c0-243">初始化 <see cref="T:System.Threading.Thread" /> 类的新实例，指定线程的最大堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-243">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying the maximum stack size for the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-244">避免使用此构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="990c0-244">Avoid using this constructor overload.</span></span> <span data-ttu-id="990c0-245"><xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> 构造函数重载使用的默认堆栈大小是线程的建议堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-245">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="990c0-246">如果线程存在内存问题，最可能的原因是编程错误，如无限递归。</span><span class="sxs-lookup"><span data-stu-id="990c0-246">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-247">从 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]开始，只有完全受信任的代码才能将 `maxStackSize` 设置为大于默认堆栈大小（1 mb）的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-247">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="990c0-248">如果为 `maxStackSize` 指定较大的值，则当代码在部分信任的情况下运行时，将忽略 `maxStackSize` 并使用默认堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-248">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="990c0-249">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="990c0-249">No exception is thrown.</span></span> <span data-ttu-id="990c0-250">任何信任级别的代码都可以将 `maxStackSize` 设置为小于默认堆栈大小的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-250">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-251">如果你正在开发将由部分信任的代码使用的完全受信任的库，并且你需要启动需要大型堆栈的线程，则必须在创建该线程之前断言完全信任，否则将使用默认堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-251">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="990c0-252">除非你完全控制在线程上运行的代码，否则不要执行此操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-252">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="990c0-253">如果 `maxStackSize` 小于最小堆栈大小，则使用最小堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-253">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="990c0-254">如果 `maxStackSize` 不是页面大小的倍数，则会将其舍入到页面大小的下一个较大倍数。</span><span class="sxs-lookup"><span data-stu-id="990c0-254">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="990c0-255">例如，如果你使用的是 Windows Vista 上的 .NET Framework 2.0 版，256KB （262144字节）是最小堆栈大小，而页面大小为64KB （65536个字节）。</span><span class="sxs-lookup"><span data-stu-id="990c0-255">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-256">在 Windows XP 和 Windows Server 2003 之前的 Microsoft Windows 版本上，将忽略 `maxStackSize`，并使用可执行文件头中指定的堆栈大小。</span><span class="sxs-lookup"><span data-stu-id="990c0-256">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="990c0-257">如果指定非常小的堆栈大小，则可能需要禁用堆栈溢出探测。</span><span class="sxs-lookup"><span data-stu-id="990c0-257">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="990c0-258">当堆栈受到严格约束时，探测本身就会导致堆栈溢出。</span><span class="sxs-lookup"><span data-stu-id="990c0-258">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="990c0-259">若要禁用堆栈溢出探测，请将以下项添加到应用程序配置文件中。</span><span class="sxs-lookup"><span data-stu-id="990c0-259">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="990c0-260"><paramref name="start" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-260"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="990c0-261"><paramref name="maxStackSize" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="990c0-261"><paramref name="maxStackSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Abort">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="990c0-262">在调用此方法的线程上引发 <see cref="T:System.Threading.ThreadAbortException" />，以开始终止此线程的过程。</span><span class="sxs-lookup"><span data-stu-id="990c0-262">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span></span> <span data-ttu-id="990c0-263">调用此方法通常会终止线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-263">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> <span data-ttu-id="990c0-264">应谨慎使用 `Thread.Abort` 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-264">The `Thread.Abort` method should be used with caution.</span></span> <span data-ttu-id="990c0-265">特别是当调用它来中止当前线程以外的线程时，您不知道在引发 <xref:System.Threading.ThreadAbortException> 时执行或未能执行的代码，也不知道您的应用程序的状态或者它负责保留的任何应用程序和用户状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-265">Particularly when you call it to abort a thread other than the current thread, you do not know what code has executed or failed to execute when the <xref:System.Threading.ThreadAbortException> is thrown, nor can you be certain of the state of your application or any application and user state that it is responsible for preserving.</span></span> <span data-ttu-id="990c0-266">例如，调用 `Thread.Abort` 可能会阻止静态构造函数执行或防止释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="990c0-266">For example, calling `Thread.Abort` may prevent static constructors from executing or prevent the release of unmanaged resources.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="thread.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-267">在调用此方法的线程上引发 <see cref="T:System.Threading.ThreadAbortException" />，以开始终止此线程的过程。</span><span class="sxs-lookup"><span data-stu-id="990c0-267">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span></span> <span data-ttu-id="990c0-268">调用此方法通常会终止线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-268">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-269">在线程上调用此方法时，系统将在线程中引发 <xref:System.Threading.ThreadAbortException> 来中止它。</span><span class="sxs-lookup"><span data-stu-id="990c0-269">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="990c0-270">`ThreadAbortException` 是一种特殊的异常，可由应用程序代码捕获，但会在 `catch` 块的末尾重新引发，除非调用 <xref:System.Threading.Thread.ResetAbort%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-270">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="990c0-271">`ResetAbort` 取消中止请求，并阻止 `ThreadAbortException` 终止线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-271">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="990c0-272">未执行 `finally` 块在线程中止之前执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-272">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-273">当线程自行调用 `Abort` 时，其效果类似于引发异常;<xref:System.Threading.ThreadAbortException> 立即发生，结果是可预测的。</span><span class="sxs-lookup"><span data-stu-id="990c0-273">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="990c0-274">但是，如果一个线程在另一个线程上调用 `Abort`，则中止会中断正在运行的任何代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-274">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="990c0-275">还有可能会中止静态构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-275">There is also a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="990c0-276">在极少数情况下，这可能会阻止在该应用程序域中创建该类的实例。</span><span class="sxs-lookup"><span data-stu-id="990c0-276">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="990c0-277">在 .NET Framework 版本1.0 和1.1 中，线程可能会在运行 `finally` 块时中止，在这种情况下，将中止 `finally` 块。</span><span class="sxs-lookup"><span data-stu-id="990c0-277">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="990c0-278">该线程不能保证立即中止，或根本就中止。</span><span class="sxs-lookup"><span data-stu-id="990c0-278">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="990c0-279">如果线程在作为中止过程的一部分调用的 `finally` 块中进行了无限量的计算，从而导致无限期延迟中止，则会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-279">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="990c0-280">若要等到线程中止，可以在调用 <xref:System.Threading.Thread.Abort%2A> 方法后调用线程上的 <xref:System.Threading.Thread.Join%2A> 方法，但不保证等待将结束。</span><span class="sxs-lookup"><span data-stu-id="990c0-280">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-281">如果要中止的线程处于受保护的代码区域（如 `catch` 块、`finally` 块或受约束的执行区域），则调用 <xref:System.Threading.Thread.Abort%2A> 的线程可能会阻塞。</span><span class="sxs-lookup"><span data-stu-id="990c0-281">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="990c0-282">如果调用 <xref:System.Threading.Thread.Abort%2A> 的线程包含中止的线程所需的锁，则可能会发生死锁。</span><span class="sxs-lookup"><span data-stu-id="990c0-282">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="990c0-283">如果在未启动的线程上调用 `Abort`，则调用 <xref:System.Threading.Thread.Start%2A> 时，该线程将中止。</span><span class="sxs-lookup"><span data-stu-id="990c0-283">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="990c0-284">如果在被阻止或处于休眠状态的线程上调用 `Abort`，则该线程将中断，然后中止。</span><span class="sxs-lookup"><span data-stu-id="990c0-284">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="990c0-285">如果在已挂起的线程上调用 `Abort`，则会在调用 <xref:System.Threading.Thread.Abort%2A>的线程中引发 <xref:System.Threading.ThreadStateException>，并 <xref:System.Threading.ThreadState.AbortRequested> 添加到要中止的线程的 <xref:System.Threading.Thread.ThreadState%2A> 属性中。</span><span class="sxs-lookup"><span data-stu-id="990c0-285">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="990c0-286">在调用 <xref:System.Threading.Thread.Resume%2A> 之前，不会在已挂起的线程中引发 <xref:System.Threading.ThreadAbortException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-286">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="990c0-287">如果在执行非托管代码时在托管线程上调用 `Abort`，则直到线程返回到托管代码，才会引发 `ThreadAbortException`。</span><span class="sxs-lookup"><span data-stu-id="990c0-287">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="990c0-288">如果对 `Abort` 的两次调用同时出现，则可以通过调用设置状态信息和其他调用来执行 `Abort`。</span><span class="sxs-lookup"><span data-stu-id="990c0-288">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="990c0-289">但是，应用程序无法检测到这种情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-289">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="990c0-290">在线程上调用 `Abort` 后，线程的状态包括 <xref:System.Threading.ThreadState.AbortRequested>。</span><span class="sxs-lookup"><span data-stu-id="990c0-290">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="990c0-291">由于对 `Abort`的成功调用导致线程终止后，线程的状态将更改为 <xref:System.Threading.ThreadState.Stopped>。</span><span class="sxs-lookup"><span data-stu-id="990c0-291">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="990c0-292">如果具有足够的权限，则作为 `Abort` 目标的线程可以使用 `ResetAbort` 方法取消中止。</span><span class="sxs-lookup"><span data-stu-id="990c0-292">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="990c0-293">有关演示如何调用 `ResetAbort` 方法的示例，请参见 `ThreadAbortException` 类。</span><span class="sxs-lookup"><span data-stu-id="990c0-293">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="990c0-294">仅限 .NET Core：不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="990c0-294">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-295">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="990c0-295">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-296">正在中止的线程当前已挂起。</span><span class="sxs-lookup"><span data-stu-id="990c0-296">The thread that is being aborted is currently suspended.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-297">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-297">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md"><span data-ttu-id="990c0-298">使用线程和线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-298">Using threads and threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="990c0-299">销毁线程</span><span class="sxs-lookup"><span data-stu-id="990c0-299">Destroying threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (object stateInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(object stateInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort (stateInfo As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort(System::Object ^ stateInfo);" />
      <MemberSignature Language="F#" Value="member this.Abort : obj -&gt; unit" Usage="thread.Abort stateInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateInfo" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stateInfo"><span data-ttu-id="990c0-300">一个对象，它包含应用程序特定的信息（如状态），该信息可供正被中止的线程使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-300">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</span></span></param>
        <summary><span data-ttu-id="990c0-301">引发在其上调用的线程中的 <see cref="T:System.Threading.ThreadAbortException" /> 以开始处理终止线程，同时提供有关线程终止的异常信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-301">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination.</span></span> <span data-ttu-id="990c0-302">调用此方法通常会终止线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-302">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-303">在线程上调用此方法时，系统将在线程中引发 <xref:System.Threading.ThreadAbortException> 来中止它。</span><span class="sxs-lookup"><span data-stu-id="990c0-303">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="990c0-304">`ThreadAbortException` 是一种特殊的异常，可由应用程序代码捕获，但会在 `catch` 块的末尾重新引发，除非调用 <xref:System.Threading.Thread.ResetAbort%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-304">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="990c0-305">`ResetAbort` 取消中止请求，并阻止 `ThreadAbortException` 终止线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-305">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="990c0-306">未执行 `finally` 块在线程中止之前执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-306">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-307">当线程自行调用 `Abort` 时，其效果类似于引发异常;<xref:System.Threading.ThreadAbortException> 立即发生，结果是可预测的。</span><span class="sxs-lookup"><span data-stu-id="990c0-307">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="990c0-308">但是，如果一个线程在另一个线程上调用 `Abort`，则中止会中断正在运行的任何代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-308">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="990c0-309">可能会中止静态构造函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-309">There is a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="990c0-310">在极少数情况下，这可能会阻止在该应用程序域中创建该类的实例。</span><span class="sxs-lookup"><span data-stu-id="990c0-310">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="990c0-311">在 .NET Framework 版本1.0 和1.1 中，线程可能会在运行 `finally` 块时中止，在这种情况下，将中止 `finally` 块。</span><span class="sxs-lookup"><span data-stu-id="990c0-311">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="990c0-312">该线程不能保证立即中止，或根本就中止。</span><span class="sxs-lookup"><span data-stu-id="990c0-312">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="990c0-313">如果线程在作为中止过程的一部分调用的 `finally` 块中进行了无限量的计算，从而导致无限期延迟中止，则会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-313">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="990c0-314">若要等到线程中止，可以在调用 <xref:System.Threading.Thread.Abort%2A> 方法后调用线程上的 <xref:System.Threading.Thread.Join%2A> 方法，但不能保证等待将结束。</span><span class="sxs-lookup"><span data-stu-id="990c0-314">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee that the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-315">如果要中止的线程处于受保护的代码区域（如 `catch` 块、`finally` 块或受约束的执行区域），则调用 <xref:System.Threading.Thread.Abort%2A> 的线程可能会阻塞。</span><span class="sxs-lookup"><span data-stu-id="990c0-315">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="990c0-316">如果调用 <xref:System.Threading.Thread.Abort%2A> 的线程包含中止的线程所需的锁，则可能会发生死锁。</span><span class="sxs-lookup"><span data-stu-id="990c0-316">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="990c0-317">如果在未启动的线程上调用 `Abort`，则调用 <xref:System.Threading.Thread.Start%2A> 时，该线程将中止。</span><span class="sxs-lookup"><span data-stu-id="990c0-317">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="990c0-318">如果在被阻止或处于休眠状态的线程上调用 `Abort`，则该线程将中断，然后中止。</span><span class="sxs-lookup"><span data-stu-id="990c0-318">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="990c0-319">如果在已挂起的线程上调用 `Abort`，则会在调用 <xref:System.Threading.Thread.Abort%2A>的线程中引发 <xref:System.Threading.ThreadStateException>，并 <xref:System.Threading.ThreadState.AbortRequested> 添加到要中止的线程的 <xref:System.Threading.Thread.ThreadState%2A> 属性中。</span><span class="sxs-lookup"><span data-stu-id="990c0-319">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="990c0-320">在调用 <xref:System.Threading.Thread.Resume%2A> 之前，不会在已挂起的线程中引发 <xref:System.Threading.ThreadAbortException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-320">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="990c0-321">如果在执行非托管代码时在托管线程上调用 `Abort`，则直到线程返回到托管代码，才会引发 `ThreadAbortException`。</span><span class="sxs-lookup"><span data-stu-id="990c0-321">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="990c0-322">如果对 `Abort` 的两次调用同时出现，则可以通过调用设置状态信息和其他调用来执行 `Abort`。</span><span class="sxs-lookup"><span data-stu-id="990c0-322">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="990c0-323">但是，应用程序无法检测到这种情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-323">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="990c0-324">在线程上调用 `Abort` 后，线程的状态包括 <xref:System.Threading.ThreadState.AbortRequested>。</span><span class="sxs-lookup"><span data-stu-id="990c0-324">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="990c0-325">由于对 `Abort`的成功调用导致线程终止后，线程的状态将更改为 <xref:System.Threading.ThreadState.Stopped>。</span><span class="sxs-lookup"><span data-stu-id="990c0-325">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="990c0-326">如果具有足够的权限，则作为 `Abort` 目标的线程可以使用 `ResetAbort` 方法取消中止。</span><span class="sxs-lookup"><span data-stu-id="990c0-326">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="990c0-327">有关演示如何调用 `ResetAbort` 方法的示例，请参见 `ThreadAbortException` 类。</span><span class="sxs-lookup"><span data-stu-id="990c0-327">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-328">下面的代码示例演示如何将信息传递到正在中止的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-328">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="990c0-329">仅限 .NET Core：不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="990c0-329">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-330">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="990c0-330">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-331">正在中止的线程当前已挂起。</span><span class="sxs-lookup"><span data-stu-id="990c0-331">The thread that is being aborted is currently suspended.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-332">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-332">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md"><span data-ttu-id="990c0-333">使用线程和线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-333">Using threads and threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="990c0-334">销毁线程</span><span class="sxs-lookup"><span data-stu-id="990c0-334">Destroying threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AllocateDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateDataSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateDataSlot() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateDataSlot" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateDataSlot () As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateDataSlot();" />
      <MemberSignature Language="F#" Value="static member AllocateDataSlot : unit -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.AllocateDataSlot " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-335">在所有线程上分配未命名的数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-335">Allocates an unnamed data slot on all the threads.</span></span> <span data-ttu-id="990c0-336">为了获得更好的性能，请改用以 <see cref="T:System.ThreadStaticAttribute" /> 特性标记的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-336">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="990c0-337">所有线程上已分配的命名数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-337">The allocated named data slot on all threads.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-338">.NET Framework 提供了两种使用线程本地存储（TLS）的机制：线程相关的静态字段（即使用 <xref:System.ThreadStaticAttribute> 属性标记的字段）和数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-338">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="990c0-339">线程相对静态字段比数据槽提供更好的性能，并启用编译时类型检查。</span><span class="sxs-lookup"><span data-stu-id="990c0-339">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="990c0-340">有关使用 TLS 的详细信息，请参阅[线程本地存储：线程相对静态字段和数据槽](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-340">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="990c0-341">在所有线程上分配槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-341">The slot is allocated on all threads.</span></span>  
  
 <span data-ttu-id="990c0-342">线程使用本地存储内存机制来存储线程特定的数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-342">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="990c0-343">公共语言运行时在创建每个进程时将多槽数据存储数组分配给它。</span><span class="sxs-lookup"><span data-stu-id="990c0-343">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="990c0-344">线程可以在数据存储中分配数据槽，在槽中存储和检索数据值，并在线程过期后释放槽以供重新使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-344">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="990c0-345">数据槽对于每个线程都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="990c0-345">Data slots are unique per thread.</span></span> <span data-ttu-id="990c0-346">任何其他线程（甚至不是子线程）都无法获取该数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-346">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-347">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="990c0-347">This section contains two code examples.</span></span> <span data-ttu-id="990c0-348">第一个示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 特性的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-348">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="990c0-349">第二个示例演示如何使用数据槽来执行相同的操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-349">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="990c0-350">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-350">**First Example**</span></span>  
  
 <span data-ttu-id="990c0-351">下面的示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-351">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="990c0-352">与第二个示例中所示的方法相比，此方法提供的性能更好。</span><span class="sxs-lookup"><span data-stu-id="990c0-352">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="990c0-353">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-353">**Second Example**</span></span>  
  
 <span data-ttu-id="990c0-354">下面的代码示例演示如何使用数据槽存储特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-354">The following code example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-355">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-355">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="990c0-356">线程本地存储区：线程相关的静态字段和数据槽</span><span class="sxs-lookup"><span data-stu-id="990c0-356">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AllocateNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member AllocateNamedDataSlot : string -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.AllocateNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="990c0-357">要分配的数据槽的名称。</span><span class="sxs-lookup"><span data-stu-id="990c0-357">The name of the data slot to be allocated.</span></span></param>
        <summary><span data-ttu-id="990c0-358">在所有线程上分配已命名的数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-358">Allocates a named data slot on all threads.</span></span> <span data-ttu-id="990c0-359">为了获得更好的性能，请改用以 <see cref="T:System.ThreadStaticAttribute" /> 特性标记的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-359">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="990c0-360">所有线程上已分配的命名数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-360">The allocated named data slot on all threads.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-361">.NET Framework 提供了两种使用线程本地存储（TLS）的机制：线程相关的静态字段（即使用 <xref:System.ThreadStaticAttribute> 属性标记的字段）和数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-361">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="990c0-362">线程相对静态字段比数据槽提供更好的性能，并启用编译时类型检查。</span><span class="sxs-lookup"><span data-stu-id="990c0-362">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="990c0-363">有关使用 TLS 的详细信息，请参阅[线程本地存储：线程相对静态字段和数据槽](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-363">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="990c0-364">线程使用本地存储内存机制来存储线程特定的数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-364">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="990c0-365">公共语言运行时在创建每个进程时将多槽数据存储数组分配给它。</span><span class="sxs-lookup"><span data-stu-id="990c0-365">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="990c0-366">线程可以在数据存储中分配数据槽，在槽中存储和检索数据值，并在线程过期后释放槽以供重新使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-366">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="990c0-367">数据槽对于每个线程都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="990c0-367">Data slots are unique per thread.</span></span> <span data-ttu-id="990c0-368">任何其他线程（甚至不是子线程）都无法获取该数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-368">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="990c0-369">不需要使用 <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> 方法来分配已命名的数据槽，因为如果尚未分配槽，<xref:System.Threading.Thread.GetNamedDataSlot%2A> 方法会分配槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-369">It is not necessary to use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-370">如果使用 <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> 方法，则应在程序启动时在主线程中调用该方法，因为如果已经分配了具有指定名称的槽，则该方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="990c0-370">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated.</span></span> <span data-ttu-id="990c0-371">无法测试槽是否已分配。</span><span class="sxs-lookup"><span data-stu-id="990c0-371">There is no way to test whether a slot has already been allocated.</span></span>  
  
 <span data-ttu-id="990c0-372">必须通过 <xref:System.Threading.Thread.FreeNamedDataSlot%2A>释放用此方法分配的槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-372">Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-373">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="990c0-373">This section contains two code examples.</span></span> <span data-ttu-id="990c0-374">第一个示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 特性的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-374">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="990c0-375">第二个示例演示如何使用数据槽来执行相同的操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-375">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="990c0-376">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-376">**First Example**</span></span>  
  
 <span data-ttu-id="990c0-377">下面的示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-377">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="990c0-378">与第二个示例中所示的方法相比，此方法提供的性能更好。</span><span class="sxs-lookup"><span data-stu-id="990c0-378">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="990c0-379">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-379">**Second Example**</span></span>  
  
 <span data-ttu-id="990c0-380">下面的示例演示如何使用命名数据槽来存储特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-380">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-381">示例代码不使用 <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> 方法，因为如果尚未分配槽，<xref:System.Threading.Thread.GetNamedDataSlot%2A> 方法会分配槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-381">The example code does not use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span> <span data-ttu-id="990c0-382">如果使用 <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> 方法，则它应在程序启动时在主线程中调用。</span><span class="sxs-lookup"><span data-stu-id="990c0-382">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="990c0-383">已存在具有指定名称的命名的数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-383">A named data slot with the specified name already exists.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-384">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-384">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="990c0-385">线程本地存储区：线程相关的静态字段和数据槽</span><span class="sxs-lookup"><span data-stu-id="990c0-385">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState ApartmentState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ApartmentState ApartmentState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Property ApartmentState As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ApartmentState ApartmentState { System::Threading::ApartmentState get(); void set(System::Threading::ApartmentState value); };" />
      <MemberSignature Language="F#" Value="member this.ApartmentState : System.Threading.ApartmentState with get, set" Usage="System.Threading.Thread.ApartmentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Deprecated in favor of GetApartmentState, SetApartmentState and TrySetApartmentState.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("The ApartmentState property has been deprecated.  Use GetApartmentState, SetApartmentState or TrySetApartmentState instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-386">获取或设置此线程的单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-386">Gets or sets the apartment state of this thread.</span></span></summary>
        <value><span data-ttu-id="990c0-387"><see cref="T:System.Threading.ApartmentState" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="990c0-387">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span></span> <span data-ttu-id="990c0-388">初始值为 <see langword="Unknown" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-388">The initial value is <see langword="Unknown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-389">**<xref:System.Threading.Thread.ApartmentState%2A> 属性已过时。**</span><span class="sxs-lookup"><span data-stu-id="990c0-389">**The <xref:System.Threading.Thread.ApartmentState%2A> property is obsolete.**</span></span>  <span data-ttu-id="990c0-390">未过时的替代项是检索单元状态的 <xref:System.Threading.Thread.GetApartmentState%2A> 方法，以及 <xref:System.Threading.Thread.SetApartmentState%2A> 方法来设置单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-390">The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state.</span></span>  
  
 <span data-ttu-id="990c0-391">在 .NET Framework 版本1.0 和1.1 中，`ApartmentState` 属性标记一个线程以指示它将在单线程或多线程单元中执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-391">In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment.</span></span> <span data-ttu-id="990c0-392">当线程处于 `Unstarted` 或 `Running` 线程状态时，可以设置此属性;但对于线程，只能设置一次。</span><span class="sxs-lookup"><span data-stu-id="990c0-392">This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread.</span></span> <span data-ttu-id="990c0-393">如果尚未设置属性，则它将返回 `Unknown`。</span><span class="sxs-lookup"><span data-stu-id="990c0-393">If the property has not been set, it returns `Unknown`.</span></span>  
  
 <span data-ttu-id="990c0-394">尝试使用 <xref:System.Threading.Thread.ApartmentState%2A> 属性设置已设置了单元状态的线程的单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-394">An attempt to use the <xref:System.Threading.Thread.ApartmentState%2A> property to set the apartment state of a thread whose apartment state has already been set is ignored.</span></span> <span data-ttu-id="990c0-395">但是，在这种情况下，<xref:System.Threading.Thread.SetApartmentState%2A> 方法会引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-395">However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-396">在 .NET Framework 版本2.0 中，如果在启动新线程之前未设置其单元状态，则将其初始化为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-396">In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="990c0-397">默认情况下，主应用程序线程初始化为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-397">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="990c0-398">你不能再通过设置第一行代码的 <xref:System.Threading.ApartmentState?displayProperty=nameWithType> 属性来将主应用程序线程设置为 <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-398">You can no longer set the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> by setting the <xref:System.Threading.ApartmentState?displayProperty=nameWithType> property on the first line of code.</span></span> <span data-ttu-id="990c0-399">改用 <xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="990c0-399">Use the <xref:System.STAThreadAttribute> instead.</span></span>  
  
 <span data-ttu-id="990c0-400">在 .NET Framework 版本2.0 中，可以使用C++ [/CLRTHREADATTRIBUTE （设置 CLR 线程属性）](/cpp/build/reference/clrthreadattribute-set-clr-thread-attribute)链接器选项指定应用程序的 COM 线程模型。</span><span class="sxs-lookup"><span data-stu-id="990c0-400">In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](/cpp/build/reference/clrthreadattribute-set-clr-thread-attribute) linker option.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-401">下面的代码示例演示如何设置线程的单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-401">The following code example demonstrates how to set the apartment state of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="990c0-402">尝试将此属性设置为不是有效单元状态的状态 （单线程单元 (<see langword="STA" />) 或多线程单元 (<see langword="MTA" />) 以外的状态）。</span><span class="sxs-lookup"><span data-stu-id="990c0-402">An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<see langword="STA" />) or multithreaded apartment (<see langword="MTA" />)).</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
        <altmember cref="M:System.Threading.Thread.GetApartmentState" />
        <altmember cref="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      </Docs>
    </Member>
    <Member MemberName="BeginCriticalRegion">
      <MemberSignature Language="C#" Value="public static void BeginCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginCriticalRegion();" />
      <MemberSignature Language="F#" Value="static member BeginCriticalRegion : unit -&gt; unit" Usage="System.Threading.Thread.BeginCriticalRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-403">通知宿主执行将要进入一个代码区域，在该代码区域内线程中止或未经处理异常的影响可能会危害应用程序域中的其他任务。</span><span class="sxs-lookup"><span data-stu-id="990c0-403">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-404">公共语言运行时（CLR）的宿主（如 Microsoft SQL Server 2005）可为代码的关键和非关键区域中的故障建立不同的策略。</span><span class="sxs-lookup"><span data-stu-id="990c0-404">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="990c0-405">关键区域是指线程中止或未经处理的异常的影响可能不会限制为当前任务。</span><span class="sxs-lookup"><span data-stu-id="990c0-405">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="990c0-406">相反，非关键代码区域中的中止或失败只会影响发生错误的任务。</span><span class="sxs-lookup"><span data-stu-id="990c0-406">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="990c0-407">例如，假设某个任务在持有锁时尝试分配内存。</span><span class="sxs-lookup"><span data-stu-id="990c0-407">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="990c0-408">如果内存分配失败，则中止当前任务不足以确保 <xref:System.AppDomain>的稳定性，因为域中的其他任务可能会等待相同的锁。</span><span class="sxs-lookup"><span data-stu-id="990c0-408">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="990c0-409">如果当前任务已终止，则其他任务可能会死锁。</span><span class="sxs-lookup"><span data-stu-id="990c0-409">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="990c0-410">当关键区域发生故障时，主机可能决定卸载整个 <xref:System.AppDomain> 而不是在可能不稳定的状态下继续执行的风险。</span><span class="sxs-lookup"><span data-stu-id="990c0-410">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="990c0-411">若要通知主机您的代码正在进入关键区域，请调用 <xref:System.Threading.Thread.BeginCriticalRegion%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-411">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="990c0-412">当执行返回到非关键代码区域时调用 <xref:System.Threading.Thread.EndCriticalRegion%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-412">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="990c0-413">如果在 SQL Server 2005 下运行的代码中使用此方法，则需要在最高的主机保护级别上运行代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-413">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-414">下面的示例演示如何使用 <xref:System.Threading.Thread.BeginCriticalRegion%2A> 和 <xref:System.Threading.Thread.EndCriticalRegion%2A> 方法将代码块分为关键区域和非关键区域。</span><span class="sxs-lookup"><span data-stu-id="990c0-414">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.EndCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="BeginThreadAffinity">
      <MemberSignature Language="C#" Value="public static void BeginThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginThreadAffinity();" />
      <MemberSignature Language="F#" Value="static member BeginThreadAffinity : unit -&gt; unit" Usage="System.Threading.Thread.BeginThreadAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-415">通知宿主托管代码将要执行依赖于当前物理操作系统线程的标识的指令。</span><span class="sxs-lookup"><span data-stu-id="990c0-415">Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-416">公共语言运行时的某些宿主（如 Microsoft SQL Server 2005）提供其自己的线程管理。</span><span class="sxs-lookup"><span data-stu-id="990c0-416">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="990c0-417">提供其自己的线程管理的主机可随时将正在执行的任务从一个物理操作系统线程移至另一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-417">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="990c0-418">大多数任务不受此切换的影响。</span><span class="sxs-lookup"><span data-stu-id="990c0-418">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="990c0-419">但是，某些任务具有线程关联，即它们依赖于物理操作系统线程的标识。</span><span class="sxs-lookup"><span data-stu-id="990c0-419">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="990c0-420">这些任务在执行不应切换的代码时必须通知宿主。</span><span class="sxs-lookup"><span data-stu-id="990c0-420">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="990c0-421">例如，如果应用程序调用系统 API 来获取具有线程关联的操作系统锁（如 Win32 CRITICAL_SECTION），则必须在获取锁之前调用 <xref:System.Threading.Thread.BeginThreadAffinity%2A>，并在释放锁后 <xref:System.Threading.Thread.EndThreadAffinity%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-421">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="990c0-422">如果在 SQL Server 2005 下运行的代码中使用此方法，则需要在最高的主机保护级别上运行代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-422">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-423">下面的示例演示如何使用 <xref:System.Threading.Thread.BeginThreadAffinity%2A> 和 <xref:System.Threading.Thread.EndThreadAffinity%2A> 方法，通知主机代码块取决于物理操作系统线程的标识。</span><span class="sxs-lookup"><span data-stu-id="990c0-423">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-424">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="990c0-424">The caller does not have the required permission.</span></span></exception>
        <altmember cref="M:System.Threading.Thread.EndThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Runtime.Remoting.Contexts.Context CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentContext As Context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::Remoting::Contexts::Context ^ CurrentContext { System::Runtime::Remoting::Contexts::Context ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : System.Runtime.Remoting.Contexts.Context" Usage="System.Threading.Thread.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Contexts.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-425">获取线程正在其中执行的当前上下文。</span><span class="sxs-lookup"><span data-stu-id="990c0-425">Gets the current context in which the thread is executing.</span></span></summary>
        <value><span data-ttu-id="990c0-426">表示当前线程上下文的 <see cref="T:System.Runtime.Remoting.Contexts.Context" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-426">A <see cref="T:System.Runtime.Remoting.Contexts.Context" /> representing the current thread context.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-427">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="990c0-427">The caller does not have the required permission.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Threading.Thread.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-428">获取或设置当前线程的区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-428">Gets or sets the culture for the current thread.</span></span></summary>
        <value><span data-ttu-id="990c0-429">表示当前线程的区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="990c0-429">An object that represents the culture for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-430">此属性返回的 <xref:System.Globalization.CultureInfo> 对象及其关联的对象，确定日期、时间、数字、货币值、文本的排序顺序、大小写约定和字符串比较的默认格式。</span><span class="sxs-lookup"><span data-stu-id="990c0-430">The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.</span></span> <span data-ttu-id="990c0-431">请参阅 <xref:System.Globalization.CultureInfo> 类，了解区域性名称和标识符、固定、非特定区域性和特定区域性之间的差异，以及区域性信息影响线程和应用程序域的方式。</span><span class="sxs-lookup"><span data-stu-id="990c0-431">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="990c0-432">请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 属性，了解如何确定如何确定线程的默认区域性，以及用户如何为其计算机设置区域性信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-432">See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property to learn how a thread's default culture is determined, and how users set culture information for their computers.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="990c0-433">与当前线程以外的任何线程一起使用时，<xref:System.Threading.Thread.CurrentCulture> 属性不能可靠地工作。</span><span class="sxs-lookup"><span data-stu-id="990c0-433">The <xref:System.Threading.Thread.CurrentCulture> property doesn't work reliably when used with any thread other than the current thread.</span></span> <span data-ttu-id="990c0-434">在 .NET Framework 中，读取属性是可靠的，但对于除当前线程之外的其他线程，其设置是可靠的。</span><span class="sxs-lookup"><span data-stu-id="990c0-434">In .NET Framework, reading the property is reliable, although setting it for a thread other than the current thread is not.</span></span> <span data-ttu-id="990c0-435">在 .NET Core 中，如果某个线程尝试在另一个线程上读取或写入 <xref:System.Threading.Thread.CurrentCulture> 属性，则会引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-435">On .NET Core, an <xref:System.InvalidOperationException> is thrown if a thread attempts to read or write the <xref:System.Threading.Thread.CurrentCulture> property on a different thread.</span></span>
> <span data-ttu-id="990c0-436">建议使用 <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> 属性检索和设置当前区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-436">We recommend that you use the <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> property to retrieve and set the current culture.</span></span>

 <span data-ttu-id="990c0-437">从 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]开始，可以将 <xref:System.Threading.Thread.CurrentCulture%2A> 属性设置为非特定区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-437">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can set the <xref:System.Threading.Thread.CurrentCulture%2A> property to a neutral culture.</span></span> <span data-ttu-id="990c0-438">这是因为 <xref:System.Globalization.CultureInfo> 类的行为已更改：当它表示非特定区域性时，其属性值（特别是 <xref:System.Globalization.CultureInfo.Calendar%2A>、<xref:System.Globalization.CultureInfo.CompareInfo%2A>、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>、<xref:System.Globalization.CultureInfo.NumberFormat%2A>和 <xref:System.Globalization.CultureInfo.TextInfo%2A> 属性）现在反映与非特定区域性关联的特定区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-438">This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture.</span></span> <span data-ttu-id="990c0-439">在 .NET Framework 的早期版本中，在分配非特定区域性时，<xref:System.Threading.Thread.CurrentCulture%2A> 属性将引发 <xref:System.NotSupportedException> 异常。</span><span class="sxs-lookup"><span data-stu-id="990c0-439">In earlier versions of the .NET Framework, the <xref:System.Threading.Thread.CurrentCulture%2A> property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned.</span></span>  
  
## Examples  
 <span data-ttu-id="990c0-440">下面的示例演示了线程语句，该语句允许 Windows 窗体应用程序的用户界面显示在控制面板中设置的区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-440">The following example shows the threading statement that allows the user interface of a Windows Forms application to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="990c0-441">需要其他代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-441">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="990c0-442">属性设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-442">The property is set to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="990c0-443">仅限 .NET Core：不支持从一个线程读取或写入另一个线程的区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-443">.NET Core only: Reading or writing the culture of a thread from another thread is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="System.Threading.Thread.CurrentPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-444">获取或设置线程的当前负责人（对基于角色的安全性而言）。</span><span class="sxs-lookup"><span data-stu-id="990c0-444">Gets or sets the thread's current principal (for role-based security).</span></span></summary>
        <value><span data-ttu-id="990c0-445">表示安全上下文的 <see cref="T:System.Security.Principal.IPrincipal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="990c0-445">An <see cref="T:System.Security.Principal.IPrincipal" /> value representing the security context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="990c0-446">下面的代码示例演示如何设置和检索线程的主体。</span><span class="sxs-lookup"><span data-stu-id="990c0-446">The following code example shows how to set and retrieve the principal of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-447">调用方没有设置该主体所需的权限。</span><span class="sxs-lookup"><span data-stu-id="990c0-447">The caller does not have the permission required to set the principal.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CurrentThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Thread CurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentThread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Thread ^ CurrentThread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentThread : System.Threading.Thread" Usage="System.Threading.Thread.CurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-448">获取当前正在运行的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-448">Gets the currently running thread.</span></span></summary>
        <value><span data-ttu-id="990c0-449"><see cref="T:System.Threading.Thread" />，表示当前正在运行的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-449">A <see cref="T:System.Threading.Thread" /> that is the representation of the currently running thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="990c0-450">下面的示例创建一个任务，该任务又创建了20个子任务。</span><span class="sxs-lookup"><span data-stu-id="990c0-450">The following example creates a task that in turn creates 20 child tasks.</span></span> <span data-ttu-id="990c0-451">应用程序本身和每个任务都会调用 `ShowThreadInformation` 方法，该方法使用 <xref:System.Threading.Thread.CurrentThread%2A> 属性显示有关运行它的线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-451">The application itself, as well as each task, calls the `ShowThreadInformation` method, which uses the <xref:System.Threading.Thread.CurrentThread%2A> property  to display information about the thread on which it is running.</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.currentthread/cs/currentthread2.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.currentthread/vb/currentthread2.vb#1)]  
  
 <span data-ttu-id="990c0-452">每个子任务在1到1000000之间生成1000000的随机数，并返回其平均值。</span><span class="sxs-lookup"><span data-stu-id="990c0-452">Each child task generates 1 million random numbers between 1 and 1 million and returns their mean.</span></span> <span data-ttu-id="990c0-453">父任务调用 <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> 方法，以确保子任务在显示每个任务返回的平均值之前完成，并计算平均值。</span><span class="sxs-lookup"><span data-stu-id="990c0-453">The parent task calls the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method to ensure that the child tasks have completed before displaying the mean returned by each task and calculating the mean of means.</span></span>  
  
 <span data-ttu-id="990c0-454">请注意，应用程序在前台线程上运行时，每个任务都在线程池线程上运行。</span><span class="sxs-lookup"><span data-stu-id="990c0-454">Note that while the application runs on a foreground thread, each task runs on a thread pool thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Threading.Thread.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-455">获取或设置资源管理器使用的当前区域性以便在运行时查找区域性特定的资源。</span><span class="sxs-lookup"><span data-stu-id="990c0-455">Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</span></span></summary>
        <value><span data-ttu-id="990c0-456">表示当前区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="990c0-456">An object that represents the current culture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-457">UI 区域性指定应用程序支持用户输入和输出所需的资源，默认情况下，它与操作系统区域性相同。</span><span class="sxs-lookup"><span data-stu-id="990c0-457">The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture.</span></span> <span data-ttu-id="990c0-458">请参阅 <xref:System.Globalization.CultureInfo> 类，了解区域性名称和标识符、固定、非特定区域性和特定区域性之间的差异，以及区域性信息影响线程和应用程序域的方式。</span><span class="sxs-lookup"><span data-stu-id="990c0-458">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="990c0-459">请参阅 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 属性，了解如何确定线程的默认 UI 区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-459">See the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> property to learn how a thread's default UI culture is determined.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="990c0-460">与当前线程以外的任何线程一起使用时，<xref:System.Threading.Thread.CurrentUICulture> 属性不能可靠地工作。</span><span class="sxs-lookup"><span data-stu-id="990c0-460">The <xref:System.Threading.Thread.CurrentUICulture> property doesn't work reliably when used with any thread other than the current thread.</span></span> <span data-ttu-id="990c0-461">在 .NET Framework 中，读取属性是可靠的，但对于除当前线程之外的其他线程，其设置是可靠的。</span><span class="sxs-lookup"><span data-stu-id="990c0-461">In .NET Framework, reading the property is reliable, although setting it for a thread other than the current thread is not.</span></span> <span data-ttu-id="990c0-462">在 .NET Core 中，如果某个线程尝试在另一个线程上读取或写入 <xref:System.Threading.Thread.CurrentUICulture> 属性，则会引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-462">On .NET Core, an <xref:System.InvalidOperationException> is thrown if a thread attempts to read or write the <xref:System.Threading.Thread.CurrentUICulture> property on a different thread.</span></span>
> <span data-ttu-id="990c0-463">建议使用 <xref:System.Globalization.CultureInfo.CurrentUICulture?displayProperty=nameWithType> 属性检索和设置当前区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-463">We recommend that you use the <xref:System.Globalization.CultureInfo.CurrentUICulture?displayProperty=nameWithType> property to retrieve and set the current culture.</span></span>

 <span data-ttu-id="990c0-464">此属性返回的 <xref:System.Globalization.CultureInfo> 可以是非特定区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-464">The <xref:System.Globalization.CultureInfo> returned by this property can be a neutral culture.</span></span> <span data-ttu-id="990c0-465">非特定区域性不应与格式设置方法一起使用，例如 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>和 <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-465">Neutral cultures should not be used with formatting methods such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, and <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="990c0-466">使用 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法可获取特定区域性，或使用 <xref:System.Threading.Thread.CurrentCulture%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="990c0-466">Use the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method to get a specific culture, or use the <xref:System.Threading.Thread.CurrentCulture%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-467"><xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法将引发非特定区域性 "zh-chs-Zh-hant" （"zh-chs-CHT"）和 "zh-chs-Hans" （"zh-chs"）的 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-467">The <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method throws <xref:System.ArgumentException> for the neutral cultures "zh-Hant" ("zh-CHT") and "zh-Hans" ("zh-CHS").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-468">下面的示例确定当前线程的 UI 区域性的语言是否为法语。</span><span class="sxs-lookup"><span data-stu-id="990c0-468">The following example determines whether the language of the current thread's UI culture is French.</span></span> <span data-ttu-id="990c0-469">如果不是，则将当前线程的 UI 区域性设置为 "英语（美国）"。</span><span class="sxs-lookup"><span data-stu-id="990c0-469">If it is not, it sets the UI culture of the current thread to English (United States).</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/cs/CurrentUICulture1.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/vb/CurrentUICulture1.vb#1)]  
  
 <span data-ttu-id="990c0-470">下面的代码示例演示了一个线程语句，该语句允许 Windows 窗体的用户界面显示在 "控制面板" 中设置的区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-470">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="990c0-471">需要其他代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-471">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="990c0-472">属性设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-472">The property is set to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="990c0-473">该属性设置为不能用于定位资源文件的区域性名称。</span><span class="sxs-lookup"><span data-stu-id="990c0-473">The property is set to a culture name that cannot be used to locate a resource file.</span></span> <span data-ttu-id="990c0-474">资源文件名必须仅包含字母、数字、连字符或下划线。</span><span class="sxs-lookup"><span data-stu-id="990c0-474">Resource filenames must include only letters, numbers, hyphens or underscores.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="990c0-475">仅限 .NET Core：不支持从一个线程读取或写入另一个线程的区域性。</span><span class="sxs-lookup"><span data-stu-id="990c0-475">.NET Core only: Reading or writing the culture of a thread from another thread is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DisableComObjectEagerCleanup">
      <MemberSignature Language="C#" Value="public void DisableComObjectEagerCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableComObjectEagerCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.DisableComObjectEagerCleanup" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableComObjectEagerCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableComObjectEagerCleanup();" />
      <MemberSignature Language="F#" Value="member this.DisableComObjectEagerCleanup : unit -&gt; unit" Usage="thread.DisableComObjectEagerCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-476">对于当前线程关闭运行时可调用包装 (RCW) 的自动清理。</span><span class="sxs-lookup"><span data-stu-id="990c0-476">Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-477">默认情况下，公共语言运行时（CLR）会自动清理运行时可调用包装器。</span><span class="sxs-lookup"><span data-stu-id="990c0-477">By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically.</span></span> <span data-ttu-id="990c0-478">CLR 在清理过程中抽取消息，这可能会导致几个满足以下异常条件的应用程序的重入问题：</span><span class="sxs-lookup"><span data-stu-id="990c0-478">The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:</span></span>  
  
-   <span data-ttu-id="990c0-479">应用程序执行其自身的消息泵。</span><span class="sxs-lookup"><span data-stu-id="990c0-479">The application does its own message pumping.</span></span>  
  
-   <span data-ttu-id="990c0-480">当发生消息泵时，应用程序需要精确地进行控制。</span><span class="sxs-lookup"><span data-stu-id="990c0-480">The application needs to control precisely when message pumping occurs.</span></span>  
  
 <span data-ttu-id="990c0-481">此类应用程序可使用 <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> 方法来防止 CLR 自动回收运行时可调用包装器。</span><span class="sxs-lookup"><span data-stu-id="990c0-481">Such applications can use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.</span></span>  
  
 <span data-ttu-id="990c0-482">在线程上调用此方法时，不能为该线程重新启用自动清除。</span><span class="sxs-lookup"><span data-stu-id="990c0-482">When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread.</span></span> <span data-ttu-id="990c0-483">当应用程序准备好清理运行时可调用包装时，请使用 <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> 方法指示运行时清理当前上下文中的所有运行时可调用包装器。</span><span class="sxs-lookup"><span data-stu-id="990c0-483">When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> method to instruct the runtime to clean up all runtime callable wrappers in the current context.</span></span> <span data-ttu-id="990c0-484">当方法执行时，将发生消息泵。</span><span class="sxs-lookup"><span data-stu-id="990c0-484">Message pumping occurs while the method executes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCriticalRegion">
      <MemberSignature Language="C#" Value="public static void EndCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndCriticalRegion();" />
      <MemberSignature Language="F#" Value="static member EndCriticalRegion : unit -&gt; unit" Usage="System.Threading.Thread.EndCriticalRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-485">通知宿主执行将要进入一个代码区域，在该代码区域内线程中止或未经处理异常的影响限于当前任务。</span><span class="sxs-lookup"><span data-stu-id="990c0-485">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-486">公共语言运行时（CLR）的宿主（如 Microsoft SQL Server 2005）可为代码的关键和非关键区域中的故障建立不同的策略。</span><span class="sxs-lookup"><span data-stu-id="990c0-486">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="990c0-487">关键区域是指线程中止或未经处理的异常的影响可能不会限制为当前任务。</span><span class="sxs-lookup"><span data-stu-id="990c0-487">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="990c0-488">相反，非关键代码区域中的中止或失败只会影响发生错误的任务。</span><span class="sxs-lookup"><span data-stu-id="990c0-488">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="990c0-489">例如，假设某个任务在持有锁时尝试分配内存。</span><span class="sxs-lookup"><span data-stu-id="990c0-489">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="990c0-490">如果内存分配失败，则中止当前任务不足以确保 <xref:System.AppDomain>的稳定性，因为域中的其他任务可能会等待相同的锁。</span><span class="sxs-lookup"><span data-stu-id="990c0-490">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="990c0-491">如果当前任务已终止，则其他任务可能会死锁。</span><span class="sxs-lookup"><span data-stu-id="990c0-491">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="990c0-492">当关键区域发生故障时，主机可能决定卸载整个 <xref:System.AppDomain> 而不是在可能不稳定的状态下继续执行的风险。</span><span class="sxs-lookup"><span data-stu-id="990c0-492">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="990c0-493">若要通知主机您的代码正在进入关键区域，请调用 <xref:System.Threading.Thread.BeginCriticalRegion%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-493">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="990c0-494">当执行返回到非关键代码区域时调用 <xref:System.Threading.Thread.EndCriticalRegion%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-494">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="990c0-495">如果在 SQL Server 2005 下运行的代码中使用此方法，则需要在最高的主机保护级别上运行代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-495">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-496">下面的示例演示如何使用 <xref:System.Threading.Thread.BeginCriticalRegion%2A> 和 <xref:System.Threading.Thread.EndCriticalRegion%2A> 方法将代码块分为关键区域和非关键区域。</span><span class="sxs-lookup"><span data-stu-id="990c0-496">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.BeginCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="EndThreadAffinity">
      <MemberSignature Language="C#" Value="public static void EndThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndThreadAffinity();" />
      <MemberSignature Language="F#" Value="static member EndThreadAffinity : unit -&gt; unit" Usage="System.Threading.Thread.EndThreadAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-497">通知宿主托管代码已执行完依赖于当前物理操作系统线程的标识的指令。</span><span class="sxs-lookup"><span data-stu-id="990c0-497">Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-498">公共语言运行时的某些宿主（如 Microsoft SQL Server 2005）提供其自己的线程管理。</span><span class="sxs-lookup"><span data-stu-id="990c0-498">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="990c0-499">提供其自己的线程管理的主机可随时将正在执行的任务从一个物理操作系统线程移至另一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-499">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="990c0-500">大多数任务不受此切换的影响。</span><span class="sxs-lookup"><span data-stu-id="990c0-500">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="990c0-501">但是，某些任务具有线程关联，即它们依赖于物理操作系统线程的标识。</span><span class="sxs-lookup"><span data-stu-id="990c0-501">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="990c0-502">这些任务在执行不应切换的代码时必须通知宿主。</span><span class="sxs-lookup"><span data-stu-id="990c0-502">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="990c0-503">例如，如果应用程序调用系统 API 来获取具有线程关联的操作系统锁（如 Win32 CRITICAL_SECTION），则必须在获取锁之前调用 <xref:System.Threading.Thread.BeginThreadAffinity%2A>，并在释放锁后 <xref:System.Threading.Thread.EndThreadAffinity%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-503">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="990c0-504">如果在 SQL Server 2005 下运行的代码中使用此方法，则需要在最高的主机保护级别上运行代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-504">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-505">下面的示例演示如何使用 <xref:System.Threading.Thread.BeginThreadAffinity%2A> 和 <xref:System.Threading.Thread.EndThreadAffinity%2A> 方法，通知主机代码块取决于物理操作系统线程的标识。</span><span class="sxs-lookup"><span data-stu-id="990c0-505">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-506">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="990c0-506">The caller does not have the required permission.</span></span></exception>
        <altmember cref="M:System.Threading.Thread.BeginThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="ExecutionContext">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext ExecutionContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.ExecutionContext ExecutionContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ExecutionContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionContext As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ExecutionContext ^ ExecutionContext { System::Threading::ExecutionContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecutionContext : System.Threading.ExecutionContext" Usage="System.Threading.Thread.ExecutionContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-507">获取 <see cref="T:System.Threading.ExecutionContext" /> 对象，该对象包含有关当前线程的各种上下文的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-507">Gets an <see cref="T:System.Threading.ExecutionContext" /> object that contains information about the various contexts of the current thread.</span></span></summary>
        <value><span data-ttu-id="990c0-508">一个 <see cref="T:System.Threading.ExecutionContext" /> 对象，包含当前线程的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-508">An <see cref="T:System.Threading.ExecutionContext" /> object that consolidates context information for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-509"><xref:System.Threading.ExecutionContext> 类为与执行的逻辑线程相关的所有信息提供单个容器。</span><span class="sxs-lookup"><span data-stu-id="990c0-509">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="990c0-510">这包括安全上下文、调用上下文、同步上下文、本地化上下文和事务上下文。</span><span class="sxs-lookup"><span data-stu-id="990c0-510">This includes security context, call context, synchronization context, localization context, and transaction context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Thread ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Thread ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="thread.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-511">确保垃圾回收器回收 <see cref="T:System.Threading.Thread" /> 对象时释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-511">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.Thread" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-512">当当前对象准备好完成时，垃圾回收器将调用 <xref:System.Threading.Thread.Finalize%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-512">The garbage collector calls <xref:System.Threading.Thread.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeNamedDataSlot">
      <MemberSignature Language="C#" Value="public static void FreeNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.FreeNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeNamedDataSlot (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member FreeNamedDataSlot : string -&gt; unit" Usage="System.Threading.Thread.FreeNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="990c0-513">要释放的数据槽的名称。</span><span class="sxs-lookup"><span data-stu-id="990c0-513">The name of the data slot to be freed.</span></span></param>
        <summary><span data-ttu-id="990c0-514">为进程中的所有线程消除名称与槽之间的关联。</span><span class="sxs-lookup"><span data-stu-id="990c0-514">Eliminates the association between a name and a slot, for all threads in the process.</span></span> <span data-ttu-id="990c0-515">为了获得更好的性能，请改用以 <see cref="T:System.ThreadStaticAttribute" /> 特性标记的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-515">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-516">.NET Framework 提供了两种使用线程本地存储（TLS）的机制：线程相关的静态字段（即使用 <xref:System.ThreadStaticAttribute> 属性标记的字段）和数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-516">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="990c0-517">线程相对静态字段比数据槽提供更好的性能，并启用编译时类型检查。</span><span class="sxs-lookup"><span data-stu-id="990c0-517">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="990c0-518">有关使用 TLS 的详细信息，请参阅[线程本地存储：线程相对静态字段和数据槽](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-518">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="990c0-519">`FreeNamedDataSlot`任何线程调用后，调用同名 <xref:System.Threading.Thread.GetNamedDataSlot%2A> 的任何其他线程都将分配一个与该名称关联的新槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-519">After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name.</span></span> <span data-ttu-id="990c0-520">对任何线程 `GetNamedDataSlot` 的后续调用将返回新槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-520">Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot.</span></span> <span data-ttu-id="990c0-521">但是，对 `GetNamedDataSlot` 的先前调用返回的任何 <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> 都可以继续使用旧槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-521">However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot.</span></span>  
  
 <span data-ttu-id="990c0-522">只有在调用 `FreeNamedDataSlot` 之前获得的每个 `LocalDataStoreSlot` 都已释放并进行了垃圾回收后，才会释放已与某个名称关联的槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-522">A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected.</span></span>  
  
 <span data-ttu-id="990c0-523">线程使用本地存储内存机制来存储线程特定的数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-523">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="990c0-524">公共语言运行时在创建每个进程时将多槽数据存储数组分配给它。</span><span class="sxs-lookup"><span data-stu-id="990c0-524">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="990c0-525">线程可以在数据存储中分配数据槽，在槽中存储和检索数据值，并在线程过期后释放槽以供重新使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-525">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="990c0-526">数据槽对于每个线程都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="990c0-526">Data slots are unique per thread.</span></span> <span data-ttu-id="990c0-527">任何其他线程（甚至不是子线程）都无法获取该数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-527">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-528">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="990c0-528">This section contains two code examples.</span></span> <span data-ttu-id="990c0-529">第一个示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 特性的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-529">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="990c0-530">第二个示例演示如何使用数据槽来执行相同的操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-530">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="990c0-531">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-531">**First Example**</span></span>  
  
 <span data-ttu-id="990c0-532">下面的示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-532">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="990c0-533">与第二个示例中所示的方法相比，此方法提供的性能更好。</span><span class="sxs-lookup"><span data-stu-id="990c0-533">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="990c0-534">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-534">**Second Example**</span></span>  
  
 <span data-ttu-id="990c0-535">下面的示例演示如何使用命名数据槽来存储特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-535">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-536">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-536">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="990c0-537">线程本地存储区：线程相关的静态字段和数据槽</span><span class="sxs-lookup"><span data-stu-id="990c0-537">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState GetApartmentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.ApartmentState GetApartmentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApartmentState () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ApartmentState GetApartmentState();" />
      <MemberSignature Language="F#" Value="member this.GetApartmentState : unit -&gt; System.Threading.ApartmentState" Usage="thread.GetApartmentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-538">返回表示单元状态的 <see cref="T:System.Threading.ApartmentState" /> 值。</span><span class="sxs-lookup"><span data-stu-id="990c0-538">Returns an <see cref="T:System.Threading.ApartmentState" /> value indicating the apartment state.</span></span></summary>
        <returns><span data-ttu-id="990c0-539">其中一个表示托管线程的单元状态的 <see cref="T:System.Threading.ApartmentState" /> 值。</span><span class="sxs-lookup"><span data-stu-id="990c0-539">One of the <see cref="T:System.Threading.ApartmentState" /> values indicating the apartment state of the managed thread.</span></span> <span data-ttu-id="990c0-540">默认为 <see cref="F:System.Threading.ApartmentState.Unknown" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-540">The default is <see cref="F:System.Threading.ApartmentState.Unknown" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-541">此方法连同 <xref:System.Threading.Thread.SetApartmentState%2A> 方法和 <xref:System.Threading.Thread.TrySetApartmentState%2A> 方法替换 <xref:System.Threading.Thread.ApartmentState%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="990c0-541">This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-542">下面的代码示例演示 <xref:System.Threading.Thread.GetApartmentState%2A>、<xref:System.Threading.Thread.SetApartmentState%2A>和 <xref:System.Threading.Thread.TrySetApartmentState%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-542">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="990c0-543">此代码示例创建一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-543">The code example creates a thread.</span></span> <span data-ttu-id="990c0-544">启动线程之前，<xref:System.Threading.Thread.GetApartmentState%2A> 显示初始 <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> 状态，<xref:System.Threading.Thread.SetApartmentState%2A> 将状态更改为 <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-544">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="990c0-545">当尝试将状态更改为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> 时，<xref:System.Threading.Thread.TrySetApartmentState%2A> 方法返回 `false`，因为已设置了单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-545">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="990c0-546">如果已尝试 <xref:System.Threading.Thread.SetApartmentState%2A>相同的操作，则会引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-546">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="990c0-547">线程启动后，将再次使用 <xref:System.Threading.Thread.TrySetApartmentState%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-547">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="990c0-548">这次会引发 <xref:System.Threading.ThreadStateException>，因为该线程已启动。</span><span class="sxs-lookup"><span data-stu-id="990c0-548">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompressedStack">
      <MemberSignature Language="C#" Value="public System.Threading.CompressedStack GetCompressedStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.CompressedStack GetCompressedStack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCompressedStack" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCompressedStack () As CompressedStack" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CompressedStack ^ GetCompressedStack();" />
      <MemberSignature Language="F#" Value="member this.GetCompressedStack : unit -&gt; System.Threading.CompressedStack" Usage="thread.GetCompressedStack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("Thread.GetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CompressedStack</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-549">返回 <see cref="T:System.Threading.CompressedStack" /> 对象，此对象可用于获取当前线程的堆栈。</span><span class="sxs-lookup"><span data-stu-id="990c0-549">Returns a <see cref="T:System.Threading.CompressedStack" /> object that can be used to capture the stack for the current thread.</span></span></summary>
        <returns><span data-ttu-id="990c0-550">无。</span><span class="sxs-lookup"><span data-stu-id="990c0-550">None.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-551">不再支持此方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-551">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="990c0-552">在所有情况下。</span><span class="sxs-lookup"><span data-stu-id="990c0-552">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcessorId">
      <MemberSignature Language="C#" Value="public static int GetCurrentProcessorId ();" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentProcessorId() cil managed" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCurrentProcessorId" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcessorId () As Integer" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentProcessorId();" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member GetCurrentProcessorId : unit -&gt; int" Usage="System.Threading.Thread.GetCurrentProcessorId " FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-553">获取用于指示当前线程正在哪个处理器上执行的 ID。</span><span class="sxs-lookup"><span data-stu-id="990c0-553">Gets an ID used to indicate on which processor the current thread is executing.</span></span></summary>
        <returns><span data-ttu-id="990c0-554">表示缓存的处理器 ID 的整数。</span><span class="sxs-lookup"><span data-stu-id="990c0-554">An integer representing the cached processor ID.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="990c0-555">此值将被缓存并定期刷新。</span><span class="sxs-lookup"><span data-stu-id="990c0-555">This value is cached and periodically refreshed.</span></span> <span data-ttu-id="990c0-556">它在使用时可能已过时：使用代码不得依赖于其正确性。</span><span class="sxs-lookup"><span data-stu-id="990c0-556">It may be stale by the time it's used: consuming code must not rely on its accuracy for correctness.</span></span>

<span data-ttu-id="990c0-557">此值不一定是从零开始的处理器号。</span><span class="sxs-lookup"><span data-stu-id="990c0-557">The value is not guaranteed to be a zero-based processor number.</span></span>

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (LocalDataStoreSlot slot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(class System.LocalDataStoreSlot slot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (slot As LocalDataStoreSlot) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(LocalDataStoreSlot ^ slot);" />
      <MemberSignature Language="F#" Value="static member GetData : LocalDataStoreSlot -&gt; obj" Usage="System.Threading.Thread.GetData slot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="slot"><span data-ttu-id="990c0-558">要从其获取值的 <see cref="T:System.LocalDataStoreSlot" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-558">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value.</span></span></param>
        <summary><span data-ttu-id="990c0-559">在当前线程的当前域中从当前线程上指定的槽中检索值。</span><span class="sxs-lookup"><span data-stu-id="990c0-559">Retrieves the value from the specified slot on the current thread, within the current thread's current domain.</span></span> <span data-ttu-id="990c0-560">为了获得更好的性能，请改用以 <see cref="T:System.ThreadStaticAttribute" /> 特性标记的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-560">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="990c0-561">检索到的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-561">The retrieved value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-562">.NET Framework 提供了两种使用线程本地存储（TLS）的机制：线程相关的静态字段（即使用 <xref:System.ThreadStaticAttribute> 属性标记的字段）和数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-562">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="990c0-563">线程相对静态字段比数据槽提供更好的性能，并启用编译时类型检查。</span><span class="sxs-lookup"><span data-stu-id="990c0-563">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="990c0-564">有关使用 TLS 的详细信息，请参阅[线程本地存储：线程相对静态字段和数据槽](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-564">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="990c0-565">线程使用本地存储内存机制来存储线程特定的数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-565">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="990c0-566">公共语言运行时在创建每个进程时将多槽数据存储数组分配给它。</span><span class="sxs-lookup"><span data-stu-id="990c0-566">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="990c0-567">线程可以在数据存储中分配数据槽，在槽中存储和检索数据值，并在线程过期后释放槽以供重新使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-567">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="990c0-568">数据槽对于每个线程都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="990c0-568">Data slots are unique per thread.</span></span> <span data-ttu-id="990c0-569">任何其他线程（甚至不是子线程）都无法获取该数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-569">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-570"><xref:System.Threading.Thread.GetData%2A> 是始终应用于当前正在执行的线程的 `Shared` 方法，即使使用引用另一个线程的变量调用它也是如此。</span><span class="sxs-lookup"><span data-stu-id="990c0-570"><xref:System.Threading.Thread.GetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="990c0-571">若要避免混淆，请在调用 `Shared` 方法时使用类名： `Dim test As Object = Thread.GetData(testSlot)`。</span><span class="sxs-lookup"><span data-stu-id="990c0-571">To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-572">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="990c0-572">This section contains two code examples.</span></span> <span data-ttu-id="990c0-573">第一个示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 特性的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-573">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="990c0-574">第二个示例演示如何使用数据槽来执行相同的操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-574">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="990c0-575">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-575">**First Example**</span></span>  
  
 <span data-ttu-id="990c0-576">下面的示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-576">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="990c0-577">与第二个示例中所示的方法相比，此方法提供的性能更好。</span><span class="sxs-lookup"><span data-stu-id="990c0-577">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="990c0-578">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-578">**Second Example**</span></span>  
  
 <span data-ttu-id="990c0-579">下面的示例演示如何使用数据槽存储特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-579">The following example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-580">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-580">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="990c0-581">线程本地存储区：线程相关的静态字段和数据槽</span><span class="sxs-lookup"><span data-stu-id="990c0-581">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDomain">
      <MemberSignature Language="C#" Value="public static AppDomain GetDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain GetDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomain () As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ GetDomain();" />
      <MemberSignature Language="F#" Value="static member GetDomain : unit -&gt; AppDomain" Usage="System.Threading.Thread.GetDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-582">返回当前线程正在其中运行的当前域。</span><span class="sxs-lookup"><span data-stu-id="990c0-582">Returns the current domain in which the current thread is running.</span></span></summary>
        <returns><span data-ttu-id="990c0-583">表示正在运行的线程的当前应用程序域的 <see cref="T:System.AppDomain" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-583">An <see cref="T:System.AppDomain" /> representing the current application domain of the running thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="990c0-584">下面的代码示例演示如何检索正在运行线程的 `AppDomain` 的名称和 ID。</span><span class="sxs-lookup"><span data-stu-id="990c0-584">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainID">
      <MemberSignature Language="C#" Value="public static int GetDomainID ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDomainID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomainID" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomainID () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDomainID();" />
      <MemberSignature Language="F#" Value="static member GetDomainID : unit -&gt; int" Usage="System.Threading.Thread.GetDomainID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-585">返回唯一的应用程序域标识符。</span><span class="sxs-lookup"><span data-stu-id="990c0-585">Returns a unique application domain identifier.</span></span></summary>
        <returns><span data-ttu-id="990c0-586">唯一标识应用程序域的 32 位有符号整数。</span><span class="sxs-lookup"><span data-stu-id="990c0-586">A 32-bit signed integer uniquely identifying the application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="990c0-587">下面的代码示例演示如何检索正在运行线程的 `AppDomain` 的名称和 ID。</span><span class="sxs-lookup"><span data-stu-id="990c0-587">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="thread.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-588">返回当前线程的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-588">Returns a hash code for the current thread.</span></span></summary>
        <returns><span data-ttu-id="990c0-589">整数哈希代码值。</span><span class="sxs-lookup"><span data-stu-id="990c0-589">An integer hash code value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-590">哈希代码不一定是唯一的。</span><span class="sxs-lookup"><span data-stu-id="990c0-590">The hash code is not guaranteed to be unique.</span></span> <span data-ttu-id="990c0-591">如果需要托管线程的唯一标识符，请使用 <xref:System.Threading.Thread.ManagedThreadId%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="990c0-591">Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot GetNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot GetNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ GetNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetNamedDataSlot : string -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.GetNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="990c0-592">本地数据槽的名称。</span><span class="sxs-lookup"><span data-stu-id="990c0-592">The name of the local data slot.</span></span></param>
        <summary><span data-ttu-id="990c0-593">查找命名的数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-593">Looks up a named data slot.</span></span> <span data-ttu-id="990c0-594">为了获得更好的性能，请改用以 <see cref="T:System.ThreadStaticAttribute" /> 特性标记的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-594">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="990c0-595">为此线程分配的 <see cref="T:System.LocalDataStoreSlot" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-595">A <see cref="T:System.LocalDataStoreSlot" /> allocated for this thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-596">.NET Framework 提供了两种使用线程本地存储（TLS）的机制：线程相关的静态字段（即使用 <xref:System.ThreadStaticAttribute> 属性标记的字段）和数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-596">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="990c0-597">线程相对静态字段比数据槽提供更好的性能，并启用编译时类型检查。</span><span class="sxs-lookup"><span data-stu-id="990c0-597">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="990c0-598">有关使用 TLS 的详细信息，请参阅[线程本地存储：线程相对静态字段和数据槽](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-598">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="990c0-599">线程使用本地存储内存机制来存储线程特定的数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-599">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="990c0-600">公共语言运行时在创建每个进程时将多槽数据存储数组分配给它。</span><span class="sxs-lookup"><span data-stu-id="990c0-600">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="990c0-601">线程可以在数据存储中分配数据槽，在槽中存储和检索数据值，并在线程过期后释放槽以供重新使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-601">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="990c0-602">数据槽对于每个线程都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="990c0-602">Data slots are unique per thread.</span></span> <span data-ttu-id="990c0-603">任何其他线程（甚至不是子线程）都无法获取该数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-603">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="990c0-604">如果命名槽不存在，则分配一个新槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-604">If the named slot does not exist, a new slot is allocated.</span></span> <span data-ttu-id="990c0-605">命名的数据槽是公共的，可供任何人操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-605">Named data slots are public and can be manipulated by anyone.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-606">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="990c0-606">This section contains two code examples.</span></span> <span data-ttu-id="990c0-607">第一个示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 特性的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-607">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="990c0-608">第二个示例演示如何使用数据槽来执行相同的操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-608">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="990c0-609">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-609">**First Example**</span></span>  
  
 <span data-ttu-id="990c0-610">下面的示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-610">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="990c0-611">与第二个示例中所示的方法相比，此方法提供的性能更好。</span><span class="sxs-lookup"><span data-stu-id="990c0-611">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="990c0-612">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-612">**Second Example**</span></span>  
  
 <span data-ttu-id="990c0-613">下面的示例演示如何使用命名数据槽来存储特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-613">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-614">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-614">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="990c0-615">线程本地存储区：线程相关的静态字段和数据槽</span><span class="sxs-lookup"><span data-stu-id="990c0-615">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Interrupt">
      <MemberSignature Language="C#" Value="public void Interrupt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Interrupt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Interrupt" />
      <MemberSignature Language="VB.NET" Value="Public Sub Interrupt ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Interrupt();" />
      <MemberSignature Language="F#" Value="member this.Interrupt : unit -&gt; unit" Usage="thread.Interrupt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-616">中断处于 <see cref="F:System.Threading.ThreadState.WaitSleepJoin" /> 线程状态的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-616">Interrupts a thread that is in the <see cref="F:System.Threading.ThreadState.WaitSleepJoin" /> thread state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-617">如果此线程当前在等待、睡眠或联接状态下未被阻止，则它将在下一次开始阻止时中断。</span><span class="sxs-lookup"><span data-stu-id="990c0-617">If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.</span></span>  
  
 <span data-ttu-id="990c0-618"><xref:System.Threading.ThreadInterruptedException> 在中断的线程中引发，但在线程阻塞之前不会引发。</span><span class="sxs-lookup"><span data-stu-id="990c0-618"><xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks.</span></span> <span data-ttu-id="990c0-619">如果线程永远不会阻塞，则永远不会引发异常，因此线程可能会在不中断的情况下完成。</span><span class="sxs-lookup"><span data-stu-id="990c0-619">If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-620">下面的代码示例演示正在运行的线程在中断后会被阻止的行为。</span><span class="sxs-lookup"><span data-stu-id="990c0-620">The following code example shows the behavior of a running thread when it is interrupted and subsequently gets blocked.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Interrupt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Interrupt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Interrupt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-621">调用方没有适当的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-621">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md"><span data-ttu-id="990c0-622">暂停和中断线程</span><span class="sxs-lookup"><span data-stu-id="990c0-622">Pausing and interrupting threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsAlive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAlive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAlive : bool" Usage="System.Threading.Thread.IsAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-623">获取指示当前线程的执行状态的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-623">Gets a value indicating the execution status of the current thread.</span></span></summary>
        <value><span data-ttu-id="990c0-624">如果此线程已启动并且尚未正常终止或中止，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-624"><see langword="true" /> if this thread has been started and has not terminated normally or aborted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBackground">
      <MemberSignature Language="C#" Value="public bool IsBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBackground" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsBackground" />
      <MemberSignature Language="VB.NET" Value="Public Property IsBackground As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBackground { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsBackground : bool with get, set" Usage="System.Threading.Thread.IsBackground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-625">获取或设置一个值，该值指示某个线程是否为后台线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-625">Gets or sets a value indicating whether or not a thread is a background thread.</span></span></summary>
        <value><span data-ttu-id="990c0-626">如果此线程为或将成为后台线程，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-626"><see langword="true" /> if this thread is or is to become a background thread; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-627">线程是后台线程或前台线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-627">A thread is either a background thread or a foreground thread.</span></span> <span data-ttu-id="990c0-628">后台线程与前台线程相同，不同之处在于后台线程不会阻止进程终止。</span><span class="sxs-lookup"><span data-stu-id="990c0-628">Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating.</span></span> <span data-ttu-id="990c0-629">属于某个进程的所有前台线程终止后，公共语言运行时将结束该进程。</span><span class="sxs-lookup"><span data-stu-id="990c0-629">Once all foreground threads belonging to a process have terminated, the common language runtime ends the process.</span></span> <span data-ttu-id="990c0-630">剩余的后台线程将停止，并且不会完成。</span><span class="sxs-lookup"><span data-stu-id="990c0-630">Any remaining background threads are stopped and do not complete.</span></span>  
  
 <span data-ttu-id="990c0-631">默认情况下，以下线程在前台执行（即，其 <xref:System.Threading.Thread.IsBackground%2A> 属性返回 `false`）：</span><span class="sxs-lookup"><span data-stu-id="990c0-631">By default, the following threads execute in the foreground (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `false`):</span></span>  
  
-   <span data-ttu-id="990c0-632">主线程（或主应用程序线程）。</span><span class="sxs-lookup"><span data-stu-id="990c0-632">The primary thread (or main application thread).</span></span>  
  
-   <span data-ttu-id="990c0-633">通过调用 <xref:System.Threading.Thread> 类构造函数创建的所有线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-633">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="990c0-634">默认情况下，以下线程在后台执行（也就是说，它们的 <xref:System.Threading.Thread.IsBackground%2A> 属性返回 `true`）：</span><span class="sxs-lookup"><span data-stu-id="990c0-634">By default, the following threads execute in the background  (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `true`):</span></span>  
  
-   <span data-ttu-id="990c0-635">线程池线程，线程池是由运行时维护的工作线程池。</span><span class="sxs-lookup"><span data-stu-id="990c0-635">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span> <span data-ttu-id="990c0-636">您可以使用 <xref:System.Threading.ThreadPool> 类配置线程池和计划线程池线程上的工作。</span><span class="sxs-lookup"><span data-stu-id="990c0-636">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="990c0-637">基于任务的异步操作会在线程池线程上自动执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-637">Task-based asynchronous operations automatically execute on thread pool threads.</span></span>  
  
-   <span data-ttu-id="990c0-638">从非托管代码进入托管执行环境的所有线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-638">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-639">下面的示例对比了前台和后台线程的行为。</span><span class="sxs-lookup"><span data-stu-id="990c0-639">The following example contrasts the behavior of foreground and background threads.</span></span> <span data-ttu-id="990c0-640">它创建前台线程和后台线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-640">It creates a foreground thread and a background thread.</span></span> <span data-ttu-id="990c0-641">前台线程会使进程保持运行，直到完成其 `for` 循环，然后终止。</span><span class="sxs-lookup"><span data-stu-id="990c0-641">The foreground thread keeps the process running until completes its `for` loop and terminates.</span></span> <span data-ttu-id="990c0-642">但是，如示例的输出所示，由于前台线程已完成执行，因此进程在后台线程完成执行之前终止。</span><span class="sxs-lookup"><span data-stu-id="990c0-642">However, as the output from the example shows, because the foreground thread has finished execution, the process is terminated before the background thread has completed execution.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsBackground#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsBackground#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsBackground#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-643">线程终止。</span><span class="sxs-lookup"><span data-stu-id="990c0-643">The thread is dead.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/foreground-and-background-threads.md"><span data-ttu-id="990c0-644">前台和后台线程</span><span class="sxs-lookup"><span data-stu-id="990c0-644">Foreground and Background Threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadPoolThread">
      <MemberSignature Language="C#" Value="public bool IsThreadPoolThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadPoolThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsThreadPoolThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadPoolThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadPoolThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadPoolThread : bool" Usage="System.Threading.Thread.IsThreadPoolThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-645">获取指示线程是否属于托管线程池的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-645">Gets a value indicating whether or not a thread belongs to the managed thread pool.</span></span></summary>
        <value><span data-ttu-id="990c0-646">如果此线程属于托管线程池，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-646"><see langword="true" /> if this thread belongs to the managed thread pool; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-647">有关详细信息，请参阅[托管线程池](~/docs/standard/threading/the-managed-thread-pool.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-647">For more information see [The managed thread pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-648">下面的代码示例演示如何确定线程是否来自线程池。</span><span class="sxs-lookup"><span data-stu-id="990c0-648">The following code example shows how to determine whether a thread is from the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ThreadPool" />
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="990c0-649">托管线程池</span><span class="sxs-lookup"><span data-stu-id="990c0-649">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="990c0-650">在此实例表示的线程终止前，阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-650">Blocks the calling thread until the thread represented by this instance terminates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join" />
      <MemberSignature Language="VB.NET" Value="Public Sub Join ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Join();" />
      <MemberSignature Language="F#" Value="member this.Join : unit -&gt; unit" Usage="thread.Join " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-651">在继续执行标准的 COM 和 <see langword="SendMessage" /> 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止。</span><span class="sxs-lookup"><span data-stu-id="990c0-651">Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <see langword="SendMessage" /> pumping.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-652"><xref:System.Threading.Thread.Join%2A> 是一种同步方法，用于阻止调用线程（即调用方法的线程），直到调用了 <xref:System.Threading.Thread.Join%2A> 方法的线程完成。</span><span class="sxs-lookup"><span data-stu-id="990c0-652"><xref:System.Threading.Thread.Join%2A> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed.</span></span> <span data-ttu-id="990c0-653">使用此方法可以确保线程已终止。</span><span class="sxs-lookup"><span data-stu-id="990c0-653">Use this method to ensure that a thread has been terminated.</span></span> <span data-ttu-id="990c0-654">如果线程未终止，调用方将无限期阻止。</span><span class="sxs-lookup"><span data-stu-id="990c0-654">The caller will block indefinitely if the thread does not terminate.</span></span> <span data-ttu-id="990c0-655">在下面的示例中，`Thread1` 线程调用 `Thread2`的 <xref:System.Threading.Thread.Join> 方法，这将导致 `Thread1` 在 `Thread2` 完成之前一直阻止。</span><span class="sxs-lookup"><span data-stu-id="990c0-655">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1a.cs#1)]
 [!code-vb[System.Threading.Thread.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1a.vb#1)]  
  
 <span data-ttu-id="990c0-656">如果在调用 <xref:System.Threading.Thread.Join%2A> 时线程已终止，则该方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="990c0-656">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="990c0-657">绝不应从当前线程调用表示当前线程的 <xref:System.Threading.Thread> 对象的 <xref:System.Threading.Thread.Join%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-657">You should never call the <xref:System.Threading.Thread.Join%2A> method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread.</span></span> <span data-ttu-id="990c0-658">这会导致应用程序无响应，因为当前线程会无限期地等待，</span><span class="sxs-lookup"><span data-stu-id="990c0-658">This causes your app to become unresponsive because the current thread waits upon itself indefinitely,</span></span>  
  
 <span data-ttu-id="990c0-659">此方法更改调用线程的状态以包括 <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-659">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="990c0-660">不能对处于 <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> 状态的线程调用 `Join`。</span><span class="sxs-lookup"><span data-stu-id="990c0-660">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-661">调用方尝试加入处于 <see cref="F:System.Threading.ThreadState.Unstarted" /> 状态的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-661">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="990c0-662">线程在等待时中断。</span><span class="sxs-lookup"><span data-stu-id="990c0-662">The thread is interrupted while waiting.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Join : int -&gt; bool" Usage="thread.Join millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="990c0-663">等待线程终止的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="990c0-663">The number of milliseconds to wait for the thread to terminate.</span></span></param>
        <summary><span data-ttu-id="990c0-664">在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止或经过了指定时间为止。</span><span class="sxs-lookup"><span data-stu-id="990c0-664">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span></span></summary>
        <returns><span data-ttu-id="990c0-665">如果线程已终止，则为 <see langword="true" />；如果 <see langword="false" /> 参数指定的时间量已过之后还未终止线程，则为 <paramref name="millisecondsTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-665"><see langword="true" /> if the thread has terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout" /> parameter has elapsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-666"><xref:System.Threading.Thread.Join%28System.Int32%29> 是一种同步方法，该方法阻止调用线程（即调用方法的线程），直到调用了 <xref:System.Threading.Thread.Join%2A> 方法的线程已完成或超时间隔已过。</span><span class="sxs-lookup"><span data-stu-id="990c0-666"><xref:System.Threading.Thread.Join%28System.Int32%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="990c0-667">在下面的示例中，`Thread1` 线程调用 `Thread2`的 <xref:System.Threading.Thread.Join> 方法，这将导致 `Thread1` 在 `Thread2` 完成之前或在2秒之前被阻止。</span><span class="sxs-lookup"><span data-stu-id="990c0-667">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1b.cs#2)]
 [!code-vb[System.Threading.Thread.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1b.vb#2)]  
  
 <span data-ttu-id="990c0-668">如果为 `millisecondsTimeout` 参数指定了 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则此方法的行为与 <xref:System.Threading.Thread.Join> 方法重载相同，返回值除外。</span><span class="sxs-lookup"><span data-stu-id="990c0-668">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="990c0-669">如果在调用 <xref:System.Threading.Thread.Join%2A> 时线程已终止，则该方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="990c0-669">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="990c0-670">此方法更改调用线程的状态以包括 <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-670">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="990c0-671">不能对处于 <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> 状态的线程调用 `Join`。</span><span class="sxs-lookup"><span data-stu-id="990c0-671">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="990c0-672"><paramref name="millisecondsTimeout" /> 的值为负数，且不等于 <see cref="F:System.Threading.Timeout.Infinite" />（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="990c0-672">The value of <paramref name="millisecondsTimeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-673">该线程尚未启动。</span><span class="sxs-lookup"><span data-stu-id="990c0-673">The thread has not been started.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
        <exception cref="T:System.ArgumentException"><span data-ttu-id="990c0-674"><paramref name="millisecondsTimeout" /> 小于 -1 (Timeout.Infinite)。</span><span class="sxs-lookup"><span data-stu-id="990c0-674"><paramref name="millisecondsTimeout" /> is less than -1 (Timeout.Infinite).</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="990c0-675">线程在等待时中断。</span><span class="sxs-lookup"><span data-stu-id="990c0-675">The thread was interrupted while waiting.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Join : TimeSpan -&gt; bool" Usage="thread.Join timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="990c0-676">设置等待线程终止的时间量的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-676">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate.</span></span></param>
        <summary><span data-ttu-id="990c0-677">在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止或经过了指定时间为止。</span><span class="sxs-lookup"><span data-stu-id="990c0-677">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span></span></summary>
        <returns><span data-ttu-id="990c0-678">如果线程已终止，则为 <see langword="true" />；如果 <see langword="false" /> 参数指定的时间量已过之后还未终止线程，则为 <paramref name="timeout" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-678"><see langword="true" /> if the thread terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="timeout" /> parameter has elapsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-679"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> 是一种同步方法，该方法阻止调用线程（即调用方法的线程），直到调用了 <xref:System.Threading.Thread.Join%2A> 方法的线程已完成或超时间隔已过。</span><span class="sxs-lookup"><span data-stu-id="990c0-679"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="990c0-680">在下面的示例中，`Thread1` 线程调用 `Thread2`的 <xref:System.Threading.Thread.Join> 方法，这将导致 `Thread1` 在 `Thread2` 完成之前或在2秒之前被阻止。</span><span class="sxs-lookup"><span data-stu-id="990c0-680">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1c.cs#3)]
 [!code-vb[System.Threading.Thread.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1c.vb#3)]  
  
 <span data-ttu-id="990c0-681">如果为 `timeout`指定了 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则此方法的行为与 <xref:System.Threading.Thread.Join> 方法重载相同，返回值除外。</span><span class="sxs-lookup"><span data-stu-id="990c0-681">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="990c0-682">如果在调用 <xref:System.Threading.Thread.Join%2A> 时线程已终止，则该方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="990c0-682">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="990c0-683">此方法更改当前线程的状态以包括 <xref:System.Threading.ThreadState.WaitSleepJoin>。</span><span class="sxs-lookup"><span data-stu-id="990c0-683">This method changes the state of the current thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span> <span data-ttu-id="990c0-684">不能对处于 <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> 状态的线程调用 `Join`。</span><span class="sxs-lookup"><span data-stu-id="990c0-684">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-685">下面的代码示例演示如何将 `TimeSpan` 值与 `Join` 方法一起使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-685">The following code example demonstrates how to use a `TimeSpan` value with the `Join` method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Timespan#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Timespan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Timespan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="990c0-686"><paramref name="timeout" /> 的值为负数，且不等于 <see cref="F:System.Threading.Timeout.Infinite" />（以毫秒为单位），或大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</span><span class="sxs-lookup"><span data-stu-id="990c0-686">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-687">调用方尝试加入处于 <see cref="F:System.Threading.ThreadState.Unstarted" /> 状态的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-687">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="ManagedThreadId">
      <MemberSignature Language="C#" Value="public int ManagedThreadId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ManagedThreadId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ManagedThreadId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManagedThreadId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ManagedThreadId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ManagedThreadId : int" Usage="System.Threading.Thread.ManagedThreadId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-688">获取当前托管线程的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="990c0-688">Gets a unique identifier for the current managed thread.</span></span></summary>
        <value><span data-ttu-id="990c0-689">一个整数，表示此托管线程的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="990c0-689">An integer that represents a unique identifier for this managed thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-690">线程的 <xref:System.Threading.Thread.ManagedThreadId%2A> 属性值用于唯一标识该线程在其进程中。</span><span class="sxs-lookup"><span data-stu-id="990c0-690">A thread's <xref:System.Threading.Thread.ManagedThreadId%2A> property value serves to uniquely identify that thread within its process.</span></span>  
  
 <span data-ttu-id="990c0-691"><xref:System.Threading.Thread.ManagedThreadId%2A> 属性的值不会随时间而变化，即使托管公共语言运行时的非托管代码将线程作为纤程实现。</span><span class="sxs-lookup"><span data-stu-id="990c0-691">The value of the <xref:System.Threading.Thread.ManagedThreadId%2A> property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberSignature Language="F#" Value="static member MemoryBarrier : unit -&gt; unit" Usage="System.Threading.Thread.MemoryBarrier " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-692">按如下方式同步内存访问：执行当前线程的处理器在对指令重新排序时，不能采用先执行 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 调用之后的内存存取，再执行 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 调用之前的内存存取的方式。</span><span class="sxs-lookup"><span data-stu-id="990c0-692">Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <see cref="M:System.Threading.Thread.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-693">仅在具有弱内存排序的多处理器系统上需要 <xref:System.Threading.Thread.MemoryBarrier%2A> （例如，使用多个 Intel Itanium 处理器的系统）。</span><span class="sxs-lookup"><span data-stu-id="990c0-693"><xref:System.Threading.Thread.MemoryBarrier%2A> is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="990c0-694">大多数情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句或 <xref:System.Threading.Monitor> 类提供更简单的方法来同步数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-694">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Threading.Thread.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-695">获取或设置线程的名称。</span><span class="sxs-lookup"><span data-stu-id="990c0-695">Gets or sets the name of the thread.</span></span></summary>
        <value><span data-ttu-id="990c0-696">包含线程名称的字符串或 <see langword="null" />（如果未设置名称）。</span><span class="sxs-lookup"><span data-stu-id="990c0-696">A string containing the name of the thread, or <see langword="null" /> if no name was set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-697">此属性为写入一次。</span><span class="sxs-lookup"><span data-stu-id="990c0-697">This property is write-once.</span></span> <span data-ttu-id="990c0-698">由于线程的 <xref:System.Threading.Thread.Name%2A> 属性的默认值为 `null`，因此你可以通过将其与 `null`进行比较来确定是否已将名称显式分配给该线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-698">Because the default value of a thread's <xref:System.Threading.Thread.Name%2A> property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`.</span></span>  
  
 <span data-ttu-id="990c0-699">分配给 <xref:System.Threading.Thread.Name%2A> 属性的字符串可包含任何 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="990c0-699">The string assigned to the <xref:System.Threading.Thread.Name%2A> property can include any Unicode character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-700">下面的示例演示如何命名一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-700">The following example shows how to name a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Name#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Name#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Name#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Name/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="990c0-701">已请求集运算，但 <see langword="Name" /> 属性已设置。</span><span class="sxs-lookup"><span data-stu-id="990c0-701">A set operation was requested, but the <see langword="Name" /> property has already been set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As ThreadPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadPriority Priority { System::Threading::ThreadPriority get(); void set(System::Threading::ThreadPriority value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Threading.ThreadPriority with get, set" Usage="System.Threading.Thread.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-702">获取或设置指示线程的调度优先级的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-702">Gets or sets a value indicating the scheduling priority of a thread.</span></span></summary>
        <value><span data-ttu-id="990c0-703"><see cref="T:System.Threading.ThreadPriority" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="990c0-703">One of the <see cref="T:System.Threading.ThreadPriority" /> values.</span></span> <span data-ttu-id="990c0-704">默认值是 <see cref="F:System.Threading.ThreadPriority.Normal" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-704">The default value is <see cref="F:System.Threading.ThreadPriority.Normal" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-705">可以为线程分配以下任一优先级 <xref:System.Threading.ThreadPriority> 值：</span><span class="sxs-lookup"><span data-stu-id="990c0-705">A thread can be assigned any one of the following priority <xref:System.Threading.ThreadPriority> values:</span></span>  
  
-   `Highest`  
  
-   `AboveNormal`  
  
-   `Normal`  
  
-   `BelowNormal`  
  
-   `Lowest`  
  
 <span data-ttu-id="990c0-706">操作系统不需要遵循线程的优先级。</span><span class="sxs-lookup"><span data-stu-id="990c0-706">Operating systems are not required to honor the priority of a thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-707">下面的示例演示更改线程优先级的结果。</span><span class="sxs-lookup"><span data-stu-id="990c0-707">The following example shows the result of changing the priority of a thread.</span></span> <span data-ttu-id="990c0-708">创建三个线程，一个线程的优先级设置为 <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>，另一个线程的优先级设置为 <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-708">Three threads are created, the priority of one thread is set to <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, and the priority of a second is set to <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span></span> <span data-ttu-id="990c0-709">每个线程在 `while` 循环中递增变量，并在设置的时间内运行。</span><span class="sxs-lookup"><span data-stu-id="990c0-709">Each thread increments a variable in a `while` loop and runs for a set time.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPriority#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.ThreadPriority/cs/Example1.cs#1)]
 [!code-vb[System.Threading.ThreadPriority#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.ThreadPriority/vb/Example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-710">线程已到达最终状态，如 <see cref="F:System.Threading.ThreadState.Aborted" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-710">The thread has reached a final state, such as <see cref="F:System.Threading.ThreadState.Aborted" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="990c0-711">为集运算指定的值不是有效的 <see cref="T:System.Threading.ThreadPriority" /> 值。</span><span class="sxs-lookup"><span data-stu-id="990c0-711">The value specified for a set operation is not a valid <see cref="T:System.Threading.ThreadPriority" /> value.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadPriority" />
        <related type="Article" href="~/docs/standard/threading/scheduling-threads.md"><span data-ttu-id="990c0-712">计划线程</span><span class="sxs-lookup"><span data-stu-id="990c0-712">Scheduling threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ResetAbort">
      <MemberSignature Language="C#" Value="public static void ResetAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.ResetAbort" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetAbort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetAbort();" />
      <MemberSignature Language="F#" Value="static member ResetAbort : unit -&gt; unit" Usage="System.Threading.Thread.ResetAbort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-713">取消当前线程所请求的 <see cref="M:System.Threading.Thread.Abort(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-713">Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-714">只有具有适当权限的代码才能调用此方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-714">This method can only be called by code with the proper permissions.</span></span>  
  
 <span data-ttu-id="990c0-715">调用 `Abort` 终止线程时，系统将引发 <xref:System.Threading.ThreadAbortException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-715">When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="990c0-716">`ThreadAbortException` 是一种特殊的异常，可由应用程序代码捕获，但会在 catch 块的末尾重新引发，除非调用 `ResetAbort`。</span><span class="sxs-lookup"><span data-stu-id="990c0-716">`ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called.</span></span> <span data-ttu-id="990c0-717">`ResetAbort` 取消中止请求，并阻止 `ThreadAbortException` 终止线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-717">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span>  
  
 <span data-ttu-id="990c0-718">有关演示如何调用 `ResetAbort` 方法的示例，请参阅 <xref:System.Threading.ThreadAbortException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-718">See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="990c0-719">仅限 .NET Core：不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="990c0-719">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-720">未在当前线程上调用 <see langword="Abort" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-720"><see langword="Abort" /> was not invoked on the current thread.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-721">调用方没有当前线程要求的安全权限。</span><span class="sxs-lookup"><span data-stu-id="990c0-721">The caller does not have the required security permission for the current thread.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="990c0-722">销毁线程</span><span class="sxs-lookup"><span data-stu-id="990c0-722">Destroying threads</span></span></related>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="thread.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  https://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  https://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-723">继续已挂起的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-723">Resumes a thread that has been suspended.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="990c0-724">不要使用 <xref:System.Threading.Thread.Suspend%2A> 和 <xref:System.Threading.Thread.Resume%2A> 方法来同步线程的活动。</span><span class="sxs-lookup"><span data-stu-id="990c0-724">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="990c0-725">您无法知道线程在挂起时正在执行的代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-725">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="990c0-726">如果在安全权限评估过程中挂起一个处于锁定状态的线程，则 <xref:System.AppDomain> 中的其他线程可能会被阻止。</span><span class="sxs-lookup"><span data-stu-id="990c0-726">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="990c0-727">如果在线程执行类构造函数时挂起线程，则会阻止 <xref:System.AppDomain> 中尝试使用该类的其他线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-727">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="990c0-728">死锁可能会非常简单。</span><span class="sxs-lookup"><span data-stu-id="990c0-728">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="990c0-729">仅限 .NET Core：不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="990c0-729">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-730">该线程尚未启动、 已死或未处于挂起状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-730">The thread has not been started, is dead, or is not in the suspended state.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-731">调用方没有适当的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-731">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md"><span data-ttu-id="990c0-732">暂停和中断线程</span><span class="sxs-lookup"><span data-stu-id="990c0-732">Pausing and interrupting threads</span></span></related>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="SetApartmentState">
      <MemberSignature Language="C#" Value="public void SetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApartmentState (state As ApartmentState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetApartmentState(System::Threading::ApartmentState state);" />
      <MemberSignature Language="F#" Value="member this.SetApartmentState : System.Threading.ApartmentState -&gt; unit" Usage="thread.SetApartmentState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="990c0-733">新的单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-733">The new apartment state.</span></span></param>
        <summary><span data-ttu-id="990c0-734">在线程启动前设置其单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-734">Sets the apartment state of a thread before it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-735">如果新线程的单元状态在启动之前尚未设置，则会将其初始化为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-735">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="990c0-736">必须在启动线程之前设置单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-736">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-737">默认情况下，主应用程序线程初始化为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-737">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="990c0-738">将主应用程序线程的单元状态设置为 <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> 的唯一方法是将 <xref:System.STAThreadAttribute> 属性应用于入口点方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-738">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="990c0-739"><xref:System.Threading.Thread.SetApartmentState%2A> 方法与 <xref:System.Threading.Thread.GetApartmentState%2A> 方法和 <xref:System.Threading.Thread.TrySetApartmentState%2A> 方法一起替换 <xref:System.Threading.Thread.ApartmentState%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="990c0-739">The <xref:System.Threading.Thread.SetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-740">下面的代码示例演示 <xref:System.Threading.Thread.GetApartmentState%2A>、<xref:System.Threading.Thread.SetApartmentState%2A>和 <xref:System.Threading.Thread.TrySetApartmentState%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-740">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="990c0-741">此代码示例创建一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-741">The code example creates a thread.</span></span> <span data-ttu-id="990c0-742">启动线程之前，<xref:System.Threading.Thread.GetApartmentState%2A> 显示初始 <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> 状态，<xref:System.Threading.Thread.SetApartmentState%2A> 将状态更改为 <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-742">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="990c0-743">当尝试将状态更改为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> 时，<xref:System.Threading.Thread.TrySetApartmentState%2A> 方法返回 `false`，因为已设置了单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-743">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="990c0-744">如果已尝试 <xref:System.Threading.Thread.SetApartmentState%2A>相同的操作，则会引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-744">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="990c0-745">线程启动后，将再次使用 <xref:System.Threading.Thread.TrySetApartmentState%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-745">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="990c0-746">这次会引发 <xref:System.Threading.ThreadStateException>，因为该线程已启动。</span><span class="sxs-lookup"><span data-stu-id="990c0-746">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="990c0-747">仅限 .NET Core：macOS 和 Linux 平台上不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="990c0-747">.NET Core only: This member is not supported on the macOS and Linux platforms.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="990c0-748"><paramref name="state" /> 不是有效的单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-748"><paramref name="state" /> is not a valid apartment state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-749">线程已启动。</span><span class="sxs-lookup"><span data-stu-id="990c0-749">The thread has already been started.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="990c0-750">已初始化单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-750">The apartment state has already been initialized.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCompressedStack">
      <MemberSignature Language="C#" Value="public void SetCompressedStack (System.Threading.CompressedStack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCompressedStack(class System.Threading.CompressedStack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCompressedStack (stack As CompressedStack)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCompressedStack(System::Threading::CompressedStack ^ stack);" />
      <MemberSignature Language="F#" Value="member this.SetCompressedStack : System.Threading.CompressedStack -&gt; unit" Usage="thread.SetCompressedStack stack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("Thread.SetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="System.Threading.CompressedStack" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stack"><span data-ttu-id="990c0-751">将被应用到当前线程的 <see cref="T:System.Threading.CompressedStack" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="990c0-751">The <see cref="T:System.Threading.CompressedStack" /> object to be applied to the current thread.</span></span></param>
        <summary><span data-ttu-id="990c0-752">将捕获的 <see cref="T:System.Threading.CompressedStack" /> 应用到当前线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-752">Applies a captured <see cref="T:System.Threading.CompressedStack" /> to the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-753">不再支持此方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-753">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="990c0-754">在所有情况下。</span><span class="sxs-lookup"><span data-stu-id="990c0-754">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public static void SetData (LocalDataStoreSlot slot, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetData(class System.LocalDataStoreSlot slot, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetData (slot As LocalDataStoreSlot, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetData(LocalDataStoreSlot ^ slot, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="static member SetData : LocalDataStoreSlot * obj -&gt; unit" Usage="System.Threading.Thread.SetData (slot, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="data" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="slot"><span data-ttu-id="990c0-755">在其中设置值的 <see cref="T:System.LocalDataStoreSlot" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-755">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value.</span></span></param>
        <param name="data"><span data-ttu-id="990c0-756">要设置的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-756">The value to be set.</span></span></param>
        <summary><span data-ttu-id="990c0-757">在当前正在运行的线程上为此线程的当前域在指定槽中设置数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-757">Sets the data in the specified slot on the currently running thread, for that thread's current domain.</span></span> <span data-ttu-id="990c0-758">为了提高性能，请改用用 <see cref="T:System.ThreadStaticAttribute" /> 属性标记的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-758">For better performance, use fields marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-759">.NET Framework 提供了两种使用线程本地存储（TLS）的机制：线程相关的静态字段（即使用 <xref:System.ThreadStaticAttribute> 属性标记的字段）和数据槽。</span><span class="sxs-lookup"><span data-stu-id="990c0-759">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="990c0-760">线程相对静态字段比数据槽提供更好的性能，并启用编译时类型检查。</span><span class="sxs-lookup"><span data-stu-id="990c0-760">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="990c0-761">有关使用 TLS 的详细信息，请参阅[线程本地存储：线程相对静态字段和数据槽](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-761">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="990c0-762">线程使用本地存储内存机制来存储线程特定的数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-762">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="990c0-763">公共语言运行时在创建每个进程时将多槽数据存储数组分配给它。</span><span class="sxs-lookup"><span data-stu-id="990c0-763">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="990c0-764">线程可以在数据存储中分配数据槽，在槽中存储和检索数据值，并在线程过程结束并通过垃圾回收来回收 <xref:System.Threading.Thread> 对象之后释放槽以供重新使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-764">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection.</span></span> <span data-ttu-id="990c0-765">数据槽对于每个线程都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="990c0-765">Data slots are unique per thread.</span></span> <span data-ttu-id="990c0-766">任何其他线程（甚至不是子线程）都无法获取该数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-766">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-767"><xref:System.Threading.Thread.SetData%2A> 是始终应用于当前正在执行的线程的 `Shared` 方法，即使使用引用另一个线程的变量调用它也是如此。</span><span class="sxs-lookup"><span data-stu-id="990c0-767"><xref:System.Threading.Thread.SetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="990c0-768">若要避免混淆，请在调用 `Shared` 方法时使用类名： `Thread.SetData(testSlot, "test data")`。</span><span class="sxs-lookup"><span data-stu-id="990c0-768">To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, "test data")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-769">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="990c0-769">This section contains two code examples.</span></span> <span data-ttu-id="990c0-770">第一个示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 特性的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-770">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="990c0-771">第二个示例演示如何使用数据槽来执行相同的操作。</span><span class="sxs-lookup"><span data-stu-id="990c0-771">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="990c0-772">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-772">**First Example**</span></span>  
  
 <span data-ttu-id="990c0-773">下面的示例演示如何使用标记有 <xref:System.ThreadStaticAttribute> 的字段来保存特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-773">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="990c0-774">与第二个示例中所示的方法相比，此方法提供的性能更好。</span><span class="sxs-lookup"><span data-stu-id="990c0-774">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="990c0-775">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="990c0-775">**Second Example**</span></span>  
  
 <span data-ttu-id="990c0-776">下面的示例演示如何使用命名数据槽来存储特定于线程的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-776">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-777">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-777">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="990c0-778">线程本地存储区：线程相关的静态字段和数据槽</span><span class="sxs-lookup"><span data-stu-id="990c0-778">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sleep">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="990c0-779">将当前线程挂起指定的时间。</span><span class="sxs-lookup"><span data-stu-id="990c0-779">Suspends the current thread for the specified amount of time.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Sleep : int -&gt; unit" Usage="System.Threading.Thread.Sleep millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="990c0-780">挂起线程的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="990c0-780">The number of milliseconds for which the thread is suspended.</span></span> <span data-ttu-id="990c0-781">如果 <paramref name="millisecondsTimeout" /> 参数的值为零，则该线程会将其时间片的剩余部分让给任何已经准备好运行的、具有同等优先级的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-781">If the value of the <paramref name="millisecondsTimeout" /> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span></span> <span data-ttu-id="990c0-782">如果没有其他已经准备好运行的、具有同等优先级的线程，则不会挂起当前线程的执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-782">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span></span></param>
        <summary><span data-ttu-id="990c0-783">将当前线程挂起指定的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="990c0-783">Suspends the current thread for the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-784">在指定的时间内，将不会将线程计划为由操作系统执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-784">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="990c0-785">此方法更改线程的状态以包括 <xref:System.Threading.ThreadState.WaitSleepJoin>。</span><span class="sxs-lookup"><span data-stu-id="990c0-785">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="990c0-786">可以指定 `millisecondsTimeout` 参数 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，以无限期挂起线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-786">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the `millisecondsTimeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="990c0-787">但是，我们建议你改为使用其他 <xref:System.Threading?displayProperty=nameWithType> 类，如 <xref:System.Threading.Mutex>、<xref:System.Threading.Monitor>、<xref:System.Threading.EventWaitHandle>或 <xref:System.Threading.Semaphore>，以同步线程或管理资源。</span><span class="sxs-lookup"><span data-stu-id="990c0-787">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to synchronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="990c0-788">系统时钟计时周期，按特定速率称为时钟解析。</span><span class="sxs-lookup"><span data-stu-id="990c0-788">The system clock ticks at a specific rate called the clock resolution.</span></span> <span data-ttu-id="990c0-789">实际超时可能不是精确到指定的超时值，因为将调整指定的超时值，使其与时钟计时周期一致。</span><span class="sxs-lookup"><span data-stu-id="990c0-789">The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks.</span></span> <span data-ttu-id="990c0-790">有关时钟解析和等待时间的详细信息，请参阅 Windows 系统 Api 中的[休眠功能](/windows/win32/api/synchapi/nf-synchapi-sleep)。</span><span class="sxs-lookup"><span data-stu-id="990c0-790">For more information on clock resolution and the waiting time, see the [Sleep function](/windows/win32/api/synchapi/nf-synchapi-sleep) from the Windows system APIs.</span></span>  
  
 <span data-ttu-id="990c0-791">此方法不执行标准的 COM 和 SendMessage 泵。</span><span class="sxs-lookup"><span data-stu-id="990c0-791">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-792">如果需要在具有 <xref:System.STAThreadAttribute>的线程上睡眠，但要执行标准的 COM 和 SendMessage 泵泵，请考虑使用指定超时间隔的 <xref:System.Threading.Thread.Join%2A> 方法的重载之一。</span><span class="sxs-lookup"><span data-stu-id="990c0-792">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-793">下面的示例使用 <xref:System.Threading.Thread.Sleep%2A> 方法来阻止应用程序的主线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-793">The following example uses the <xref:System.Threading.Thread.Sleep%2A> method to block the application's main thread.</span></span>  
  
 [!code-cpp[Thread.Sleep#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep/cs/example.cs#1)]
 [!code-vb[Thread.Sleep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="990c0-794">超时值为负且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-794">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Sleep : TimeSpan -&gt; unit" Usage="System.Threading.Thread.Sleep timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="990c0-795">挂起线程的时间量。</span><span class="sxs-lookup"><span data-stu-id="990c0-795">The amount of time for which the thread is suspended.</span></span> <span data-ttu-id="990c0-796">如果 <paramref name="millisecondsTimeout" /> 参数的值为 <see cref="F:System.TimeSpan.Zero" />，则该线程会将其时间片的剩余部分让给任何已经准备好运行的、具有同等优先级的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-796">If the value of the <paramref name="millisecondsTimeout" /> argument is <see cref="F:System.TimeSpan.Zero" />, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span></span> <span data-ttu-id="990c0-797">如果没有其他已经准备好运行的、具有同等优先级的线程，则不会挂起当前线程的执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-797">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span></span></param>
        <summary><span data-ttu-id="990c0-798">将当前线程挂起指定的时间。</span><span class="sxs-lookup"><span data-stu-id="990c0-798">Suspends the current thread for the specified amount of time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-799">在指定的时间内，将不会将线程计划为由操作系统执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-799">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="990c0-800">此方法更改线程的状态以包括 <xref:System.Threading.ThreadState.WaitSleepJoin>。</span><span class="sxs-lookup"><span data-stu-id="990c0-800">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="990c0-801">可以指定 `timeout` 参数 <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType>，以无限期挂起线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-801">You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> for the `timeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="990c0-802">但是，我们建议你改为使用其他 <xref:System.Threading?displayProperty=nameWithType> 类，如 <xref:System.Threading.Mutex>、<xref:System.Threading.Monitor>、<xref:System.Threading.EventWaitHandle>或 <xref:System.Threading.Semaphore>，以同步线程或管理资源。</span><span class="sxs-lookup"><span data-stu-id="990c0-802">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to synchronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="990c0-803"><xref:System.Threading.Thread.Sleep%2A> 的此重载使用 `timeout`中的总毫秒数。</span><span class="sxs-lookup"><span data-stu-id="990c0-803">This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`.</span></span> <span data-ttu-id="990c0-804">丢弃毫秒的小数部分。</span><span class="sxs-lookup"><span data-stu-id="990c0-804">Fractional milliseconds are discarded.</span></span>  
  
 <span data-ttu-id="990c0-805">此方法不执行标准的 COM 和 SendMessage 泵。</span><span class="sxs-lookup"><span data-stu-id="990c0-805">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-806">如果需要在具有 <xref:System.STAThreadAttribute>的线程上睡眠，但要执行标准的 COM 和 SendMessage 泵泵，请考虑使用指定超时间隔的 <xref:System.Threading.Thread.Join%2A> 方法的重载之一。</span><span class="sxs-lookup"><span data-stu-id="990c0-806">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-807">下面的示例使用 <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> 方法重载来阻止应用程序的主线程5次，每次执行两秒钟。</span><span class="sxs-lookup"><span data-stu-id="990c0-807">The following example uses the <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> method overload to block the application's main thread five times, for two seconds each time.</span></span>  
  
 [!code-cpp[Thread.Sleep_TimeSpan#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep_timespan/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep_TimeSpan#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep_timespan/cs/example.cs#1)]
 [!code-vb[Thread.Sleep_TimeSpan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep_timespan/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="990c0-808"><paramref name="timeout" /> 的值为负数，且不等于 <see cref="F:System.Threading.Timeout.Infinite" />（以毫秒为单位），或大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</span><span class="sxs-lookup"><span data-stu-id="990c0-808">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SpinWait">
      <MemberSignature Language="C#" Value="public static void SpinWait (int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinWait(int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SpinWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinWait (iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinWait(int iterations);" />
      <MemberSignature Language="F#" Value="static member SpinWait : int -&gt; unit" Usage="System.Threading.Thread.SpinWait iterations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterations" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iterations"><span data-ttu-id="990c0-809">定义线程等待的时间长短的 32 位有符号整数。</span><span class="sxs-lookup"><span data-stu-id="990c0-809">A 32-bit signed integer that defines how long a thread is to wait.</span></span></param>
        <summary><span data-ttu-id="990c0-810">导致线程等待由 <paramref name="iterations" /> 参数定义的时间量。</span><span class="sxs-lookup"><span data-stu-id="990c0-810">Causes a thread to wait the number of times defined by the <paramref name="iterations" /> parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-811"><xref:System.Threading.Thread.SpinWait%2A> 方法对于实现锁定很有用。</span><span class="sxs-lookup"><span data-stu-id="990c0-811">The <xref:System.Threading.Thread.SpinWait%2A> method is useful for implementing locks.</span></span> <span data-ttu-id="990c0-812">.NET Framework 中的类（如 <xref:System.Threading.Monitor> 和 <xref:System.Threading.ReaderWriterLock>）在内部使用此方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-812">Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally.</span></span> <span data-ttu-id="990c0-813"><xref:System.Threading.Thread.SpinWait%2A> 实质上是将处理器放入非常紧密的循环，并使用 `iterations` 参数指定的循环计数。</span><span class="sxs-lookup"><span data-stu-id="990c0-813"><xref:System.Threading.Thread.SpinWait%2A> essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter.</span></span> <span data-ttu-id="990c0-814">因此，等待时间取决于处理器的速度。</span><span class="sxs-lookup"><span data-stu-id="990c0-814">The duration of the wait therefore depends on the speed of the processor.</span></span>  
  
 <span data-ttu-id="990c0-815">与 <xref:System.Threading.Thread.Sleep%2A> 方法对比。</span><span class="sxs-lookup"><span data-stu-id="990c0-815">Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method.</span></span> <span data-ttu-id="990c0-816">调用 <xref:System.Threading.Thread.Sleep%2A> 的线程将生成其处理器时间的当前切片的其余部分（即使指定的间隔为零）。</span><span class="sxs-lookup"><span data-stu-id="990c0-816">A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero.</span></span> <span data-ttu-id="990c0-817">为 <xref:System.Threading.Thread.Sleep%2A> 指定一个非零间隔后，线程计划程序将从线程计划程序中删除线程，直到时间间隔结束。</span><span class="sxs-lookup"><span data-stu-id="990c0-817">Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed.</span></span>  
  
 <span data-ttu-id="990c0-818">对于普通的应用程序，<xref:System.Threading.Thread.SpinWait%2A> 通常不起作用。</span><span class="sxs-lookup"><span data-stu-id="990c0-818"><xref:System.Threading.Thread.SpinWait%2A> is not generally useful for ordinary applications.</span></span> <span data-ttu-id="990c0-819">在大多数情况下，应使用 .NET Framework 提供的同步类;例如，调用 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 或包装 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 的语句（在 Visual Basic 中`lock` C#或 `SyncLock`。</span><span class="sxs-lookup"><span data-stu-id="990c0-819">In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` in C# or `SyncLock` in Visual Basic).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="990c0-820">在极少数情况下，避免使用上下文切换很有用，例如，当你知道状态更改即将发生时，请在循环中调用 <xref:System.Threading.Thread.SpinWait%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-820">In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the <xref:System.Threading.Thread.SpinWait%2A> method in your loop.</span></span> <span data-ttu-id="990c0-821"><xref:System.Threading.Thread.SpinWait%2A> 执行的代码旨在防止具有多个处理器的计算机上出现的问题。</span><span class="sxs-lookup"><span data-stu-id="990c0-821">The code <xref:System.Threading.Thread.SpinWait%2A> executes is designed to prevent problems that can occur on computers with multiple processors.</span></span> <span data-ttu-id="990c0-822">例如，在具有多个采用超线程技术的 Intel 处理器的计算机上，<xref:System.Threading.Thread.SpinWait%2A> 在某些情况下防止处理器不足。</span><span class="sxs-lookup"><span data-stu-id="990c0-822">For example, on computers with multiple Intel processors employing Hyper-Threading technology, <xref:System.Threading.Thread.SpinWait%2A> prevents processor starvation in certain situations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="990c0-823">使线程得以按计划执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-823">Causes a thread to be scheduled for execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="thread.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-824">导致操作系统将当前实例的状态更改为 <see cref="F:System.Threading.ThreadState.Running" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-824">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-825">线程处于 <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> 状态后，操作系统就可以将其计划为执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-825">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="990c0-826">线程开始在由提供给线程构造函数的 <xref:System.Threading.ThreadStart> 或 <xref:System.Threading.ParameterizedThreadStart> 委托表示的方法的第一行执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-826">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="990c0-827">请注意，对 <xref:System.Threading.Thread.Start%2A> 的调用不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-827">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-828">如果此重载与使用 <xref:System.Threading.ParameterizedThreadStart> 委托创建的线程一起使用，则 `null` 会传递到线程执行的方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-828">If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread.</span></span>  
  
 <span data-ttu-id="990c0-829">线程终止后，不能再次调用 `Start`。</span><span class="sxs-lookup"><span data-stu-id="990c0-829">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-830">下面的示例创建并启动一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-830">The following example creates and starts a thread.</span></span>  
  
 [!code-cpp[ThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadStart/CPP/threadstart.cpp#1)]
 [!code-csharp[ThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/CS/threadstart.cs#1)]
 [!code-vb[ThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadStart/VB/threadstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-831">线程已启动。</span><span class="sxs-lookup"><span data-stu-id="990c0-831">The thread has already been started.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="990c0-832">内存不足，无法启动此线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-832">There is not enough memory available to start this thread.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="990c0-833">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="990c0-833">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="990c0-834">启动时创建线程并传递数据</span><span class="sxs-lookup"><span data-stu-id="990c0-834">Creating Threads and Passing Data at Start Time</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.Start : obj -&gt; unit" Usage="thread.Start parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="990c0-835">一个对象，包含线程执行的方法要使用的数据。</span><span class="sxs-lookup"><span data-stu-id="990c0-835">An object that contains data to be used by the method the thread executes.</span></span></param>
        <summary><span data-ttu-id="990c0-836">导致操作系统将当前实例的状态更改为 <see cref="F:System.Threading.ThreadState.Running" />，并选择提供包含线程执行的方法要使用的数据的对象。</span><span class="sxs-lookup"><span data-stu-id="990c0-836">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />, and optionally supplies an object containing data to be used by the method the thread executes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-837">线程处于 <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> 状态后，操作系统就可以将其计划为执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-837">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="990c0-838">线程开始在由提供给线程构造函数的 <xref:System.Threading.ThreadStart> 或 <xref:System.Threading.ParameterizedThreadStart> 委托表示的方法的第一行执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-838">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="990c0-839">请注意，对 <xref:System.Threading.Thread.Start%2A> 的调用不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-839">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
 <span data-ttu-id="990c0-840">线程终止后，不能再次调用 `Start`。</span><span class="sxs-lookup"><span data-stu-id="990c0-840">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
 <span data-ttu-id="990c0-841">利用此重载和 <xref:System.Threading.ParameterizedThreadStart> 委托，可以轻松地将数据传递给线程过程，但该方法不是类型安全的，因为任何对象都可以传递到此重载。</span><span class="sxs-lookup"><span data-stu-id="990c0-841">This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload.</span></span> <span data-ttu-id="990c0-842">将数据传递给线程过程的一种更可靠的方法是将线程过程和数据字段放入辅助角色对象。</span><span class="sxs-lookup"><span data-stu-id="990c0-842">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="990c0-843">有关详细信息，请参阅[在启动时创建线程和传递数据](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)。</span><span class="sxs-lookup"><span data-stu-id="990c0-843">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-844">下面的示例使用静态方法和实例方法创建 <xref:System.Threading.ParameterizedThreadStart> 委托。</span><span class="sxs-lookup"><span data-stu-id="990c0-844">The following example creates a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-845">线程已启动。</span><span class="sxs-lookup"><span data-stu-id="990c0-845">The thread has already been started.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="990c0-846">内存不足，无法启动此线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-846">There is not enough memory available to start this thread.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="990c0-847">该线程是使用 <see cref="T:System.Threading.ThreadStart" /> 委托而不是 <see cref="T:System.Threading.ParameterizedThreadStart" /> 委托创建的。</span><span class="sxs-lookup"><span data-stu-id="990c0-847">This thread was created using a <see cref="T:System.Threading.ThreadStart" /> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate.</span></span></exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="T:System.AppDomain" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="990c0-848">创建线程</span><span class="sxs-lookup"><span data-stu-id="990c0-848">Creating Threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Suspend" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend();" />
      <MemberSignature Language="F#" Value="member this.Suspend : unit -&gt; unit" Usage="thread.Suspend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  https://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  https://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-849">挂起线程，或者如果线程已挂起，则不起作用。</span><span class="sxs-lookup"><span data-stu-id="990c0-849">Either suspends the thread, or if the thread is already suspended, has no effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-850">如果该线程已挂起，则此方法不起作用。</span><span class="sxs-lookup"><span data-stu-id="990c0-850">If the thread is already suspended, this method has no effect.</span></span>  
  
> [!CAUTION]
> <span data-ttu-id="990c0-851">不要使用 <xref:System.Threading.Thread.Suspend%2A> 和 <xref:System.Threading.Thread.Resume%2A> 方法来同步线程的活动。</span><span class="sxs-lookup"><span data-stu-id="990c0-851">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="990c0-852">您无法知道线程在挂起时正在执行的代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-852">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="990c0-853">如果在安全权限评估过程中挂起一个处于锁定状态的线程，则 <xref:System.AppDomain> 中的其他线程可能会被阻止。</span><span class="sxs-lookup"><span data-stu-id="990c0-853">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="990c0-854">如果在线程执行类构造函数时挂起线程，则会阻止 <xref:System.AppDomain> 中尝试使用该类的其他线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-854">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="990c0-855">死锁可能会非常简单。</span><span class="sxs-lookup"><span data-stu-id="990c0-855">Deadlocks can occur very easily.</span></span>

<span data-ttu-id="990c0-856">当您对线程调用 `Suspend` 方法时，系统会注意到已请求线程挂起，并允许线程在实际挂起线程之前进入安全点之前执行。</span><span class="sxs-lookup"><span data-stu-id="990c0-856">When you call the `Suspend` method on a thread, the system notes that a thread suspension has been requested and allows the thread to execute until it reaches a safe point before actually suspending the thread.</span></span> <span data-ttu-id="990c0-857">线程的安全点是可以执行垃圾回收的执行点。</span><span class="sxs-lookup"><span data-stu-id="990c0-857">A safe point for a thread is a point in its execution at which garbage collection can be performed.</span></span> <span data-ttu-id="990c0-858">一旦达到安全点，运行时就会确保暂停的线程在托管代码中不会进一步取得任何进展。</span><span class="sxs-lookup"><span data-stu-id="990c0-858">Once a safe point is reached, the runtime guarantees that the suspended thread will not make any further progress in managed code.</span></span> <span data-ttu-id="990c0-859">在托管代码外部执行的线程始终都可以安全执行垃圾回收，并继续执行到尝试恢复执行托管代码。</span><span class="sxs-lookup"><span data-stu-id="990c0-859">A thread executing outside managed code is always safe for garbage collection, and its execution continues until it attempts to resume execution of managed code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="990c0-860">仅限 .NET Core：不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="990c0-860">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-861">线程尚未启动或已终止。</span><span class="sxs-lookup"><span data-stu-id="990c0-861">The thread has not been started or is dead.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="990c0-862">调用方没有适当的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-862">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md"><span data-ttu-id="990c0-863">暂停和中断线程</span><span class="sxs-lookup"><span data-stu-id="990c0-863">Pausing and interrupting threads</span></span></related>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Thread.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Thread::GetIDsOfNames;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._Thread.GetIDsOfNames : Guid * nativeint * uint32 * uint32 * nativeint -&gt; unit&#xA;override this.System.Runtime.InteropServices._Thread.GetIDsOfNames : Guid * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="thread.System.Runtime.InteropServices._Thread.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="990c0-864">保留供将来使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-864">Reserved for future use.</span></span> <span data-ttu-id="990c0-865">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="990c0-865">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="990c0-866">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="990c0-866">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="990c0-867">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="990c0-867">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="990c0-868">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="990c0-868">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="990c0-869">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="990c0-869">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="990c0-870">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="990c0-870">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-871">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="990c0-871">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="990c0-872">有关详细信息，请参阅[IDispatch：： idispatch.getidsofnames](/windows/win32/api/oaidl/nf-oaidl-idispatch-getidsofnames)。</span><span class="sxs-lookup"><span data-stu-id="990c0-872">For more information, see [IDispatch::GetIDsOfNames](/windows/win32/api/oaidl/nf-oaidl-idispatch-getidsofnames).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="990c0-873">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-873">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Thread.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfo;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._Thread.GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit&#xA;override this.System.Runtime.InteropServices._Thread.GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="thread.System.Runtime.InteropServices._Thread.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="990c0-874">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-874">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="990c0-875">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="990c0-875">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="990c0-876">接收一个指针，指向请求的类型信息对象。</span><span class="sxs-lookup"><span data-stu-id="990c0-876">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="990c0-877">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-877">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-878">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="990c0-878">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="990c0-879">有关详细信息，请参阅[IDispatch：： GetTypeInfo](/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfo)。</span><span class="sxs-lookup"><span data-stu-id="990c0-879">For more information, see [IDispatch::GetTypeInfo](/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfo).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="990c0-880">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-880">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Thread.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfoCount;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._Thread.GetTypeInfoCount : uint32 -&gt; unit&#xA;override this.System.Runtime.InteropServices._Thread.GetTypeInfoCount : uint32 -&gt; unit" Usage="thread.System.Runtime.InteropServices._Thread.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="990c0-881">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span><span class="sxs-lookup"><span data-stu-id="990c0-881">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="990c0-882">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="990c0-882">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-883">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="990c0-883">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="990c0-884">有关详细信息，请参阅[IDispatch：： GetTypeInfoCount](/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfocount)。</span><span class="sxs-lookup"><span data-stu-id="990c0-884">For more information, see [IDispatch::GetTypeInfoCount](/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfocount).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="990c0-885">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-885">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.Invoke">
      <MemberSignature Language="C#" Value="void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Thread.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Thread::Invoke;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._Thread.Invoke : uint32 * Guid * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit&#xA;override this.System.Runtime.InteropServices._Thread.Invoke : uint32 * Guid * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="thread.System.Runtime.InteropServices._Thread.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="990c0-886">标识成员。</span><span class="sxs-lookup"><span data-stu-id="990c0-886">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="990c0-887">保留供将来使用。</span><span class="sxs-lookup"><span data-stu-id="990c0-887">Reserved for future use.</span></span> <span data-ttu-id="990c0-888">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="990c0-888">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="990c0-889">要在其中解释自变量的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="990c0-889">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="990c0-890">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="990c0-890">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="990c0-891">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</span><span class="sxs-lookup"><span data-stu-id="990c0-891">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="990c0-892">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="990c0-892">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="990c0-893">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="990c0-893">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="990c0-894">第一个出错自变量的索引。</span><span class="sxs-lookup"><span data-stu-id="990c0-894">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="990c0-895">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-895">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-896">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="990c0-896">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="990c0-897">有关详细信息，请参阅[IDispatch：： Invoke](/windows/win32/api/oaidl/nf-oaidl-idispatch-invoke)。</span><span class="sxs-lookup"><span data-stu-id="990c0-897">For more information, see [IDispatch::Invoke](/windows/win32/api/oaidl/nf-oaidl-idispatch-invoke).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="990c0-898">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-898">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadState ThreadState { System::Threading::ThreadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadState : System.Threading.ThreadState" Usage="System.Threading.Thread.ThreadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="990c0-899">获取一个值，该值包含当前线程的状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-899">Gets a value containing the states of the current thread.</span></span></summary>
        <value><span data-ttu-id="990c0-900">其中一个表示当前线程的状态的 <see cref="T:System.Threading.ThreadState" /> 值。</span><span class="sxs-lookup"><span data-stu-id="990c0-900">One of the <see cref="T:System.Threading.ThreadState" /> values indicating the state of the current thread.</span></span> <span data-ttu-id="990c0-901">初始值为 <see cref="F:System.Threading.ThreadState.Unstarted" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-901">The initial value is <see cref="F:System.Threading.ThreadState.Unstarted" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-902"><xref:System.Threading.Thread.ThreadState%2A> 属性提供比 <xref:System.Threading.Thread.IsAlive%2A> 属性更具体的信息。</span><span class="sxs-lookup"><span data-stu-id="990c0-902">The <xref:System.Threading.Thread.ThreadState%2A> property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="990c0-903">线程状态仅对调试方案很有用。</span><span class="sxs-lookup"><span data-stu-id="990c0-903">Thread state is only of interest in debugging scenarios.</span></span> <span data-ttu-id="990c0-904">因此，始终不应在代码中使用线程状态来同步线程活动。</span><span class="sxs-lookup"><span data-stu-id="990c0-904">Your code should never use thread state to synchronize the activities of threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-905">下面的代码示例演示如何访问线程的 `ThreadState`。</span><span class="sxs-lookup"><span data-stu-id="990c0-905">The following code example demonstrates accessing the `ThreadState` of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ThreadState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ThreadState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cs/source.cs#1)]
 [!code-vb[System.Threading.Thread.ThreadState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.threadstate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetApartmentState">
      <MemberSignature Language="C#" Value="public bool TrySetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetApartmentState (state As ApartmentState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetApartmentState(System::Threading::ApartmentState state);" />
      <MemberSignature Language="F#" Value="member this.TrySetApartmentState : System.Threading.ApartmentState -&gt; bool" Usage="thread.TrySetApartmentState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="990c0-906">新的单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-906">The new apartment state.</span></span></param>
        <summary><span data-ttu-id="990c0-907">在线程启动前设置其单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-907">Sets the apartment state of a thread before it is started.</span></span></summary>
        <returns><span data-ttu-id="990c0-908">如果设置了单元状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-908"><see langword="true" /> if the apartment state is set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-909">如果新线程的单元状态在启动之前尚未设置，则会将其初始化为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-909">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="990c0-910">必须在启动线程之前设置单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-910">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-911">默认情况下，主应用程序线程初始化为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-911">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="990c0-912">将主应用程序线程的单元状态设置为 <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> 的唯一方法是将 <xref:System.STAThreadAttribute> 属性应用于入口点方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-912">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="990c0-913"><xref:System.Threading.Thread.TrySetApartmentState%2A> 方法与 <xref:System.Threading.Thread.GetApartmentState%2A> 方法和 <xref:System.Threading.Thread.SetApartmentState%2A> 方法一起替换 <xref:System.Threading.Thread.ApartmentState%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="990c0-913">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="990c0-914">下面的代码示例演示 <xref:System.Threading.Thread.GetApartmentState%2A>、<xref:System.Threading.Thread.SetApartmentState%2A>和 <xref:System.Threading.Thread.TrySetApartmentState%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-914">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="990c0-915">此代码示例创建一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-915">The code example creates a thread.</span></span> <span data-ttu-id="990c0-916">启动线程之前，<xref:System.Threading.Thread.GetApartmentState%2A> 显示初始 <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> 状态，<xref:System.Threading.Thread.SetApartmentState%2A> 将状态更改为 <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="990c0-916">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="990c0-917">当尝试将状态更改为 <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> 时，<xref:System.Threading.Thread.TrySetApartmentState%2A> 方法返回 `false`，因为已设置了单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-917">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="990c0-918">如果已尝试 <xref:System.Threading.Thread.SetApartmentState%2A>相同的操作，则会引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="990c0-918">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="990c0-919">线程启动后，将再次使用 <xref:System.Threading.Thread.TrySetApartmentState%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-919">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="990c0-920">这次会引发 <xref:System.Threading.ThreadStateException>，因为该线程已启动。</span><span class="sxs-lookup"><span data-stu-id="990c0-920">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="990c0-921">仅限 .NET Core：macOS 和 Linux 平台上不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="990c0-921">.NET Core only: This member is not supported on the macOS and Linux platforms.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="990c0-922"><paramref name="state" /> 不是有效的单元状态。</span><span class="sxs-lookup"><span data-stu-id="990c0-922"><paramref name="state" /> is not a valid apartment state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="990c0-923">线程曾启动但已终止，或未在线程运行时从线程的上下文中进行调用。</span><span class="sxs-lookup"><span data-stu-id="990c0-923">The thread was started and has terminated, or the call is not being made from the thread's context while the thread is running.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileRead">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="990c0-924">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-924">Reads the value of a field.</span></span> <span data-ttu-id="990c0-925">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-925">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static byte VolatileRead (ref byte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 VolatileRead(unsigned int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte VolatileRead(System::Byte % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : byte -&gt; byte" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-926">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-926">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-927">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-927">Reads the value of a field.</span></span> <span data-ttu-id="990c0-928">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-928">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-929">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-929">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-930"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-930"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-931">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-931">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-932">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-932">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-933">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-933">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-934">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-934">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-935">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-935">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-936">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-936">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-937">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-937">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-938">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-938">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static double VolatileRead (ref double address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 VolatileRead(float64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double VolatileRead(double % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : double -&gt; double" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-939">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-939">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-940">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-940">Reads the value of a field.</span></span> <span data-ttu-id="990c0-941">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-941">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-942">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-942">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-943"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-943"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-944">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-944">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-945">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-945">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-946">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-946">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-947">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-947">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-948">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-948">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-949">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-949">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-950">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-950">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-951">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-951">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static short VolatileRead (ref short address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 VolatileRead(int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short VolatileRead(short % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : int16 -&gt; int16" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-952">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-952">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-953">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-953">Reads the value of a field.</span></span> <span data-ttu-id="990c0-954">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-954">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-955">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-955">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-956"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-956"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-957">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-957">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-958">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-958">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-959">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-959">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-960">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-960">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-961">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-961">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-962">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-962">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-963">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-963">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-964">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-964">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static int VolatileRead (ref int address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 VolatileRead(int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int VolatileRead(int % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : int -&gt; int" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-965">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-965">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-966">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-966">Reads the value of a field.</span></span> <span data-ttu-id="990c0-967">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-967">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-968">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-968">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-969"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-969"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-970">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-970">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-971">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-971">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-972">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-972">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-973">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-973">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-974">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-974">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-975">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-975">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-976">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-976">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-977">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-977">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static long VolatileRead (ref long address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 VolatileRead(int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long VolatileRead(long % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : int64 -&gt; int64" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-978">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-978">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-979">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-979">Reads the value of a field.</span></span> <span data-ttu-id="990c0-980">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-980">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-981">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-981">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-982"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-982"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-983">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-983">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-984">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-984">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-985">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-985">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-986">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-986">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-987">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-987">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-988">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-988">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-989">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-989">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-990">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-990">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static IntPtr VolatileRead (ref IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int VolatileRead(native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr VolatileRead(IntPtr % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : nativeint -&gt; nativeint" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-991">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-991">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-992">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-992">Reads the value of a field.</span></span> <span data-ttu-id="990c0-993">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-993">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-994">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-994">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-995"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-995"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-996">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-996">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-997">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-997">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-998">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-998">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-999">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-999">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1000">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1000">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1001">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1001">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1002">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1002">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1003">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1003">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static object VolatileRead (ref object address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object VolatileRead(object&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ VolatileRead(System::Object ^ % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : obj -&gt; obj" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1004">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1004">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-1005">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1005">Reads the value of a field.</span></span> <span data-ttu-id="990c0-1006">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1006">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-1007">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1007">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1008"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1008"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1009">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1009">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1010">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1010">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-1011">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1011">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1012">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1012">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1013">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1013">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1014">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1014">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1015">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1015">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1016">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1016">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static sbyte VolatileRead (ref sbyte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 VolatileRead(int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte VolatileRead(System::SByte % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : sbyte -&gt; sbyte" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1017">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1017">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-1018">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1018">Reads the value of a field.</span></span> <span data-ttu-id="990c0-1019">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1019">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-1020">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1020">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1021"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1021"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1022">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1022">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1023">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1023">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-1024">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1024">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1025">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1025">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1026">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1026">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1027">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1027">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1028">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1028">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1029">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1029">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static float VolatileRead (ref float address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 VolatileRead(float32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float VolatileRead(float % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : single -&gt; single" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1030">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1030">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-1031">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1031">Reads the value of a field.</span></span> <span data-ttu-id="990c0-1032">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1032">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-1033">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1033">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1034"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1034"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1035">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1035">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1036">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1036">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-1037">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1037">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1038">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1038">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1039">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1039">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1040">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1040">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1041">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1041">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1042">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1042">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ushort VolatileRead (ref ushort address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 VolatileRead(unsigned int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 VolatileRead(System::UInt16 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : uint16 -&gt; uint16" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1043">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1043">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-1044">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1044">Reads the value of a field.</span></span> <span data-ttu-id="990c0-1045">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1045">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-1046">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1046">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1047"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1047"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1048">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1048">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1049">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1049">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-1050">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1050">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1051">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1051">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1052">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1052">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1053">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1053">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1054">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1054">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1055">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1055">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static uint VolatileRead (ref uint address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 VolatileRead(unsigned int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 VolatileRead(System::UInt32 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : uint32 -&gt; uint32" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1056">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1056">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-1057">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1057">Reads the value of a field.</span></span> <span data-ttu-id="990c0-1058">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1058">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-1059">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1059">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1060"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1060"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1061">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1061">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1062">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1062">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-1063">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1063">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1064">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1064">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1065">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1065">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1066">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1066">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1067">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1067">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1068">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1068">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ulong VolatileRead (ref ulong address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 VolatileRead(unsigned int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 VolatileRead(System::UInt64 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : uint64 -&gt; uint64" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1069">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1069">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-1070">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1070">Reads the value of a field.</span></span> <span data-ttu-id="990c0-1071">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1071">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-1072">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1072">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1073"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1073"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1074">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1074">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1075">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1075">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-1076">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1076">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1077">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1077">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1078">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1078">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1079">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1079">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1080">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1080">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1081">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1081">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static UIntPtr VolatileRead (ref UIntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int VolatileRead(native unsigned int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr VolatileRead(UIntPtr % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead : unativeint -&gt; unativeint" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1082">要读取的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1082">The field to be read.</span></span></param>
        <summary><span data-ttu-id="990c0-1083">读取字段值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1083">Reads the value of a field.</span></span> <span data-ttu-id="990c0-1084">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1084">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="990c0-1085">由任何处理器写入字段的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1085">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1086"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1086"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1087">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1087">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1088">在多处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 获取由任何处理器写入内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1088">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="990c0-1089">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1089">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1090">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1090">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1091">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1091">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1092">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1092">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1093">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1093">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1094">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1094">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileWrite">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="990c0-1095">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1095">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref byte address, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int8&amp; address, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Byte % address, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : byte * byte -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1096">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1096">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1097">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1097">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1098">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1098">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1099"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1099"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1100">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1100">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1101">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1101">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1102">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1102">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1103">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1103">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1104">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1104">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1105">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1105">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1106">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1106">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1107">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1107">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref double address, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float64&amp; address, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(double % address, double value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : double * double -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Double" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1108">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1108">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1109">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1109">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1110">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1110">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1111"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1111"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1112">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1112">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1113">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1113">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1114">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1114">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1115">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1115">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1116">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1116">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1117">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1117">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1118">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1118">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1119">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1119">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref short address, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int16&amp; address, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(short % address, short value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : int16 * int16 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Int16" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1120">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1120">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1121">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1121">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1122">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1122">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1123"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1123"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1124">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1124">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1125">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1125">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1126">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1126">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1127">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1127">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1128">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1128">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1129">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1129">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1130">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1130">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1131">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1131">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref int address, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int32&amp; address, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(int % address, int value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : int * int -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1132">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1132">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1133">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1133">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1134">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1134">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1135"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1135"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1136">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1136">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1137">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1137">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1138">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1138">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1139">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1139">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1140">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1140">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1141">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1141">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1142">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1142">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1143">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1143">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref long address, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int64&amp; address, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(long % address, long value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : int64 * int64 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Int64" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1144">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1144">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1145">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1145">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1146">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1146">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1147"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1147"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1148">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1148">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1149">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1149">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1150">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1150">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1151">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1151">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1152">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1152">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1153">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1153">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1154">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1154">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1155">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1155">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref IntPtr address, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native int&amp; address, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(IntPtr % address, IntPtr value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : nativeint * nativeint -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.IntPtr" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1156">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1156">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1157">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1157">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1158">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1158">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1159"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1159"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1160">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1160">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1161">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1161">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1162">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1162">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1163">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1163">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1164">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1164">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1165">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1165">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1166">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1166">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1167">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1167">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref object address, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(object&amp; address, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Object ^ % address, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : obj * obj -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.Diagnostics.CodeAnalysis.NotNullIfNotNull("value")</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1168">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1168">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1169">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1169">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1170">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1170">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1171"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1171"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1172">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1172">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1173">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1173">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1174">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1174">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1175">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1175">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1176">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1176">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1177">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1177">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1178">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1178">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1179">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1179">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref sbyte address, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int8&amp; address, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::SByte % address, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : sbyte * sbyte -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.SByte" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1180">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1180">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1181">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1181">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1182">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1182">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1183"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1183"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1184">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1184">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1185">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1185">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1186">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1186">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1187">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1187">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1188">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1188">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1189">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1189">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1190">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1190">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1191">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1191">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref float address, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float32&amp; address, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(float % address, float value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : single * single -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Single" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1192">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1192">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1193">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1193">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1194">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1194">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1195"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1195"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1196">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1196">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1197">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1197">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1198">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1198">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1199">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1199">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1200">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1200">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1201">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1201">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1202">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1202">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1203">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1203">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ushort address, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int16&amp; address, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt16 % address, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : uint16 * uint16 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.UInt16" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1204">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1204">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1205">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1205">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1206">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1206">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1207"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1207"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1208">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1208">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1209">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1209">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1210">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1210">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1211">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1211">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1212">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1212">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1213">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1213">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1214">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1214">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1215">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1215">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref uint address, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int32&amp; address, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt32 % address, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : uint32 * uint32 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.UInt32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1216">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1216">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1217">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1217">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1218">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1218">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1219"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1219"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1220">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1220">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1221">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1221">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1222">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1222">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1223">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1223">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1224">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1224">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1225">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1225">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1226">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1226">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1227">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1227">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ulong address, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int64&amp; address, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt64 % address, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : uint64 * uint64 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.UInt64" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1228">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1228">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1229">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1229">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1230">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1230">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1231"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1231"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1232">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1232">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1233">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1233">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1234">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1234">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1235">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1235">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1236">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1236">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1237">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1237">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1238">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1238">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1239">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1239">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref UIntPtr address, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native unsigned int&amp; address, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(UIntPtr % address, UIntPtr value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite : unativeint * unativeint -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.UIntPtr" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="990c0-1240">将向其中写入值的字段。</span><span class="sxs-lookup"><span data-stu-id="990c0-1240">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="990c0-1241">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="990c0-1241">The value to be written.</span></span></param>
        <summary><span data-ttu-id="990c0-1242">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1242">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1243"><xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 适用于同步的特殊情况。</span><span class="sxs-lookup"><span data-stu-id="990c0-1243"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="990c0-1244">正常情况下， C# `lock` 语句、Visual Basic `SyncLock` 语句和 <xref:System.Threading.Monitor> 类提供更简单的替代方法。</span><span class="sxs-lookup"><span data-stu-id="990c0-1244">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="990c0-1245">在多处理器系统上，<xref:System.Threading.Thread.VolatileWrite%2A> 确保写入内存位置的值立即对所有处理器都可见。</span><span class="sxs-lookup"><span data-stu-id="990c0-1245">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="990c0-1246">这可能需要刷新处理器缓存。</span><span class="sxs-lookup"><span data-stu-id="990c0-1246">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="990c0-1247">即使在单处理器系统上，<xref:System.Threading.Thread.VolatileRead%2A> 和 <xref:System.Threading.Thread.VolatileWrite%2A> 确保将值读取或写入内存，而不缓存（例如，在处理器寄存器中）。</span><span class="sxs-lookup"><span data-stu-id="990c0-1247">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="990c0-1248">因此，您可以使用它们来同步对可以由其他线程或硬件更新的字段的访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1248">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="990c0-1249">调用此方法只会影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="990c0-1249">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="990c0-1250">若要为字段提供有效同步，对字段的所有访问都必须使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1250">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="990c0-1251">在C#中，对字段使用 `volatile` 修饰符可保证对该字段的所有访问都使用 <xref:System.Threading.Thread.VolatileRead%2A> 或 <xref:System.Threading.Thread.VolatileWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="990c0-1251">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static bool Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; bool" Usage="System.Threading.Thread.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="990c0-1252">导致调用线程执行准备好在当前处理器上运行的另一个线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-1252">Causes the calling thread to yield execution to another thread that is ready to run on the current processor.</span></span> <span data-ttu-id="990c0-1253">由操作系统选择要执行的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-1253">The operating system selects the thread to yield to.</span></span></summary>
        <returns><span data-ttu-id="990c0-1254">如果操作系统转而执行另一个线程，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="990c0-1254"><see langword="true" /> if the operating system switched execution to another thread; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="990c0-1255">如果此方法成功，则会生成线程当前时间片的剩余部分。</span><span class="sxs-lookup"><span data-stu-id="990c0-1255">If this method succeeds, the rest of the thread's current time slice is yielded.</span></span> <span data-ttu-id="990c0-1256">操作系统根据其优先级和其他可运行的线程的状态，为另一个时间段计划调用线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-1256">The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.</span></span>  
  
 <span data-ttu-id="990c0-1257">生成仅限于执行调用线程的处理器。</span><span class="sxs-lookup"><span data-stu-id="990c0-1257">Yielding is limited to the processor that is executing the calling thread.</span></span> <span data-ttu-id="990c0-1258">操作系统不会将执行切换到另一个处理器，即使该处理器处于空闲状态或正在运行较低优先级的线程。</span><span class="sxs-lookup"><span data-stu-id="990c0-1258">The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority.</span></span> <span data-ttu-id="990c0-1259">如果没有其他线程准备好在当前处理器上执行，操作系统将不会执行，并且此方法返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="990c0-1259">If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`.</span></span>  
  
 <span data-ttu-id="990c0-1260">此方法等效于使用平台调用来调用本机 Win32 `SwitchToThread` 函数。</span><span class="sxs-lookup"><span data-stu-id="990c0-1260">This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function.</span></span> <span data-ttu-id="990c0-1261">应调用 <xref:System.Threading.Thread.Yield%2A> 方法，而不是使用平台调用，因为平台调用会绕过主机请求的任何自定义线程行为。</span><span class="sxs-lookup"><span data-stu-id="990c0-1261">You should call the <xref:System.Threading.Thread.Yield%2A> method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
