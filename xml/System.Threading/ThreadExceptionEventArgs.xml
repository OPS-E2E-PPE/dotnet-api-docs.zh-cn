<Type Name="ThreadExceptionEventArgs" FullName="System.Threading.ThreadExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d62fefd30bc2dd292dfb5f1f6289b2f498db66cc" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75115534" /></Metadata><TypeSignature Language="C#" Value="public class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ThreadExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c2dd1-101">为 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件提供数据。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-101">Provides data for the <see cref="E:System.Windows.Forms.Application.ThreadException" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2dd1-102">当发生未处理的异常时，由线程创建 <xref:System.Threading.ThreadExceptionEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-102">A <xref:System.Threading.ThreadExceptionEventArgs> is created by a thread when an unhandled exception occurs.</span></span> <span data-ttu-id="c2dd1-103"><xref:System.Threading.ThreadExceptionEventArgs> 包含发生的 <xref:System.Exception>。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-103"><xref:System.Threading.ThreadExceptionEventArgs> contains the <xref:System.Exception> that occurred.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2dd1-104">下面的示例允许通过单击窗体上的 `button1` 来引发 <xref:System.Windows.Forms.Application.ThreadException> 事件。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-104">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="c2dd1-105">该示例创建了两个类。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-105">The example creates two classes.</span></span> <span data-ttu-id="c2dd1-106">`ErrorHandler` 类创建窗体和引发事件的按钮。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-106">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="c2dd1-107">`CustomExceptionHandler` 类提供处理异常的方法。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-107">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="c2dd1-108">在 `ErrorHandler` 类的 `Main` 中，代码将创建异常处理类的新实例，即，`CustomExceptionHandler`的实例。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-108">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="c2dd1-109">然后，将该实例添加到事件中，并运行该应用程序。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-109">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="c2dd1-110">在 `CustomExceptionHandler` 类的 `OnThreadException` 方法中，该示例使用了 `try...catch...finally` 语句来处理异常。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-110">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="c2dd1-111">`ShowThreadExceptionDialog` 方法创建要显示的消息，并将其显示在消息框中。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-111">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.ThreadExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadExceptionEventArgs (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadExceptionEventArgs(Exception ^ t);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadExceptionEventArgs : Exception -&gt; System.Threading.ThreadExceptionEventArgs" Usage="new System.Threading.ThreadExceptionEventArgs t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="c2dd1-112">已发生的 <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-112">The <see cref="T:System.Exception" /> that occurred.</span></span></param>
        <summary><span data-ttu-id="c2dd1-113">初始化 <see cref="T:System.Threading.ThreadExceptionEventArgs" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-113">Initializes a new instance of the <see cref="T:System.Threading.ThreadExceptionEventArgs" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2dd1-114">下面的示例允许通过单击窗体上的 `button1` 来引发 <xref:System.Windows.Forms.Application.ThreadException> 事件。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-114">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="c2dd1-115">该示例创建了两个类。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-115">The example creates two classes.</span></span> <span data-ttu-id="c2dd1-116">`ErrorHandler` 类创建窗体和引发事件的按钮。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-116">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="c2dd1-117">`CustomExceptionHandler` 类提供处理异常的方法。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-117">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="c2dd1-118">在 `ErrorHandler` 类的 `Main` 中，代码将创建异常处理类的新实例，即，`CustomExceptionHandler`的实例。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-118">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="c2dd1-119">然后，将该实例添加到事件中，并运行该应用程序。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-119">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="c2dd1-120">在 `CustomExceptionHandler` 类的 `OnThreadException` 方法中，该示例使用了 `try...catch...finally` 语句来处理异常。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-120">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="c2dd1-121">`ShowThreadExceptionDialog` 方法创建要显示的消息，并将其显示在消息框中。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-121">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.ThreadStart" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2dd1-122">获取已发生的 <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-122">Gets the <see cref="T:System.Exception" /> that occurred.</span></span></summary>
        <value><span data-ttu-id="c2dd1-123">已发生的 <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-123">The <see cref="T:System.Exception" /> that occurred.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2dd1-124">下面的示例允许通过单击窗体上的 `button1` 来引发 <xref:System.Windows.Forms.Application.ThreadException> 事件。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-124">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="c2dd1-125">该示例创建了两个类。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-125">The example creates two classes.</span></span> <span data-ttu-id="c2dd1-126">`ErrorHandler` 类创建窗体和引发事件的按钮。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-126">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="c2dd1-127">`CustomExceptionHandler` 类提供处理异常的方法。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-127">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="c2dd1-128">在 `ErrorHandler` 类的 `Main` 中，代码将创建异常处理类的新实例，即，`CustomExceptionHandler`的实例。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-128">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="c2dd1-129">然后，将该实例添加到事件中，并运行该应用程序。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-129">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="c2dd1-130">在 `CustomExceptionHandler` 类的 `OnThreadException` 方法中，该示例使用了 `try...catch...finally` 语句来处理异常。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-130">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="c2dd1-131">`ShowThreadExceptionDialog` 方法创建要显示的消息，并将其显示在消息框中。</span><span class="sxs-lookup"><span data-stu-id="c2dd1-131">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
