<Type Name="EventWaitHandle" FullName="System.Threading.EventWaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aca10ae288a8c083d01d07db64b553d5a8e78903" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75116496" /></Metadata><TypeSignature Language="C#" Value="public class EventWaitHandle : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventWaitHandle extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.EventWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public Class EventWaitHandle&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandle : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type EventWaitHandle = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="03071-101">表示一个线程同步事件。</span><span class="sxs-lookup"><span data-stu-id="03071-101">Represents a thread synchronization event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-102"><xref:System.Threading.EventWaitHandle> 类允许线程通过发出信号互相通信。</span><span class="sxs-lookup"><span data-stu-id="03071-102">The <xref:System.Threading.EventWaitHandle> class allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="03071-103">通常，一个或多个线程会在 <xref:System.Threading.EventWaitHandle> 上阻塞，直到被取消阻止的线程调用 <xref:System.Threading.EventWaitHandle.Set%2A> 方法，释放一个或多个被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="03071-103">Typically, one or more threads block on an <xref:System.Threading.EventWaitHandle> until an unblocked thread calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, releasing one or more of the blocked threads.</span></span> <span data-ttu-id="03071-104">线程可以通过调用 `static` （`Shared` Visual Basic） <xref:System.Threading.WaitHandle.SignalAndWait%2A?displayProperty=nameWithType> 方法，对 <xref:System.Threading.EventWaitHandle> 进行信号，然后在其上进行阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-104">A thread can signal an <xref:System.Threading.EventWaitHandle> and then block on it, by calling the `static` (`Shared` in Visual Basic) <xref:System.Threading.WaitHandle.SignalAndWait%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="03071-105"><xref:System.Threading.EventWaitHandle> 类提供对已命名的系统同步事件的访问。</span><span class="sxs-lookup"><span data-stu-id="03071-105">The <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="03071-106">已发出信号的 <xref:System.Threading.EventWaitHandle> 的行为取决于其重置模式。</span><span class="sxs-lookup"><span data-stu-id="03071-106">The behavior of an <xref:System.Threading.EventWaitHandle> that has been signaled depends on its reset mode.</span></span> <span data-ttu-id="03071-107">使用 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 标志创建的 <xref:System.Threading.EventWaitHandle> 在释放单个等待线程后会自动重置。</span><span class="sxs-lookup"><span data-stu-id="03071-107">An <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag resets automatically when signaled, after releasing a single waiting thread.</span></span> <span data-ttu-id="03071-108">在 <xref:System.Threading.EventWaitHandle> 方法获得调用前，一直向使用 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 标志创建的 <xref:System.Threading.EventWaitHandle.Reset%2A> 发出信号。</span><span class="sxs-lookup"><span data-stu-id="03071-108">An <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag remains signaled until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called.</span></span>  
  
 <span data-ttu-id="03071-109">自动重置事件提供对资源的独占访问权限。</span><span class="sxs-lookup"><span data-stu-id="03071-109">Automatic reset events provide exclusive access to a resource.</span></span> <span data-ttu-id="03071-110">如果向自动重置事件发出信号时没有线程正在等待，此信号会一直发出到有线程尝试在等待句柄上等待。</span><span class="sxs-lookup"><span data-stu-id="03071-110">If an automatic reset event is signaled when no threads are waiting, it remains signaled until a thread attempts to wait on it.</span></span> <span data-ttu-id="03071-111">此时，事件会释放相应线程并立即重置自身，同时阻止后续线程。</span><span class="sxs-lookup"><span data-stu-id="03071-111">The event releases the thread and immediately resets, blocking subsequent threads.</span></span>  
  
 <span data-ttu-id="03071-112">手动重置事件与入口类似。</span><span class="sxs-lookup"><span data-stu-id="03071-112">Manual reset events are like gates.</span></span> <span data-ttu-id="03071-113">如果事件未发出信号，则等待它的线程将会阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-113">When the event is not signaled, threads that wait on it will block.</span></span> <span data-ttu-id="03071-114">在事件终止时，所有等待线程都将释放，并且事件将保持终止（即，后续等待不会阻止），直到调用 <xref:System.Threading.EventWaitHandle.Reset%2A> 方法为止。</span><span class="sxs-lookup"><span data-stu-id="03071-114">When the event is signaled, all waiting threads are released, and the event remains signaled (that is, subsequent waits do not block) until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called.</span></span> <span data-ttu-id="03071-115">如果一个线程必须完成某个活动，然后其他线程才能继续，则手动重置事件很有用。</span><span class="sxs-lookup"><span data-stu-id="03071-115">Manual reset events are useful when one thread must complete an activity before other threads can proceed.</span></span>  
  
 <span data-ttu-id="03071-116"><xref:System.Threading.EventWaitHandle> 对象可以与 `static`（`Shared` Visual Basic） <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> 和 <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> 方法一起使用。</span><span class="sxs-lookup"><span data-stu-id="03071-116"><xref:System.Threading.EventWaitHandle> objects can be used with the `static`(`Shared` in Visual Basic) <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="03071-117">有关详细信息，请参阅[同步基元概述](~/docs/standard/threading/overview-of-synchronization-primitives.md)一文中的 "[线程交互" 或 "信号](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling)" 部分。</span><span class="sxs-lookup"><span data-stu-id="03071-117">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03071-118">下面的代码示例使用 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 方法重载，以允许主线程向阻止的线程发出信号，并等待线程完成任务。</span><span class="sxs-lookup"><span data-stu-id="03071-118">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="03071-119">该示例启动五个线程，并允许它们在使用 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 标志创建的 <xref:System.Threading.EventWaitHandle> 上阻塞，并在每次用户按 ENTER 键时释放一个线程。</span><span class="sxs-lookup"><span data-stu-id="03071-119">The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="03071-120">然后，该示例将另一线程排队，并使用使用 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 标志创建的 <xref:System.Threading.EventWaitHandle> 来释放它们。</span><span class="sxs-lookup"><span data-stu-id="03071-120">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="03071-121">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="03071-121">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.AutoResetEvent" />
    <altmember cref="T:System.Threading.ManualResetEvent" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="03071-122">托管线程处理</span><span class="sxs-lookup"><span data-stu-id="03071-122">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-123">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-123">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03071-124">初始化 <see cref="T:System.Threading.EventWaitHandle" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="03071-124">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, mode As EventResetMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandle(bool initialState, System::Threading::EventResetMode mode);" />
      <MemberSignature Language="F#" Value="new System.Threading.EventWaitHandle : bool * System.Threading.EventResetMode -&gt; System.Threading.EventWaitHandle" Usage="new System.Threading.EventWaitHandle (initialState, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="03071-125">如果为 <see langword="true" />，则将初始状态设置为终止；如果为 <see langword="false" />，则将初始状态设置为非终止。</span><span class="sxs-lookup"><span data-stu-id="03071-125"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set it to nonsignaled.</span></span></param>
        <param name="mode"><span data-ttu-id="03071-126">其中一个 <see cref="T:System.Threading.EventResetMode" /> 值，它确定是自动还是手动重置事件。</span><span class="sxs-lookup"><span data-stu-id="03071-126">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</span></span></param>
        <summary><span data-ttu-id="03071-127">初始化 <see cref="T:System.Threading.EventWaitHandle" /> 类的新实例，并指定等待句柄最初是否处于终止状态，以及它是自动重置还是手动重置。</span><span class="sxs-lookup"><span data-stu-id="03071-127">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled, and whether it resets automatically or manually.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-128">如果事件的初始状态为非终止，则等待事件的线程将会阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-128">If the initial state of the event is nonsignaled, threads that wait on the event will block.</span></span> <span data-ttu-id="03071-129">如果初始状态为 "已终止"，并且为 `mode`指定了 <xref:System.Threading.EventResetMode.ManualReset> 标志，则等待事件的线程不会阻塞。</span><span class="sxs-lookup"><span data-stu-id="03071-129">If the initial state is signaled, and the <xref:System.Threading.EventResetMode.ManualReset> flag is specified for `mode`, threads that wait on the event will not block.</span></span> <span data-ttu-id="03071-130">如果初始状态为 "已终止"，并且 `mode` 为 <xref:System.Threading.EventResetMode.AutoReset>，则将立即释放等待事件的第一个线程，在此之后，事件将被重置，后续线程将被阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-130">If the initial state is signaled, and `mode` is <xref:System.Threading.EventResetMode.AutoReset>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03071-131">下面的代码示例使用 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 方法重载，以允许主线程向阻止的线程发出信号，并等待线程完成任务。</span><span class="sxs-lookup"><span data-stu-id="03071-131">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="03071-132">该示例启动五个线程，并允许它们在使用 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 标志创建的 <xref:System.Threading.EventWaitHandle> 上阻塞，并在每次用户按 ENTER 键的情况下释放一个线程。</span><span class="sxs-lookup"><span data-stu-id="03071-132">The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, then releases one thread each time the user presses ENTER key.</span></span> <span data-ttu-id="03071-133">然后，该示例将另一线程排队，并使用使用 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 标志创建的 <xref:System.Threading.EventWaitHandle> 来释放它们。</span><span class="sxs-lookup"><span data-stu-id="03071-133">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-134">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-134">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, mode As EventResetMode, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandle(bool initialState, System::Threading::EventResetMode mode, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.EventWaitHandle : bool * System.Threading.EventResetMode * string -&gt; System.Threading.EventWaitHandle" Usage="new System.Threading.EventWaitHandle (initialState, mode, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="03071-135">如果将命名事件作为此调用的结果创建时将初始状态设置为通过信号通知，则为 <see langword="true" />；如果将其设置为不通过信号通知，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-135"><see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to nonsignaled.</span></span></param>
        <param name="mode"><span data-ttu-id="03071-136">其中一个 <see cref="T:System.Threading.EventResetMode" /> 值，它确定是自动还是手动重置事件。</span><span class="sxs-lookup"><span data-stu-id="03071-136">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</span></span></param>
        <param name="name"><span data-ttu-id="03071-137">系统范围的同步事件名称。</span><span class="sxs-lookup"><span data-stu-id="03071-137">The name of a system-wide synchronization event.</span></span></param>
        <summary><span data-ttu-id="03071-138">初始化 <see cref="T:System.Threading.EventWaitHandle" /> 类的新实例，并指定在此调用后创建的等待句柄最初是否处于终止状态，它是自动重置还是手动重置，以及系统同步事件的名称。</span><span class="sxs-lookup"><span data-stu-id="03071-138">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, and the name of a system synchronization event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-139">如果 `name` `null` 或空字符串，则将创建本地 <xref:System.Threading.EventWaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="03071-139">If `name` is `null` or an empty string, a local <xref:System.Threading.EventWaitHandle> is created.</span></span>  
  
 <span data-ttu-id="03071-140">如果为 `name` 参数指定了名称的系统事件已存在，则将忽略 `initialState` 参数。</span><span class="sxs-lookup"><span data-stu-id="03071-140">If a system event with the name specified for the `name` parameter already exists, the `initialState` parameter is ignored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="03071-141">对已命名的系统事件使用此构造函数时，为 `initialState`指定 `false`。</span><span class="sxs-lookup"><span data-stu-id="03071-141">When using this constructor for named system events, specify `false` for `initialState`.</span></span> <span data-ttu-id="03071-142">此构造函数无法确定是否已创建已命名的系统事件，因此您无法对命名事件的状态进行任何假设。</span><span class="sxs-lookup"><span data-stu-id="03071-142">This constructor provides no way to determine whether a named system event was created, so you cannot make any assumptions about the state of the named event.</span></span> <span data-ttu-id="03071-143">若要确定是否已创建命名事件，请使用 <xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%29> 构造函数或 <xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%2CSystem.Security.AccessControl.EventWaitHandleSecurity%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="03071-143">To determine whether a named event was created, use the <xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%29> constructor or the <xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%2CSystem.Security.AccessControl.EventWaitHandleSecurity%29> constructor.</span></span>  
  
 <span data-ttu-id="03071-144">如果事件的初始状态为非终止，则等待事件的线程将会阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-144">If the initial state of the event is nonsignaled, threads that wait on the event will block.</span></span> <span data-ttu-id="03071-145">如果初始状态为 "已终止"，并且为 `mode`指定了 <xref:System.Threading.EventResetMode.ManualReset> 标志，则等待事件的线程不会阻塞。</span><span class="sxs-lookup"><span data-stu-id="03071-145">If the initial state is signaled, and the <xref:System.Threading.EventResetMode.ManualReset> flag is specified for `mode`, threads that wait on the event will not block.</span></span> <span data-ttu-id="03071-146">如果初始状态为 "已终止"，并且 `mode` 为 <xref:System.Threading.EventResetMode.AutoReset>，则将立即释放等待事件的第一个线程，在此之后，事件将被重置，后续线程将被阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-146">If the initial state is signaled, and `mode` is <xref:System.Threading.EventResetMode.AutoReset>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="03071-147">出现 Win32 错误。</span><span class="sxs-lookup"><span data-stu-id="03071-147">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-148">命名事件存在且具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />。</span><span class="sxs-lookup"><span data-stu-id="03071-148">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="03071-149">无法创建命名事件，可能是因为其他类型的等待句柄具有相同名称。</span><span class="sxs-lookup"><span data-stu-id="03071-149">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="03071-150"><paramref name="name" /> 超过 260 个字符。</span><span class="sxs-lookup"><span data-stu-id="03071-150"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="03071-151">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="03071-151">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="03071-152">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="03071-152">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-153">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-153">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, mode As EventResetMode, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandle(bool initialState, System::Threading::EventResetMode mode, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.EventWaitHandle : bool * System.Threading.EventResetMode * string * bool -&gt; System.Threading.EventWaitHandle" Usage="new System.Threading.EventWaitHandle (initialState, mode, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="03071-154">如果将命名事件作为此调用的结果创建时将初始状态设置为通过信号通知，则为 <see langword="true" />；如果将其设置为不通过信号通知，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-154"><see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to nonsignaled.</span></span></param>
        <param name="mode"><span data-ttu-id="03071-155">其中一个 <see cref="T:System.Threading.EventResetMode" /> 值，它确定是自动还是手动重置事件。</span><span class="sxs-lookup"><span data-stu-id="03071-155">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</span></span></param>
        <param name="name"><span data-ttu-id="03071-156">系统范围的同步事件名称。</span><span class="sxs-lookup"><span data-stu-id="03071-156">The name of a system-wide synchronization event.</span></span></param>
        <param name="createdNew"><span data-ttu-id="03071-157">在此方法返回时，如果创建了本地事件（即，如果 <see langword="true" /> 为 <paramref name="name" /> 或空字符串）或指定的命名系统事件，则包含 <see langword="null" />；如果指定的命名系统事件已存在，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-157">When this method returns, contains <see langword="true" /> if a local event was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system event was created; <see langword="false" /> if the specified named system event already existed.</span></span> <span data-ttu-id="03071-158">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="03071-158">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="03071-159">初始化 <see cref="T:System.Threading.EventWaitHandle" /> 类的新实例，指定如果将等待句柄作为此调用的结果而创建，最初是否通过信号通知此句柄；指定是否自动或手动重置系统同步事件的名称，以及一个布尔变量，在调用后其值指示是否创建了命名的系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-159">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, and a Boolean variable whose value after the call indicates whether the named system event was created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-160">如果为 `name` 参数指定了名称的系统事件已存在，则将忽略 `initialState` 参数。</span><span class="sxs-lookup"><span data-stu-id="03071-160">If a system event with the name specified for the `name` parameter already exists, the `initialState` parameter is ignored.</span></span> <span data-ttu-id="03071-161">调用此构造函数后，请在为 `ref` 参数指定的变量（在 Visual Basic 中为`ByRef` 参数`createdNew`）中使用值，以确定是否已存在或创建了已命名的系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-161">After calling this constructor, use the value in the variable specified for the `ref` parameter (`ByRef` parameter in Visual Basic)`createdNew` to determine whether the named system event already existed or was created.</span></span>  
  
 <span data-ttu-id="03071-162">如果事件的初始状态为非终止，则等待事件的线程将会阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-162">If the initial state of the event is nonsignaled, threads that wait on the event will block.</span></span> <span data-ttu-id="03071-163">如果初始状态为 "已终止"，并且为 `mode`指定了 <xref:System.Threading.EventResetMode.ManualReset> 标志，则等待事件的线程不会阻塞。</span><span class="sxs-lookup"><span data-stu-id="03071-163">If the initial state is signaled, and the <xref:System.Threading.EventResetMode.ManualReset> flag is specified for `mode`, threads that wait on the event will not block.</span></span> <span data-ttu-id="03071-164">如果初始状态为 "已终止"，并且 `mode` 为 <xref:System.Threading.EventResetMode.AutoReset>，则将立即释放等待事件的第一个线程，在此之后，事件将被重置，后续线程将被阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-164">If the initial state is signaled, and `mode` is <xref:System.Threading.EventResetMode.AutoReset>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="03071-165">出现 Win32 错误。</span><span class="sxs-lookup"><span data-stu-id="03071-165">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-166">命名事件存在且具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />。</span><span class="sxs-lookup"><span data-stu-id="03071-166">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="03071-167">无法创建命名事件，可能是因为其他类型的等待句柄具有相同名称。</span><span class="sxs-lookup"><span data-stu-id="03071-167">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="03071-168"><paramref name="name" /> 超过 260 个字符。</span><span class="sxs-lookup"><span data-stu-id="03071-168"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="03071-169">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="03071-169">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="03071-170">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="03071-170">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-171">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-171">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.EventWaitHandleSecurity eventSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, mode As EventResetMode, name As String, ByRef createdNew As Boolean, eventSecurity As EventWaitHandleSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandle(bool initialState, System::Threading::EventResetMode mode, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::EventWaitHandleSecurity ^ eventSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.EventWaitHandle : bool * System.Threading.EventResetMode * string * bool * System.Security.AccessControl.EventWaitHandleSecurity -&gt; System.Threading.EventWaitHandle" Usage="new System.Threading.EventWaitHandle (initialState, mode, name, createdNew, eventSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="eventSecurity" Type="System.Security.AccessControl.EventWaitHandleSecurity" Index="4" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="03071-172">如果将命名事件作为此调用的结果创建时将初始状态设置为通过信号通知，则为 <see langword="true" />；如果将其设置为不通过信号通知，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-172"><see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to nonsignaled.</span></span></param>
        <param name="mode"><span data-ttu-id="03071-173">其中一个 <see cref="T:System.Threading.EventResetMode" /> 值，它确定是自动还是手动重置事件。</span><span class="sxs-lookup"><span data-stu-id="03071-173">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</span></span></param>
        <param name="name"><span data-ttu-id="03071-174">系统范围的同步事件名称。</span><span class="sxs-lookup"><span data-stu-id="03071-174">The name of a system-wide synchronization event.</span></span></param>
        <param name="createdNew"><span data-ttu-id="03071-175">在此方法返回时，如果创建了本地事件（即，如果 <see langword="true" /> 为 <paramref name="name" /> 或空字符串）或指定的命名系统事件，则包含 <see langword="null" />；如果指定的命名系统事件已存在，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-175">When this method returns, contains <see langword="true" /> if a local event was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system event was created; <see langword="false" /> if the specified named system event already existed.</span></span> <span data-ttu-id="03071-176">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="03071-176">This parameter is passed uninitialized.</span></span></param>
        <param name="eventSecurity"><span data-ttu-id="03071-177">一个 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 对象，该对象表示应用到命名系统事件的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="03071-177">An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security to be applied to the named system event.</span></span></param>
        <summary><span data-ttu-id="03071-178">初始化 <see cref="T:System.Threading.EventWaitHandle" /> 类的新实例，指定如果等待句柄作为此调用的结果而创建，最初是否通过信号通知此句柄；指定是否自动或手动重置系统同步事件的名称和布尔变量，其值在该调用后将指示是否创建了已命名系统事件，以及是否将访问控制安全性应用到命名事件（如果已创建该事件）。</span><span class="sxs-lookup"><span data-stu-id="03071-178">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, a Boolean variable whose value after the call indicates whether the named system event was created, and the access control security to be applied to the named event if it is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-179">使用此构造函数在创建已命名的系统事件时将其应用于该事件，从而防止其他代码控制该事件。</span><span class="sxs-lookup"><span data-stu-id="03071-179">Use this constructor to apply access control security to a named system event when it is created, preventing other code from taking control of the event.</span></span>  
  
 <span data-ttu-id="03071-180">此构造函数初始化表示系统事件的 <xref:System.Threading.EventWaitHandle> 对象。</span><span class="sxs-lookup"><span data-stu-id="03071-180">This constructor initializes an <xref:System.Threading.EventWaitHandle> object that represents a system event.</span></span> <span data-ttu-id="03071-181">可以创建多个表示同一系统事件的 <xref:System.Threading.EventWaitHandle> 对象。</span><span class="sxs-lookup"><span data-stu-id="03071-181">You can create multiple <xref:System.Threading.EventWaitHandle> objects that represent the same system event.</span></span>  
  
 <span data-ttu-id="03071-182">如果系统事件不存在，则将使用指定的访问控制安全性来创建它。</span><span class="sxs-lookup"><span data-stu-id="03071-182">If the system event does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="03071-183">如果该事件存在，则忽略指定的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="03071-183">If the event exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="03071-184">即使 `eventSecurity` 拒绝或无法向当前用户授予某些访问权限，调用方仍可以完全控制新创建的 <xref:System.Threading.EventWaitHandle> 对象。</span><span class="sxs-lookup"><span data-stu-id="03071-184">The caller has full control over the newly created <xref:System.Threading.EventWaitHandle> object even if `eventSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="03071-185">但是，如果当前用户尝试使用构造函数或 <xref:System.Threading.EventWaitHandle.OpenExisting%2A> 方法获取另一个 <xref:System.Threading.EventWaitHandle> 对象来表示相同的命名事件，则应用 Windows 访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="03071-185">However, if the current user attempts to get another <xref:System.Threading.EventWaitHandle> object to represent the same named event, using either a constructor or the <xref:System.Threading.EventWaitHandle.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="03071-186">如果为 `name` 参数指定了名称的系统事件已存在，则将忽略 `initialState` 参数。</span><span class="sxs-lookup"><span data-stu-id="03071-186">If a system event with the name specified for the `name` parameter already exists, the `initialState` parameter is ignored.</span></span> <span data-ttu-id="03071-187">调用此构造函数后，请在为 `ref` 参数指定的变量（在 Visual Basic 中为`ByRef` 参数 `createdNew`）中使用值，以确定是否已存在或创建了已命名的系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-187">After calling this constructor, use the value in the variable specified for the `ref` parameter (`ByRef` parameter in Visual Basic) `createdNew` to determine whether the named system event already existed or was created.</span></span>  
  
 <span data-ttu-id="03071-188">如果事件的初始状态为非终止，则等待事件的线程将会阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-188">If the initial state of the event is nonsignaled, threads that wait on the event will block.</span></span> <span data-ttu-id="03071-189">如果初始状态为 "已终止"，并且为 `mode`指定了 <xref:System.Threading.EventResetMode.ManualReset> 标志，则等待事件的线程不会阻塞。</span><span class="sxs-lookup"><span data-stu-id="03071-189">If the initial state is signaled, and the <xref:System.Threading.EventResetMode.ManualReset> flag is specified for `mode`, threads that wait on the event will not block.</span></span> <span data-ttu-id="03071-190">如果初始状态为 "已终止"，并且 `mode` 为 <xref:System.Threading.EventResetMode.AutoReset>，则将立即释放等待事件的第一个线程，在此之后，事件将被重置，后续线程将被阻止。</span><span class="sxs-lookup"><span data-stu-id="03071-190">If the initial state is signaled, and `mode` is <xref:System.Threading.EventResetMode.AutoReset>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03071-191">下面的代码示例演示具有访问控制安全性的已命名系统事件的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="03071-191">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="03071-192">该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 方法重载来测试是否存在已命名的事件。</span><span class="sxs-lookup"><span data-stu-id="03071-192">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="03071-193">如果此事件不存在，则将使用初始所有权和访问控制安全性来创建该事件，拒绝当前用户使用该事件，但会授予读取和更改事件权限的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-193">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="03071-194">如果从两个命令窗口运行已编译的示例，第二个副本将在调用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>时引发访问冲突异常。</span><span class="sxs-lookup"><span data-stu-id="03071-194">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="03071-195">捕获到异常，该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 方法重载来等待事件，该事件具有读取和更改权限所需的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-195">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="03071-196">更改权限后，将以等待事件的权限打开事件，并向其发出信号。</span><span class="sxs-lookup"><span data-stu-id="03071-196">After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="03071-197">如果从第三个命令窗口运行已编译的示例，该示例将使用新的权限运行。</span><span class="sxs-lookup"><span data-stu-id="03071-197">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="03071-198">出现 Win32 错误。</span><span class="sxs-lookup"><span data-stu-id="03071-198">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-199">命名事件存在且具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />。</span><span class="sxs-lookup"><span data-stu-id="03071-199">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="03071-200">无法创建命名事件，可能是因为其他类型的等待句柄具有相同名称。</span><span class="sxs-lookup"><span data-stu-id="03071-200">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="03071-201"><paramref name="name" /> 超过 260 个字符。</span><span class="sxs-lookup"><span data-stu-id="03071-201"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="03071-202">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="03071-202">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="03071-203">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="03071-203">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-204">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-204">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As EventWaitHandleSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::EventWaitHandleSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.EventWaitHandleSecurity" Usage="eventWaitHandle.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="03071-205">获取一个 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 对象，它表示当前 <see cref="T:System.Threading.EventWaitHandle" /> 对象所表示的已命名系统事件的访问控件安全性。</span><span class="sxs-lookup"><span data-stu-id="03071-205">Gets an <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security for the named system event represented by the current <see cref="T:System.Threading.EventWaitHandle" /> object.</span></span></summary>
        <returns><span data-ttu-id="03071-206">一个 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 对象，它表示已命名系统事件的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="03071-206">An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security for the named system event.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-207"><xref:System.Threading.EventWaitHandle.GetAccessControl%2A> 方法使用以下标志组合（结合使用按位 "或" 运算 "）搜索权限： <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>、<xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>和 <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="03071-207">The <xref:System.Threading.EventWaitHandle.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="03071-208">用户必须具有调用此方法的 <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType> 权限，并且必须已使用 <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType> 标志打开事件。</span><span class="sxs-lookup"><span data-stu-id="03071-208">The user must have <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType> rights to call this method, and the event must have been opened with the <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03071-209">下面的代码示例演示具有访问控制安全性的已命名系统事件的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="03071-209">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="03071-210">该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 方法重载来测试是否存在已命名的事件。</span><span class="sxs-lookup"><span data-stu-id="03071-210">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="03071-211">如果此事件不存在，则将使用初始所有权和访问控制安全性来创建该事件，拒绝当前用户使用该事件，但会授予读取和更改事件权限的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-211">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="03071-212">如果从两个命令窗口运行已编译的示例，第二个副本将在调用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>时引发访问冲突异常。</span><span class="sxs-lookup"><span data-stu-id="03071-212">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="03071-213">捕获到异常，该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 方法重载来等待事件，该事件具有读取和更改权限所需的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-213">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="03071-214">读取权限后，使用 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A> 方法，并更改该事件时，将使用等待它和发出信号所需的权限打开该事件。</span><span class="sxs-lookup"><span data-stu-id="03071-214">After the permissions have been read, using the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A> method, and changed, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="03071-215">如果从第三个命令窗口运行已编译的示例，该示例将使用新的权限运行。</span><span class="sxs-lookup"><span data-stu-id="03071-215">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-216">当前的 <see cref="T:System.Threading.EventWaitHandle" /> 对象表示已命名的系统事件，且用户不具备 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />。</span><span class="sxs-lookup"><span data-stu-id="03071-216">The current <see cref="T:System.Threading.EventWaitHandle" /> object represents a named system event, and the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />.</span></span>  
  
<span data-ttu-id="03071-217">- 或 -</span><span class="sxs-lookup"><span data-stu-id="03071-217">-or-</span></span> 
<span data-ttu-id="03071-218">当前的 <see cref="T:System.Threading.EventWaitHandle" /> 对象表示已命名的系统事件，且不是用 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" /> 打开的。</span><span class="sxs-lookup"><span data-stu-id="03071-218">The current <see cref="T:System.Threading.EventWaitHandle" /> object represents a named system event, and was not opened with <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="03071-219">不支持 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="03071-219">Not supported for Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="03071-220">之前已在此 <see cref="M:System.Threading.WaitHandle.Close" /> 上调用 <see cref="T:System.Threading.EventWaitHandle" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="03071-220">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-221">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-221">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03071-222">打开指定名称为同步事件（如果已经存在).</span><span class="sxs-lookup"><span data-stu-id="03071-222">Opens a specified named synchronization event, if it already exists.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.EventWaitHandle OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.EventWaitHandle OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As EventWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::EventWaitHandle ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.EventWaitHandle" Usage="System.Threading.EventWaitHandle.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.EventWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="03071-223">要打开的系统同步事件的名称。</span><span class="sxs-lookup"><span data-stu-id="03071-223">The name of the system synchronization event to open.</span></span></param>
        <summary><span data-ttu-id="03071-224">打开指定名称为同步事件（如果已经存在）。</span><span class="sxs-lookup"><span data-stu-id="03071-224">Opens the specified named synchronization event, if it already exists.</span></span></summary>
        <returns><span data-ttu-id="03071-225">一个对象，表示已命名的系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-225">An  object that represents the named system event.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-226"><xref:System.Threading.EventWaitHandle.OpenExisting%2A> 方法尝试打开指定的已命名系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-226">The <xref:System.Threading.EventWaitHandle.OpenExisting%2A> method tries to open the specified named system event.</span></span> <span data-ttu-id="03071-227">如果系统事件不存在，此方法将引发异常，而不是创建系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-227">If the system event does not exist, this method throws an exception instead of creating the system event.</span></span> <span data-ttu-id="03071-228">若要在不存在系统事件时创建系统事件，请使用具有 `name` 参数的 <xref:System.Threading.EventWaitHandle.%23ctor%2A> 构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="03071-228">To create the system event when it does not already exist, use one of the <xref:System.Threading.EventWaitHandle.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="03071-229">对此方法使用相同 `name` 值的多个调用不必返回相同的 <xref:System.Threading.EventWaitHandle> 对象，即使返回的对象表示相同的命名系统事件也是如此。</span><span class="sxs-lookup"><span data-stu-id="03071-229">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.EventWaitHandle> object, even though the objects that are returned represent the same named system event.</span></span>  
  
 <span data-ttu-id="03071-230">此方法重载等效于调用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 方法重载，并使用按位 "或" 运算来指定 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 和 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 权限。</span><span class="sxs-lookup"><span data-stu-id="03071-230">This method overload is equivalent to calling the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload and specifying <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="03071-231">指定 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 标志允许线程等待已命名的系统事件，并指定 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 标志允许线程调用 <xref:System.Threading.EventWaitHandle.Set%2A> 和 <xref:System.Threading.EventWaitHandle.Reset%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="03071-231">Specifying the <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the named system event, and specifying the <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.EventWaitHandle.Set%2A> and <xref:System.Threading.EventWaitHandle.Reset%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03071-232">下面的代码示例演示具有访问控制安全性的已命名系统事件的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="03071-232">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="03071-233">该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 方法重载来测试是否存在已命名的事件。</span><span class="sxs-lookup"><span data-stu-id="03071-233">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="03071-234">如果此事件不存在，则将使用初始所有权和访问控制安全性来创建该事件，拒绝当前用户使用该事件，但会授予读取和更改事件权限的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-234">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="03071-235">如果从两个命令窗口运行已编译的示例，第二个副本将在调用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>时引发访问冲突异常。</span><span class="sxs-lookup"><span data-stu-id="03071-235">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="03071-236">捕获到异常，该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 方法重载来等待事件，该事件具有读取和更改权限所需的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-236">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="03071-237">更改权限后，将以等待事件的权限打开事件，并向其发出信号。</span><span class="sxs-lookup"><span data-stu-id="03071-237">After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="03071-238">如果从第三个命令窗口运行已编译的示例，该示例将使用新的权限运行。</span><span class="sxs-lookup"><span data-stu-id="03071-238">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="03071-239"><paramref name="name" /> 是一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="03071-239"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="03071-240">- 或 -</span><span class="sxs-lookup"><span data-stu-id="03071-240">-or-</span></span> 
 <span data-ttu-id="03071-241"><paramref name="name" /> 超过 260 个字符。</span><span class="sxs-lookup"><span data-stu-id="03071-241"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03071-242"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="03071-242"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="03071-243">命名的系统事件不存在。</span><span class="sxs-lookup"><span data-stu-id="03071-243">The named system event does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="03071-244">出现 Win32 错误。</span><span class="sxs-lookup"><span data-stu-id="03071-244">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-245">已命名的事件存在，但用户不具备使用它所需的安全访问权限。</span><span class="sxs-lookup"><span data-stu-id="03071-245">The named event exists, but the user does not have the security access required to use it.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="03071-246">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="03071-246">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="03071-247">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="03071-247">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-248">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-248">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.EventWaitHandle OpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.EventWaitHandle OpenExisting(string name, valuetype System.Security.AccessControl.EventWaitHandleRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As EventWaitHandleRights) As EventWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::EventWaitHandle ^ OpenExisting(System::String ^ name, System::Security::AccessControl::EventWaitHandleRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.EventWaitHandleRights -&gt; System.Threading.EventWaitHandle" Usage="System.Threading.EventWaitHandle.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.EventWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.EventWaitHandleRights" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="03071-249">要打开的系统同步事件的名称。</span><span class="sxs-lookup"><span data-stu-id="03071-249">The name of the system synchronization event to open.</span></span></param>
        <param name="rights"><span data-ttu-id="03071-250">表示所需的安全访问权限的枚举值的按位组合。</span><span class="sxs-lookup"><span data-stu-id="03071-250">A bitwise combination of the enumeration values that represent the desired security access.</span></span></param>
        <summary><span data-ttu-id="03071-251">用安全访问权限打开指定名称为同步事件（如果已经存在）。</span><span class="sxs-lookup"><span data-stu-id="03071-251">Opens the specified named synchronization event, if it already exists, with the desired security access.</span></span></summary>
        <returns><span data-ttu-id="03071-252">一个对象，表示已命名的系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-252">An object that represents the named system event.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-253">`rights` 参数必须包括 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 标志，以允许线程等待事件，并允许线程调用 <xref:System.Threading.EventWaitHandle.Set%2A> 和 <xref:System.Threading.EventWaitHandle.Reset%2A> 方法的 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 标志。</span><span class="sxs-lookup"><span data-stu-id="03071-253">The `rights` parameter must include the <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the event, and the <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.EventWaitHandle.Set%2A> and <xref:System.Threading.EventWaitHandle.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="03071-254"><xref:System.Threading.EventWaitHandle.OpenExisting%2A> 方法尝试打开现有的已命名系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-254">The <xref:System.Threading.EventWaitHandle.OpenExisting%2A> method tries to open an existing named system event.</span></span> <span data-ttu-id="03071-255">如果系统事件不存在，此方法将引发异常，而不是创建系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-255">If the system event does not exist, this method throws an exception instead of creating the system event.</span></span> <span data-ttu-id="03071-256">若要在不存在系统事件时创建系统事件，请使用具有 `name` 参数的 <xref:System.Threading.EventWaitHandle.%23ctor%2A> 构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="03071-256">To create the system event when it does not already exist, use one of the <xref:System.Threading.EventWaitHandle.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="03071-257">对此方法使用相同 `name` 值的多个调用不必返回相同的 <xref:System.Threading.EventWaitHandle> 对象，即使返回的对象表示相同的命名系统事件也是如此。</span><span class="sxs-lookup"><span data-stu-id="03071-257">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.EventWaitHandle> object, even though the objects that are returned represent the same named system event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03071-258">下面的代码示例演示具有访问控制安全性的已命名系统事件的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="03071-258">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="03071-259">该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 方法重载来测试是否存在已命名的事件。</span><span class="sxs-lookup"><span data-stu-id="03071-259">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="03071-260">如果此事件不存在，则将使用初始所有权和访问控制安全性来创建该事件，拒绝当前用户使用该事件，但会授予读取和更改事件权限的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-260">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="03071-261">如果从两个命令窗口运行已编译的示例，第二个副本将在调用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>时引发访问冲突异常。</span><span class="sxs-lookup"><span data-stu-id="03071-261">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="03071-262">捕获到异常，该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 方法重载来等待事件，该事件具有读取和更改权限所需的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-262">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="03071-263">更改权限后，将以等待事件的权限打开事件，并向其发出信号。</span><span class="sxs-lookup"><span data-stu-id="03071-263">After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="03071-264">如果从第三个命令窗口运行已编译的示例，该示例将使用新的权限运行。</span><span class="sxs-lookup"><span data-stu-id="03071-264">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="03071-265"><paramref name="name" /> 是一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="03071-265"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="03071-266">- 或 -</span><span class="sxs-lookup"><span data-stu-id="03071-266">-or-</span></span> 
 <span data-ttu-id="03071-267"><paramref name="name" /> 超过 260 个字符。</span><span class="sxs-lookup"><span data-stu-id="03071-267"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03071-268"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="03071-268"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="03071-269">命名的系统事件不存在。</span><span class="sxs-lookup"><span data-stu-id="03071-269">The named system event does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="03071-270">出现 Win32 错误。</span><span class="sxs-lookup"><span data-stu-id="03071-270">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-271">命名事件存在，但用户不具有所需的安全访问权限。</span><span class="sxs-lookup"><span data-stu-id="03071-271">The named event exists, but the user does not have the desired security access.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="03071-272">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="03071-272">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="03071-273">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="03071-273">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-274">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-274">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="eventWaitHandle.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="03071-275">将事件状态设置为非终止，从而导致线程受阻。</span><span class="sxs-lookup"><span data-stu-id="03071-275">Sets the state of the event to nonsignaled, causing threads to block.</span></span></summary>
        <returns><span data-ttu-id="03071-276">如果该操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-276"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="03071-277">之前已在此 <see cref="M:System.Threading.WaitHandle.Close" /> 上调用 <see cref="T:System.Threading.EventWaitHandle" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="03071-277">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-278">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-278">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="eventWaitHandle.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="03071-279">将事件状态设置为有信号，从而允许一个或多个等待线程继续执行。</span><span class="sxs-lookup"><span data-stu-id="03071-279">Sets the state of the event to signaled, allowing one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="03071-280">如果该操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-280"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-281">对于具有 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> （包括 <xref:System.Threading.AutoResetEvent>）的 <xref:System.Threading.EventWaitHandle>，<xref:System.Threading.EventWaitHandle.Set%2A> 方法会释放单个线程。</span><span class="sxs-lookup"><span data-stu-id="03071-281">For an <xref:System.Threading.EventWaitHandle> with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> (including <xref:System.Threading.AutoResetEvent>), the <xref:System.Threading.EventWaitHandle.Set%2A> method releases a single thread.</span></span> <span data-ttu-id="03071-282">如果没有等待线程，则等待句柄会保持终止状态，直到某个线程尝试等待它，或直到调用其 <xref:System.Threading.EventWaitHandle.Reset%2A> 方法为止。</span><span class="sxs-lookup"><span data-stu-id="03071-282">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="03071-283">不保证每次调用 <xref:System.Threading.EventWaitHandle.Set%2A> 方法都将释放其重置模式为 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>的 <xref:System.Threading.EventWaitHandle> 中的线程。</span><span class="sxs-lookup"><span data-stu-id="03071-283">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread from an <xref:System.Threading.EventWaitHandle> whose reset mode is <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span> <span data-ttu-id="03071-284">如果两次调用都过于接近，因此在释放线程之前发生第二次调用，则只释放一个线程。</span><span class="sxs-lookup"><span data-stu-id="03071-284">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="03071-285">就好像未发生第二次调用一样。</span><span class="sxs-lookup"><span data-stu-id="03071-285">It is as if the second call did not happen.</span></span> <span data-ttu-id="03071-286">此外，如果在没有等待的线程且 <xref:System.Threading.EventWaitHandle> 已发出信号的情况下调用 <xref:System.Threading.EventWaitHandle.Set%2A>，则调用不起作用。</span><span class="sxs-lookup"><span data-stu-id="03071-286">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.EventWaitHandle> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="03071-287">对于包含 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> （包括 <xref:System.Threading.ManualResetEvent>）的 <xref:System.Threading.EventWaitHandle>，调用 <xref:System.Threading.EventWaitHandle.Set%2A> 方法会使等待句柄处于终止状态，直到调用其 <xref:System.Threading.EventWaitHandle.Reset%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="03071-287">For an <xref:System.Threading.EventWaitHandle> with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> (including <xref:System.Threading.ManualResetEvent>), calling the <xref:System.Threading.EventWaitHandle.Set%2A> method leaves the wait handle in a signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03071-288">下面的代码示例使用 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 方法重载，以允许主线程向阻止的线程发出信号，并等待线程完成任务。</span><span class="sxs-lookup"><span data-stu-id="03071-288">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="03071-289">该示例启动五个线程，并允许它们在使用 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 标志创建的 <xref:System.Threading.EventWaitHandle> 上阻塞，并在每次用户按 ENTER 键时释放一个线程。</span><span class="sxs-lookup"><span data-stu-id="03071-289">The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="03071-290">然后，该示例将另一线程排队，并使用使用 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 标志创建的 <xref:System.Threading.EventWaitHandle> 来释放它们。</span><span class="sxs-lookup"><span data-stu-id="03071-290">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="03071-291">之前已在此 <see cref="M:System.Threading.WaitHandle.Close" /> 上调用 <see cref="T:System.Threading.EventWaitHandle" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="03071-291">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-292">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-292">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.EventWaitHandleSecurity eventSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessControl (eventSecurity As EventWaitHandleSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::EventWaitHandleSecurity ^ eventSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.EventWaitHandleSecurity -&gt; unit" Usage="eventWaitHandle.SetAccessControl eventSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSecurity" Type="System.Security.AccessControl.EventWaitHandleSecurity" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="eventSecurity"><span data-ttu-id="03071-293">一个 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 对象，该对象表示应用到命名系统事件的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="03071-293">An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security to be applied to the named system event.</span></span></param>
        <summary><span data-ttu-id="03071-294">设置已命名的系统事件的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="03071-294">Sets the access control security for a named system event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-295">用户必须具有调用此方法的 <xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType> 权限，并且必须已使用 <xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType> 标志打开事件。</span><span class="sxs-lookup"><span data-stu-id="03071-295">The user must have <xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the event must have been opened with the <xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03071-296">下面的代码示例演示具有访问控制安全性的已命名系统事件的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="03071-296">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="03071-297">该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 方法重载来测试是否存在已命名的事件。</span><span class="sxs-lookup"><span data-stu-id="03071-297">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="03071-298">如果此事件不存在，则将使用初始所有权和访问控制安全性来创建该事件，拒绝当前用户使用该事件，但会授予读取和更改事件权限的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-298">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="03071-299">如果从两个命令窗口运行已编译的示例，第二个副本将在调用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>时引发访问冲突异常。</span><span class="sxs-lookup"><span data-stu-id="03071-299">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="03071-300">捕获到异常，该示例使用 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 方法重载来等待事件，该事件具有读取和更改权限所需的权限。</span><span class="sxs-lookup"><span data-stu-id="03071-300">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="03071-301">更改权限后，使用 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A> 方法，将以等待事件的权限打开事件并向其发出信号。</span><span class="sxs-lookup"><span data-stu-id="03071-301">After the permissions are changed, using the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A> method, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="03071-302">如果从第三个命令窗口运行已编译的示例，该示例将使用新的权限运行。</span><span class="sxs-lookup"><span data-stu-id="03071-302">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03071-303"><paramref name="eventSecurity" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="03071-303"><paramref name="eventSecurity" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-304">用户不具备 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />。</span><span class="sxs-lookup"><span data-stu-id="03071-304">The user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />.</span></span>  
  
<span data-ttu-id="03071-305">- 或 -</span><span class="sxs-lookup"><span data-stu-id="03071-305">-or-</span></span> 
<span data-ttu-id="03071-306">事件不是以 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" /> 打开的。</span><span class="sxs-lookup"><span data-stu-id="03071-306">The event was not opened with <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="03071-307">当前 <see cref="T:System.Threading.EventWaitHandle" /> 对象不表示已命名的系统事件。</span><span class="sxs-lookup"><span data-stu-id="03071-307">The current <see cref="T:System.Threading.EventWaitHandle" /> object does not represent a named system event.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="03071-308">之前已在此 <see cref="M:System.Threading.WaitHandle.Close" /> 上调用 <see cref="T:System.Threading.EventWaitHandle" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="03071-308">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="03071-309">同步基元概述</span><span class="sxs-lookup"><span data-stu-id="03071-309">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03071-310">打开指定名称为同步事件（如果已经存在)，并返回指示操作是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="03071-310">Opens a specified named synchronization event, if it already exists, and returns a value that indicates whether the operation succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.EventWaitHandle result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.EventWaitHandle&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As EventWaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::EventWaitHandle ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * EventWaitHandle -&gt; bool" Usage="System.Threading.EventWaitHandle.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.EventWaitHandle" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="03071-311">要打开的系统同步事件的名称。</span><span class="sxs-lookup"><span data-stu-id="03071-311">The name of the system synchronization event to open.</span></span></param>
        <param name="result"><span data-ttu-id="03071-312">当此方法返回时，如果调用成功，则包含表示命名同步事件的 <see cref="T:System.Threading.EventWaitHandle" /> 对象；如果调用失败，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="03071-312">When this method returns, contains a <see cref="T:System.Threading.EventWaitHandle" /> object that represents the named synchronization event if the call succeeded, or <see langword="null" /> if the call failed.</span></span> <span data-ttu-id="03071-313">将此参数视为未初始化。</span><span class="sxs-lookup"><span data-stu-id="03071-313">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="03071-314">打开指定的命名同步事件（如果已经存在），返回指示操作是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="03071-314">Opens the specified named synchronization event, if it already exists, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="03071-315">如果成功打开命名同步事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-315"><see langword="true" /> if the named synchronization event was opened successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-316">如果命名同步事件不存在，则此方法不会创建它。</span><span class="sxs-lookup"><span data-stu-id="03071-316">If the named synchronization event does not exist, this method does not create it.</span></span> <span data-ttu-id="03071-317">若要在不存在系统事件时创建系统事件，请使用具有 `name` 参数的 <xref:System.Threading.EventWaitHandle.%23ctor%2A> 构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="03071-317">To create the system event when it does not already exist, use one of the <xref:System.Threading.EventWaitHandle.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="03071-318">如果不确定是否存在已命名的同步事件，请使用此方法重载，而不是 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 方法重载，如果同步事件不存在，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="03071-318">If you are uncertain whether a named synchronization event exists, use this method overload instead of the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload, which throws an exception if the synchronization event does not exist.</span></span>  
  
 <span data-ttu-id="03071-319">此方法重载等效于调用 <xref:System.Threading.EventWaitHandle.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Threading.EventWaitHandle%40%29> 方法重载，并使用按位 "或" 运算来指定 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 和 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 权限。</span><span class="sxs-lookup"><span data-stu-id="03071-319">This method overload is equivalent to calling the <xref:System.Threading.EventWaitHandle.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Threading.EventWaitHandle%40%29> method overload and specifying <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="03071-320">指定 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 标志允许线程等待已命名的系统事件，并指定 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 标志允许线程调用 <xref:System.Threading.EventWaitHandle.Set%2A> 和 <xref:System.Threading.EventWaitHandle.Reset%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="03071-320">Specifying the <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the named system event, and specifying the <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.EventWaitHandle.Set%2A> and <xref:System.Threading.EventWaitHandle.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="03071-321">对此方法使用相同 `name` 值的多个调用不必返回相同的 <xref:System.Threading.EventWaitHandle> 对象，即使返回的对象表示相同的命名系统事件也是如此。</span><span class="sxs-lookup"><span data-stu-id="03071-321">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.EventWaitHandle> object, even though the objects that are returned represent the same named system event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="03071-322"><paramref name="name" /> 是一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="03071-322"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="03071-323">- 或 -</span><span class="sxs-lookup"><span data-stu-id="03071-323">-or-</span></span> 
 <span data-ttu-id="03071-324"><paramref name="name" /> 超过 260 个字符。</span><span class="sxs-lookup"><span data-stu-id="03071-324"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03071-325"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="03071-325"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="03071-326">出现 Win32 错误。</span><span class="sxs-lookup"><span data-stu-id="03071-326">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-327">命名事件存在，但用户不具有所需的安全访问权限。</span><span class="sxs-lookup"><span data-stu-id="03071-327">The named event exists, but the user does not have the desired security access.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="03071-328">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="03071-328">requires full trust for the immediate caller.</span></span> <span data-ttu-id="03071-329">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="03071-329">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights, out System.Threading.EventWaitHandle result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.EventWaitHandleRights rights, [out] class System.Threading.EventWaitHandle&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As EventWaitHandleRights, ByRef result As EventWaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::EventWaitHandleRights rights, [Runtime::InteropServices::Out] System::Threading::EventWaitHandle ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.EventWaitHandleRights * EventWaitHandle -&gt; bool" Usage="System.Threading.EventWaitHandle.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.EventWaitHandleRights" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.EventWaitHandle" RefType="out" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="03071-330">要打开的系统同步事件的名称。</span><span class="sxs-lookup"><span data-stu-id="03071-330">The name of the system synchronization event to open.</span></span></param>
        <param name="rights"><span data-ttu-id="03071-331">表示所需的安全访问权限的枚举值的按位组合。</span><span class="sxs-lookup"><span data-stu-id="03071-331">A bitwise combination of the enumeration values that represent the desired security access.</span></span></param>
        <param name="result"><span data-ttu-id="03071-332">当此方法返回时，如果调用成功，则包含表示命名同步事件的 <see cref="T:System.Threading.EventWaitHandle" /> 对象；如果调用失败，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="03071-332">When this method returns, contains a <see cref="T:System.Threading.EventWaitHandle" /> object that represents the named synchronization event if the call succeeded, or <see langword="null" /> if the call failed.</span></span> <span data-ttu-id="03071-333">将此参数视为未初始化。</span><span class="sxs-lookup"><span data-stu-id="03071-333">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="03071-334">使用所需的安全访问权限，打开指定的命名同步事件（如果已经存在），并返回指示操作是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="03071-334">Opens the specified named synchronization event, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="03071-335">如果成功打开命名同步事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03071-335"><see langword="true" /> if the named synchronization event was opened successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03071-336">如果命名同步事件不存在，则此方法不会创建它。</span><span class="sxs-lookup"><span data-stu-id="03071-336">If the named synchronization event does not exist, this method does not create it.</span></span> <span data-ttu-id="03071-337">若要在不存在系统事件时创建系统事件，请使用具有 `name` 参数的 <xref:System.Threading.EventWaitHandle.%23ctor%2A> 构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="03071-337">To create the system event when it does not already exist, use one of the <xref:System.Threading.EventWaitHandle.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="03071-338">如果不确定是否存在已命名的同步事件，请使用此方法重载，而不是 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 方法重载，如果同步事件不存在，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="03071-338">If you are uncertain whether a named synchronization event exists, use this method overload instead of the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload, which throws an exception if the synchronization event does not exist.</span></span>  
  
 <span data-ttu-id="03071-339">`rights` 参数必须包括 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 标志，以允许线程等待事件，并允许线程调用 <xref:System.Threading.EventWaitHandle.Set%2A> 和 <xref:System.Threading.EventWaitHandle.Reset%2A> 方法的 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 标志。</span><span class="sxs-lookup"><span data-stu-id="03071-339">The `rights` parameter must include the <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the event, and the <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.EventWaitHandle.Set%2A> and <xref:System.Threading.EventWaitHandle.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="03071-340">对此方法使用相同 `name` 值的多个调用不必返回相同的 <xref:System.Threading.EventWaitHandle> 对象，即使返回的对象表示相同的命名系统事件也是如此。</span><span class="sxs-lookup"><span data-stu-id="03071-340">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.EventWaitHandle> object, even though the objects that are returned represent the same named system event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="03071-341"><paramref name="name" /> 是一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="03071-341"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="03071-342">- 或 -</span><span class="sxs-lookup"><span data-stu-id="03071-342">-or-</span></span> 
 <span data-ttu-id="03071-343"><paramref name="name" /> 超过 260 个字符。</span><span class="sxs-lookup"><span data-stu-id="03071-343"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03071-344"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="03071-344"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="03071-345">出现 Win32 错误。</span><span class="sxs-lookup"><span data-stu-id="03071-345">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="03071-346">命名事件存在，但用户不具有所需的安全访问权限。</span><span class="sxs-lookup"><span data-stu-id="03071-346">The named event exists, but the user does not have the desired security access.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="03071-347">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="03071-347">requires full trust for the immediate caller.</span></span> <span data-ttu-id="03071-348">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="03071-348">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>
