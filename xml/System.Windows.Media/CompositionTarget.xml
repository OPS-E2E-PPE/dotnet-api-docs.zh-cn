<Type Name="CompositionTarget" FullName="System.Windows.Media.CompositionTarget">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ad0e1183a3c1abe730dabb2714795c07d641998" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77230012" /></Metadata><TypeSignature Language="C#" Value="public abstract class CompositionTarget : System.Windows.Threading.DispatcherObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CompositionTarget extends System.Windows.Threading.DispatcherObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.CompositionTarget" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CompositionTarget&#xA;Inherits DispatcherObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositionTarget abstract : System::Windows::Threading::DispatcherObject, IDisposable" />
  <TypeSignature Language="F#" Value="type CompositionTarget = class&#xA;    inherit DispatcherObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1e775-101">表示您的应用程序的显示图面。</span><span class="sxs-lookup"><span data-stu-id="1e775-101">Represents the display surface of your application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e775-102"><xref:System.Windows.Media.CompositionTarget> 是一个类，表示在其上绘制应用程序的显示图面。</span><span class="sxs-lookup"><span data-stu-id="1e775-102"><xref:System.Windows.Media.CompositionTarget> is a class that represents the display surface on which your application is being drawn.</span></span> <span data-ttu-id="1e775-103">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 动画引擎提供了许多用于创建基于帧的动画的功能。</span><span class="sxs-lookup"><span data-stu-id="1e775-103">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] animation engine provides many features for creating frame-based animation.</span></span> <span data-ttu-id="1e775-104">但是，在某些应用程序方案中，你需要对每个帧的呈现进行控制。</span><span class="sxs-lookup"><span data-stu-id="1e775-104">However, there are application scenarios in which you need control over rendering on a per frame basis.</span></span> <span data-ttu-id="1e775-105"><xref:System.Windows.Media.CompositionTarget> 对象提供基于每帧回调创建自定义动画的功能。</span><span class="sxs-lookup"><span data-stu-id="1e775-105">The <xref:System.Windows.Media.CompositionTarget> object provides the ability to create custom animations based on a per-frame callback.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1e775-106">有关使用 <xref:System.Windows.Media.CompositionTarget>的完整代码示例，请参阅[使用 CompositionTarget 示例](https://go.microsoft.com/fwlink/?LinkID=160045)。</span><span class="sxs-lookup"><span data-stu-id="1e775-106">For a complete code sample using <xref:System.Windows.Media.CompositionTarget>, see [Using the CompositionTarget Sample](https://go.microsoft.com/fwlink/?LinkID=160045).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.CompositionTarget.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="compositionTarget.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1e775-107">释放 <see cref="T:System.Windows.Media.CompositionTarget" />。</span><span class="sxs-lookup"><span data-stu-id="1e775-107">Disposes <see cref="T:System.Windows.Media.CompositionTarget" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rendering">
      <MemberSignature Language="C#" Value="public static event EventHandler Rendering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Rendering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.CompositionTarget.Rendering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event Rendering As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ Rendering;" />
      <MemberSignature Language="F#" Value="member this.Rendering : EventHandler " Usage="member this.Rendering : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e775-108">恰好在呈现组合树中的对象之前发生。</span><span class="sxs-lookup"><span data-stu-id="1e775-108">Occurs just before the objects in the composition tree are rendered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e775-109">动画和布局应用于组合树后，<xref:System.Windows.Media.CompositionTarget.Rendering> 事件将路由到指定的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1e775-109">The <xref:System.Windows.Media.CompositionTarget.Rendering> event is routed to the specified event handler after animation and layout have been applied to the composition tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e775-110"><xref:System.Windows.Media.CompositionTarget.Rendering> 事件在 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 渲染过程中引发。</span><span class="sxs-lookup"><span data-stu-id="1e775-110">The <xref:System.Windows.Media.CompositionTarget.Rendering> event is raised during the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] rendering process.</span></span> <span data-ttu-id="1e775-111">下面的示例演示如何在 <xref:System.Windows.Media.CompositionTarget>上向静态 <xref:System.Windows.Media.CompositionTarget.Rendering> 方法注册 <xref:System.EventHandler> 委托。</span><span class="sxs-lookup"><span data-stu-id="1e775-111">The following example shows how you register an <xref:System.EventHandler> delegate to the static <xref:System.Windows.Media.CompositionTarget.Rendering> method on <xref:System.Windows.Media.CompositionTarget>.</span></span>  
  
 [!code-csharp[CompositionTargetSample#CompositionTarget1](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetSample/CSharp/Window1.xaml.cs#compositiontarget1)]
 [!code-vb[CompositionTargetSample#CompositionTarget1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetSample/visualbasic/window1.xaml.vb#compositiontarget1)]  
  
 <span data-ttu-id="1e775-112">您可以使用渲染事件处理程序来创建自定义绘图内容。</span><span class="sxs-lookup"><span data-stu-id="1e775-112">You can use your rendering event handler to create custom drawing content.</span></span> <span data-ttu-id="1e775-113">每帧调用一次此事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1e775-113">This event handler gets called once per frame.</span></span> <span data-ttu-id="1e775-114">每次 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 将可视化树中的持久呈现数据封送到组合树时，将调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1e775-114">Each time that [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] marshals the persisted rendering data in the visual tree across to the composition tree, your event handler is called.</span></span> <span data-ttu-id="1e775-115">此外，如果更改可视化树会强制更新组合树，则还会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1e775-115">In addition, if changes to the visual tree force updates to the composition tree, your event handler is also called.</span></span> <span data-ttu-id="1e775-116">请注意，计算布局后，将调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1e775-116">Note that your event handler is called after layout has been computed.</span></span> <span data-ttu-id="1e775-117">不过，您可以在事件处理程序中修改布局，这意味着在呈现之前将再次计算布局。</span><span class="sxs-lookup"><span data-stu-id="1e775-117">However, you can modify layout in your event handler, which means that layout will be computed once more before rendering.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootVisual">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Media.Visual RootVisual { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Visual RootVisual" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.CompositionTarget.RootVisual" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RootVisual As Visual" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Media::Visual ^ RootVisual { System::Windows::Media::Visual ^ get(); void set(System::Windows::Media::Visual ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RootVisual : System.Windows.Media.Visual with get, set" Usage="System.Windows.Media.CompositionTarget.RootVisual" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e775-118">获取或设置 <see cref="T:System.Windows.Media.CompositionTarget" /> 的根 Visual。</span><span class="sxs-lookup"><span data-stu-id="1e775-118">Gets or sets the root visual of the <see cref="T:System.Windows.Media.CompositionTarget" />.</span></span></summary>
        <value><span data-ttu-id="1e775-119"><see cref="T:System.Windows.Media.CompositionTarget" /> 的根 Visual。</span><span class="sxs-lookup"><span data-stu-id="1e775-119">The root visual of the <see cref="T:System.Windows.Media.CompositionTarget" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformFromDevice">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.Matrix TransformFromDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix TransformFromDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.CompositionTarget.TransformFromDevice" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TransformFromDevice As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Windows::Media::Matrix TransformFromDevice { System::Windows::Media::Matrix get(); };" />
      <MemberSignature Language="F#" Value="member this.TransformFromDevice : System.Windows.Media.Matrix" Usage="System.Windows.Media.CompositionTarget.TransformFromDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e775-120">获取一个矩阵，可用它将坐标从呈现目标设备转换到该目标中。</span><span class="sxs-lookup"><span data-stu-id="1e775-120">Gets a matrix that can be used to transform coordinates from the rendering destination device to this target.</span></span></summary>
        <value><span data-ttu-id="1e775-121">转换矩阵。</span><span class="sxs-lookup"><span data-stu-id="1e775-121">The transformation matrix.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformToDevice">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.Matrix TransformToDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix TransformToDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.CompositionTarget.TransformToDevice" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TransformToDevice As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Windows::Media::Matrix TransformToDevice { System::Windows::Media::Matrix get(); };" />
      <MemberSignature Language="F#" Value="member this.TransformToDevice : System.Windows.Media.Matrix" Usage="System.Windows.Media.CompositionTarget.TransformToDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e775-122">获取一个矩阵，可用它将坐标从该目标转换到呈现目标设备中。</span><span class="sxs-lookup"><span data-stu-id="1e775-122">Gets a matrix that can be used to transform coordinates from this target to the rendering destination device.</span></span></summary>
        <value><span data-ttu-id="1e775-123">转换矩阵。</span><span class="sxs-lookup"><span data-stu-id="1e775-123">The transformation matrix.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
