<Type Name="ZipFile" FullName="System.IO.Compression.ZipFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="269ebd50b3f1373f5fd0e5fc7e9a1a96a7986dec" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75133279" /></Metadata><TypeSignature Language="C#" Value="public static class ZipFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ZipFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipFile" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipFile" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipFile abstract sealed" />
  <TypeSignature Language="F#" Value="type ZipFile = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供创建、解压缩和打开 zip 存档的静态方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  若要使用 <xref:System.IO.Compression.ZipFile> 类，必须在项目中添加对 `System.IO.Compression.FileSystem` 程序集的引用;否则，在尝试编译时，会收到以下错误消息：**名称 "ZipFile" 在当前上下文中不存在**。 有关如何在 Visual Studio 中添加对项目的引用的详细信息，请参阅[如何：使用引用管理器添加或删除引用](https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb)。  
  
 操作 zip 存档及其文件的方法分布于三个类中： <xref:System.IO.Compression.ZipFile>、<xref:System.IO.Compression.ZipArchive> 和 <xref:System.IO.Compression.ZipArchiveEntry>。  
  
|自...|使用...|  
|---------|----------|  
|从目录创建 zip 存档|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=nameWithType>|  
|将 zip 存档的内容提取到目录|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=nameWithType>|  
|将新文件添加到现有 zip 存档|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=nameWithType>|  
|在 zip 存档中检索文件|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=nameWithType>|  
|检索 zip 存档中的所有文件|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=nameWithType>|  
|打开 zip 存档中包含的单个文件的流|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=nameWithType>|  
|删除 zip 存档中的文件|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=nameWithType>|  
  
 不能在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用中使用 <xref:System.IO.Compression.ZipFile> 或 <xref:System.IO.Compression.ZipFileExtensions> 类。 在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用程序中，应使用以下类来处理压缩的文件。  
  
-   <xref:System.IO.Compression.ZipArchive>  
  
-   <xref:System.IO.Compression.ZipArchiveEntry>  
  
-   <xref:System.IO.Compression.DeflateStream>  
  
-   <xref:System.IO.Compression.GZipStream>  
  
   
  
## Examples  
 此示例演示如何使用 <xref:System.IO.Compression.ZipFile> 类创建和提取 zip 存档。 它将文件夹的内容压缩为 zip 存档，然后将该内容提取到新文件夹中。  
  
> [!TIP]
>  若要使用 <xref:System.IO.Compression.ZipFile> 类，必须在项目中引用 `System.IO.Compression.FileSystem` 程序集。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb">How to: Add or Remove References By Using the Reference Manager</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateFromDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建 zip 存档，该存档包含指定目录的文件和目录。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要存档的目录的路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <param name="destinationArchiveFileName">要生成的存档路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <summary>创建 zip 存档，该存档包含指定目录的文件和目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文件系统中的目录结构将保留在存档中。 如果目录为空，则将创建一个空的存档。 此方法重载不包括存档中的基目录，并且不允许指定压缩级别。 如果要包括基目录或指定压缩级别，请调用 <xref:System.IO.Compression.ZipFile.CreateFromDirectory%28System.String%2CSystem.String%2CSystem.IO.Compression.CompressionLevel%2CSystem.Boolean%29> 方法重载。  
  
 如果存档已存在，则会引发 <xref:System.IO.IOException> 异常。 如果存档中已经存在具有指定名称的条目，则将使用相同的名称创建另一个条目。  
  
 如果无法将目录中的某个文件添加到存档，则存档将不完整并且无效，方法会引发 <xref:System.IO.IOException> 异常。  
  
   
  
## Examples  
 此示例演示如何使用 <xref:System.IO.Compression.ZipFile> 类创建和提取 zip 存档。 它将文件夹的内容压缩为 zip 存档，然后将该内容提取到新文件夹中。 若要使用 <xref:System.IO.Compression.ZipFile> 类，必须在项目中引用 `System.IO.Compression.FileSystem` 程序集。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 是 <see cref="F:System.String.Empty" />，仅包含空格，或包含至少一个无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 内，指定的路径、文件名或者两者都超出了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> 无效或不存在（例如，在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> 已存在。  
  
- 或 - 
未能打开指定目录中的文件。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> 指定目录。  
  
- 或 - 
调用方不具有访问在 <paramref name="sourceDirectoryName" /> 中指定的目录或在 <paramref name="destinationArchiveFileName" /> 中指定的文件的所需权限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 包含的格式无效。  
  
- 或 - 
zip 存档不支持写入。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要存档的目录的路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <param name="destinationArchiveFileName">要生成的存档路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <param name="compressionLevel">指示创建项时是否强调速度或压缩有效性的枚举值之一。</param>
        <param name="includeBaseDirectory">包括从在存档的根的 <see langword="true" /> 的目录名称，则为 <paramref name="sourceDirectoryName" />；仅包含目录中的内容，则为 <see langword="false" /> 。</param>
        <summary>创建 zip 存档，该存档包括指定目录的文件和目录，使用指定压缩级别，以及可以选择包含基目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文件系统中的目录结构将保留在存档中。 如果目录为空，则将创建一个空的存档。 使用此方法重载可指定压缩级别，并指定是否在存档中包括基目录。  
  
 如果存档已存在，则会引发 <xref:System.IO.IOException> 异常。 如果存档中已经存在具有指定名称的条目，则将使用相同的名称创建另一个条目。  
  
 如果无法将目录中的某个文件添加到存档，则存档将不完整并且无效，方法会引发 <xref:System.IO.IOException> 异常。  
  
   
  
## Examples  
 此示例演示如何使用 <xref:System.IO.Compression.ZipFile> 类创建和提取 zip 存档。 它将文件夹的内容压缩为 zip 存档，然后将该内容提取到新文件夹中。 压缩存档时，将包括基目录，并设置压缩级别以强调操作的速度，从而提高效率。 若要使用 <xref:System.IO.Compression.ZipFile> 类，必须在项目中引用 `System.IO.Compression.FileSystem` 程序集。  
  
 [!code-csharp[System.IO.Compression.ZipFile#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipFile#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 是 <see cref="F:System.String.Empty" />，仅包含空格，或包含至少一个无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 内，指定的路径、文件名或者两者都超出了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> 无效或不存在（例如，在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> 已存在。  
  
- 或 - 
未能打开指定目录中的文件。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> 指定目录。  
  
- 或 - 
调用方不具有访问在 <paramref name="sourceDirectoryName" /> 中指定的目录或在 <paramref name="destinationArchiveFileName" /> 中指定的文件的所需权限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 包含的格式无效。  
  
- 或 - 
zip 存档不支持写入。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要存档的目录的路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <param name="destinationArchiveFileName">要生成的存档路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <param name="compressionLevel">指示创建项时是否强调速度或压缩有效性的枚举值之一。</param>
        <param name="includeBaseDirectory">包括从在存档的根的 <see langword="true" /> 的目录名称，则为 <paramref name="sourceDirectoryName" />；仅包含目录中的内容，则为 <see langword="false" /> 。</param>
        <param name="entryNameEncoding">在存档中读取或写入项名时使用的编码。 仅当需要针对具有不支持项名的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定一个值。</param>
        <summary>创建 zip 存档，该存档包括文件和指定目录的目录，使用指定压缩级别和条目名称的字符编码，以及可以选择包含基目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文件系统中的目录结构将保留在存档中。 如果目录为空，则将创建一个空的存档。 使用此方法重载可指定压缩级别和字符编码，以及是否在存档中包括基目录。  
  
 如果存档已存在，则会引发 <xref:System.IO.IOException> 异常。 如果存档中已经存在具有指定名称的条目，则将使用相同的名称创建另一个条目。  
  
 如果无法将目录中的某个文件添加到存档，则存档将不完整并且无效，方法会引发 <xref:System.IO.IOException> 异常。  
  
 如果 `entryNameEncoding` 设置为 `null`以外的值，则将使用指定的编码对条目名称进行编码。 如果指定的编码为 UTF-8，则为每个条目设置语言编码标志（本地文件头的通用位标志）。  
  
 如果 `entryNameEncoding` 设置为 `null`，则根据以下规则对条目名称进行编码：  
  
-   对于包含 ASCII 范围外的字符的条目名称，设置语言编码标志，并使用 UTF-8 对条目名称进行编码。  
  
-   对于仅包含 ASCII 字符的条目名称，会设置语言编码标志，当前系统默认代码页用于对条目名称进行编码。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 是 <see cref="F:System.String.Empty" />，仅包含空格，或包含至少一个无效字符。  
  
- 或 - 
 <paramref name="entryNameEncoding" /> 设置为不同于 UTF-8 的 Unicode 编码。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 内，指定的路径、文件名或者两者都超出了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> 无效或不存在（例如，在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> 已存在。  
  
- 或 - 
未能打开指定目录中的文件。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> 指定目录。  
  
- 或 - 
调用方不具有访问在 <paramref name="sourceDirectoryName" /> 中指定的目录或在 <paramref name="destinationArchiveFileName" /> 中指定的文件的所需权限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 包含的格式无效。  
  
- 或 - 
zip 存档不支持写入。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExtractToDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定 zip 存档中的所有文件都解压缩到文件系统的一个目录下。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">要解压缩存档的路径。</param>
        <param name="destinationDirectoryName">放置解压缩文件的目录的路径，指定为相对或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <summary>将指定 zip 存档中的所有文件都解压缩到文件系统的一个目录下。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将创建指定的目录和所有子目录。 目标目录不能已存在。 提取之前，将引发与验证 `destinationDirectoryName` 或 `sourceArchiveFileName` 参数中的路径相关的异常。 否则，如果在提取过程中发生错误，存档将保留部分提取。 每个提取的文件都具有与指定的目录的相对路径 `destinationDirectoryName`，因为其源条目必须是存档的根。  
  
   
  
## Examples  
 此示例演示如何使用 <xref:System.IO.Compression.ZipFile> 类创建和提取 zip 存档。 它将文件夹的内容压缩为 zip 存档，并将该内容提取到新文件夹中。 若要使用 <xref:System.IO.Compression.ZipFile> 类，必须在项目中引用 `System.IO.Compression.FileSystem` 程序集。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 是 <see cref="F:System.String.Empty" />，仅包含空格，或包含至少一个无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 中的指定路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> 指定的目录已存在。  
  
- 或 - 
存档中的一个条目名是 <see cref="F:System.String.Empty" />，仅包含空格，或者包含至少一个无效字符。  
  
- 或 - 
提取存档条目将生成在 <paramref name="destinationDirectoryName" /> 指定的目录之外的一个文件。 （例如，如果条目名中包含父目录访问器，则可能发生这种情况。） 
- 或 - 
提取存档项，其名称与已从相同存档提取的项相同。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方不具有访问存档或目标目录的所需权限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 包含的格式无效。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="sourceArchiveFileName" />。</exception>
        <exception cref="T:System.IO.InvalidDataException">由 <paramref name="sourceArchiveFileName" /> 指定的存档不是有效 zip 存档。  
  
- 或 - 
存档项未找到或已损坏。  
  
- 或 - 
使用了一种不支持的压缩方法压缩存档条目。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">文件系统上指向要解压缩的存档的路径。</param>
        <param name="destinationDirectoryName">文件系统上指向目标目录的路径。 指定的目录必须不存在，但包含它的目录必须存在。</param>
        <param name="overwriteFiles">要覆盖文件，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>将指定存档中的所有文件都解压缩到文件系统的某目录下。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 指定的目录不能存在。 方法创建指定的目录和所有子目录。
 
 如果提取存档时出现错误，存档将保持部分提取。
  
 将提取每个条目，以使提取的文件与 `destinationDirectoryName` 的相对路径相同，因为该条目必须是存档。
 
 路径可以指定相对或绝对路径信息。 相对路径是指相对于当前工作目录的路径。
 
 如果要存档的文件具有无效的上次修改时间，则将使用 Zip 时间戳格式的第一个日期和时间（在1980年1月1日午夜）。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" />或 <paramref name="destinationDirectoryName" /> 是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArchiveFileName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> 或 <paramref name="destinationDirectoryName" /> 指定的路径和/或文件名超出了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceArchiveFileName" /> 或 <paramref name="destinationDirectoryName" /> 指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> 指定的目录已存在。

- 或 -

发生了 I/O 错误。

- 或 -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> 的名称的长度为零，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。

- 或 -

提取 <see cref="T:System.IO.Compression.ZipArchiveEntry" /> 将导致文件目标位于目标目录之外（例如，由于父目录访问器）。

- 或 -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> 与一个已从同一存档中解压缩的项同名。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceArchiveFileName" /> 或 <paramref name="destinationDirectoryName" /> 的格式无效。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="sourceArchiveFileName" />。</exception>
        <exception cref="T:System.IO.InvalidDataException">由 <paramref name="sourceArchiveFileName" /> 指定的存档不是有效 <see cref="T:System.IO.Compression.ZipArchive" />。

- 或 -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> 未找到或已损坏。

- 或 -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> 已经通过使用一种不被支持的压缩方法压缩。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">要解压缩存档的路径。</param>
        <param name="destinationDirectoryName">放置解压缩文件的目录的路径，指定为相对或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <param name="entryNameEncoding">在存档中读取或写入项名时使用的编码。 仅当需要针对具有不支持项名的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定一个值。</param>
        <summary>将指定 zip 存档中的所有文件解压缩到文件系统的一目录下，并使用项名称的指定字符编码。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将创建指定的目录和所有子目录。 目标目录不能已存在。 提取之前，将引发与验证 `destinationDirectoryName` 或 `sourceArchiveFileName` 参数中的路径相关的异常。 否则，如果在提取过程中发生错误，存档将保留部分提取。 每个提取的文件都具有与指定的目录的相对路径 `destinationDirectoryName`，因为其源条目必须是存档的根。  
  
 如果 `entryNameEncoding` 设置为 `null`以外的值，则根据以下规则对条目名称进行解码：  
  
-   对于未设置语言编码标志（本地文件头的通用位标志）的入口名称，使用指定的编码对条目名称进行解码。  
  
-   对于设置了语言编码标志的条目，使用 UTF-8 对条目名称进行解码。  
  
 如果 `entryNameEncoding` 设置为 `null`，则根据以下规则对条目名称进行解码：  
  
-   对于未设置语言编码标志（本地文件头的通用位标志）的条目，将使用当前系统默认代码页对条目名称进行解码。  
  
-   对于设置了语言编码标志的条目，使用 UTF-8 对条目名称进行解码。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 是 <see cref="F:System.String.Empty" />，仅包含空格，或包含至少一个无效字符。  
  
- 或 - 
 <paramref name="entryNameEncoding" /> 设置为不同于 UTF-8 的 Unicode 编码。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 中的指定路径超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> 指定的目录已存在。  
  
- 或 - 
存档中的一个条目名是 <see cref="F:System.String.Empty" />，仅包含空格，或者包含至少一个无效字符。  
  
- 或 - 
提取存档条目将生成在 <paramref name="destinationDirectoryName" /> 指定的目录之外的一个文件。 （例如，如果条目名中包含父目录访问器，则可能发生这种情况。） 
- 或 - 
提取存档项，其名称与已从相同存档提取的项相同。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方不具有访问存档或目标目录的所需权限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 包含的格式无效。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="sourceArchiveFileName" />。</exception>
        <exception cref="T:System.IO.InvalidDataException">由 <paramref name="sourceArchiveFileName" /> 指定的存档不是有效 zip 存档。  
  
- 或 - 
存档项未找到或已损坏。  
  
- 或 - 
使用了一种不支持的压缩方法压缩存档条目。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">文件系统上指向要解压缩的存档的路径。</param>
        <param name="destinationDirectoryName">文件系统上指向目标目录的路径。 指定的目录必须不存在，但包含它的目录必须存在。</param>
        <param name="entryNameEncoding">在此 <see cref="T:System.IO.Compression.ZipArchive" /> 中读取项名时使用的编码。</param>
        <param name="overwriteFiles">要覆盖文件，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>将指定存档中的所有文件都解压缩到文件系统的某目录下。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 指定的目录不能存在。 此方法将创建指定的目录和所有子目录。

 如果提取存档时出现错误，存档将保持部分提取。

 将提取每个条目，以使提取的文件与 `destinationDirectoryName` 的相对路径相同，因为该条目必须是存档。

 路径可以指定相对或绝对路径信息。 相对路径是指相对于当前工作目录的路径。

 如果要存档的文件具有无效的上次修改时间，则将使用 Zip 时间戳格式的第一个日期和时间（在1980年1月1日午夜）。
 
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" />或 <paramref name="destinationDirectoryName" /> 是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。
 
- 或 - 
 <paramref name="entryNameEncoding" /> 设置为不同于 UTF-8 的 Unicode 编码。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArchiveFileName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> 或 <paramref name="destinationDirectoryName" /> 指定的路径和/或文件名超出了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceArchiveFileName" /> 或 <paramref name="destinationDirectoryName" /> 指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> 指定的目录已存在。

- 或 -

发生了 I/O 错误。

- 或 -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> 的名称的长度为零，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。

- 或 -

提取 <see cref="T:System.IO.Compression.ZipArchiveEntry" /> 将导致文件目标位于目标目录之外（例如，由于父目录访问器）。

- 或 -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> 与一个已从同一存档中解压缩的项同名。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceArchiveFileName" /> 或 <paramref name="destinationDirectoryName" /> 的格式无效。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="sourceArchiveFileName" />。</exception>
        <exception cref="T:System.IO.InvalidDataException">由 <paramref name="sourceArchiveFileName" /> 指定的存档不是有效 <see cref="T:System.IO.Compression.ZipArchive" />。

- 或 -

存档项未找到或已损坏。

- 或 -

存档项已通过使用一种不受支持的压缩方法压缩。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以指定的模式打开指定路径上的 zip 存档。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">要打开的存档的路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <param name="mode">指定允许对打开的存档中的项进行的操作的枚举值之一。</param>
        <summary>以指定的模式打开指定路径上的 zip 存档。</summary>
        <returns>打开的 zip 存档。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Read>时，会以文件模式值的形式从 <xref:System.IO.FileMode> 枚举中 <xref:System.IO.FileMode.Open> 打开存档。 如果存档不存在，则会引发 <xref:System.IO.FileNotFoundException> 异常。 将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Read> 等效于调用 <xref:System.IO.Compression.ZipFile.OpenRead%2A> 方法。  
  
 将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Create>时，会以 <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> 文件模式值打开存档。 如果存档已存在，则会引发 <xref:System.IO.IOException>。  
  
 将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Update>时，会以 <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> 文件模式值打开存档。 如果存档存在，则将其打开。 可以修改现有条目并创建新条目。 如果存档不存在，则创建新的存档;但是，在 <xref:System.IO.Compression.ZipArchiveMode.Update> 模式下创建 zip 存档并不像在 <xref:System.IO.Compression.ZipArchiveMode.Create> 模式下创建它那样高效。  
  
   
  
## Examples  
 下面的示例演示如何在更新模式下打开 zip 存档并将条目添加到存档。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program3.cs#3)]
 [!code-vb[System.IO.Compression.ZipArchive#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> 为 <see cref="F:System.String.Empty" />，仅包含空格，或者包含至少一个无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="archiveFileName" /> 内，指定的路径、文件名或者两者都超出了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> 无效或不存在（例如，在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException">未能打开 <paramref name="archiveFileName" />。  
  
- 或 - 
 <paramref name="mode" /> 设置为 <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />，但在 <paramref name="archiveFileName" /> 中指定的文件已存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> 指定目录。  
  
- 或 - 
调用方没有访问在 <paramref name="archiveFileName" /> 中指定的文件的所需权限。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 指定了一个无效值。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> 设置为 <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />，但在 <paramref name="archiveFileName" /> 中指定的文件未找到。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> 包含无效的格式。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> 无法解释为 zip 存档文件。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但项已丢失或已损坏，因此无法读取。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但项太大，无法装入内存。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode * System.Text.Encoding -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">要打开的存档的路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <param name="mode">指定允许对打开的存档中的项进行的操作的枚举值之一。</param>
        <param name="entryNameEncoding">在存档中读取或写入项名时使用的编码。 仅当需要针对具有不支持项名的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定一个值。</param>
        <summary>在指定模式下，在指定路径中，使用项名称的指定字符编码打开 zip 存档。</summary>
        <returns>打开的 zip 存档。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Read>时，会以 <xref:System.IO.FileMode.Open?displayProperty=nameWithType> 文件模式值打开存档。 如果存档不存在，则会引发 <xref:System.IO.FileNotFoundException> 异常。 将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Read> 等效于调用 <xref:System.IO.Compression.ZipFile.OpenRead%2A> 方法。  
  
 将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Create>时，会以 <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> 文件模式值打开存档。 如果存档已存在，则会引发 <xref:System.IO.IOException>。  
  
 将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Update>时，会以 <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> 文件模式值打开存档。 如果存档存在，则将其打开。 可以修改现有条目并创建新条目。 如果存档不存在，则创建新的存档;但是，在 <xref:System.IO.Compression.ZipArchiveMode.Update> 模式下创建 zip 存档并不像在 <xref:System.IO.Compression.ZipArchiveMode.Create> 模式下创建它那样高效。  
  
 打开要读取的 zip 存档文件并将 `entryNameEncoding` 设置为 `null`时，将根据以下规则对条目名称进行解码：  
  
-   如果未设置本地文件头的语言编码标志（位于本地文件头的通用位标志），则使用当前系统默认代码页对条目名称进行解码。  
  
-   如果设置了语言编码标志，则使用 UTF-8 对条目名称进行解码。  
  
 打开 zip 存档文件进行读取，并将 `entryNameEncoding` 设置为 `null`以外的值时，将根据以下规则对条目名称进行解码：  
  
-   如果未设置语言编码标志，则使用指定的 `entryNameEncoding` 对项名称进行解码。  
  
-   如果设置了语言编码标志，则使用 UTF-8 对条目名称进行解码。  
  
 写入存档文件并将 `entryNameEncoding` 设置为 `null`时，将根据以下规则对条目名称进行编码：  
  
-   对于包含 ASCII 范围外的字符的条目名称，设置语言编码标志，并使用 UTF-8 对条目名称进行编码。  
  
-   对于仅包含 ASCII 字符的条目名称，未设置语言编码标志，并且通过使用当前系统默认代码页对条目名称进行编码。  
  
 当你写入存档文件并且 `entryNameEncoding` 设置为 `null`以外的值时，将使用指定的 `entryNameEncoding` 将输入名称编码为个字节。 仅当指定的编码为 UTF-8 编码时，才设置语言编码标志（本地文件头的通用位标志）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> 为 <see cref="F:System.String.Empty" />，仅包含空格，或者包含至少一个无效字符。  
  
- 或 - 
 <paramref name="entryNameEncoding" /> 设置为不同于 UTF-8 的 Unicode 编码。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="archiveFileName" /> 内，指定的路径、文件名或者两者都超出了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> 无效或不存在（例如，在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException">未能打开 <paramref name="archiveFileName" />。  
  
- 或 - 
 <paramref name="mode" /> 设置为 <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />，但在 <paramref name="archiveFileName" /> 中指定的文件已存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> 指定目录。  
  
- 或 - 
调用方没有访问在 <paramref name="archiveFileName" /> 中指定的文件的所需权限。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 指定了一个无效值。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> 设置为 <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />，但在 <paramref name="archiveFileName" /> 中指定的文件未找到。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> 包含无效的格式。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> 无法解释为 zip 存档文件。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但项已丢失或已损坏，因此无法读取。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但项太大，无法装入内存。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive OpenRead (string archiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive OpenRead(string archiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenRead (archiveFileName As String) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ OpenRead(System::String ^ archiveFileName);" />
      <MemberSignature Language="F#" Value="static member OpenRead : string -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.OpenRead archiveFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">要打开的存档的路径，指定为相对路径或绝对路径。 相对路径是指相对于当前工作目录的路径。</param>
        <summary>打开在指定路径用于读取的 zip 存档。</summary>
        <returns>打开的 zip 存档。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法等效于调用 <xref:System.IO.Compression.ZipFile.Open%2A> 方法，并将 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Read>。 存档以 "文件模式" 值 <xref:System.IO.FileMode.Open?displayProperty=nameWithType> 打开。 如果存档不存在，则会引发 <xref:System.IO.FileNotFoundException> 异常。  
  
   
  
## Examples  
 下面的示例演示如何打开 zip 存档以进行读取。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> 为 <see cref="F:System.String.Empty" />，仅包含空格，或者包含至少一个无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="archiveFileName" /> 内，指定的路径、文件名或者两者都超出了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> 无效或不存在（例如，在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.IOException">未能打开 <paramref name="archiveFileName" />。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> 指定目录。  
  
- 或 - 
调用方没有访问在 <paramref name="archiveFileName" /> 中指定的文件的所需权限。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="archiveFileName" /> 中指定的文件。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> 包含无效的格式。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> 无法解释为 zip 存档文件。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
