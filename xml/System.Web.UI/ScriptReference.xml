<Type Name="ScriptReference" FullName="System.Web.UI.ScriptReference">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2ca159e5a341c1b346d2197e61bb430712b170c5" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78758945" /></Metadata><TypeSignature Language="C#" Value="public class ScriptReference : System.Web.UI.ScriptReferenceBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ScriptReference extends System.Web.UI.ScriptReferenceBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptReference" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptReference&#xA;Inherits ScriptReferenceBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptReference : System::Web::UI::ScriptReferenceBase" />
  <TypeSignature Language="F#" Value="type ScriptReference = class&#xA;    inherit ScriptReferenceBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.ScriptReferenceBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Path")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>注册 ECMAScript (JavaScript) 文件，以便在 ASP.NET 网页上使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过 <xref:System.Web.UI.ScriptReference> 对象注册 JavaScript 文件，将该文件包含在 ASP.NET 网页上。 你可以在网站上注册一个作为 .js 文件（静态脚本文件）的脚本文件。 你还可以将嵌入的脚本文件注册为程序集中的资源。 注册脚本文件后，可以在网页上的客户端脚本中使用其功能。  
  
 若要注册静态脚本文件，请将 <xref:System.Web.UI.ScriptReference> 对象的 <xref:System.Web.UI.ScriptReferenceBase.Path%2A> 属性设置为该文件的相对位置。  
  
 若要注册嵌入为程序集中的某个资源的脚本文件，请将 <xref:System.Web.UI.ScriptReference.Assembly%2A> 属性设置为包含该文件的程序集的名称。 然后，将 <xref:System.Web.UI.ScriptReference.Name%2A> 属性设置为嵌入到程序集中的 .js 文件的名称。 在这种情况下，必须嵌入脚本文件，而不是链接。  
  
 设置 <xref:System.Web.UI.ScriptReferenceBase.ScriptMode%2A> 属性，以指示是使用脚本的调试版本还是发布版本。  
  
 <xref:System.Web.UI.ScriptMode.Auto> 值将产生不同的结果，具体取决于它是引用独立脚本文件还是引用嵌入为程序集中的资源的脚本文件。 独立脚本文件由 <xref:System.Web.UI.ScriptReferenceBase.Path%2A> 属性定义。 必须通过 <xref:System.Web.UI.ScriptReference.Name%2A> 和 <xref:System.Web.UI.ScriptReference.Assembly%2A> 属性访问程序集引用。 <xref:System.Web.UI.ScriptMode.Auto> 值的结果如下所示：  
  
-   当应用于指定 <xref:System.Web.UI.ScriptReferenceBase.Path%2A> 属性的独立脚本文件时，<xref:System.Web.UI.ScriptMode.Auto> 值等效于 <xref:System.Web.UI.ScriptMode.Release>。  
  
-   当应用于程序集中的脚本引用时，<xref:System.Web.UI.ScriptMode.Auto> 等效于 <xref:System.Web.UI.ScriptMode.Inherit>。 仅指定 <xref:System.Web.UI.ScriptReference.Name%2A> 时，它用于引用脚本。 当同时指定 <xref:System.Web.UI.ScriptReference.Name%2A> 和 <xref:System.Web.UI.ScriptReferenceBase.Path%2A> 属性时，将使用 <xref:System.Web.UI.ScriptReferenceBase.Path%2A> 属性，而不是 <xref:System.Web.UI.ScriptReference.Name%2A>，但 <xref:System.Web.UI.ScriptMode.Auto> 值仍等效于 <xref:System.Web.UI.ScriptMode.Inherit>。  
  
   
  
## Examples  
 下面的示例演示如何引用嵌入到控件程序集中的自定义控件和 JavaScript 文件。 该程序集假定在网站的 Bin 文件夹中。 自定义控件将动画处理 <xref:System.Web.UI.UpdatePanel> 控件。 JavaScript 文件编译为名为 SampleControl 的嵌入资源。 使用 "<xref:System.Web.UI.ScriptReference.Assembly%2A>" 和 "<xref:System.Web.UI.ScriptReference.Name%2A>" 属性注册嵌入的 JavaScript 文件。  
  
 若要使用此示例，请使用自定义控件，将示例中显示的 JavaScript 文件编译为嵌入的资源。 将生成的程序集放入网站的 Bin 文件夹中。 有关如何在程序集中嵌入 JavaScript 文件的示例，请参阅[演练：将 Javascript 文件作为资源嵌入到程序集中](https://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89)。  
  
 下面的示例演示使用自定义控件的页。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 下面的示例演示了自定义控件类定义。  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 下面的示例演示支持 JavaScript 文件。  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 下面的示例演示必须添加到包含自定义控件和 JavaScript 文件的项目的 AssemblyInfo 文件中的代码。  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.ScriptReference" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.ScriptReference" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ScriptReference : string -&gt; System.Web.UI.ScriptReference" Usage="new System.Web.UI.ScriptReference path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">客户端脚本文件相对于网页的路径。</param>
        <summary>使用指定的路径初始化 <see cref="T:System.Web.UI.ScriptReference" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference (string name, string assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, assembly As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference(System::String ^ name, System::String ^ assembly);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ScriptReference : string * string -&gt; System.Web.UI.ScriptReference" Usage="new System.Web.UI.ScriptReference (name, assembly)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">嵌入到程序集中的脚本文件的名称。</param>
        <param name="assembly">包含作为嵌入资源的客户端脚本文件的程序集名称。</param>
        <summary>使用指定的名称和程序集初始化 <see cref="T:System.Web.UI.ScriptReference" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public string Assembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Property Assembly As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Assembly { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : string with get, set" Usage="System.Web.UI.ScriptReference.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含作为嵌入资源的客户端脚本文件的程序集名称。</summary>
        <value>包含作为嵌入资源的客户端脚本文件的程序集完全限定名或部分限定名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当您引用作为嵌入资源包含在程序集中的客户端脚本文件时，可以设置 "<xref:System.Web.UI.ScriptReference.Assembly%2A>" 属性。 将 <xref:System.Web.UI.ScriptReference.Assembly%2A> 设置为完全限定或部分限定的程序集名称。 完全限定的程序集名称包括名称、区域性、公钥和版本号。 部分限定的程序集名称只包含名称。  
  
 为 <xref:System.Web.UI.ScriptReference.Assembly%2A>指定值时，还必须在 <xref:System.Web.UI.ScriptReference.Name%2A> 属性中指定嵌入资源的名称。 否则，将引发 <xref:System.InvalidOperationException>。  
  
 引用的程序集必须位于网站的 Bin 文件夹或全局程序集缓存中。  
  
   
  
## Examples  
 下面的示例演示如何引用嵌入到控件程序集中的自定义控件和 JavaScript 文件。 该程序集假定在网站的 Bin 文件夹中。 自定义控件将动画处理 <xref:System.Web.UI.UpdatePanel> 控件。 JavaScript 文件编译为名为 SampleControl 的嵌入资源。 使用 "<xref:System.Web.UI.ScriptReference.Assembly%2A>" 和 "<xref:System.Web.UI.ScriptReference.Name%2A>" 属性注册嵌入的 JavaScript 文件。  
  
 若要使用此示例，请使用自定义控件，将示例中显示的 JavaScript 文件编译为嵌入的资源。 将生成的程序集放入网站的 Bin 文件夹中。 有关如何在程序集中嵌入 JavaScript 文件的示例，请参阅[演练：将 Javascript 文件作为资源嵌入到程序集中](https://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89)。  
  
 下面的示例演示使用自定义控件的页。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 下面的示例演示了自定义控件类定义。  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 下面的示例演示支持 JavaScript 文件。  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 下面的示例演示必须添加到包含自定义控件和 JavaScript 文件的项目的 AssemblyInfo 文件中的代码。  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrl">
      <MemberSignature Language="C#" Value="protected internal override string GetUrl (System.Web.UI.ScriptManager scriptManager, bool zip);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string GetUrl(class System.Web.UI.ScriptManager scriptManager, bool zip) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.GetUrl(System.Web.UI.ScriptManager,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUrl (scriptManager As ScriptManager, zip As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ GetUrl(System::Web::UI::ScriptManager ^ scriptManager, bool zip);" />
      <MemberSignature Language="F#" Value="override this.GetUrl : System.Web.UI.ScriptManager * bool -&gt; string" Usage="scriptReference.GetUrl (scriptManager, zip)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" />
        <Parameter Name="zip" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scriptManager">目标网页上的 <see langword="ScriptManager" /> 控件。</param>
        <param name="zip">如果应压缩脚本，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>检索呈现为 <see langword="src" /> 元素的 <see langword="script" /> 特性值的 URL。</summary>
        <returns>一个字符串，其中包含作为 <see langword="src" /> 元素的 <see langword="script" /> 特性的值所呈现的 URL。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreScriptPath">
      <MemberSignature Language="C#" Value="public bool IgnoreScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.IgnoreScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreScriptPath As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreScriptPath { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreScriptPath : bool with get, set" Usage="System.Web.UI.ScriptReference.IgnoreScriptPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This property is obsolete. Instead of using ScriptManager.ScriptPath, set the Path property on each individual ScriptReference.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示从资源注册客户端脚本文件时，URL 中是否包括 <see cref="P:System.Web.UI.ScriptManager.ScriptPath" /> 属性。</summary>
        <value>如果在注册客户端脚本时未使用脚本路径，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要注册客户端脚本文件，而不包含脚本文件的 URL 中的 <xref:System.Web.UI.ScriptManager.ScriptPath%2A> 值，请将 <xref:System.Web.UI.ScriptReference.IgnoreScriptPath%2A> 设置为 `true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAjaxFrameworkScript">
      <MemberSignature Language="C#" Value="protected internal override bool IsAjaxFrameworkScript (System.Web.UI.ScriptManager scriptManager);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsAjaxFrameworkScript(class System.Web.UI.ScriptManager scriptManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.IsAjaxFrameworkScript(System.Web.UI.ScriptManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function IsAjaxFrameworkScript (scriptManager As ScriptManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool IsAjaxFrameworkScript(System::Web::UI::ScriptManager ^ scriptManager);" />
      <MemberSignature Language="F#" Value="override this.IsAjaxFrameworkScript : System.Web.UI.ScriptManager -&gt; bool" Usage="scriptReference.IsAjaxFrameworkScript scriptManager" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="scriptManager"><see cref="T:System.Web.UI.ScriptManager" /> 对象。</param>
        <summary>确定脚本引用是否为 AJAX 脚本。</summary>
        <returns>如果脚本引用为 AJAX 脚本，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFromSystemWebExtensions">
      <MemberSignature Language="C#" Value="protected internal override bool IsFromSystemWebExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsFromSystemWebExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.IsFromSystemWebExtensions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function IsFromSystemWebExtensions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool IsFromSystemWebExtensions();" />
      <MemberSignature Language="F#" Value="override this.IsFromSystemWebExtensions : unit -&gt; bool" Usage="scriptReference.IsFromSystemWebExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method is obsolete. Use IsAjaxFrameworkScript(ScriptManager) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示复合脚本是否包含对 ASP.NET AJAX 框架脚本的引用。</summary>
        <returns>如果复合脚本包含对 ASP.NET AJAX 框架脚本的引用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Web.UI.ScriptReference.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含客户端脚本文件的嵌入资源的名称。</summary>
        <value>作为资源嵌入到程序集中的客户端脚本文件的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置 <xref:System.Web.UI.ScriptReference.Name%2A> 属性以引用嵌入为程序集中的资源的客户端脚本文件。  
  
 如果在同一脚本引用中同时为 "<xref:System.Web.UI.ScriptReferenceBase.Path%2A>" 和 "<xref:System.Web.UI.ScriptReference.Name%2A>" 属性定义值，则 <xref:System.Web.UI.ScriptReferenceBase.Path%2A> 属性优先。  
  
   
  
## Examples  
 下面的示例演示如何引用嵌入到控件程序集中的自定义控件和 JavaScript 文件。 该程序集假定在网站的 Bin 文件夹中。 自定义控件将动画处理 <xref:System.Web.UI.UpdatePanel> 控件。 JavaScript 文件编译为名为 SampleControl 的嵌入资源。 使用 "<xref:System.Web.UI.ScriptReference.Assembly%2A>" 和 "<xref:System.Web.UI.ScriptReference.Name%2A>" 属性注册嵌入的 JavaScript 文件。  
  
 若要使用此示例，请使用自定义控件，将示例中显示的 JavaScript 文件编译为嵌入的资源。 将生成的程序集放入网站的 Bin 文件夹中。 有关如何在程序集中嵌入 JavaScript 文件的示例，请参阅[演练：将 Javascript 文件作为资源嵌入到程序集中](https://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89)。  
  
 下面的示例演示使用自定义控件的页。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 下面的示例演示了自定义控件类定义。  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 下面的示例演示支持 JavaScript 文件。  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 下面的示例演示必须添加到包含自定义控件和 JavaScript 文件的项目的 AssemblyInfo 文件中的代码。  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="scriptReference.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个字符串，该字符串表示 <see cref="P:System.Web.UI.ScriptReference.Name" /> 属性、<see cref="P:System.Web.UI.ScriptReferenceBase.Path" /> 属性或类型名称的值。</summary>
        <returns>如果已定义，则为 <see cref="P:System.Web.UI.ScriptReference.Name" /> 属性的值或 <see cref="P:System.Web.UI.ScriptReferenceBase.Path" /> 属性的值；否则为 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的值。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
