<Type Name="ImmutableSortedSet&lt;T&gt;" FullName="System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="16309fe93e4ed02a681da19d4f9c8eb79908efe9" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76951972" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImmutableSortedSet&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.Generic.ISet&lt;T&gt;, System.Collections.IList, System.Collections.Immutable.IImmutableSet&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImmutableSortedSet`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.Generic.ISet`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableSortedSet`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImmutableSortedSet(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IImmutableSet(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T), ISet(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ImmutableSortedSet sealed : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::Generic::ISet&lt;T&gt;, System::Collections::IList, System::Collections::Immutable::IImmutableSet&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ImmutableSortedSet&lt;'T&gt; = class&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ISet&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface IImmutableSet&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
    <AssemblyVersion>1.2.5.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.ISet&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Immutable.IImmutableSet&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Immutable.ImmutableSortedSetDebuggerProxy`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="8ef37-101">集内元素的类型。</span><span class="sxs-lookup"><span data-stu-id="8ef37-101">The type of elements in the set.</span></span></typeparam>
    <summary><span data-ttu-id="8ef37-102">表示不可变的排序集实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-102">Represents an immutable sorted set implementation.</span></span>

<span data-ttu-id="8ef37-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8ef37-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-104">使用 <xref:System.Collections.Immutable.ImmutableSortedSet.CreateRange%2A> 方法创建预填充了项的新的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-104">Create a new immutable sorted set that is prepopulated with items by using the <xref:System.Collections.Immutable.ImmutableSortedSet.CreateRange%2A> method.</span></span> <span data-ttu-id="8ef37-105">当使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Add%2A>、<xref:System.Collections.Immutable.ImmutableSortedSet%601.Reverse%2A> 或 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Remove%2A>等方法操作不可变集时，将生成原始排序集的副本，应用操作并返回新的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-105">When you manipulate an immutable set with methods such as <xref:System.Collections.Immutable.ImmutableSortedSet%601.Add%2A>, <xref:System.Collections.Immutable.ImmutableSortedSet%601.Reverse%2A> or <xref:System.Collections.Immutable.ImmutableSortedSet%601.Remove%2A>, a copy of the original sorted set is made, manipulations applied and a new immutable sorted set is returned.</span></span>

<span data-ttu-id="8ef37-106">如果需要对不可变集合执行多个操作，为了提高效率，您可以使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> 方法将 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 复制到 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>，并使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> 方法对其进行操作并使其再次成为不可变的。</span><span class="sxs-lookup"><span data-stu-id="8ef37-106">If you need to perform multiple operations on an immutable collection, to increase efficiency you can copy the <xref:System.Collections.Immutable.ImmutableSortedSet%601> to a <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>, using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> method, manipulate the set and make it immutable again using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> method.</span></span> <span data-ttu-id="8ef37-107">这不会更改原始的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-107">This will not change the original immutable sorted set.</span></span>

 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8ef37-108">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="8ef37-108">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-109">要相加的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-109">The value to add.</span></span></param>
        <summary><span data-ttu-id="8ef37-110">将指定的值添加到此不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-110">Adds the specified value to this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-111">已添加元素的新集，或者此集（如果该元素已在此集内）。</span><span class="sxs-lookup"><span data-stu-id="8ef37-111">A new set with the element added, or this set if the element is already in this set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-112">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-112">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-113">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-113">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-114">从不可变排序集内移除所有元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-114">Removes all elements from the immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-115">已移除元素的空集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-115">An empty set with the elements removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-116">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-116">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-117">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-117">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="immutableSortedSet.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-118">要检查的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-118">The value to check for.</span></span></param>
        <summary><span data-ttu-id="8ef37-119">确定此不可变排序集是否包含指定的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-119">Determines whether this immutable sorted set contains the specified value.</span></span></summary>
        <returns><span data-ttu-id="8ef37-120">如果该集包含指定值，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-120"><see langword="true" /> if the set contains the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-121">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-121">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-122">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-122">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-123">获取不可变排序集内的元素数。</span><span class="sxs-lookup"><span data-stu-id="8ef37-123">Gets the number of elements in the immutable sorted set.</span></span></summary>
        <value><span data-ttu-id="8ef37-124">不可变排序集内的元素数。</span><span class="sxs-lookup"><span data-stu-id="8ef37-124">The number of elements in the immutable sorted set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-125">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-125">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-126">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-126">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As ImmutableSortedSet(Of T) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-127">获取空的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-127">Gets an empty immutable sorted set.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Except (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Except(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Except : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Except other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-128">要从此集内移除的项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-128">The items to remove from this set.</span></span></param>
        <summary><span data-ttu-id="8ef37-129">从此不可变排序集内移除一组指定项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-129">Removes a specified set of items from this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-130">已移除项的新集；如果原始集不包含任何项，则为原始集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-130">A new set with the items removed; or the original set if none of the items were in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-131">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-131">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-132">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-132">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Collections.Immutable.ImmutableSortedSet`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ImmutableSortedSet(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Enumerator GetEnumerator();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator" Usage="immutableSortedSet.GetEnumerator " FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableSortedSet`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Enumerator GetEnumerator();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator" Usage="immutableSortedSet.GetEnumerator " FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-133">返回一个循环访问不可变排序集的枚举器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-133">Returns an enumerator that iterates through the immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-134">一个可用于循环访问集的枚举器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-134">An enumerator that can be used to iterate through the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!CAUTION]
>  <span data-ttu-id="8ef37-135">将此枚举器用作值类型（即，如果它未装箱），请不要通过将其分配给第二个变量或将其传递给其他方法来复制它。</span><span class="sxs-lookup"><span data-stu-id="8ef37-135">When you  use this enumerator as a value type (that is, when it isn't boxed), do not copy it by assigning it to a second variable or by passing it to another method.</span></span> <span data-ttu-id="8ef37-136">当释放此枚举器时，它会将可变引用类型堆栈返回到资源池，并在复制值类型枚举器时（如果传递值，这可能很容易意外发生）。枚举器副本可能仍在使用已返回到资源池的资源池，从而导致数据损坏和异常。</span><span class="sxs-lookup"><span data-stu-id="8ef37-136">When this enumerator is disposed of, it returns a mutable reference type stack to a resource pool, and if the value type enumerator is copied (which can easily happen unintentionally if you pass the value around), there is a risk that a stack that has already been returned to the resource pool may still be in use by one of the enumerator copies, leading to data corruption and exceptions.</span></span>

[<span data-ttu-id="8ef37-137">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-137">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-138">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-138">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="immutableSortedSet.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8ef37-139">正在查找其位置的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-139">The value whose position is being sought.</span></span></param>
        <summary><span data-ttu-id="8ef37-140">获取指定值在此不可变排序集内的出现位置。</span><span class="sxs-lookup"><span data-stu-id="8ef37-140">Gets the position within this immutable sorted set that the specified value appears in.</span></span></summary>
        <returns><span data-ttu-id="8ef37-141">如果找到 <paramref name="item" />，则为排序集内指定 <paramref name="item" /> 的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-141">The index of the specified <paramref name="item" /> in the sorted set, if <paramref name="item" /> is found.</span></span> <span data-ttu-id="8ef37-142">如果 <paramref name="item" /> 未找到且小于此集内的一个或多个元素，此方法将返回一个负数，该负数是大于 value 的第一个元素的索引的按位求补。</span><span class="sxs-lookup"><span data-stu-id="8ef37-142">If <paramref name="item" /> is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value.</span></span> <span data-ttu-id="8ef37-143">如果 <paramref name="item" /> 未找到且大于此集内的任何元素，此方法将返回一个负数，该负数是最后一个元素的索引的按位求补加 1。</span><span class="sxs-lookup"><span data-stu-id="8ef37-143">If <paramref name="item" /> is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-144">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-144">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-145">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-145">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Intersect (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Intersect(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Intersect : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Intersect other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-146">要与此集相交的集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-146">The set to intersect with this one.</span></span></param>
        <summary><span data-ttu-id="8ef37-147">创建一个不可变排序集，其中包含同时存在于此集和指定集内的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-147">Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-148">一个新的不可变排序集，其中包含同时存在于两个集内的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-148">A new immutable sorted set that contains any elements that exist in both sets.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-149">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-149">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-150">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-150">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-151">获取一个值，该值指示此不可变排序集是否为空。</span><span class="sxs-lookup"><span data-stu-id="8ef37-151">Gets a value that indicates whether this immutable sorted set is empty.</span></span></summary>
        <value><span data-ttu-id="8ef37-152">如果此集为空，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-152"><see langword="true" /> if this set is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-153">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-153">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-154">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-154">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProperSubsetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSubsetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsProperSubsetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsProperSubsetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsProperSubsetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsProperSubsetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-155">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-155">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-156">确定当前不可变排序集是否为指定集合的真（严格）子集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-156">Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.</span></span></summary>
        <returns><span data-ttu-id="8ef37-157">如果当前集是 <see langword="true" /> 的真子集，则为 <paramref name="other" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-157"><see langword="true" /> if the current set is a proper subset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="8ef37-158">空集是任何其他集合的正确子集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-158">An empty set is a proper subset of any other collection.</span></span> <span data-ttu-id="8ef37-159">因此，如果当前集为空，则此方法返回 `true`，除非 `other` 集合也为空。</span><span class="sxs-lookup"><span data-stu-id="8ef37-159">Therefore, this method returns `true` if the current set is empty, unless the `other` collection is also empty.</span></span>

[<span data-ttu-id="8ef37-160">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-160">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-161">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-161">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProperSupersetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSupersetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsProperSupersetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsProperSupersetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsProperSupersetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsProperSupersetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-162">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-162">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-163">确定当前不可变排序集是否为指定集合的真超集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-163">Determines whether the current immutable sorted set is a proper superset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="8ef37-164">如果当前集是 <see langword="true" /> 的真超集，则为 <paramref name="other" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-164"><see langword="true" /> if the current set is a proper superset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-165">空集是任何其他集合的真超集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-165">An empty set is a proper superset of any other collection.</span></span> <span data-ttu-id="8ef37-166">因此，如果 `other` 参数表示的集合为空，则此方法返回 `true`，除非当前集也为空。</span><span class="sxs-lookup"><span data-stu-id="8ef37-166">Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, unless the current set is also empty.</span></span>

[<span data-ttu-id="8ef37-167">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-167">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-168">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-168">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsSubsetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsSubsetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-169">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-169">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-170">确定当前不可变排序集是否为指定集合的子集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-170">Determines whether the current immutable sorted set is a subset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="8ef37-171">如果当前集是 <see langword="true" /> 的子集，则为 <paramref name="other" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-171"><see langword="true" /> if the current set is a subset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-172">空集是其他任何集（包括另一个空集）的子集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-172">An empty set is a subset of any other set, including another empty set.</span></span> <span data-ttu-id="8ef37-173">因此，如果当前集为空，则此方法返回 `true` （即使 `other` 集合也为空）。</span><span class="sxs-lookup"><span data-stu-id="8ef37-173">Therefore, this method returns `true` if the current set is empty, even if the `other` collection is also empty.</span></span>

[<span data-ttu-id="8ef37-174">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-174">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-175">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-175">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupersetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupersetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSupersetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsSupersetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsSupersetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsSupersetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-176">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-176">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-177">确定当前不可变排序集是否为指定集合的超集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-177">Determines whether the current immutable sorted set is a superset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="8ef37-178">如果当前集是 <see langword="true" /> 的超集，则为 <paramref name="other" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-178"><see langword="true" /> if the current set is a superset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-179">所有集合（包括空集）均为空集的超集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-179">All collections, including empty sets, are supersets of an empty set.</span></span> <span data-ttu-id="8ef37-180">因此，如果 `other` 参数表示的集合为空（即使当前排序集为空），则此方法将返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="8ef37-180">Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, even if the current sorted set is empty.</span></span>

[<span data-ttu-id="8ef37-181">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-181">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-182">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-182">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef37-183">要从排序集中检索的元素的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-183">The index of the element to retrieve from the sorted set.</span></span></param>
        <summary><span data-ttu-id="8ef37-184">获取不可变排序集中位于给定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-184">Gets the element of the immutable sorted set at the given index.</span></span></summary>
        <value><span data-ttu-id="8ef37-185">给定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-185">The element at the given index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-186">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-186">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-187">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-187">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemRef">
      <MemberSignature Language="C#" Value="public ref readonly T ItemRef (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T ItemRef(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ItemRef (index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ ItemRef(int index);" />
      <MemberSignature Language="F#" Value="member this.ItemRef : int -&gt; 'T" Usage="immutableSortedSet.ItemRef index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.1">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef37-188">要返回集中的元素从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-188">The 0-based index of the element in the set to return.</span></span></param>
        <summary><span data-ttu-id="8ef37-189">获取给定 <paramref name="index" /> 处的集元素的只读引用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-189">Gets a read-only reference of the element of the set at the given <paramref name="index" />.</span></span></summary>
        <returns><span data-ttu-id="8ef37-190">给定位置处的元素的只读引用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-190">A read-only reference of the element at the given position.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyComparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IComparer&lt;T&gt; KeyComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IComparer`1&lt;!T&gt; KeyComparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyComparer As IComparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IComparer&lt;T&gt; ^ KeyComparer { System::Collections::Generic::IComparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyComparer : System.Collections.Generic.IComparer&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.KeyComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-191">获取用于对不可变排序集中的键进行排序的比较器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-191">Gets the comparer used to sort keys in the immutable sorted set.</span></span></summary>
        <value><span data-ttu-id="8ef37-192">用于对键进行排序的比较器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-192">The comparer used to sort keys.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-193">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-193">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-194">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-194">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public T Max { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Max" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Max" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Max As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Max { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Max : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Max" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-195">根据比较器的定义，获取不可变排序集内的最大值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-195">Gets the maximum value in the immutable sorted set, as defined by the comparer.</span></span></summary>
        <value><span data-ttu-id="8ef37-196">集内的最大值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-196">The maximum value in the set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-197">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-197">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-198">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-198">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public T Min { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Min" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Min" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Min As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Min { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Min : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Min" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-199">根据比较器的定义，获取不可变排序集内的最小值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-199">Gets the minimum value in the immutable sorted set, as defined by the comparer.</span></span></summary>
        <value><span data-ttu-id="8ef37-200">集内的最小值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-200">The minimum value in the set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-201">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-201">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-202">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-202">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps">
      <MemberSignature Language="C#" Value="public bool Overlaps (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Overlaps(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Overlaps (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Overlaps(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Overlaps : seq&lt;'T&gt; -&gt; bool&#xA;override this.Overlaps : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.Overlaps other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-203">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-203">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-204">确定当前的不可变排序集和指定的集合是否共享通用元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-204">Determines whether the current immutable sorted set and a specified collection share common elements.</span></span></summary>
        <returns><span data-ttu-id="8ef37-205">如果当前集与 <see langword="true" /> 至少共享一个通用元素，则为 <paramref name="other" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-205"><see langword="true" /> if the current set and <paramref name="other" /> share at least one common element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-206">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-206">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-207">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-207">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Remove(T value);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-208">要删除的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-208">The element to remove.</span></span></param>
        <summary><span data-ttu-id="8ef37-209">从此不可变排序集中移除指定的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-209">Removes the specified value from this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-210">已移除元素的新不可变排序集；如果在此集内找不到元素，则为此集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-210">A new immutable sorted set with the element removed, or this set if the element was not found in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-211">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-211">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-212">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-212">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!T&gt; Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Function Reverse () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; seq&lt;'T&gt;" Usage="immutableSortedSet.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-213">返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它按逆序循环访问此不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-213">Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that iterates over this immutable sorted set in reverse order.</span></span></summary>
        <returns><span data-ttu-id="8ef37-214">一个枚举器，它按逆序循环访问不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-214">An enumerator that iterates over the immutable sorted set in reverse order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-215">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-215">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-216">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-216">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEquals">
      <MemberSignature Language="C#" Value="public bool SetEquals (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetEquals(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SetEquals (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetEquals(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member SetEquals : seq&lt;'T&gt; -&gt; bool&#xA;override this.SetEquals : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.SetEquals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-217">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-217">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-218">确定当前不可变排序集与指定的集合是否包含相同的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-218">Determines whether the current immutable sorted set and the specified collection contain the same elements.</span></span></summary>
        <returns><span data-ttu-id="8ef37-219">如果集相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-219"><see langword="true" /> if the sets are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-220">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-220">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-221">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-221">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymmetricExcept">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; SymmetricExcept (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; SymmetricExcept(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SymmetricExcept (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ SymmetricExcept(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.SymmetricExcept : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.SymmetricExcept other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-222">项的另一个序列。</span><span class="sxs-lookup"><span data-stu-id="8ef37-222">The other sequence of items.</span></span></param>
        <summary><span data-ttu-id="8ef37-223">创建一个不可变排序集，其中包含存在于此集内或者给定序列内（但不同时存在于两者中）的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-223">Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.</span></span></summary>
        <returns><span data-ttu-id="8ef37-224">新的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-224">The new immutable sorted set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-225">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-225">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-226">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-226">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As T) Implements ICollection(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Add(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8ef37-227">要相加的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-227">The value to add.</span></span></param>
        <summary><span data-ttu-id="8ef37-228">将指定值添加到集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-228">Adds the specified value to the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-229">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-229">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-230">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-230">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>

[<span data-ttu-id="8ef37-231">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-231">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-232">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-232">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Clear() = System::Collections::Generic::ICollection&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-233">从集合中移除所有项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-233">Removes all the items from the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-234">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-234">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-235">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-235">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>

[<span data-ttu-id="8ef37-236">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-236">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-237">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-237">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex) = System::Collections::Generic::ICollection&lt;T&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8ef37-238">作为从集合复制的元素的目标的一维数组。</span><span class="sxs-lookup"><span data-stu-id="8ef37-238">The one-dimensional array that is the destination of the elements copied from collection.</span></span> <span data-ttu-id="8ef37-239">该数组必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-239">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="8ef37-240"><paramref name="array" /> 中自其开始复制的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-240">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8ef37-241">将集合的元素复制到数组，从特定数组索引处开始复制。</span><span class="sxs-lookup"><span data-stu-id="8ef37-241">Copies the elements of the collection to an array, starting at a particular array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-242">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-242">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-243">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-243">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>

[<span data-ttu-id="8ef37-244">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-244">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-245">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-245">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-246">请参阅 <see cref="T:System.Collections.Generic.ICollection`1" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="8ef37-246">See the <see cref="T:System.Collections.Generic.ICollection`1" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;T&gt;.Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As T) As Boolean Implements ICollection(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8ef37-247">要从集合中移除的对象。</span><span class="sxs-lookup"><span data-stu-id="8ef37-247">The object to remove from the collection.</span></span></param>
        <summary><span data-ttu-id="8ef37-248">从集合中移除特定对象的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-248">Removes the first occurrence of a specific object from the collection.</span></span></summary>
        <returns><span data-ttu-id="8ef37-249">如果从集合中成功移除了 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-249"><see langword="true" /> if <paramref name="item" /> was successfully removed from the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-250">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-251">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-251">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>

[<span data-ttu-id="8ef37-252">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-252">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-253">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-253">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-254">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-254">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="8ef37-255">一个可用于循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-255">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-256">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-256">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-257">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.IEnumerable%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-257">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>

[<span data-ttu-id="8ef37-258">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-258">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-259">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-259">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As T) Implements IList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.Insert(int index, T item) = System::Collections::Generic::IList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef37-260">从零开始的索引，应在该索引处插入 <paramref name="item" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-260">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="8ef37-261">要插入到集内的对象。</span><span class="sxs-lookup"><span data-stu-id="8ef37-261">The object to insert into the set.</span></span></param>
        <summary><span data-ttu-id="8ef37-262">在集内指定索引的位置插入项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-262">Inserts an item in the set at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-263">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-263">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-264">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.IList%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-264">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

[<span data-ttu-id="8ef37-265">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-265">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-266">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-266">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As T Implements IList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System::Collections::Generic::IList&lt;T&gt;::Item[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="8ef37-267">请参阅 <see cref="T:System.Collections.Generic.IList`1" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="8ef37-267">See the <see cref="T:System.Collections.Generic.IList`1" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef37-268">要删除的项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-268">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="8ef37-269">移除指定索引处的项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-269">Removes the  item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-270">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-270">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-271">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.IList%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-271">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

[<span data-ttu-id="8ef37-272">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-272">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-273">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-273">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="bool ISet&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ISet&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As T) As Boolean Implements ISet(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ISet&lt;T&gt;.Add(T item) = System::Collections::Generic::ISet&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8ef37-274">要添加到集中的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-274">The element to add to the set.</span></span></param>
        <summary><span data-ttu-id="8ef37-275">向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-275">Adds an element to the current set and returns a value to indicate if the element was successfully added.</span></span></summary>
        <returns><span data-ttu-id="8ef37-276">如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-276"><see langword="true" /> if the element is added to the set; <see langword="false" /> if the element is already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-277">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-277">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-278">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-278">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="8ef37-279">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-279">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-280">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-280">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.ExceptWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.ExceptWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.ExceptWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#ExceptWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub ExceptWith (other As IEnumerable(Of T)) Implements ISet(Of T).ExceptWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.ExceptWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::ExceptWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-281">要从集内移除的项的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-281">The collection of items to remove from the set.</span></span></param>
        <summary><span data-ttu-id="8ef37-282">从当前集内移除指定集合中的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-282">Removes all elements in the specified collection from the current set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-283">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-283">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-284">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-284">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="8ef37-285">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-285">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-286">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-286">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.IntersectWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.IntersectWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.IntersectWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#IntersectWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub IntersectWith (other As IEnumerable(Of T)) Implements ISet(Of T).IntersectWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.IntersectWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::IntersectWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-287">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-287">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-288">修改当前集，使该集仅包含也存在在指定集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-288">Modifies the current set so that it contains only elements that are also in a specified collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-289">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-290">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-290">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="8ef37-291">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-291">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-292">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-292">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.SymmetricExceptWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub SymmetricExceptWith (other As IEnumerable(Of T)) Implements ISet(Of T).SymmetricExceptWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::SymmetricExceptWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-293">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-293">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-294">修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</span><span class="sxs-lookup"><span data-stu-id="8ef37-294">Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-295">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-295">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-296">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-296">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="8ef37-297">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-297">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-298">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-298">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.UnionWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.UnionWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.UnionWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#UnionWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub UnionWith (other As IEnumerable(Of T)) Implements ISet(Of T).UnionWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.UnionWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::UnionWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-299">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-299">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-300">修改当前集，使该集包含当前集或指定集合中存在的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-300">Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-301">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-302">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-302">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="8ef37-303">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-303">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-304">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-304">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8ef37-305">一维数组，它是从集内复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="8ef37-305">The one-dimensional array that is the destination of the elements copied from the set.</span></span> <span data-ttu-id="8ef37-306">该数组必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-306">The array must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="8ef37-307"><paramref name="array" /> 中自其开始复制的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-307">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8ef37-308">从特定的数组索引开始，将集的元素复制到一个数组中。</span><span class="sxs-lookup"><span data-stu-id="8ef37-308">Copies the elements of the set to an array, starting at a particular array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-309">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-309">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-310">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.ICollection> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-310">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>

[<span data-ttu-id="8ef37-311">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-311">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-312">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-312">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-313">请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="8ef37-313">See the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-314">请参阅 <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-314">See <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-315">返回循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-315">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="8ef37-316">一个可用于遍历集合的枚举器对象。</span><span class="sxs-lookup"><span data-stu-id="8ef37-316">An enumerator object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-317">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-318">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IEnumerable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-318">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>

[<span data-ttu-id="8ef37-319">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-319">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-320">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-320">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-321">要添加到集内的对象。</span><span class="sxs-lookup"><span data-stu-id="8ef37-321">The object to add to the set.</span></span></param>
        <summary><span data-ttu-id="8ef37-322">将某项添加到集内。</span><span class="sxs-lookup"><span data-stu-id="8ef37-322">Adds an item to the set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-323">新元素插入到的位置；或者为 -1，指示该项未插入到集合中。</span><span class="sxs-lookup"><span data-stu-id="8ef37-323">The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-324">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-324">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-325">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-325">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="8ef37-326">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-326">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-327">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-327">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef37-328">该集为只读，或具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8ef37-328">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-329">从集内中移除所有项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-329">Removes all items from the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-330">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-330">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-331">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-331">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="8ef37-332">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-332">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-333">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-333">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef37-334">在所有情况下均引发。</span><span class="sxs-lookup"><span data-stu-id="8ef37-334">Thrown in all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-335">要在集内查找的对象。</span><span class="sxs-lookup"><span data-stu-id="8ef37-335">The object to locate in the set.</span></span></param>
        <summary><span data-ttu-id="8ef37-336">确定集是否包含特定值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-336">Determines whether the set contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="8ef37-337">如果在集内找到该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-337"><see langword="true" /> if the object is found in the set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-338">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-338">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-339">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-339">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="8ef37-340">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-340">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-341">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-341">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-342">要在集内查找的对象。</span><span class="sxs-lookup"><span data-stu-id="8ef37-342">The object to locate in the set.</span></span></param>
        <summary><span data-ttu-id="8ef37-343">确定集内特定项的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-343">Determines the index of a specific item in the set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-344">如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="8ef37-344">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-345">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-345">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-346">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-346">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="8ef37-347">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-347">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-348">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-348">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef37-349">从零开始的索引，应在该索引处插入 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-349">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="8ef37-350">要插入到集内的对象。</span><span class="sxs-lookup"><span data-stu-id="8ef37-350">The object to insert into the set.</span></span></param>
        <summary><span data-ttu-id="8ef37-351">在集内指定索引的位置插入项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-351">Inserts an item into the set at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-352">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-352">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-353">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-353">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="8ef37-354">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-354">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-355">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-355">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef37-356">该集为只读，或具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8ef37-356">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-357">获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8ef37-357">Gets a value that indicates whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="8ef37-358">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-358"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef37-359">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读的。</span><span class="sxs-lookup"><span data-stu-id="8ef37-359">Gets a value that indicates whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="8ef37-360">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-360"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef37-361">索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-361">The index.</span></span></param>
        <summary><span data-ttu-id="8ef37-362">在指定的索引中获取或设置 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-362">Gets or sets the <see cref="T:System.Object" /> at the specified index.</span></span></summary>
        <value><span data-ttu-id="8ef37-363"><see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="8ef37-363">The <see cref="T:System.Object" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-364">要从集内移除的对象。</span><span class="sxs-lookup"><span data-stu-id="8ef37-364">The object to remove from the set.</span></span></param>
        <summary><span data-ttu-id="8ef37-365">从集内移除特定对象的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-365">Removes the first occurrence of a specific object from the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-366">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-366">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-367">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-367">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="8ef37-368">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-368">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-369">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-369">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef37-370">该集为只读，或具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8ef37-370">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef37-371">要删除的项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8ef37-371">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="8ef37-372">移除集内指定索引处的项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-372">Removes the item at the specified index of the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-373">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-373">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-374">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-374">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="8ef37-375">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-375">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-376">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-376">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef37-377">该集为只读，或具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8ef37-377">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add(T value) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-378">要添加的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-378">The element to add.</span></span></param>
        <summary><span data-ttu-id="8ef37-379">将指定的元素添加到此不可变集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-379">Adds the specified element to this immutable set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-380">已添加元素的新集，或者此集（如果该元素已在此集内）。</span><span class="sxs-lookup"><span data-stu-id="8ef37-380">A new set with the element added, or this set if the element is already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-381">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-381">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-382">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-382">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="8ef37-383">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-383">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-384">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-384">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Function Clear () As IImmutableSet(Of T) Implements IImmutableSet(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear() = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-385">检索排序和顺序语义与此实例相同的空不可变集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-385">Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.</span></span></summary>
        <returns><span data-ttu-id="8ef37-386">排序和顺序语义与此实例相同的空集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-386">An empty set that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-387">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-387">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-388">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-388">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="8ef37-389">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-389">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-390">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-390">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Except (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Except(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Except (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Except" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Except;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-391">要从此集内移除的项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-391">The items to remove from this set.</span></span></param>
        <summary><span data-ttu-id="8ef37-392">从当前不可变集内移除指定集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-392">Removes the elements in the specified collection from the current immutable set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-393">已移除项的新集；如果原始集不包含任何项，则为原始集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-393">The new set with the items removed; or the original set if none of the items were in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-394">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-394">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-395">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-395">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="8ef37-396">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-396">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-397">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-397">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Intersect (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Intersect(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Intersect (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Intersect" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Intersect;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-398">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-398">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-399">创建一个不可变集，其中包含同时存在于此集和指定集内的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-399">Creates an immutable set that contains elements that exist in both this set and the specified set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-400">一个新的不可变集，其中包含同时存在于两个集内的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-400">A new immutable set that contains any elements that exist in both sets.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-401">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-401">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-402">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-402">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="8ef37-403">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-403">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-404">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-404">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (value As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove(T value) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef37-405">要删除的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-405">The element to remove.</span></span></param>
        <summary><span data-ttu-id="8ef37-406">从此不可变集内移除指定的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-406">Removes the specified element from this immutable set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-407">已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</span><span class="sxs-lookup"><span data-stu-id="8ef37-407">A new set with the specified element removed, or the current set if the element cannot be found in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-408">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-408">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-409">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-409">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="8ef37-410">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-410">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-411">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-411">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.SymmetricExcept (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function SymmetricExcept (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).SymmetricExcept" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::SymmetricExcept;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-412">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-412">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8ef37-413">创建一个不可变集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-413">Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.</span></span></summary>
        <returns><span data-ttu-id="8ef37-414">一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-414">A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-415">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-415">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-416">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-416">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="8ef37-417">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-417">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-418">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-418">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Union (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Union(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Union (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Union" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Union;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-419">从中添加元素的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-419">The collection to add elements from.</span></span></param>
        <summary><span data-ttu-id="8ef37-420">创建一个新的不可变集，该集包含存在于当前集或指定集合中的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8ef37-420">Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.</span></span></summary>
        <returns><span data-ttu-id="8ef37-421">已添加项的新不可变集；或者原始集（如果所有项已在该集内）。</span><span class="sxs-lookup"><span data-stu-id="8ef37-421">A new immutable set with the items added; or the original set if all the items were already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-422">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8ef37-422">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8ef37-423">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8ef37-423">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="8ef37-424">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-424">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-425">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-425">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBuilder">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;.Builder ToBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1/Builder&lt;!T&gt; ToBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBuilder () As ImmutableSortedSet(Of T).Builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Builder ^ ToBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToBuilder : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Builder" Usage="immutableSortedSet.ToBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef37-426">创建一个其内容与此不可变排序集相同，并且可使用标准可变接口有效操作的集合。</span><span class="sxs-lookup"><span data-stu-id="8ef37-426">Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.</span></span></summary>
        <returns><span data-ttu-id="8ef37-427">排序集生成器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-427">The sorted set builder.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-428">如果需要对不可变集合执行多个操作，为了提高效率，您可以使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> 方法将 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 复制到 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>，并使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> 方法对其进行操作并使其再次成为不可变的。</span><span class="sxs-lookup"><span data-stu-id="8ef37-428">If you need to perform multiple operations on an immutable collection, to increase efficiency you can copy the <xref:System.Collections.Immutable.ImmutableSortedSet%601> to a <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>, using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> method, manipulate the set and make it immutable again using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> method.</span></span> <span data-ttu-id="8ef37-429">这不会更改原始的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-429">This will not change the original immutable sorted set.</span></span>

 <span data-ttu-id="8ef37-430">这是一项 O （1）操作，只会导致一个（小）内存分配。</span><span class="sxs-lookup"><span data-stu-id="8ef37-430">This is an O(1) operation and results in only a single (small) memory allocation.</span></span> <span data-ttu-id="8ef37-431">返回的可变集合不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="8ef37-431">The mutable collection that is returned is not thread safe.</span></span>

[<span data-ttu-id="8ef37-432">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-432">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-433">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-433">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (T equalValue, out T actualValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!T equalValue, [out] !T&amp; actualValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (equalValue As T, ByRef actualValue As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(T equalValue, [Runtime::InteropServices::Out] T % actualValue);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'T * 'T -&gt; bool&#xA;override this.TryGetValue : 'T * 'T -&gt; bool" Usage="immutableSortedSet.TryGetValue (equalValue, actualValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="equalValue" Type="T" />
        <Parameter Name="actualValue" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="equalValue"><span data-ttu-id="8ef37-434">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-434">The value to search for.</span></span></param>
        <param name="actualValue"><span data-ttu-id="8ef37-435">搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回原始值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-435">The value from the set that the search found, or the original value if the search yielded no match.</span></span></param>
        <summary><span data-ttu-id="8ef37-436">在集内搜索给定的值，并返回所找到的相等值（如果有）。</span><span class="sxs-lookup"><span data-stu-id="8ef37-436">Searches the set for a given value and returns the equal value it finds, if any.</span></span></summary>
        <returns><span data-ttu-id="8ef37-437">一个指示搜索是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="8ef37-437">A value indicating whether the search was successful.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8ef37-438">当您想要重用以前存储的引用而不是新构造的引用时，这可能很有用（以便可以进行更多的引用共享）或查找具有比当前值更完整的数据的值，尽管它们的比较器函数指示它们相等。</span><span class="sxs-lookup"><span data-stu-id="8ef37-438">This can be useful when you want to reuse a previously stored reference instead of a newly constructed one (so that more sharing of references can occur) or to look up a value that has more complete data than the value you currently have, although their comparer functions indicate they are equal.</span></span>

[<span data-ttu-id="8ef37-439">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-439">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-440">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-440">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Union (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Union(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Union : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Union other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8ef37-441">要添加的项。</span><span class="sxs-lookup"><span data-stu-id="8ef37-441">The items to add.</span></span></param>
        <summary><span data-ttu-id="8ef37-442">将一组给定项添加到此不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-442">Adds a given set of items to this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8ef37-443">已添加项的新集；或者原始集（如果所有项已在该集内）。</span><span class="sxs-lookup"><span data-stu-id="8ef37-443">The new set with the items added; or the original set if all the items were already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-444">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-444">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-445">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-445">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithComparer">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; WithComparer (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; WithComparer(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithComparer (comparer As IComparer(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ WithComparer(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.WithComparer : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.WithComparer comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="8ef37-446">要检查的比较器。</span><span class="sxs-lookup"><span data-stu-id="8ef37-446">The comparer to check for.</span></span></param>
        <summary><span data-ttu-id="8ef37-447">返回具有指定键比较器的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-447">Returns the immutable sorted set that has the specified key comparer.</span></span></summary>
        <returns><span data-ttu-id="8ef37-448">具有指定键比较器的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8ef37-448">The immutable sorted set that has the specified key comparer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="8ef37-449">System.object NuGet 包</span><span class="sxs-lookup"><span data-stu-id="8ef37-449">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="8ef37-450">关于不可变集合以及如何安装</span><span class="sxs-lookup"><span data-stu-id="8ef37-450">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
