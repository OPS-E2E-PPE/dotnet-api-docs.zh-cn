<Type Name="IEqualityComparer&lt;T&gt;" FullName="System.Collections.Generic.IEqualityComparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ed31c6051b76a1d4eed7b0f233edb7a71ec561a" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75151830" /></Metadata><TypeSignature Language="C#" Value="public interface IEqualityComparer&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEqualityComparer`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEqualityComparer`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEqualityComparer(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEqualityComparer" />
  <TypeSignature Language="F#" Value="type IEqualityComparer&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">要比较的对象的类型。</typeparam>
    <summary>定义用于支持比较对象是否相等的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口允许实现集合的自定义相等性比较。 也就是说，你可以为类型 `T`创建你自己的相等性定义，并指定此定义与接受 <xref:System.Collections.Generic.IEqualityComparer%601> 泛型接口的集合类型一起使用。 在 .NET Framework 中，<xref:System.Collections.Generic.Dictionary%602> 泛型集合类型的构造函数接受此接口。  
  
 此接口的默认实现由 <xref:System.Collections.Generic.EqualityComparer%601> 泛型类的 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> 属性提供。 <xref:System.StringComparer> 类实现 <xref:System.String>类型的 <xref:System.Collections.Generic.IEqualityComparer%601>。  
  
 此接口仅支持相等比较。 排序和排序比较的自定义是由 <xref:System.Collections.Generic.IComparer%601> 泛型接口提供的。  
  
 建议从 <xref:System.Collections.Generic.EqualityComparer%601> 类派生，而不是实现 <xref:System.Collections.Generic.IEqualityComparer%601> 接口，因为 <xref:System.Collections.Generic.EqualityComparer%601> 类使用 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 方法而不是 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 方法来测试是否相等。 这与 <xref:System.Collections.Generic.Dictionary%602> 类和其他泛型集合的 `Contains`、`IndexOf`、`LastIndexOf`和 `Remove` 方法一致。  
  
   
  
## Examples  
 下面的示例将自定义 `Box` 对象添加到字典集合。 如果 `Box` 对象的维度相同，则将它们视为相等。  
  
 [!code-csharp[System.Collections.Generic.IEqualityComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.iequalitycomparer/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEqualityComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.iequalitycomparer/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.EqualityComparer`1" />
    <altmember cref="T:System.Collections.Generic.Dictionary`2" />
    <altmember cref="Overload:System.Collections.Generic.Dictionary`2.#ctor" />
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As T, y As T) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T * 'T -&gt; bool" Usage="iEqualityComparer.Equals (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T x, T y);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">要比较的第一个类型为 <paramref name="T" /> 的对象。</param>
        <param name="y">要比较的第二个类型为 <paramref name="T" /> 的对象。</param>
        <summary>确定指定的对象是否相等。</summary>
        <returns>如果指定的对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现此方法可以为类型 `T`提供自定义相等性比较。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>若要确保 <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> 方法返回 <paramref name="x" /> 和 <paramref name="y" />两个对象的 <see langword="true" />，则需要实现，然后 <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" /> <paramref name="x" /> 方法返回的值必须等于为 <paramref name="y" />返回的值。  
  
<see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> 方法为自反、对称和可传递。 也就是说，如果用于将对象与其自身进行比较，它将返回 <see langword="true" />;对于两个对象 <paramref name="x" /> 和 <paramref name="y" /> （如果它 <see langword="true" /> 用于 <paramref name="y" /> 和 <paramref name="x" />） <see langword="true" />;对于两个对象 <paramref name="x" /> 和 <paramref name="z" /> （如果它 <see langword="true" /> 用于 <paramref name="x" /> 和 <paramref name="y" />，同时 <see langword="true" /> <paramref name="y" /> 和 <paramref name="z" />），并 <see langword="true" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (T obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(!T obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : 'T -&gt; int" Usage="iEqualityComparer.GetHashCode obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(T obj);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="T" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="T:System.Object" />，将为其返回哈希代码。</param>
        <summary>返回指定对象的哈希代码。</summary>
        <returns>指定对象的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现此方法可为类型 `T`提供自定义的哈希代码，该代码对应于 <xref:System.Collections.Generic.IEqualityComparer%601.Equals%2A> 方法提供的自定义相等比较。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>若要确保 <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> 方法返回 <paramref name="x" /> 和 <paramref name="y" />两个对象的 <see langword="true" />，则需要实现，然后 <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" /> <paramref name="x" /> 方法返回的值必须等于为 <paramref name="y" />返回的值。</para></block>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.IHashCodeProvider" />
      </Docs>
    </Member>
  </Members>
</Type>
