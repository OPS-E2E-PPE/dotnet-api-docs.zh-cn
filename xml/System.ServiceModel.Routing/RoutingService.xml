<Type Name="RoutingService" FullName="System.ServiceModel.Routing.RoutingService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3d5c1e68a667d87ef1036d6083a6101e8c38580" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78743670" /></Metadata><TypeSignature Language="C#" Value="public sealed class RoutingService : IDisposable, System.ServiceModel.Routing.IDuplexSessionRouter, System.ServiceModel.Routing.IRequestReplyRouter, System.ServiceModel.Routing.ISimplexDatagramRouter, System.ServiceModel.Routing.ISimplexSessionRouter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RoutingService extends System.Object implements class System.IDisposable, class System.ServiceModel.Routing.IDuplexSessionRouter, class System.ServiceModel.Routing.IRequestReplyRouter, class System.ServiceModel.Routing.ISimplexDatagramRouter, class System.ServiceModel.Routing.ISimplexSessionRouter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Routing.RoutingService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RoutingService&#xA;Implements IDisposable, IDuplexSessionRouter, IRequestReplyRouter, ISimplexDatagramRouter, ISimplexSessionRouter" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutingService sealed : IDisposable, System::ServiceModel::Routing::IDuplexSessionRouter, System::ServiceModel::Routing::IRequestReplyRouter, System::ServiceModel::Routing::ISimplexDatagramRouter, System::ServiceModel::Routing::ISimplexSessionRouter" />
  <TypeSignature Language="F#" Value="type RoutingService = class&#xA;    interface ISimplexDatagramRouter&#xA;    interface ISimplexSessionRouter&#xA;    interface IRequestReplyRouter&#xA;    interface IDuplexSessionRouter&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Routing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.Routing.IDuplexSessionRouter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.Routing.IRequestReplyRouter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.Routing.ISimplexDatagramRouter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.Routing.ISimplexSessionRouter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ServiceModel.Activation.AspNetCompatibilityRequirements(RequirementsMode=System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ServiceModel.ServiceBehavior(AddressFilterMode=System.ServiceModel.AddressFilterMode.Any, InstanceContextMode=System.ServiceModel.InstanceContextMode.PerSession, UseSynchronizationContext=false, ValidateMustUnderstand=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f7868-101">定义路由服务，此服务负责根据筛选条件路由终结点之间的消息。</span><span class="sxs-lookup"><span data-stu-id="f7868-101">Defines the routing service, which is responsible for routing messages between endpoints based on filter criteria.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="routingService.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7868-102">执行与释放或重置非托管资源关联的应用程序定义的任务。</span><span class="sxs-lookup"><span data-stu-id="f7868-102">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage">
      <MemberSignature Language="C#" Value="IAsyncResult IDuplexSessionRouter.BeginProcessMessage (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function BeginProcessMessage (message As Message, callback As AsyncCallback, state As Object) As IAsyncResult Implements IDuplexSessionRouter.BeginProcessMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual IAsyncResult ^ System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(System::ServiceModel::Channels::Message ^ message, AsyncCallback ^ callback, System::Object ^ state) = System::ServiceModel::Routing::IDuplexSessionRouter::BeginProcessMessage;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult" Usage="routingService.System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage (message, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationBehavior(Impersonation=System.ServiceModel.ImpersonationOption.Allowed)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="f7868-103">要处理的 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-103">The <see cref="T:System.ServiceModel.Channels.Message" /> to be processed.</span></span></param>
        <param name="callback"><span data-ttu-id="f7868-104">在消息处理完成时将调用的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f7868-104">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</span></span></param>
        <param name="state"><span data-ttu-id="f7868-105">传递到回调过程的用户定义的状态对象。</span><span class="sxs-lookup"><span data-stu-id="f7868-105">A user-defined state object that is passed to the callback procedure.</span></span></param>
        <summary><span data-ttu-id="f7868-106">启动消息的异步处理。</span><span class="sxs-lookup"><span data-stu-id="f7868-106">Begins the asynchronous processing of the message.</span></span></summary>
        <returns><span data-ttu-id="f7868-107">可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#EndProcessMessage(System.IAsyncResult)" /> 时，也需要该值。</span><span class="sxs-lookup"><span data-stu-id="f7868-107">An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#EndProcessMessage(System.IAsyncResult)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7868-108">有关使用 IDuplexSessionRouter 协定的更多信息，请参见 <xref:System.ServiceModel.Routing.IDuplexSessionRouter>。</span><span class="sxs-lookup"><span data-stu-id="f7868-108">For more information on using the IDuplexSessionRouter contract, see <xref:System.ServiceModel.Routing.IDuplexSessionRouter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage">
      <MemberSignature Language="C#" Value="void IDuplexSessionRouter.EndProcessMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#EndProcessMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Sub EndProcessMessage (result As IAsyncResult) Implements IDuplexSessionRouter.EndProcessMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(IAsyncResult ^ result) = System::ServiceModel::Routing::IDuplexSessionRouter::EndProcessMessage;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage : IAsyncResult -&gt; unit&#xA;override this.System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage : IAsyncResult -&gt; unit" Usage="routingService.System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f7868-109">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-109">The <see cref="T:System.IAsyncResult" /> returned by the call to <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="f7868-110">完成消息处理的异步执行。</span><span class="sxs-lookup"><span data-stu-id="f7868-110">Completes the asynchronous execution of message processing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7868-111">有关使用 IDuplexSessionRouter 协定的更多信息，请参见 <xref:System.ServiceModel.Routing.IDuplexSessionRouter>。</span><span class="sxs-lookup"><span data-stu-id="f7868-111">For more information on using the IDuplexSessionRouter contract, see <xref:System.ServiceModel.Routing.IDuplexSessionRouter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest">
      <MemberSignature Language="C#" Value="IAsyncResult IRequestReplyRouter.BeginProcessRequest (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function BeginProcessRequest (message As Message, callback As AsyncCallback, state As Object) As IAsyncResult Implements IRequestReplyRouter.BeginProcessRequest" />
      <MemberSignature Language="C++ CLI" Value=" virtual IAsyncResult ^ System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(System::ServiceModel::Channels::Message ^ message, AsyncCallback ^ callback, System::Object ^ state) = System::ServiceModel::Routing::IRequestReplyRouter::BeginProcessRequest;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult" Usage="routingService.System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest (message, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationBehavior(Impersonation=System.ServiceModel.ImpersonationOption.Allowed)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="f7868-112">要处理的 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-112">The <see cref="T:System.ServiceModel.Channels.Message" /> to be processed.</span></span></param>
        <param name="callback"><span data-ttu-id="f7868-113">在消息处理完成时将调用的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f7868-113">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</span></span></param>
        <param name="state"><span data-ttu-id="f7868-114">传递到回调过程的用户定义的状态对象。</span><span class="sxs-lookup"><span data-stu-id="f7868-114">A user-defined state object that is passed to the callback procedure.</span></span></param>
        <summary><span data-ttu-id="f7868-115">启动消息的异步处理。</span><span class="sxs-lookup"><span data-stu-id="f7868-115">Initiates the asynchronous processing of the message.</span></span></summary>
        <returns><span data-ttu-id="f7868-116">可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#EndProcessRequest(System.IAsyncResult)" /> 时，也需要该值。</span><span class="sxs-lookup"><span data-stu-id="f7868-116">An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#EndProcessRequest(System.IAsyncResult)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7868-117">有关使用 IRequestReplyRouter 协定的更多信息，请参见 <xref:System.ServiceModel.Routing.IRequestReplyRouter>。</span><span class="sxs-lookup"><span data-stu-id="f7868-117">For more information on using the IRequestReplyRouter contract, see <xref:System.ServiceModel.Routing.IRequestReplyRouter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest">
      <MemberSignature Language="C#" Value="System.ServiceModel.Channels.Message IRequestReplyRouter.EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ServiceModel.Channels.Message System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Function EndProcessRequest (result As IAsyncResult) As Message Implements IRequestReplyRouter.EndProcessRequest" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ServiceModel::Channels::Message ^ System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(IAsyncResult ^ result) = System::ServiceModel::Routing::IRequestReplyRouter::EndProcessRequest;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest : IAsyncResult -&gt; System.ServiceModel.Channels.Message&#xA;override this.System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="routingService.System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f7868-118">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-118">The <see cref="T:System.IAsyncResult" /> returned by the call to <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="f7868-119">完成消息处理的异步执行。</span><span class="sxs-lookup"><span data-stu-id="f7868-119">Finishes asynchronous execution of message processing.</span></span></summary>
        <returns><span data-ttu-id="f7868-120">包含答复的 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-120">A <see cref="T:System.ServiceModel.Channels.Message" /> that contains the reply.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7868-121">有关使用 IRequestReplyRouter 协定的更多信息，请参见 <xref:System.ServiceModel.Routing.IRequestReplyRouter>。</span><span class="sxs-lookup"><span data-stu-id="f7868-121">For more information on using the IRequestReplyRouter contract, see <xref:System.ServiceModel.Routing.IRequestReplyRouter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage">
      <MemberSignature Language="C#" Value="IAsyncResult ISimplexDatagramRouter.BeginProcessMessage (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function BeginProcessMessage (message As Message, callback As AsyncCallback, state As Object) As IAsyncResult Implements ISimplexDatagramRouter.BeginProcessMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual IAsyncResult ^ System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage(System::ServiceModel::Channels::Message ^ message, AsyncCallback ^ callback, System::Object ^ state) = System::ServiceModel::Routing::ISimplexDatagramRouter::BeginProcessMessage;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult" Usage="routingService.System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage (message, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationBehavior(Impersonation=System.ServiceModel.ImpersonationOption.Allowed)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="f7868-122">要处理的 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-122">The <see cref="T:System.ServiceModel.Channels.Message" /> to be processed.</span></span></param>
        <param name="callback"><span data-ttu-id="f7868-123">在消息处理完成时将调用的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f7868-123">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</span></span></param>
        <param name="state"><span data-ttu-id="f7868-124">传递到回调过程的用户定义的状态对象。</span><span class="sxs-lookup"><span data-stu-id="f7868-124">A user-defined state object that is passed to the callback procedure.</span></span></param>
        <summary><span data-ttu-id="f7868-125">启动消息的异步处理。</span><span class="sxs-lookup"><span data-stu-id="f7868-125">Initiates the asynchronous processing of the message.</span></span></summary>
        <returns><span data-ttu-id="f7868-126">可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#EndProcessMessage(System.IAsyncResult)" /> 时，也需要该值。</span><span class="sxs-lookup"><span data-stu-id="f7868-126">An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#EndProcessMessage(System.IAsyncResult)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7868-127">有关使用 ISimplexDatagramRouter 协定的更多信息，请参见 <xref:System.ServiceModel.Routing.ISimplexDatagramRouter>。</span><span class="sxs-lookup"><span data-stu-id="f7868-127">For more information on using the ISimplexDatagramRouter contract, see <xref:System.ServiceModel.Routing.ISimplexDatagramRouter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage">
      <MemberSignature Language="C#" Value="void ISimplexDatagramRouter.EndProcessMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#EndProcessMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Sub EndProcessMessage (result As IAsyncResult) Implements ISimplexDatagramRouter.EndProcessMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage(IAsyncResult ^ result) = System::ServiceModel::Routing::ISimplexDatagramRouter::EndProcessMessage;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage : IAsyncResult -&gt; unit&#xA;override this.System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage : IAsyncResult -&gt; unit" Usage="routingService.System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f7868-128">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-128">The <see cref="T:System.IAsyncResult" /> returned by the call to <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="f7868-129">完成消息处理的异步执行。</span><span class="sxs-lookup"><span data-stu-id="f7868-129">Finishes asynchronous execution of message processing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7868-130">有关使用 ISimplexDatagramRouter 协定的更多信息，请参见 <xref:System.ServiceModel.Routing.ISimplexDatagramRouter>。</span><span class="sxs-lookup"><span data-stu-id="f7868-130">For more information on using the ISimplexDatagramRouter contract, see <xref:System.ServiceModel.Routing.ISimplexDatagramRouter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage">
      <MemberSignature Language="C#" Value="IAsyncResult ISimplexSessionRouter.BeginProcessMessage (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function BeginProcessMessage (message As Message, callback As AsyncCallback, state As Object) As IAsyncResult Implements ISimplexSessionRouter.BeginProcessMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual IAsyncResult ^ System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage(System::ServiceModel::Channels::Message ^ message, AsyncCallback ^ callback, System::Object ^ state) = System::ServiceModel::Routing::ISimplexSessionRouter::BeginProcessMessage;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult" Usage="routingService.System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage (message, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationBehavior(Impersonation=System.ServiceModel.ImpersonationOption.Allowed)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="f7868-131">要处理的 <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-131">The <see cref="T:System.ServiceModel.Channels.Message" /> to be processed.</span></span></param>
        <param name="callback"><span data-ttu-id="f7868-132">在消息处理完成时将调用的 <see cref="T:System.AsyncCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="f7868-132">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</span></span></param>
        <param name="state"><span data-ttu-id="f7868-133">传递到回调过程的用户定义的状态对象。</span><span class="sxs-lookup"><span data-stu-id="f7868-133">A user-defined state object that is passed to the callback procedure.</span></span></param>
        <summary><span data-ttu-id="f7868-134">启动消息的异步处理。</span><span class="sxs-lookup"><span data-stu-id="f7868-134">Initiates the asynchronous processing of the message.</span></span></summary>
        <returns><span data-ttu-id="f7868-135">可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#EndProcessMessage(System.IAsyncResult)" /> 时，也需要该值。</span><span class="sxs-lookup"><span data-stu-id="f7868-135">An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#EndProcessMessage(System.IAsyncResult)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7868-136">有关使用 ISimplexSessionRouter 协定的更多信息，请参见 <xref:System.ServiceModel.Routing.ISimplexSessionRouter>。</span><span class="sxs-lookup"><span data-stu-id="f7868-136">For more information on using the ISimplexSessionRouter contract, see <xref:System.ServiceModel.Routing.ISimplexSessionRouter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage">
      <MemberSignature Language="C#" Value="void ISimplexSessionRouter.EndProcessMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#EndProcessMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Sub EndProcessMessage (result As IAsyncResult) Implements ISimplexSessionRouter.EndProcessMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage(IAsyncResult ^ result) = System::ServiceModel::Routing::ISimplexSessionRouter::EndProcessMessage;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage : IAsyncResult -&gt; unit&#xA;override this.System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage : IAsyncResult -&gt; unit" Usage="routingService.System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f7868-137">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="f7868-137">The <see cref="T:System.IAsyncResult" /> returned by the call to <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="f7868-138">完成消息处理的异步执行。</span><span class="sxs-lookup"><span data-stu-id="f7868-138">Finishes asynchronous execution of message processing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7868-139">有关使用 ISimplexSessionRouter 协定的更多信息，请参见 <xref:System.ServiceModel.Routing.ISimplexSessionRouter>。</span><span class="sxs-lookup"><span data-stu-id="f7868-139">For more information on using the ISimplexSessionRouter contract, see <xref:System.ServiceModel.Routing.ISimplexSessionRouter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
