<Type Name="IsConst" FullName="System.Runtime.CompilerServices.IsConst">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3aa0a4a6f6f60dec936cf95f393a727182c4148a" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78691042" /></Metadata><TypeSignature Language="C#" Value="public static class IsConst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsConst extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsConst" />
  <TypeSignature Language="VB.NET" Value="Public Class IsConst" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsConst abstract sealed" />
  <TypeSignature Language="F#" Value="type IsConst = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a1b7c-101">指示修饰的类型有一个 <see langword="const" /> 修饰符。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-101">Indicates that the modified type has a <see langword="const" /> modifier.</span></span> <span data-ttu-id="a1b7c-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1b7c-103">Microsoft C++编译器将此修饰符发送到在源代码中声明为 `const` 的任何参数、返回类型或对象声明的元数据中。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-103">The Microsoft C++ compiler emits this modifier into metadata for any parameter, return type, or object declaration declared as `const` in the source code.</span></span>  
  
 <span data-ttu-id="a1b7c-104">编译器在元数据中发出自定义修饰符，以更改当默认行为不合适时实时（JIT）编译器处理值的方式。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-104">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="a1b7c-105">当 JIT 编译器遇到自定义修饰符时，它将按修饰符指定的方式处理值。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-105">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="a1b7c-106">编译器可以对方法、参数和返回值应用自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-106">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="a1b7c-107">JIT 编译器必须响应所需的修饰符，但可以忽略可选修饰符。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-107">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="a1b7c-108">可以使用以下方法之一将自定义修饰符发送到元数据中：</span><span class="sxs-lookup"><span data-stu-id="a1b7c-108">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="a1b7c-109">使用 <xref:System.Reflection.Emit.TypeBuilder> 类中的方法，如 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>和 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-109">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="a1b7c-110">生成 Microsoft 中间语言（MSIL）指令文件，其中包含对的调用 `modopt` 和 `modreq`，并使用[Ilasm （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)汇编文件。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-110">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="a1b7c-111">使用非托管反射 API。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-111">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1b7c-112">下面的示例演示如何使用反射将 <xref:System.Runtime.CompilerServices.IsConst> 对象发送到程序集。</span><span class="sxs-lookup"><span data-stu-id="a1b7c-112">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsConst> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsConst#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsConst/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
