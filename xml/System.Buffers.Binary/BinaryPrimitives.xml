<Type Name="BinaryPrimitives" FullName="System.Buffers.Binary.BinaryPrimitives">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7ac3074dd1370b819ab52a02cf3d3d880544be91" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75153832" /></Metadata><TypeSignature Language="C#" Value="public static class BinaryPrimitives" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BinaryPrimitives extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Binary.BinaryPrimitives" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryPrimitives" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryPrimitives abstract sealed" />
  <TypeSignature Language="F#" Value="type BinaryPrimitives = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ad584-101">将字节读取为具有特定字节序的基元。</span><span class="sxs-lookup"><span data-stu-id="ad584-101">Reads bytes as primitives with specific endianness.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ReadInt16BigEndian">
      <MemberSignature Language="C#" Value="public static short ReadInt16BigEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReadInt16BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt16BigEndian (source As ReadOnlySpan(Of Byte)) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ReadInt16BigEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadInt16BigEndian : ReadOnlySpan&lt;byte&gt; -&gt; int16" Usage="System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-102">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-102">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-103">从字节只读范围的开头，将 <see cref="T:System.Int16" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-103">Reads an <see cref="T:System.Int16" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-104">大字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-104">The big endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-105">从跨度的开头精确读取2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-105">Reads exactly 2 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-106"><paramref name="source" /> 太小，无法包含 <see cref="T:System.Int16" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-106"><paramref name="source" /> is too small to contain an <see cref="T:System.Int16" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt16LittleEndian">
      <MemberSignature Language="C#" Value="public static short ReadInt16LittleEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReadInt16LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt16LittleEndian (source As ReadOnlySpan(Of Byte)) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ReadInt16LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadInt16LittleEndian : ReadOnlySpan&lt;byte&gt; -&gt; int16" Usage="System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-107">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-107">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-108">从字节只读范围的开头，将 <see cref="T:System.Int16" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-108">Reads an <see cref="T:System.Int16" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-109">小字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-109">The little endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-110">从跨度的开头精确读取2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-110">Reads exactly 2 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-111"><paramref name="source" /> 太小，无法包含 <see cref="T:System.Int16" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-111"><paramref name="source" /> is too small to contain an <see cref="T:System.Int16" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt32BigEndian">
      <MemberSignature Language="C#" Value="public static int ReadInt32BigEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt32BigEndian (source As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ReadInt32BigEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadInt32BigEndian : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-112">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-112">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-113">从字节只读范围的开头，将 <see cref="T:System.Int32" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-113">Reads an <see cref="T:System.Int32" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-114">大字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-114">The big endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-115">从跨度的开头精确读取4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-115">Reads exactly 4 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-116"><paramref name="source" /> 太小，无法包含 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-116"><paramref name="source" /> is too small to contain an <see cref="T:System.Int32" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt32LittleEndian">
      <MemberSignature Language="C#" Value="public static int ReadInt32LittleEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt32LittleEndian (source As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ReadInt32LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadInt32LittleEndian : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-117">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-117">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-118">从字节只读范围的开头，将 <see cref="T:System.Int32" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-118">Reads an <see cref="T:System.Int32" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-119">小字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-119">The little endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-120">从跨度的开头精确读取4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-120">Reads exactly 4 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-121"><paramref name="source" /> 太小，无法包含 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-121"><paramref name="source" /> is too small to contain an <see cref="T:System.Int32" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt64BigEndian">
      <MemberSignature Language="C#" Value="public static long ReadInt64BigEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReadInt64BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt64BigEndian (source As ReadOnlySpan(Of Byte)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ReadInt64BigEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadInt64BigEndian : ReadOnlySpan&lt;byte&gt; -&gt; int64" Usage="System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-122">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-122">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-123">从字节只读范围的开头，将 <see cref="T:System.Int64" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-123">Reads an <see cref="T:System.Int64" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-124">大字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-124">The big endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-125">从跨度的开头精确读取8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-125">Reads exactly 8 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-126"><paramref name="source" /> 太小，无法包含 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-126"><paramref name="source" /> is too small to contain an <see cref="T:System.Int64" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt64LittleEndian">
      <MemberSignature Language="C#" Value="public static long ReadInt64LittleEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReadInt64LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt64LittleEndian (source As ReadOnlySpan(Of Byte)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ReadInt64LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadInt64LittleEndian : ReadOnlySpan&lt;byte&gt; -&gt; int64" Usage="System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-127">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-127">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-128">从字节只读范围的开头，将 <see cref="T:System.Int64" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-128">Reads an <see cref="T:System.Int64" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-129">小字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-129">The little endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-130">从跨度的开头精确读取8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-130">Reads exactly 8 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-131"><paramref name="source" /> 太小，无法包含 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-131"><paramref name="source" /> is too small to contain an <see cref="T:System.Int64" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt16BigEndian">
      <MemberSignature Language="C#" Value="public static ushort ReadUInt16BigEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ReadUInt16BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUInt16BigEndian (source As ReadOnlySpan(Of Byte)) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ReadUInt16BigEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadUInt16BigEndian : ReadOnlySpan&lt;byte&gt; -&gt; uint16" Usage="System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-132">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-132">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-133">从字节只读范围的开头，将 <see cref="T:System.UInt16" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-133">Reads a <see cref="T:System.UInt16" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-134">大字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-134">The big endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-135">从跨度的开头精确读取2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-135">Reads exactly 2 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-136"><paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt16" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-136"><paramref name="source" /> is too small to contain a <see cref="T:System.UInt16" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt16LittleEndian">
      <MemberSignature Language="C#" Value="public static ushort ReadUInt16LittleEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ReadUInt16LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUInt16LittleEndian (source As ReadOnlySpan(Of Byte)) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ReadUInt16LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadUInt16LittleEndian : ReadOnlySpan&lt;byte&gt; -&gt; uint16" Usage="System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-137">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-137">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-138">从字节只读范围的开头，将 <see cref="T:System.UInt16" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-138">Reads a <see cref="T:System.UInt16" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-139">小字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-139">The little endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-140">从跨度的开头精确读取2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-140">Reads exactly 2 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-141"><paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt16" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-141"><paramref name="source" /> is too small to contain a <see cref="T:System.UInt16" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt32BigEndian">
      <MemberSignature Language="C#" Value="public static uint ReadUInt32BigEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ReadUInt32BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUInt32BigEndian (source As ReadOnlySpan(Of Byte)) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ReadUInt32BigEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadUInt32BigEndian : ReadOnlySpan&lt;byte&gt; -&gt; uint32" Usage="System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-142">要读取的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="ad584-142">The read-only span to read.</span></span></param>
        <summary><span data-ttu-id="ad584-143">从字节只读范围的开头，将 <see cref="T:System.UInt32" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-143">Reads a <see cref="T:System.UInt32" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-144">大字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-144">The big endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-145">从跨度的开头精确读取4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-145">Reads exactly 4 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-146"><paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-146"><paramref name="source" /> is too small to contain a <see cref="T:System.UInt32" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt32LittleEndian">
      <MemberSignature Language="C#" Value="public static uint ReadUInt32LittleEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ReadUInt32LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUInt32LittleEndian (source As ReadOnlySpan(Of Byte)) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ReadUInt32LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadUInt32LittleEndian : ReadOnlySpan&lt;byte&gt; -&gt; uint32" Usage="System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-147">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-147">The read-only span of bytes to read.</span></span></param>
        <summary><span data-ttu-id="ad584-148">从字节只读范围的开头，将 <see cref="T:System.UInt32" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-148">Reads a <see cref="T:System.UInt32" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-149">小字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-149">The little endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-150">从跨度的开头精确读取4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-150">Reads exactly 4 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-151"><paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-151"><paramref name="source" /> is too small to contain a <see cref="T:System.UInt32" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt64BigEndian">
      <MemberSignature Language="C#" Value="public static ulong ReadUInt64BigEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ReadUInt64BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUInt64BigEndian (source As ReadOnlySpan(Of Byte)) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ReadUInt64BigEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadUInt64BigEndian : ReadOnlySpan&lt;byte&gt; -&gt; uint64" Usage="System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-152">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-152">The read-only span of bytes to read.</span></span></param>
        <summary><span data-ttu-id="ad584-153">从字节只读范围的开头，将 <see cref="T:System.UInt64" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-153">Reads a <see cref="T:System.UInt64" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-154">大字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-154">The big endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-155">从跨度的开头精确读取8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-155">Reads exactly 8 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-156"><paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-156"><paramref name="source" /> is too small to contain a <see cref="T:System.UInt64" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt64LittleEndian">
      <MemberSignature Language="C#" Value="public static ulong ReadUInt64LittleEndian (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ReadUInt64LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUInt64LittleEndian (source As ReadOnlySpan(Of Byte)) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ReadUInt64LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member ReadUInt64LittleEndian : ReadOnlySpan&lt;byte&gt; -&gt; uint64" Usage="System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-157">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-157">The read-only span of bytes to read.</span></span></param>
        <summary><span data-ttu-id="ad584-158">从字节只读范围的开头，将 <see cref="T:System.UInt64" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-158">Reads a <see cref="T:System.UInt64" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-159">小字节序值。</span><span class="sxs-lookup"><span data-stu-id="ad584-159">The little endian value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-160">从跨度的开头精确读取8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-160">Reads exactly 8 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-161"><paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-161"><paramref name="source" /> is too small to contain a <see cref="T:System.UInt64" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReverseEndianness">
      <MemberSignature Language="C#" Value="public static byte ReverseEndianness (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ReverseEndianness(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseEndianness (value As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ReverseEndianness(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ReverseEndianness : byte -&gt; byte" Usage="System.Buffers.Binary.BinaryPrimitives.ReverseEndianness value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ad584-162">要反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-162">The value to reverse.</span></span></param>
        <summary><span data-ttu-id="ad584-163">对指定 <see cref="T:System.Byte" /> 值执行字节序交换，以反转基元值，这不会影响 <see cref="T:System.Byte" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-163">Reverses a primitive value by performing an endianness swap of the specified <see cref="T:System.Byte" /> value, which effectively does nothing for a <see cref="T:System.Byte" />.</span></span></summary>
        <returns><span data-ttu-id="ad584-164">未修改的传入值。</span><span class="sxs-lookup"><span data-stu-id="ad584-164">The passed-in value, unmodified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-165">此方法实际上不会执行任何操作，只是为了保持一致性而添加的。</span><span class="sxs-lookup"><span data-stu-id="ad584-165">This method effectively does nothing and was added only for consistency.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseEndianness">
      <MemberSignature Language="C#" Value="public static short ReverseEndianness (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReverseEndianness(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseEndianness (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ReverseEndianness(short value);" />
      <MemberSignature Language="F#" Value="static member ReverseEndianness : int16 -&gt; int16" Usage="System.Buffers.Binary.BinaryPrimitives.ReverseEndianness value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ad584-166">要反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-166">The value to reverse.</span></span></param>
        <summary><span data-ttu-id="ad584-167">对指定 <see cref="T:System.Int16" /> 值执行字节序交换，以反转基元值。</span><span class="sxs-lookup"><span data-stu-id="ad584-167">Reverses a primitive value by performing an endianness swap of the specified <see cref="T:System.Int16" /> value.</span></span></summary>
        <returns><span data-ttu-id="ad584-168">已反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-168">The reversed value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseEndianness">
      <MemberSignature Language="C#" Value="public static int ReverseEndianness (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReverseEndianness(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseEndianness (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ReverseEndianness(int value);" />
      <MemberSignature Language="F#" Value="static member ReverseEndianness : int -&gt; int" Usage="System.Buffers.Binary.BinaryPrimitives.ReverseEndianness value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ad584-169">要反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-169">The value to reverse.</span></span></param>
        <summary><span data-ttu-id="ad584-170">对指定 <see cref="T:System.Int32" /> 值执行字节序交换，以反转基元值。</span><span class="sxs-lookup"><span data-stu-id="ad584-170">Reverses a primitive value by performing an endianness swap of the specified <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="ad584-171">已反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-171">The reversed value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseEndianness">
      <MemberSignature Language="C#" Value="public static long ReverseEndianness (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReverseEndianness(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseEndianness (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ReverseEndianness(long value);" />
      <MemberSignature Language="F#" Value="static member ReverseEndianness : int64 -&gt; int64" Usage="System.Buffers.Binary.BinaryPrimitives.ReverseEndianness value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ad584-172">要反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-172">The value to reverse.</span></span></param>
        <summary><span data-ttu-id="ad584-173">对指定 <see cref="T:System.Int64" /> 值执行字节序交换，以反转基元值。</span><span class="sxs-lookup"><span data-stu-id="ad584-173">Reverses a primitive value by performing an endianness swap of the specified <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="ad584-174">已反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-174">The reversed value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseEndianness">
      <MemberSignature Language="C#" Value="public static sbyte ReverseEndianness (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ReverseEndianness(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseEndianness (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ReverseEndianness(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ReverseEndianness : sbyte -&gt; sbyte" Usage="System.Buffers.Binary.BinaryPrimitives.ReverseEndianness value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ad584-175">要反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-175">The value to reverse.</span></span></param>
        <summary><span data-ttu-id="ad584-176">对指定 <see cref="T:System.SByte" /> 值执行字节序交换，以反转基元值，这不会影响 <see cref="T:System.SByte" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-176">Reverses a primitive value by performing an endianness swap of the specified <see cref="T:System.SByte" /> value, which effectively does nothing for an <see cref="T:System.SByte" />.</span></span></summary>
        <returns><span data-ttu-id="ad584-177">未修改的传入值。</span><span class="sxs-lookup"><span data-stu-id="ad584-177">The passed-in value, unmodified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-178">此方法实际上不会执行任何操作，只是为了保持一致性而添加的。</span><span class="sxs-lookup"><span data-stu-id="ad584-178">This method effectively does nothing and was added only for consistency.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseEndianness">
      <MemberSignature Language="C#" Value="public static ushort ReverseEndianness (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ReverseEndianness(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseEndianness (value As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ReverseEndianness(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ReverseEndianness : uint16 -&gt; uint16" Usage="System.Buffers.Binary.BinaryPrimitives.ReverseEndianness value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ad584-179">要反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-179">The value to reverse.</span></span></param>
        <summary><span data-ttu-id="ad584-180">对指定 <see cref="T:System.UInt16" /> 值执行字节序交换，以反转基元值。</span><span class="sxs-lookup"><span data-stu-id="ad584-180">Reverses a primitive value by performing an endianness swap of the specified <see cref="T:System.UInt16" /> value.</span></span></summary>
        <returns><span data-ttu-id="ad584-181">已反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-181">The reversed value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseEndianness">
      <MemberSignature Language="C#" Value="public static uint ReverseEndianness (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ReverseEndianness(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseEndianness (value As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ReverseEndianness(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ReverseEndianness : uint32 -&gt; uint32" Usage="System.Buffers.Binary.BinaryPrimitives.ReverseEndianness value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ad584-182">要反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-182">The value to reverse.</span></span></param>
        <summary><span data-ttu-id="ad584-183">对指定 <see cref="T:System.UInt32" /> 值执行字节序交换，以反转基元值。</span><span class="sxs-lookup"><span data-stu-id="ad584-183">Reverses a primitive value by performing an endianness swap of the specified <see cref="T:System.UInt32" /> value.</span></span></summary>
        <returns><span data-ttu-id="ad584-184">已反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-184">The reversed value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseEndianness">
      <MemberSignature Language="C#" Value="public static ulong ReverseEndianness (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ReverseEndianness(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseEndianness (value As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ReverseEndianness(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ReverseEndianness : uint64 -&gt; uint64" Usage="System.Buffers.Binary.BinaryPrimitives.ReverseEndianness value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ad584-185">要反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-185">The value to reverse.</span></span></param>
        <summary><span data-ttu-id="ad584-186">对指定 <see cref="T:System.UInt64" /> 值执行字节序交换，以反转基元值。</span><span class="sxs-lookup"><span data-stu-id="ad584-186">Reverses a primitive value by performing an endianness swap of the specified <see cref="T:System.UInt64" /> value.</span></span></summary>
        <returns><span data-ttu-id="ad584-187">已反转的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-187">The reversed value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt16BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadInt16BigEndian (ReadOnlySpan&lt;byte&gt; source, out short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadInt16BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadInt16BigEndian (source As ReadOnlySpan(Of Byte), ByRef value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadInt16BigEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] short % value);" />
      <MemberSignature Language="F#" Value="static member TryReadInt16BigEndian : ReadOnlySpan&lt;byte&gt; * int16 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-188">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-188">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-189">此方法返回时，值作为大字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-189">When this method returns, the value read out of the read-only span of bytes, as big endian.</span></span></param>
        <summary><span data-ttu-id="ad584-190">从字节只读范围的开头，将 <see cref="T:System.Int16" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-190">Reads an <see cref="T:System.Int16" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-191">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-191"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int16" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-192">从跨度的开头精确读取2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-192">Reads exactly 2 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt16LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadInt16LittleEndian (ReadOnlySpan&lt;byte&gt; source, out short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadInt16LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadInt16LittleEndian (source As ReadOnlySpan(Of Byte), ByRef value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadInt16LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] short % value);" />
      <MemberSignature Language="F#" Value="static member TryReadInt16LittleEndian : ReadOnlySpan&lt;byte&gt; * int16 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-193">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-193">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-194">此方法返回时，值作为小字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-194">When this method returns, the value read out of the read-only span of bytes, as little endian.</span></span></param>
        <summary><span data-ttu-id="ad584-195">从字节只读范围的开头，将 <see cref="T:System.Int16" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-195">Reads an <see cref="T:System.Int16" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-196">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-196"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int16" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-197">从跨度的开头精确读取2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-197">Reads exactly 2 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt32BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadInt32BigEndian (ReadOnlySpan&lt;byte&gt; source, out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadInt32BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadInt32BigEndian (source As ReadOnlySpan(Of Byte), ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadInt32BigEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="static member TryReadInt32BigEndian : ReadOnlySpan&lt;byte&gt; * int -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-198">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-198">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-199">此方法返回时，值作为大字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-199">When this method returns, the value read out of the read-only span of bytes, as big endian.</span></span></param>
        <summary><span data-ttu-id="ad584-200">从字节只读范围的开头，将 <see cref="T:System.Int32" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-200">Reads an <see cref="T:System.Int32" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-201">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-201"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int32" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-202">从跨度的开头精确读取4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-202">Reads exactly 4 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt32LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadInt32LittleEndian (ReadOnlySpan&lt;byte&gt; source, out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadInt32LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadInt32LittleEndian (source As ReadOnlySpan(Of Byte), ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadInt32LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="static member TryReadInt32LittleEndian : ReadOnlySpan&lt;byte&gt; * int -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-203">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-203">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-204">此方法返回时，值作为小字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-204">When this method returns, the value read out of the read-only span of bytes, as little endian.</span></span></param>
        <summary><span data-ttu-id="ad584-205">从字节只读范围的开头，将 <see cref="T:System.Int32" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-205">Reads an <see cref="T:System.Int32" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-206">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-206"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int32" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-207">从跨度的开头精确读取4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-207">Reads exactly 4 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt64BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadInt64BigEndian (ReadOnlySpan&lt;byte&gt; source, out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadInt64BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadInt64BigEndian (source As ReadOnlySpan(Of Byte), ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadInt64BigEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="static member TryReadInt64BigEndian : ReadOnlySpan&lt;byte&gt; * int64 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-208">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-208">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-209">此方法返回时，值作为大字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-209">When this method returns, the value read out of the read-only span of bytes, as big endian.</span></span></param>
        <summary><span data-ttu-id="ad584-210">从字节只读范围的开头，将 <see cref="T:System.Int64" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-210">Reads an <see cref="T:System.Int64" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-211">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-211"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int64" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-212">从跨度的开头精确读取8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-212">Reads exactly 8 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt64LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadInt64LittleEndian (ReadOnlySpan&lt;byte&gt; source, out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadInt64LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadInt64LittleEndian (source As ReadOnlySpan(Of Byte), ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadInt64LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="static member TryReadInt64LittleEndian : ReadOnlySpan&lt;byte&gt; * int64 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-213">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-213">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-214">此方法返回时，值作为小字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-214">When this method returns, the value read out of the read-only span of bytes, as little endian.</span></span></param>
        <summary><span data-ttu-id="ad584-215">从字节只读范围的开头，将 <see cref="T:System.Int64" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-215">Reads an <see cref="T:System.Int64" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-216">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-216"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int64" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-217">从跨度的开头精确读取8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-217">Reads exactly 8 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt16BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadUInt16BigEndian (ReadOnlySpan&lt;byte&gt; source, out ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadUInt16BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadUInt16BigEndian (source As ReadOnlySpan(Of Byte), ByRef value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadUInt16BigEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::UInt16 % value);" />
      <MemberSignature Language="F#" Value="static member TryReadUInt16BigEndian : ReadOnlySpan&lt;byte&gt; * uint16 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-218">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-218">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-219">此方法返回时，值作为大字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-219">When this method returns, the value read out of the read-only span of bytes, as big endian.</span></span></param>
        <summary><span data-ttu-id="ad584-220">从字节只读范围的开头，将 <see cref="T:System.UInt16" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-220">Reads a <see cref="T:System.UInt16" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-221">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-221"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt16" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-222">从跨度的开头精确读取2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-222">Reads exactly 2 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt16LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadUInt16LittleEndian (ReadOnlySpan&lt;byte&gt; source, out ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadUInt16LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadUInt16LittleEndian (source As ReadOnlySpan(Of Byte), ByRef value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadUInt16LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::UInt16 % value);" />
      <MemberSignature Language="F#" Value="static member TryReadUInt16LittleEndian : ReadOnlySpan&lt;byte&gt; * uint16 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-223">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-223">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-224">此方法返回时，值作为小字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-224">When this method returns, the value read out of the read-only span of bytes, as little endian.</span></span></param>
        <summary><span data-ttu-id="ad584-225">从字节只读范围的开头，将 <see cref="T:System.UInt16" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-225">Reads a <see cref="T:System.UInt16" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-226">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-226"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt16" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-227">从跨度的开头精确读取2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-227">Reads exactly 2 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt32BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadUInt32BigEndian (ReadOnlySpan&lt;byte&gt; source, out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadUInt32BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadUInt32BigEndian (source As ReadOnlySpan(Of Byte), ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadUInt32BigEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="static member TryReadUInt32BigEndian : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-228">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-228">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-229">此方法返回时，值作为大字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-229">When this method returns, the value read out of the read-only span of bytes, as big endian.</span></span></param>
        <summary><span data-ttu-id="ad584-230">从字节只读范围的开头，将 <see cref="T:System.UInt32" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-230">Reads a <see cref="T:System.UInt32" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-231">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-231"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt32" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-232">从跨度的开头精确读取4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-232">Reads exactly 4 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt32LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadUInt32LittleEndian (ReadOnlySpan&lt;byte&gt; source, out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadUInt32LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadUInt32LittleEndian (source As ReadOnlySpan(Of Byte), ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadUInt32LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="static member TryReadUInt32LittleEndian : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-233">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-233">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-234">此方法返回时，值作为小字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-234">When this method returns, the value read out of the read-only span of bytes, as little endian.</span></span></param>
        <summary><span data-ttu-id="ad584-235">从字节只读范围的开头，将 <see cref="T:System.UInt32" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-235">Reads a <see cref="T:System.UInt32" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-236">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-236"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt32" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-237">从跨度的开头精确读取4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-237">Reads exactly 4 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt64BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadUInt64BigEndian (ReadOnlySpan&lt;byte&gt; source, out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadUInt64BigEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadUInt64BigEndian (source As ReadOnlySpan(Of Byte), ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadUInt64BigEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="static member TryReadUInt64BigEndian : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-238">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-238">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-239">此方法返回时，值作为大字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-239">When this method returns, the value read out of the read-only span of bytes, as big endian.</span></span></param>
        <summary><span data-ttu-id="ad584-240">从字节只读范围的开头，将 <see cref="T:System.UInt64" /> 读取为大字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-240">Reads a <see cref="T:System.UInt64" /> from the beginning of a read-only span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-241">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-241"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt64" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-242">从跨度的开头精确读取8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-242">Reads exactly 8 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt64LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryReadUInt64LittleEndian (ReadOnlySpan&lt;byte&gt; source, out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadUInt64LittleEndian(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadUInt64LittleEndian (source As ReadOnlySpan(Of Byte), ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadUInt64LittleEndian(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="static member TryReadUInt64LittleEndian : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="ad584-243">要读取的字节只读范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-243">The read-only span of bytes to read.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-244">此方法返回时，值作为小字节序从字节只读范围中读取。</span><span class="sxs-lookup"><span data-stu-id="ad584-244">When this method returns, the value read out of the read-only span of bytes, as little endian.</span></span></param>
        <summary><span data-ttu-id="ad584-245">从字节只读范围的开头，将 <see cref="T:System.UInt64" /> 读取为小字节序。</span><span class="sxs-lookup"><span data-stu-id="ad584-245">Reads a <see cref="T:System.UInt64" /> from the beginning of a read-only span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-246">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-246"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt64" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-247">从跨度的开头精确读取8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-247">Reads exactly 8 bytes from the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteInt16BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteInt16BigEndian (Span&lt;byte&gt; destination, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteInt16BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteInt16BigEndian (destination As Span(Of Byte), value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteInt16BigEndian(Span&lt;System::Byte&gt; destination, short value);" />
      <MemberSignature Language="F#" Value="static member TryWriteInt16BigEndian : Span&lt;byte&gt; * int16 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-248">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-248">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-249">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-249">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-250">将 <see cref="T:System.Int16" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-250">Writes an <see cref="T:System.Int16" /> into a span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-251">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-251"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int16" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-252">正好向范围的开头写入2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-252">Writes exactly 2 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteInt16LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteInt16LittleEndian (Span&lt;byte&gt; destination, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteInt16LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteInt16LittleEndian (destination As Span(Of Byte), value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteInt16LittleEndian(Span&lt;System::Byte&gt; destination, short value);" />
      <MemberSignature Language="F#" Value="static member TryWriteInt16LittleEndian : Span&lt;byte&gt; * int16 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-253">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-253">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-254">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-254">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-255">将 <see cref="T:System.Int16" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-255">Writes an <see cref="T:System.Int16" /> into a span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-256">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-256"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int16" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-257">正好向范围的开头写入2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-257">Writes exactly 2 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteInt32BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteInt32BigEndian (Span&lt;byte&gt; destination, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteInt32BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteInt32BigEndian (destination As Span(Of Byte), value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteInt32BigEndian(Span&lt;System::Byte&gt; destination, int value);" />
      <MemberSignature Language="F#" Value="static member TryWriteInt32BigEndian : Span&lt;byte&gt; * int -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-258">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-258">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-259">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-259">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-260">将 <see cref="T:System.Int32" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-260">Writes an <see cref="T:System.Int32" /> into a span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-261">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-261"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int32" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-262">正好向范围的开头写入4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-262">Writes exactly 4 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteInt32LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteInt32LittleEndian (Span&lt;byte&gt; destination, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteInt32LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteInt32LittleEndian (destination As Span(Of Byte), value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteInt32LittleEndian(Span&lt;System::Byte&gt; destination, int value);" />
      <MemberSignature Language="F#" Value="static member TryWriteInt32LittleEndian : Span&lt;byte&gt; * int -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-263">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-263">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-264">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-264">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-265">将 <see cref="T:System.Int32" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-265">Writes an <see cref="T:System.Int32" /> into a span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-266">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-266"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int32" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-267">正好向范围的开头写入4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-267">Writes exactly 4 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteInt64BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteInt64BigEndian (Span&lt;byte&gt; destination, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteInt64BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteInt64BigEndian (destination As Span(Of Byte), value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteInt64BigEndian(Span&lt;System::Byte&gt; destination, long value);" />
      <MemberSignature Language="F#" Value="static member TryWriteInt64BigEndian : Span&lt;byte&gt; * int64 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-268">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-268">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-269">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-269">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-270">将 <see cref="T:System.Int64" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-270">Writes an <see cref="T:System.Int64" /> into a span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-271">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-271"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int64" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-272">正好向范围的开头写入8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-272">Writes exactly 8 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteInt64LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteInt64LittleEndian (Span&lt;byte&gt; destination, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteInt64LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteInt64LittleEndian (destination As Span(Of Byte), value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteInt64LittleEndian(Span&lt;System::Byte&gt; destination, long value);" />
      <MemberSignature Language="F#" Value="static member TryWriteInt64LittleEndian : Span&lt;byte&gt; * int64 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-273">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-273">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-274">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-274">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-275">将 <see cref="T:System.Int64" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-275">Writes an <see cref="T:System.Int64" /> into a span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-276">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-276"><see langword="true" /> if the span is large enough to contain an <see cref="T:System.Int64" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-277">正好向范围的开头写入8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-277">Writes exactly 8 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteUInt16BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteUInt16BigEndian (Span&lt;byte&gt; destination, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteUInt16BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteUInt16BigEndian (destination As Span(Of Byte), value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteUInt16BigEndian(Span&lt;System::Byte&gt; destination, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteUInt16BigEndian : Span&lt;byte&gt; * uint16 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-278">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-278">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-279">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-279">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-280">将 <see cref="T:System.UInt16" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-280">Writes a <see cref="T:System.UInt16" /> into a span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-281">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-281"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt16" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-282">正好向范围的开头写入2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-282">Writes exactly 2 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteUInt16LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteUInt16LittleEndian (Span&lt;byte&gt; destination, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteUInt16LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteUInt16LittleEndian (destination As Span(Of Byte), value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteUInt16LittleEndian(Span&lt;System::Byte&gt; destination, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteUInt16LittleEndian : Span&lt;byte&gt; * uint16 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-283">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-283">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-284">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-284">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-285">将 <see cref="T:System.UInt16" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-285">Writes a <see cref="T:System.UInt16" /> into a span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-286">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-286"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt16" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-287">正好向范围的开头写入2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-287">Writes exactly 2 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteUInt32BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteUInt32BigEndian (Span&lt;byte&gt; destination, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteUInt32BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteUInt32BigEndian (destination As Span(Of Byte), value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteUInt32BigEndian(Span&lt;System::Byte&gt; destination, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteUInt32BigEndian : Span&lt;byte&gt; * uint32 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-288">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-288">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-289">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-289">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-290">将 <see cref="T:System.UInt32" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-290">Writes a <see cref="T:System.UInt32" /> into a span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-291">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-291"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt32" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-292">正好向范围的开头写入4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-292">Writes exactly 4 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteUInt32LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteUInt32LittleEndian (Span&lt;byte&gt; destination, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteUInt32LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteUInt32LittleEndian (destination As Span(Of Byte), value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteUInt32LittleEndian(Span&lt;System::Byte&gt; destination, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteUInt32LittleEndian : Span&lt;byte&gt; * uint32 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-293">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-293">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-294">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-294">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-295">将 <see cref="T:System.UInt32" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-295">Writes a <see cref="T:System.UInt32" /> into a span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-296">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-296"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt32" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-297">正好向范围的开头写入4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-297">Writes exactly 4 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteUInt64BigEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteUInt64BigEndian (Span&lt;byte&gt; destination, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteUInt64BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteUInt64BigEndian (destination As Span(Of Byte), value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteUInt64BigEndian(Span&lt;System::Byte&gt; destination, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteUInt64BigEndian : Span&lt;byte&gt; * uint64 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-298">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-298">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-299">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-299">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-300">将 <see cref="T:System.UInt64" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-300">Writes a <see cref="T:System.UInt64" /> into a span of bytes, as big endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-301">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-301"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt64" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-302">正好向范围的开头写入8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-302">Writes exactly 8 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteUInt64LittleEndian">
      <MemberSignature Language="C#" Value="public static bool TryWriteUInt64LittleEndian (Span&lt;byte&gt; destination, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteUInt64LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteUInt64LittleEndian (destination As Span(Of Byte), value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteUInt64LittleEndian(Span&lt;System::Byte&gt; destination, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteUInt64LittleEndian : Span&lt;byte&gt; * uint64 -&gt; bool" Usage="System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-303">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-303">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-304">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-304">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-305">将 <see cref="T:System.UInt64" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-305">Writes a <see cref="T:System.UInt64" /> into a span of bytes, as little endian.</span></span></summary>
        <returns><span data-ttu-id="ad584-306">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-306"><see langword="true" /> if the span is large enough to contain a <see cref="T:System.UInt64" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-307">正好向范围的开头写入8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-307">Writes exactly 8 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteInt16BigEndian">
      <MemberSignature Language="C#" Value="public static void WriteInt16BigEndian (Span&lt;byte&gt; destination, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt16BigEndian (destination As Span(Of Byte), value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt16BigEndian(Span&lt;System::Byte&gt; destination, short value);" />
      <MemberSignature Language="F#" Value="static member WriteInt16BigEndian : Span&lt;byte&gt; * int16 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-308">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-308">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-309">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-309">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-310">将 <see cref="T:System.Int16" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-310">Writes an <see cref="T:System.Int16" /> into a span of bytes, as big endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-311">正好向范围的开头写入2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-311">Writes exactly 2 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-312"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int16" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-312"><paramref name="destination" /> is too small to contain an <see cref="T:System.Int16" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInt16LittleEndian">
      <MemberSignature Language="C#" Value="public static void WriteInt16LittleEndian (Span&lt;byte&gt; destination, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt16LittleEndian (destination As Span(Of Byte), value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt16LittleEndian(Span&lt;System::Byte&gt; destination, short value);" />
      <MemberSignature Language="F#" Value="static member WriteInt16LittleEndian : Span&lt;byte&gt; * int16 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-313">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-313">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-314">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-314">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-315">将 <see cref="T:System.Int16" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-315">Writes an <see cref="T:System.Int16" /> into a span of bytes, as little endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-316">正好向范围的开头写入2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-316">Writes exactly 2 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-317"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int16" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-317"><paramref name="destination" /> is too small to contain an <see cref="T:System.Int16" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInt32BigEndian">
      <MemberSignature Language="C#" Value="public static void WriteInt32BigEndian (Span&lt;byte&gt; destination, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt32BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt32BigEndian (destination As Span(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt32BigEndian(Span&lt;System::Byte&gt; destination, int value);" />
      <MemberSignature Language="F#" Value="static member WriteInt32BigEndian : Span&lt;byte&gt; * int -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-318">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-318">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-319">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-319">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-320">将 <see cref="T:System.Int32" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-320">Writes an <see cref="T:System.Int32" /> into a span of bytes, as big endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-321">正好向范围的开头写入4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-321">Writes exactly 4 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-322"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-322"><paramref name="destination" /> is too small to contain an <see cref="T:System.Int32" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInt32LittleEndian">
      <MemberSignature Language="C#" Value="public static void WriteInt32LittleEndian (Span&lt;byte&gt; destination, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt32LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt32LittleEndian (destination As Span(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt32LittleEndian(Span&lt;System::Byte&gt; destination, int value);" />
      <MemberSignature Language="F#" Value="static member WriteInt32LittleEndian : Span&lt;byte&gt; * int -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-323">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-323">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-324">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-324">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-325">将 <see cref="T:System.Int32" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-325">Writes an <see cref="T:System.Int32" /> into a span of bytes, as little endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-326">正好向范围的开头写入4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-326">Writes exactly 4 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-327"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-327"><paramref name="destination" /> is too small to contain an <see cref="T:System.Int32" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInt64BigEndian">
      <MemberSignature Language="C#" Value="public static void WriteInt64BigEndian (Span&lt;byte&gt; destination, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt64BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt64BigEndian (destination As Span(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt64BigEndian(Span&lt;System::Byte&gt; destination, long value);" />
      <MemberSignature Language="F#" Value="static member WriteInt64BigEndian : Span&lt;byte&gt; * int64 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-328">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-328">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-329">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-329">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-330">将 <see cref="T:System.Int64" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-330">Writes an <see cref="T:System.Int64" /> into a span of bytes, as big endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-331">正好向范围的开头写入8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-331">Writes exactly 8 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-332"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-332"><paramref name="destination" /> is too small to contain an <see cref="T:System.Int64" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInt64LittleEndian">
      <MemberSignature Language="C#" Value="public static void WriteInt64LittleEndian (Span&lt;byte&gt; destination, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt64LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt64LittleEndian (destination As Span(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt64LittleEndian(Span&lt;System::Byte&gt; destination, long value);" />
      <MemberSignature Language="F#" Value="static member WriteInt64LittleEndian : Span&lt;byte&gt; * int64 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-333">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-333">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-334">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-334">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-335">将 <see cref="T:System.Int64" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-335">Writes an <see cref="T:System.Int64" /> into a span of bytes, as little endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-336">正好向范围的开头写入8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-336">Writes exactly 8 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-337"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-337"><paramref name="destination" /> is too small to contain an <see cref="T:System.Int64" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUInt16BigEndian">
      <MemberSignature Language="C#" Value="public static void WriteUInt16BigEndian (Span&lt;byte&gt; destination, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUInt16BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUInt16BigEndian (destination As Span(Of Byte), value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteUInt16BigEndian(Span&lt;System::Byte&gt; destination, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member WriteUInt16BigEndian : Span&lt;byte&gt; * uint16 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-338">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-338">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-339">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-339">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-340">将 <see cref="T:System.UInt16" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-340">Writes a <see cref="T:System.UInt16" /> into a span of bytes, as big endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-341">正好向范围的开头写入2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-341">Writes exactly 2 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-342"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt16" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-342"><paramref name="destination" /> is too small to contain a <see cref="T:System.UInt16" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUInt16LittleEndian">
      <MemberSignature Language="C#" Value="public static void WriteUInt16LittleEndian (Span&lt;byte&gt; destination, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUInt16LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUInt16LittleEndian (destination As Span(Of Byte), value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteUInt16LittleEndian(Span&lt;System::Byte&gt; destination, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member WriteUInt16LittleEndian : Span&lt;byte&gt; * uint16 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-343">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-343">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-344">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-344">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-345">将 <see cref="T:System.UInt16" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-345">Writes a <see cref="T:System.UInt16" /> into a span of bytes, as little endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-346">正好向范围的开头写入2个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-346">Writes exactly 2 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-347"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt16" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-347"><paramref name="destination" /> is too small to contain a <see cref="T:System.UInt16" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUInt32BigEndian">
      <MemberSignature Language="C#" Value="public static void WriteUInt32BigEndian (Span&lt;byte&gt; destination, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUInt32BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUInt32BigEndian (destination As Span(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteUInt32BigEndian(Span&lt;System::Byte&gt; destination, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member WriteUInt32BigEndian : Span&lt;byte&gt; * uint32 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-348">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-348">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-349">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-349">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-350">将 <see cref="T:System.UInt32" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-350">Writes a <see cref="T:System.UInt32" /> into a span of bytes, as big endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-351">正好向范围的开头写入4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-351">Writes exactly 4 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-352"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-352"><paramref name="destination" /> is too small to contain a <see cref="T:System.UInt32" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUInt32LittleEndian">
      <MemberSignature Language="C#" Value="public static void WriteUInt32LittleEndian (Span&lt;byte&gt; destination, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUInt32LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUInt32LittleEndian (destination As Span(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteUInt32LittleEndian(Span&lt;System::Byte&gt; destination, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member WriteUInt32LittleEndian : Span&lt;byte&gt; * uint32 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-353">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-353">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-354">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-354">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-355">将 <see cref="T:System.UInt32" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-355">Writes a <see cref="T:System.UInt32" /> into a span of bytes, as little endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-356">正好向范围的开头写入4个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-356">Writes exactly 4 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-357"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-357"><paramref name="destination" /> is too small to contain a <see cref="T:System.UInt32" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUInt64BigEndian">
      <MemberSignature Language="C#" Value="public static void WriteUInt64BigEndian (Span&lt;byte&gt; destination, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUInt64BigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUInt64BigEndian (destination As Span(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteUInt64BigEndian(Span&lt;System::Byte&gt; destination, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member WriteUInt64BigEndian : Span&lt;byte&gt; * uint64 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-358">要以大字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-358">The span of bytes where the value is to be written, as big endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-359">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-359">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-360">将 <see cref="T:System.UInt64" /> 以大字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-360">Writes a <see cref="T:System.UInt64" /> into a span of bytes, as big endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-361">正好向范围的开头写入8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-361">Writes exactly 8 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-362"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-362"><paramref name="destination" /> is too small to contain a <see cref="T:System.UInt64" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUInt64LittleEndian">
      <MemberSignature Language="C#" Value="public static void WriteUInt64LittleEndian (Span&lt;byte&gt; destination, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUInt64LittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUInt64LittleEndian (destination As Span(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteUInt64LittleEndian(Span&lt;System::Byte&gt; destination, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member WriteUInt64LittleEndian : Span&lt;byte&gt; * uint64 -&gt; unit" Usage="System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ad584-363">要以小字节序形式写入值的字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-363">The span of bytes where the value is to be written, as little endian.</span></span></param>
        <param name="value"><span data-ttu-id="ad584-364">要写入到字节范围内的值。</span><span class="sxs-lookup"><span data-stu-id="ad584-364">The value to write into the span of bytes.</span></span></param>
        <summary><span data-ttu-id="ad584-365">将 <see cref="T:System.UInt64" /> 以小字节序形式写入字节范围。</span><span class="sxs-lookup"><span data-stu-id="ad584-365">Writes a <see cref="T:System.UInt64" /> into a span of bytes, as little endian.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ad584-366">正好向范围的开头写入8个字节。</span><span class="sxs-lookup"><span data-stu-id="ad584-366">Writes exactly 8 bytes to the beginning of the span.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad584-367"><paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="ad584-367"><paramref name="destination" /> is too small to contain a <see cref="T:System.UInt64" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
