<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d033a91e399551c90cc6117627286d94588d52c4" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82353652" /></Metadata><TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <TypeSignature Language="F#" Value="type XmlLanguage = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示供 XMAL 标记中使用的语言标记。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 语言标记在解释 XAML 的系统上可能有也可能没有已注册的 <xref:System.Globalization.CultureInfo>。  
  
 此类用于处理使用 XML 中的 `xml:lang` 表示的值。  
  
 语言标记可以指定为两个字符的格式，也可以指定为带字符的语言-区域设置形式。 请参阅[RFC 3066](https://go.microsoft.com/fwlink/?LinkId=132454)。  
  
 请注意，XML 规范允许 `xml:lang`的空字符串，不过 RFC 3066 不允许这样做;因此，<xref:System.Windows.Markup.XmlLanguage> 类型允许 "" （空特性字符串）。 默认构造的 <xref:System.Windows.Markup.XmlLanguage> 的行为如同使用 "" （空字符串）构造的一样。  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>XAML 值  
 *prefix*  
 语言前缀，使用 ISO 639-1 语言前缀值。 例如 "en" 或 "zh-chs"。 接受大写值并将其转换为小写。 这也可能是空的属性 ""。  
  
 *子代码*  
 如果提供，则必须以单个连字符开头。 然后，由 RFC 3066 定义的子代码。 最典型的用法，以及最有可能正确映射到 <xref:System.Globalization.CultureInfo>的用法是国家或地区，如 "-us" 或 "-hk"。 接受大写值并将其转换为小写。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个静态 <see cref="T:System.Windows.Markup.XmlLanguage" /> 实例，该实例相当于 <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> 在语言标记为空的特性字符串的情况下创建的实例。</summary>
        <value><see cref="T:System.Windows.Markup.XmlLanguage" /> 的空语言标记版本，在比较操作中使用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此值有效 <xref:System.Windows.Markup.XmlLanguage> 对应于 <xref:System.String.Empty?displayProperty=nameWithType>，其 <xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A> 结果 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberSignature Language="F#" Value="member this.GetEquivalentCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetEquivalentCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当且仅当为该 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="T:System.Windows.Markup.XmlLanguage" /> 值注册了此类 <see cref="T:System.Globalization.CultureInfo" /> 后，才会为此 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 返回合适的等效 <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，可用于将该类型作为参数的本地化-全球化 API 调用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果无法生成等效的 <xref:System.Globalization.CultureInfo>，则此方法将引发异常。 如果不想要处理异常，请改为调用 <xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">根据对 <see cref="T:System.Globalization.CultureInfo" /> 的调用确定，提供的 <see cref="T:System.Windows.Markup.XmlLanguage" /> 不存在已注册的 <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />。</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberSignature Language="F#" Value="static member GetLanguage : string -&gt; System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.GetLanguage ietfLanguageTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">一个 RFC 3066 语言字符串或空字符串。</param>
        <summary>根据按 RFC 3066 表示语言的字符串，返回一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 实例。</summary>
        <returns>一个新的 <see cref="T:System.Windows.Markup.XmlLanguage" />，使用提供的字符串作为其 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法实际上是构造函数。  
  
 语言字符串可能为空，或者必须符合[RFC 3066](https://go.microsoft.com/fwlink/?LinkId=132454)规则：  
  
-   第一个子标记必须仅包含 [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] 字母。  
  
-   其他子标记必须包含 [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] 字母或数字。  
  
-   子标记由一个连字符分隔。  
  
-   每个子标记的长度必须为1到8个字符。  
  
-   不允许使用前导或尾随连字符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ietfLanguageTag" /> 参数不能为 null。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ietfLanguageTag" /> 参数非空，但不符合 RFC 3066 中指定的语法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberSignature Language="F#" Value="member this.GetSpecificCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetSpecificCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为此 <see cref="T:System.Globalization.CultureInfo" /> 返回最紧密相关的特定 <see cref="T:System.Windows.Markup.XmlLanguage" />。</summary>
        <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，可用于将该类型作为参数的本地化-全球化 API 调用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此 <xref:System.Windows.Markup.XmlLanguage> 等于 <xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType>，则此方法将返回 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>。  
  
 此方法查找与此 <xref:System.Windows.Markup.XmlLanguage>的最长可能的前缀相匹配的已注册 <xref:System.Globalization.CultureInfo>。 如果注册的 <xref:System.Globalization.CultureInfo> 是非特定的（<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A> `true`），则此方法依赖于对 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 的调用，以从非特定 <xref:System.Globalization.CultureInfo> 映射到特定的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">没有为当前的 <see cref="T:System.Globalization.CultureInfo" /><see cref="T:System.Windows.Markup.XmlLanguage" /> 注册相关的非特定 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取语言标记的字符串表示形式。</summary>
        <value>语言标记的字符串表示形式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可能会返回指定为 <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>的、最初指定的字符串的规范化版本。  
  
 如果为 <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>提供了空字符串，则此属性也可能返回 <xref:System.String.Empty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xmlLanguage.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示当前 <see cref="T:System.String" /> 的一个<see cref="T:System.Windows.Markup.XmlLanguage" />。</summary>
        <returns>表示当前<see cref="T:System.String" />的一个<see cref="T:System.Windows.Markup.XmlLanguage" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这会返回当前 <xref:System.Windows.Markup.XmlLanguage>的 <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> 值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
