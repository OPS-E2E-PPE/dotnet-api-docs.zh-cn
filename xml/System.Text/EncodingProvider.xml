<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f247db8af141aca586063f5db0ecb21d34ee181d" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83534443" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供编码提供程序的基类，后者提供在特定平台上不可用的编码。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 编码提供程序提供特定目标平台上不可用的其他编码。  
  
 Windows 桌面上的 .NET Framework 支持大量字符编码和代码页。 可以通过调用 <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> 方法获取 Windows 桌面上 .NET Framework 的完整编码列表。 另一方面，.NET Core 默认仅支持以下编码：  
  
-   ASCII （代码页20127），由 <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> 属性返回。  
  
-   ISO-8859-1 （代码页28591）。  
  
-   UTF-8 （代码页65000），由 <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> 属性返回。  
  
-   UTF-8 （代码页65001），由 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 属性返回。  
  
-   UTF-16 和 UTF-16LE （代码页1200），由 <xref:System.Text.Encoding.Unicode%2A> 属性返回。  
  
-   UTF-16BE （代码页1201），通过使用 `true`的 `bigEndian` 值调用 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 或 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 构造函数来实例化。  
  
-   32LE 属性 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> 返回的32和 UTF-（代码页12000）。  
  
-   32BE （代码页12001），该实例通过调用具有 `bigEndian` 参数的 <xref:System.Text.UTF32Encoding> 构造函数并在方法调用中提供 `true` 的值来进行实例化。  
  
 从 .NET Framework 4.6 开始，<xref:System.Text.EncodingProvider> 是使 .NET Framework 可用的其他不可用编码的基类。 这包括以下步骤：  
  
1.  定义 <xref:System.Text.EncodingProvider> 的子类，该子类重写两个抽象 <xref:System.Text.EncodingProvider.GetEncoding%2A> 重载，<xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> 和 <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>。 这些重载按代码页标识符和名称返回其他不受支持的编码。 请注意，如果使用参数0调用 <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> 方法，还可以选择返回默认编码。  
  
2.  还可以选择重写虚拟 <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> 和 <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> 方法。 在大多数情况下，这并不是必需的，因为基类提供了默认实现。  
  
3.  将 <xref:System.Text.EncodingProvider> 实例传递到 <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> 方法，以使 <xref:System.Text.EncodingProvider> 对象提供的编码可供公共语言运行时使用。  
  
4.  调用 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> 重载以检索编码。 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> 方法将调用相应的 <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> 来确定它是否可以提供请求的编码。  
  
 .NET Framework 类库提供一个静态属性，<xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>，该属性返回一个 <xref:System.Text.EncodingProvider> 对象，该对象可在桌面 .NET Framework 类库可用以 [!INCLUDE[net_core](~/includes/net-core-md.md)] 应用程序。 此外，还可以从 <xref:System.Text.EncodingProvider> 类派生，使自己的编码可用。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/system.text.codepagesencodingprovider.instance(v=vs.110).aspx">System.text.codepagesencodingprovider 属性</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.EncodingProvider" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个编码。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">所请求编码的代码页标识符。</param>
        <summary>返回与指定代码页标识符关联的编码。</summary>
        <returns>与指定代码页关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="codepage" /> 的有效编码，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>对继承者的说明

重写[encoding.getencoding （Int32）](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法以返回 <xref:System.Text.EncodingProvider> 子类支持的编码或编码。 当用户代码通过调用[encoding.getencoding （Int32）](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法尝试检索编码时，该方法会将 `codepage` 标识符传递给每个注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码， [encoding.getencoding （Int32）](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)方法将尝试检索其代码页标识符 `codepage`的缓存编码。 因此，如果 `codepage` 不是你支持的编码的代码页标识符，则该方法应返回 `null`;它永远不会引发异常。
        
请注意，如果 `codepage` 参数的值为0，则还可以选择返回默认代码页。

## <a name="notes-to-callers"></a>调用方说明
        
此方法由[encoding.getencoding （Int32）](<xref:System.Text.Encoding.GetEncoding(System.Int32)>)方法调用。 不应直接从用户代码中调用它。

        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> 方法以返回 <see cref="T:System.Text.EncodingProvider" /> 子类支持的编码或编码。 当用户代码通过调用 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法尝试检索编码时，该方法会将 <paramref name="codepage" /> 标识符传递给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，则 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法尝试检索其代码页标识符 <paramref name="codepage" />的缓存编码。 因此，如果 <paramref name="codepage" /> 不是你支持的编码的代码页标识符，则该方法应返回 <see langword="null" />;它永远不会引发异常。</para></block>
        <block subset="none" type="usage"><para>此方法由 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法调用。 不应直接从用户代码中调用它。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">所请求编码的名称。</param>
        <summary>返回具有指定名称的编码。</summary>
        <returns>与指定名称关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="name" /> 的有效编码，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>对继承者的说明 
                  
重写[encoding.getencoding （String）](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法以返回 <xref:System.Text.EncodingProvider> 子类支持的编码或编码。 当用户代码通过调用[encoding.getencoding （String）](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法尝试检索编码时，方法会将 `name` 参数传递给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码， [encoding.getencoding （String）](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)方法将尝试检索名称为 `name`的缓存编码。 因此，如果 `name` 不是你支持的编码的名称，则该方法应返回 `null`。 方法应引发异常的唯一情况是在 `null``name`。

## <a name="notes-to-callers"></a>调用方说明

此方法由[encoding.getencoding （String）](<xref:System.Text.Encoding.GetEncoding(System.String)>)方法调用。 不应直接从用户代码中调用它。
        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> 方法以返回 <see cref="T:System.Text.EncodingProvider" /> 子类支持的编码或编码。 当用户代码通过调用 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> 方法尝试检索编码时，该方法会将 <paramref name="name" /> 参数传递给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效的编码，则 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> 方法尝试检索名称为 <paramref name="name" />的缓存编码。 因此，如果 <paramref name="name" /> 不是你支持的编码的名称，则该方法应返回 <see langword="null" />。 方法应引发异常的唯一情况是在 <see langword="null" /><paramref name="name" />。</para></block>
        <block subset="none" type="usage"><para>此方法由 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> 方法调用。 不应直接从用户代码中调用它。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncoding (codepage As Integer, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">所请求编码的代码页标识符。</param>
        <param name="encoderFallback">一个对象，在无法用此编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
        <param name="decoderFallback">一个对象，在无法用此编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
        <summary>返回与指定代码页标识符关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
        <returns>与指定代码页关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="codepage" /> 的有效编码，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback` 和 `decoderFallback` 参数是一些对象，这些对象定义在编码器无法将字符转换为字节序列或解码器无法将字节序列转换为字符时所使用的回退策略。 .NET Framework 提供以下回退机制：  
  
-   异常回退。 如果 `encoderFallback` 参数是 <xref:System.Text.EncoderExceptionFallback>的实例，或者 `decoderExceptionFallback` 参数是 <xref:System.Text.DecoderExceptionFallback>的实例，则当无法对字符进行编码时，编码方法会引发异常，并且在无法对字节序列进行解码时，解码方法会引发异常。  
  
-   替换回退。 如果 `encoderFallback` 参数是 <xref:System.Text.EncoderReplacementFallback>的实例，或者 `decoderExceptionFallback` 参数是 <xref:System.Text.DecoderReplacementFallback>的实例，则编码和解码方法将替换不能进行编码的字符的替换字符串，不能对字节序列进行解码。 如果通过调用无参数的构造函数来实例化替换回退对象，则替换字符为 "？"。 如果调用 <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 或 <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数，则可以指定替换字符串。  
  
-   最佳回退。 可以从 <xref:System.Text.EncoderFallback> 或 <xref:System.Text.DecoderFallback> 类派生，以实现最佳的替换机制。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>由于对此方法的调用使用 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> 方法的实现，因此您不必重写它。 当用户代码通过调用 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法尝试检索编码时，该方法会将 <paramref name="codepage" /> 标识符传递给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，则 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法尝试检索其代码页标识符 <paramref name="codepage" />的缓存编码。 因此，如果选择重写 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法，则重写应返回 <see langword="null" /> 如果 <paramref name="codepage" /> 不是你支持的编码的代码页标识符;它永远不会引发异常。</para></block>
        <block subset="none" type="usage"><para>此方法由 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法调用。 不应直接从用户代码中调用它。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncoding (name As String, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">首选编码的名称。</param>
        <param name="encoderFallback">一个对象，在无法用此编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
        <param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
        <summary>返回与指定名称关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
        <returns>与指定名称关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="name" /> 的有效编码，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback` 和 `decoderFallback` 参数是一些对象，这些对象定义在编码器无法将字符转换为字节序列或解码器无法将字节序列转换为字符时所使用的回退策略。 .NET Framework 提供以下回退机制：  
  
-   异常回退。 如果 `encoderFallback` 参数是 <xref:System.Text.EncoderExceptionFallback>的实例，或者 `decoderExceptionFallback` 参数是 <xref:System.Text.DecoderExceptionFallback>的实例，则当无法对字符进行编码时，编码方法会引发异常，并且在无法对字节序列进行解码时，解码方法会引发异常。  
  
-   替换回退。 如果 `encoderFallback` 参数是 <xref:System.Text.EncoderReplacementFallback>的实例，或者 `decoderExceptionFallback` 参数是 <xref:System.Text.DecoderReplacementFallback>的实例，则编码和解码方法将替换不能进行编码的字符的替换字符串，不能对字节序列进行解码。 如果通过调用无参数的构造函数来实例化替换回退对象，则替换字符为 "？"。 如果调用 <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 或 <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数，则可以指定替换字符串。  
  
-   最佳回退。 可以从 <xref:System.Text.EncoderFallback> 或 <xref:System.Text.DecoderFallback> 类派生，以实现最佳的替换机制。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>由于对此方法的调用使用 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> 方法的实现，因此您不必重写它。 当用户代码通过调用 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法尝试检索编码时，该方法会将 <paramref name="codepage" /> 标识符传递给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，则 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法尝试检索其代码页标识符 <paramref name="codepage" />的缓存编码。 因此，如果选择重写 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法，则重写应返回 <see langword="null" /> 如果 <paramref name="codepage" /> 不是你支持的编码的代码页标识符;它永远不会引发异常。</para></block>
        <block subset="none" type="usage"><para>此方法由 <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法调用。 不应直接从用户代码中调用它。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>
