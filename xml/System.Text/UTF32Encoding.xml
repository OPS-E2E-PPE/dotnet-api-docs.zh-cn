<Type Name="UTF32Encoding" FullName="System.Text.UTF32Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67a9e4aec0a955c762ba4ab99ae5b8844ac675e1" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75159344" /></Metadata><TypeSignature Language="C#" Value="public sealed class UTF32Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit UTF32Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF32Encoding" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UTF32Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF32Encoding sealed : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF32Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="35f72-101">表示 Unicode 字符的 UTF-32 编码。</span><span class="sxs-lookup"><span data-stu-id="35f72-101">Represents a UTF-32 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="35f72-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="35f72-103">解码是将编码字节序列转换为一组 Unicode 字符的过程。</span><span class="sxs-lookup"><span data-stu-id="35f72-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="35f72-104">[Unicode 标准](https://go.microsoft.com/fwlink/?linkid=37123)为每个受支持脚本中的每个字符分配一个码位（数字）。</span><span class="sxs-lookup"><span data-stu-id="35f72-104">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="35f72-105">Unicode 转换格式（UTF）是对该码位进行编码的一种方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="35f72-106">[Unicode 标准](https://go.microsoft.com/fwlink/?linkid=37123)使用以下 UTFs：</span><span class="sxs-lookup"><span data-stu-id="35f72-106">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="35f72-107">UTF-8，它将每个码位表示为一至四个字节的序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="35f72-108">UTF-16，它将每个码位表示为一个到 2 16 位整数的序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="35f72-109">32，它将每个码位表示为32位整数。</span><span class="sxs-lookup"><span data-stu-id="35f72-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="35f72-110">有关 <xref:System.Text>支持的 UTFs 和其他编码的详细信息，请参阅[.net 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="35f72-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>
  
 <span data-ttu-id="35f72-111"><xref:System.Text.UTF32Encoding> 类表示32编码。</span><span class="sxs-lookup"><span data-stu-id="35f72-111">The <xref:System.Text.UTF32Encoding> class represents a UTF-32 encoding.</span></span> <span data-ttu-id="35f72-112">编码器可以使用大字节序字节顺序（首先是最高有效字节）或 little endian 字节顺序（首先是最小有效字节）。</span><span class="sxs-lookup"><span data-stu-id="35f72-112">The encoder can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first).</span></span> <span data-ttu-id="35f72-113">例如，拉丁文大写字母 A （码位 U + 0041）按以下方式序列化（十六进制）：</span><span class="sxs-lookup"><span data-stu-id="35f72-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="35f72-114">大 endian 字节顺序： 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="35f72-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="35f72-115">小 endian 字节顺序： 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="35f72-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="35f72-116">使用本机字节顺序存储 Unicode 字符通常更有效。</span><span class="sxs-lookup"><span data-stu-id="35f72-116">It is generally more efficient to store Unicode characters using the native byte order.</span></span> <span data-ttu-id="35f72-117">例如，最好使用 little endian 平台（如 Intel 计算机）上的 little endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="35f72-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="35f72-118"><xref:System.Text.UTF32Encoding> 对应于 Windows 代码页12000（little endian 字节顺序）和12001（大 endian 字节顺序）。</span><span class="sxs-lookup"><span data-stu-id="35f72-118"><xref:System.Text.UTF32Encoding> corresponds to the Windows code pages 12000 (little endian byte order) and 12001 (big endian byte order).</span></span> <span data-ttu-id="35f72-119">可以通过调用 <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> 方法来确定特定体系结构的 "endian"。</span><span class="sxs-lookup"><span data-stu-id="35f72-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="35f72-120">（可选） <xref:System.Text.UTF32Encoding> 对象提供字节顺序标记（BOM），这是一个字节数组，可以作为编码过程中所产生的字节序列的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-120">Optionally, the <xref:System.Text.UTF32Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="35f72-121">如果前导头包含字节顺序标记（BOM），则它有助于解码器确定字节数组的字节顺序和转换格式。</span><span class="sxs-lookup"><span data-stu-id="35f72-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF of a byte array.</span></span>  
  
 <span data-ttu-id="35f72-122">如果<xref:System.Text.UTF32Encoding>实例配置为提供 BOM，可以通过调用检索<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法; 否则，该方法返回空数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-122">If the <xref:System.Text.UTF32Encoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="35f72-123">请注意，即使<xref:System.Text.UTF32Encoding>BOM 支持的配置对象时，必须包含 BOM 将编码的字节流作为相应; 开头的编码方法<xref:System.Text.UTF32Encoding>类执行未自动执行此操作。</span><span class="sxs-lookup"><span data-stu-id="35f72-123">Note that, even if a <xref:System.Text.UTF32Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF32Encoding> class do not do this automatically.</span></span>  

> [!CAUTION]  
> <span data-ttu-id="35f72-124">若要启用错误检测并使类实例更安全，应通过调用 <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 构造函数并将其 `throwOnInvalidBytes` 参数设置为 `true`来实例化 <xref:System.Text.UTF32Encoding> 的对象。</span><span class="sxs-lookup"><span data-stu-id="35f72-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UTF32Encoding> object by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="35f72-125">使用错误检测时，检测到无效字符或字节序列的方法会引发 <xref:System.ArgumentException> 异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-125">With error detection, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="35f72-126">如果未检测到错误，则不会引发异常，并且通常会忽略无效序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="35f72-127">您可以通过多种方式实例化 <xref:System.Text.UTF32Encoding> 对象，具体取决于您是否希望它提供字节顺序标记（BOM）、是否需要使用大字节序或小字节序编码，以及是否要启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="35f72-127">You can instantiate a <xref:System.Text.UTF32Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="35f72-128">下表列出了 <xref:System.Text.UTF32Encoding> 构造函数和返回 <xref:System.Text.UnicodeEncoding> 对象的 <xref:System.Text.Encoding> 属性。</span><span class="sxs-lookup"><span data-stu-id="35f72-128">The following table lists the <xref:System.Text.UTF32Encoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="35f72-129">成员</span><span class="sxs-lookup"><span data-stu-id="35f72-129">Member</span></span>|<span data-ttu-id="35f72-130">字节排序方式</span><span class="sxs-lookup"><span data-stu-id="35f72-130">Endianness</span></span>|<span data-ttu-id="35f72-131">BOM</span><span class="sxs-lookup"><span data-stu-id="35f72-131">BOM</span></span>|<span data-ttu-id="35f72-132">错误检测</span><span class="sxs-lookup"><span data-stu-id="35f72-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>|<span data-ttu-id="35f72-133">小字节序</span><span class="sxs-lookup"><span data-stu-id="35f72-133">Little-endian</span></span>|<span data-ttu-id="35f72-134">是</span><span class="sxs-lookup"><span data-stu-id="35f72-134">Yes</span></span>|<span data-ttu-id="35f72-135">否（替换回退）</span><span class="sxs-lookup"><span data-stu-id="35f72-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="35f72-136">小字节序</span><span class="sxs-lookup"><span data-stu-id="35f72-136">Little-endian</span></span>|<span data-ttu-id="35f72-137">是</span><span class="sxs-lookup"><span data-stu-id="35f72-137">Yes</span></span>|<span data-ttu-id="35f72-138">否（替换回退）</span><span class="sxs-lookup"><span data-stu-id="35f72-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="35f72-139">可配置</span><span class="sxs-lookup"><span data-stu-id="35f72-139">Configurable</span></span>|<span data-ttu-id="35f72-140">可配置</span><span class="sxs-lookup"><span data-stu-id="35f72-140">Configurable</span></span>|<span data-ttu-id="35f72-141">否（替换回退）</span><span class="sxs-lookup"><span data-stu-id="35f72-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="35f72-142">可配置</span><span class="sxs-lookup"><span data-stu-id="35f72-142">Configurable</span></span>|<span data-ttu-id="35f72-143">可配置</span><span class="sxs-lookup"><span data-stu-id="35f72-143">Configurable</span></span>|<span data-ttu-id="35f72-144">可配置</span><span class="sxs-lookup"><span data-stu-id="35f72-144">Configurable</span></span>|  
  
 <span data-ttu-id="35f72-145"><xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法确定导致对一组 Unicode 字符进行编码的字节数，并且 <xref:System.Text.UTF32Encoding.GetBytes%2A> 方法执行实际编码。</span><span class="sxs-lookup"><span data-stu-id="35f72-145">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF32Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="35f72-146">同样，<xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法决定了多少个字符会导致对一个字节序列进行解码，而 <xref:System.Text.UTF32Encoding.GetChars%2A> 和 <xref:System.Text.UTF32Encoding.GetString%2A> 方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="35f72-146">Likewise, the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF32Encoding.GetChars%2A> and <xref:System.Text.UTF32Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="35f72-147">对于可以在编码或解码跨多个块的数据时保存状态信息的编码器或解码器（例如，100000个字符段中编码的1000000个字符），请分别使用 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 和 <xref:System.Text.UTF32Encoding.GetDecoder%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="35f72-147">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF32Encoding.GetEncoder%2A> and <xref:System.Text.UTF32Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-148">下面的示例演示了如何启用和未启用错误检测的 <xref:System.Text.UTF32Encoding> 对象的行为。</span><span class="sxs-lookup"><span data-stu-id="35f72-148">The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding> objects with and without error detection enabled.</span></span> <span data-ttu-id="35f72-149">它会创建其最后四个字节表示无效代理项对的字节数组;高代理项 U + D8FF 后面是 U + 01FF，它不在低代理项（0xDC00 到0xDFFF）的范围内。</span><span class="sxs-lookup"><span data-stu-id="35f72-149">It creates a byte array whose last four bytes represent an invalid surrogate pair; the high surrogate U+D8FF is followed by an U+01FF, which is outside the range of low surrogates (0xDC00 through 0xDFFF).</span></span> <span data-ttu-id="35f72-150">如果未检测到错误，UTF32 解码器将使用替代回退来替换无效的代理项对替换字符（U + FFFD）。</span><span class="sxs-lookup"><span data-stu-id="35f72-150">Without error detection, the UTF32 decoder uses replacement fallback to replace the invalid surrogate pair with REPLACEMENT CHARACTER (U+FFFD).</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 <span data-ttu-id="35f72-151">下面的示例使用 <xref:System.Text.UTF32Encoding> 对象将 Unicode 字符的字符串编码为字节数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-151">The following example encodes a string of Unicode characters into a byte array by using a <xref:System.Text.UTF32Encoding> object.</span></span> <span data-ttu-id="35f72-152">然后，将字节数组解码为字符串，以表明不会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="35f72-152">The byte array is then decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/snippet.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/snippet.vb#1)]  
  
 <span data-ttu-id="35f72-153">下面的示例使用与前一个相同的字符串，只不过它将已编码的字节写入文件，并使用字节顺序标记（BOM）作为字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="35f72-154">它然后两个不同的方式读取文件： 为通过使用文本文件<xref:System.IO.StreamReader>对象; 和二进制文件。 如您所料，在两种情况下是 BOM 包括在新读取字符串。</span><span class="sxs-lookup"><span data-stu-id="35f72-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="35f72-155">正如您所料，新读取的字符串都不包含 BOM。</span><span class="sxs-lookup"><span data-stu-id="35f72-155">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/bom1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Text.UnicodeEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="35f72-156">了解编码</span><span class="sxs-lookup"><span data-stu-id="35f72-156">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="35f72-157">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="35f72-157">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="35f72-158">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="35f72-158">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-159">此构造函数创建一个使用 little endian 字节顺序的实例，提供一个 Unicode 字节顺序标记，并在检测到无效的编码时不引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-159">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="35f72-160">出于安全原因，应通过调用 <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 构造函数并将其 `throwOnInvalidCharacters` 参数设置为 `true`来启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="35f72-160">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-161">下面的示例检索并显示不同 <xref:System.Text.UTF32Encoding> 实例的字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="35f72-161">The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF32Encoding : bool * bool -&gt; System.Text.UTF32Encoding" Usage="new System.Text.UTF32Encoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="35f72-162">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</span><span class="sxs-lookup"><span data-stu-id="35f72-162"><see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="35f72-163">如果为 <see langword="true" />，则指定提供 Unicode 字节顺序标记；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-163"><see langword="true" /> to specify that a Unicode byte order mark is provided; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="35f72-164">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="35f72-164">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span> <span data-ttu-id="35f72-165">参数指定是否使用 Big-Endian 字节顺序以及 <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> 方法是否返回 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="35f72-165">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> method returns a Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-166">此构造函数创建一个实例，该实例在检测到无效的编码时不引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-166">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="35f72-167">出于安全原因，应通过调用 <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 构造函数并将其 `throwOnInvalidCharacters` 参数设置为 `true`来启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="35f72-167">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
## Examples  
 <span data-ttu-id="35f72-168">下面的示例检索并显示不同 <xref:System.Text.UTF32Encoding> 实例的字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="35f72-168">The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidCharacters As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF32Encoding : bool * bool * bool -&gt; System.Text.UTF32Encoding" Usage="new System.Text.UTF32Encoding (bigEndian, byteOrderMark, throwOnInvalidCharacters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="35f72-169">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</span><span class="sxs-lookup"><span data-stu-id="35f72-169"><see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="35f72-170">如果为 <see langword="true" />，则指定提供 Unicode 字节顺序标记；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-170"><see langword="true" /> to specify that a Unicode byte order mark is provided; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidCharacters"><span data-ttu-id="35f72-171">如果为 <see langword="true" />，则指定在检测到无效的编码时应当引发异常；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-171"><see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="35f72-172">初始化 <see cref="T:System.Text.UTF32Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="35f72-172">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span> <span data-ttu-id="35f72-173">参数指定是否使用 Big-Endian 字节顺序、是否提供 Unicode 字节顺序标记以及当检测到无效编码时是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-173">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-174">如果 `true``throwOnInvalidCharacters`，则检测无效字节序列的方法将引发 <xref:System.ArgumentException?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="35f72-174">If `throwOnInvalidCharacters` is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="35f72-175">否则，该方法不会引发异常，并且忽略无效序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-175">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="35f72-176">出于安全原因，应通过调用 <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 构造函数并将其 `throwOnInvalidCharacters` 参数设置为 `true`来启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="35f72-176">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>
  
## Examples  
 <span data-ttu-id="35f72-177">下面的示例演示了 <xref:System.Text.UTF32Encoding>的行为，同时启用了错误检测，并且未启用。</span><span class="sxs-lookup"><span data-stu-id="35f72-177">The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF32Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="35f72-178">要与当前对象进行比较的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-178">The <see cref="T:System.Object" /> to compare with the current object.</span></span></param>
        <summary><span data-ttu-id="35f72-179">确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Text.UTF32Encoding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="35f72-179">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UTF32Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="35f72-180">如果 <see langword="true" /> 是 <paramref name="value" /> 的一个实例并且等于当前对象，则为 <see cref="T:System.Text.UTF32Encoding" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-180"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF32Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-181">如果满足以下所有条件，则将两个 <xref:System.Text.UTF32Encoding> 对象视为相等：</span><span class="sxs-lookup"><span data-stu-id="35f72-181">Two <xref:System.Text.UTF32Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="35f72-182">这两个对象使用相同的字节顺序。</span><span class="sxs-lookup"><span data-stu-id="35f72-182">Both objects use the same byte order.</span></span>  
  
-   <span data-ttu-id="35f72-183">这两个对象都提供字节顺序标记，或都不提供。</span><span class="sxs-lookup"><span data-stu-id="35f72-183">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="35f72-184">这两个对象都使用同一编码器回退。</span><span class="sxs-lookup"><span data-stu-id="35f72-184">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="35f72-185">这两个对象都使用同一解码器回退。</span><span class="sxs-lookup"><span data-stu-id="35f72-185">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-186">下面的示例使用不同的参数值创建 <xref:System.Text.UTF32Encoding> 对象，然后检查它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="35f72-186">The following example creates <xref:System.Text.UTF32Encoding> objects using different parameter values and then checks them for equality.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="35f72-187">计算对一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-187">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF32Encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="35f72-188">包含要编码的字符集的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-188">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="35f72-189">计算对指定 <see cref="T:System.String" /> 中的字符进行编码时所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-189">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="35f72-190">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-190">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-191">若要计算 <xref:System.Text.UTF32Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-191">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="35f72-192">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-192">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="35f72-193"><xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-193">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-194">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-194">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-195">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-195">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-196">若要确保已编码的字节在另存为文件或流时正确解码，可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-196">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="35f72-197">将前导头插入字节流的开头（例如，在要写入文件的字节序列的开头），就是开发人员的责任，而前导码中的字节数不会反映 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="35f72-197">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-198">下面的示例调用 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 和 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> 方法来计算编码字符串所需的最大和实际字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-198">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="35f72-199">它还显示存储具有字节顺序标记的字节流所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-199">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-200"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-200"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-201">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="35f72-201">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-202">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-202">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="35f72-203">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-203">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-204">和</span><span class="sxs-lookup"><span data-stu-id="35f72-204">-and-</span></span> 
 <span data-ttu-id="35f72-205">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-205"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF32Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="35f72-206">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="35f72-206">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="35f72-207">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="35f72-207">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="35f72-208">计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-208">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="35f72-209">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-209">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-210">若要计算 <xref:System.Text.UTF32Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-210">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="35f72-211">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="35f72-211">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="35f72-212"><xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-212">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-213">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-213">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-214">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-214">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-215">若要确保已编码的字节在另存为文件或流时正确解码，可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-215">To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="35f72-216">在字节流的开头插入前导码（例如，在要写入文件的字节序列的开头），开发人员负责责任，而前导码中的字节数不会反映 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="35f72-216">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-217"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-217"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-218"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-218"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-219">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-219">-or-</span></span> 
<span data-ttu-id="35f72-220">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="35f72-220">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-221">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-221">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="35f72-222">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-222">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-223">和</span><span class="sxs-lookup"><span data-stu-id="35f72-223">-and-</span></span> 
 <span data-ttu-id="35f72-224">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-224"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="35f72-225">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="35f72-225">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="35f72-226">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="35f72-226">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF32Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="35f72-227">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-227">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="35f72-228">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-228">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="35f72-229">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="35f72-229">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="35f72-230">计算对指定字符数组中的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-230">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="35f72-231">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-231">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-232">若要计算 <xref:System.Text.UTF32Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-232">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="35f72-233">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-233">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="35f72-234"><xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-234">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-235">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-235">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-236">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-236">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-237">若要确保已编码的字节在另存为文件或流时正确解码，可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-237">To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="35f72-238">在字节流的开头插入前导码（例如，在要写入文件的字节序列的开头），开发人员负责责任，而前导码中的字节数不会反映 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="35f72-238">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-239">下面的示例使用拉丁文大写和小写字符填充数组，并调用 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 方法来确定编码拉丁小写字符所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-239">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="35f72-240">然后，它会显示此信息以及在添加字节顺序标记时所需的总字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-240">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="35f72-241">它将此数字与 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 方法返回的值进行比较，该方法指示对拉丁小写字符进行编码所需的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-241">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="35f72-242">下面的示例使用希腊语和西里尔字符的组合填充数组，并调用 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 方法来确定编码西里尔字符所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-242">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="35f72-243">然后，它会显示此信息以及在添加字节顺序标记时所需的总字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-243">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="35f72-244">它将此数字与 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 方法返回的值进行比较，该方法指示对西里尔字符进行编码所需的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-244">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-245"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-245"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-246"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-246"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-247">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-247">-or-</span></span> 
 <span data-ttu-id="35f72-248"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="35f72-248"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="35f72-249">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-249">-or-</span></span> 
<span data-ttu-id="35f72-250">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="35f72-250">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-251">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-251">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="35f72-252">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-252">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-253">和</span><span class="sxs-lookup"><span data-stu-id="35f72-253">-and-</span></span> 
 <span data-ttu-id="35f72-254">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-254"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="35f72-255">将一组字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-255">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF32Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="35f72-256">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="35f72-256">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="35f72-257">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="35f72-257">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="35f72-258">一个指针，指向开始写入所产生的字节序列的位置。</span><span class="sxs-lookup"><span data-stu-id="35f72-258">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f72-259">要写入的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-259">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="35f72-260">将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-260">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="35f72-261">在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-261">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-262">若要计算 <xref:System.Text.UTF32Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-262">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="35f72-263">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-263">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="35f72-264"><xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-264">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-265">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-265">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-266">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-266">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-267">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="35f72-267">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="35f72-268">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序将分别使用 <xref:System.Text.UTF32Encoding.GetDecoder%2A> 方法或 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 方法提供的 <xref:System.Text.Decoder> 或 <xref:System.Text.Encoder>。</span><span class="sxs-lookup"><span data-stu-id="35f72-268">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="35f72-269">若要确保已编码的字节在另存为文件或流时正确解码，可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-269">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="35f72-270">在字节流的开头插入前导码（如要写入文件的字节序列的开头）是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="35f72-270">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="35f72-271"><xref:System.Text.UTF32Encoding.GetBytes%2A> 方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="35f72-271">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-272"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-272"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="35f72-273">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-273">-or-</span></span> 
 <span data-ttu-id="35f72-274"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-274"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-275"><paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-275"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-276">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-276">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="35f72-277">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-277">-or-</span></span> 
 <span data-ttu-id="35f72-278"><paramref name="byteCount" /> 少于所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-278"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="35f72-279">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-279">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-280">和</span><span class="sxs-lookup"><span data-stu-id="35f72-280">-and-</span></span> 
 <span data-ttu-id="35f72-281">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-281"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="35f72-282">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="35f72-282">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="35f72-283">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="35f72-283">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF32Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="35f72-284">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-284">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="35f72-285">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-285">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="35f72-286">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="35f72-286">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="35f72-287">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-287">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="35f72-288">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="35f72-288">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="35f72-289">将指定字符数组中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="35f72-289">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="35f72-290">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-290">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-291">若要计算 <xref:System.Text.UTF32Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-291">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="35f72-292">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-292">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="35f72-293"><xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-293">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-294">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-294">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-295">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-295">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-296">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="35f72-296">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="35f72-297">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序将分别使用 <xref:System.Text.UTF32Encoding.GetDecoder%2A> 方法或 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 方法提供的 <xref:System.Text.Decoder> 或 <xref:System.Text.Encoder>。</span><span class="sxs-lookup"><span data-stu-id="35f72-297">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="35f72-298">若要确保已编码的字节在另存为文件或流时正确解码，可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-298">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="35f72-299">在字节流的开头插入前导码（如要写入文件的字节序列的开头）是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="35f72-299">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="35f72-300"><xref:System.Text.UTF32Encoding.GetBytes%2A> 方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="35f72-300">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>
  
## Examples  
 <span data-ttu-id="35f72-301">下面的示例确定编码字符数组中的三个字符所需的字节数，然后对字符进行编码并显示生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-301">The following example determines the number of bytes required to encode three characters from a character array, then encodes the characters and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/VB/GetBytes_CharArr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-302"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-302"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="35f72-303">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-303">-or-</span></span> 
 <span data-ttu-id="35f72-304"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-304"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-305"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-305"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-306">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-306">-or-</span></span> 
 <span data-ttu-id="35f72-307"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="35f72-307"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="35f72-308">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-308">-or-</span></span> 
 <span data-ttu-id="35f72-309"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-309"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-310">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-310">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="35f72-311">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-311">-or-</span></span> 
 <span data-ttu-id="35f72-312"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="35f72-312"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="35f72-313">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-313">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-314">和</span><span class="sxs-lookup"><span data-stu-id="35f72-314">-and-</span></span> 
 <span data-ttu-id="35f72-315">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-315"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF32Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="35f72-316">包含要编码的字符集的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-316">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="35f72-317">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-317">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="35f72-318">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="35f72-318">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="35f72-319">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-319">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="35f72-320">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="35f72-320">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="35f72-321">将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="35f72-321">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="35f72-322">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-322">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-323">若要计算 <xref:System.Text.UTF32Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-323">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="35f72-324">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-324">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="35f72-325"><xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-325">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-326">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-326">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-327">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-327">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-328">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="35f72-328">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="35f72-329">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序将分别使用 <xref:System.Text.UTF32Encoding.GetDecoder%2A> 方法或 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 方法提供的 <xref:System.Text.Decoder> 或 <xref:System.Text.Encoder>。</span><span class="sxs-lookup"><span data-stu-id="35f72-329">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="35f72-330">若要确保已编码的字节在另存为文件或流时正确解码，可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-330">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="35f72-331">在字节流的开头插入前导码（如要写入文件的字节序列的开头）是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="35f72-331">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="35f72-332"><xref:System.Text.UTF32Encoding.GetBytes%2A> 方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="35f72-332">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>
  
## Examples  
 <span data-ttu-id="35f72-333">下面的示例确定编码字符串所需的字节数，然后对字符串进行编码并显示生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-333">The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-334"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-334"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="35f72-335">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-335">-or-</span></span> 
 <span data-ttu-id="35f72-336"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-336"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-337"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-337"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-338">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-338">-or-</span></span> 
 <span data-ttu-id="35f72-339"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="35f72-339"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="35f72-340">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-340">-or-</span></span> 
 <span data-ttu-id="35f72-341"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-341"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-342">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-342">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="35f72-343">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-343">-or-</span></span> 
 <span data-ttu-id="35f72-344"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="35f72-344"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="35f72-345">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-345">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-346">和</span><span class="sxs-lookup"><span data-stu-id="35f72-346">-and-</span></span> 
 <span data-ttu-id="35f72-347">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-347"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="35f72-348">计算对一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-348">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF32Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="35f72-349">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="35f72-349">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="35f72-350">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-350">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="35f72-351">计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-351">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="35f72-352">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-352">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-353"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 计算 <xref:System.Text.UTF32Encoding.GetChars%2A> 方法存储所生成的字符所需的精确数组大小。</span><span class="sxs-lookup"><span data-stu-id="35f72-353"><xref:System.Text.UTF32Encoding.GetCharCount%2A> calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters.</span></span> <span data-ttu-id="35f72-354">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-354">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="35f72-355"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-355">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-356">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-356">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-357">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-357">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-358"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-358"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-359"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-359"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-360">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-360">-or-</span></span> 
<span data-ttu-id="35f72-361">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="35f72-361">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-362">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-362">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="35f72-363">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-363">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-364">和</span><span class="sxs-lookup"><span data-stu-id="35f72-364">-and-</span></span> 
 <span data-ttu-id="35f72-365">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-365"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="35f72-366">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="35f72-366">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="35f72-367">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="35f72-367">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF32Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="35f72-368">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-368">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="35f72-369">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-369">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="35f72-370">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-370">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="35f72-371">计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-371">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="35f72-372">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-372">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-373"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法计算 <xref:System.Text.UTF32Encoding.GetChars%2A> 方法存储所生成的字符所需的精确数组大小。</span><span class="sxs-lookup"><span data-stu-id="35f72-373">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters.</span></span> <span data-ttu-id="35f72-374">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-374">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="35f72-375"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-375">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-376">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-376">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-377">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-377">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-378">下面的示例将字符串编码为一个字节数组，然后将这些字节解码为一个字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-378">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-379"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-379"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-380"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-380"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-381">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-381">-or-</span></span> 
 <span data-ttu-id="35f72-382"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="35f72-382"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="35f72-383">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-383">-or-</span></span> 
<span data-ttu-id="35f72-384">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="35f72-384">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-385">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-385">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="35f72-386">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-386">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-387">和</span><span class="sxs-lookup"><span data-stu-id="35f72-387">-and-</span></span> 
 <span data-ttu-id="35f72-388">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-388"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="35f72-389">将一个字节序列解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="35f72-389">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF32Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="35f72-390">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="35f72-390">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f72-391">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-391">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="35f72-392">一个指针，指向开始写入所产生的字符集的位置。</span><span class="sxs-lookup"><span data-stu-id="35f72-392">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="35f72-393">要写入的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-393">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="35f72-394">将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</span><span class="sxs-lookup"><span data-stu-id="35f72-394">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="35f72-395">在由 <paramref name="chars" /> 指示的位置处写入的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-395">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-396">若要计算 <xref:System.Text.UTF32Encoding.GetChars%2A> 存储所生成的字符所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-396">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="35f72-397">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-397">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="35f72-398"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-398">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-399">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-399">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-400">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-400">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-401">如果要解码的字节范围包含字节顺序标记（BOM），并且字节数组由非 BOM 感知类型的方法返回，则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="35f72-401">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="35f72-402">可以通过调用 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 方法来删除它。</span><span class="sxs-lookup"><span data-stu-id="35f72-402">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="35f72-403">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="35f72-403">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="35f72-404">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序将分别使用 <xref:System.Text.UTF32Encoding.GetDecoder%2A> 方法或 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 方法提供的 <xref:System.Text.Decoder> 或 <xref:System.Text.Encoder>。</span><span class="sxs-lookup"><span data-stu-id="35f72-404">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-405"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-405"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="35f72-406">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-406">-or-</span></span> 
 <span data-ttu-id="35f72-407"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-407"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-408"><paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-408"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-409">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-409">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="35f72-410">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-410">-or-</span></span> 
 <span data-ttu-id="35f72-411"><paramref name="charCount" /> 少于所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-411"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="35f72-412">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-412">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-413">和</span><span class="sxs-lookup"><span data-stu-id="35f72-413">-and-</span></span> 
 <span data-ttu-id="35f72-414">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-414"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="35f72-415">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="35f72-415">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="35f72-416">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="35f72-416">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF32Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="35f72-417">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-417">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="35f72-418">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-418">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="35f72-419">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-419">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="35f72-420">要用于包含所产生的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-420">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="35f72-421">开始写入所产生的字符集的索引位置。</span><span class="sxs-lookup"><span data-stu-id="35f72-421">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="35f72-422">将指定字节数组中的一个字节序列解码为指定的字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-422">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="35f72-423">写入 <paramref name="chars" /> 的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-423">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-424">若要计算 <xref:System.Text.UTF32Encoding.GetChars%2A> 存储所生成的字符所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-424">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="35f72-425">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-425">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="35f72-426"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-426">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-427">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-427">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-428">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-428">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-429">如果要解码的字节范围包含字节顺序标记（BOM），并且字节数组由非 BOM 感知类型的方法返回，则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="35f72-429">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="35f72-430">可以通过调用 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 方法来删除它。</span><span class="sxs-lookup"><span data-stu-id="35f72-430">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="35f72-431">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="35f72-431">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="35f72-432">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序将分别使用 <xref:System.Text.UTF32Encoding.GetDecoder%2A> 方法或 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 方法提供的 <xref:System.Text.Decoder> 或 <xref:System.Text.Encoder>。</span><span class="sxs-lookup"><span data-stu-id="35f72-432">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-433">下面的示例将字符串编码为一个字节数组，然后将这些字节解码为一个字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-433">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-434"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-434"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="35f72-435">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-435">-or-</span></span> 
 <span data-ttu-id="35f72-436"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-436"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-437"><paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-437"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-438">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-438">-or-</span></span> 
 <span data-ttu-id="35f72-439"><paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="35f72-439"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="35f72-440">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-440">-or-</span></span> 
 <span data-ttu-id="35f72-441"><paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-441"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-442">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-442">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="35f72-443">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-443">-or-</span></span> 
 <span data-ttu-id="35f72-444"><paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="35f72-444"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="35f72-445">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-445">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-446">和</span><span class="sxs-lookup"><span data-stu-id="35f72-446">-and-</span></span> 
 <span data-ttu-id="35f72-447">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-447"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF32Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="35f72-448">获取可以将 UTF-32 编码的字节序列转换为 Unicode 字符序列的解码器。</span><span class="sxs-lookup"><span data-stu-id="35f72-448">Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="35f72-449">一个 <see cref="T:System.Text.Decoder" />，用于将 UTF-32 编码的字节序列转换为 Unicode 字符序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-449">A <see cref="T:System.Text.Decoder" /> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-450"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 方法以类似于 <xref:System.Text.UTF32Encoding.GetChars%2A> 方法的方式将连续字节块转换为连续的字符块。</span><span class="sxs-lookup"><span data-stu-id="35f72-450">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF32Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="35f72-451">但 <xref:System.Text.Decoder> 会在调用之间维护状态信息，因此它可以正确地对跨块的字节序列进行解码。</span><span class="sxs-lookup"><span data-stu-id="35f72-451">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="35f72-452"><xref:System.Text.Decoder> 还将保留数据块末尾的尾随字节，并在下一个解码操作中使用尾随字节。</span><span class="sxs-lookup"><span data-stu-id="35f72-452">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="35f72-453">因此，<xref:System.Text.UTF32Encoding.GetDecoder%2A> 和 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 对于网络传输和文件操作非常有用，因为这些操作经常处理数据块，而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="35f72-453">Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="35f72-454">如果启用了错误检测，即构造函数的 `throwOnInvalidCharacters` 参数设置为 `true`，则在此方法返回的 <xref:System.Text.Decoder> 中也将启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="35f72-454">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="35f72-455">如果启用了错误检测，并且遇到了无效的序列，则解码器的状态不确定，必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="35f72-455">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-456">下面的示例使用编码器和解码器将字符串编码为字节数组，然后将这些字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-456">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="35f72-457">了解编码</span><span class="sxs-lookup"><span data-stu-id="35f72-457">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF32Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="35f72-458">获取可将 Unicode 字符序列转换为 UTF-32 编码的字节序列的编码器。</span><span class="sxs-lookup"><span data-stu-id="35f72-458">Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="35f72-459">一个 <see cref="T:System.Text.Encoder" />，用于将 Unicode 字符序列转换为 UTF-32 编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-459">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-460"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> 方法以类似于 <xref:System.Text.UTF32Encoding.GetBytes%2A> 方法的方式将顺序块字符转换为按顺序排列的字节块。</span><span class="sxs-lookup"><span data-stu-id="35f72-460">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF32Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="35f72-461">但 <xref:System.Text.Encoder> 会在调用之间维护状态信息，因此它可以正确地对跨块的字符序列进行编码。</span><span class="sxs-lookup"><span data-stu-id="35f72-461">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="35f72-462"><xref:System.Text.Encoder> 还在数据块的末尾保留尾部字符，并在下一编码操作中使用尾随字符。</span><span class="sxs-lookup"><span data-stu-id="35f72-462">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="35f72-463">例如，数据块可能以不匹配的高代理项结束，并且匹配的低代理项可能在下一个数据块中。</span><span class="sxs-lookup"><span data-stu-id="35f72-463">For example, a data block might end with an unmatched high-surrogate, and the matching low-surrogate might be in the next data block.</span></span> <span data-ttu-id="35f72-464">因此，<xref:System.Text.UTF32Encoding.GetDecoder%2A> 和 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 对于网络传输和文件操作非常有用，因为这些操作经常处理数据块，而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="35f72-464">Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="35f72-465">如果启用了错误检测，即构造函数的 `throwOnInvalidCharacters` 参数设置为 `true`，则在此方法返回的 <xref:System.Text.Encoder> 中也将启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="35f72-465">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="35f72-466">如果启用了错误检测，并且遇到了无效的序列，则编码器的状态为 "未定义"，并且必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="35f72-466">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-467">下面的示例使用编码器和解码器将字符串编码为字节数组，然后将这些字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-467">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="35f72-468">了解编码</span><span class="sxs-lookup"><span data-stu-id="35f72-468">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF32Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="35f72-469">返回当前实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="35f72-469">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="35f72-470">当前 <see cref="T:System.Text.UTF32Encoding" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="35f72-470">The hash code for the current <see cref="T:System.Text.UTF32Encoding" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF32Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="35f72-471">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="35f72-471">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="35f72-472">计算对指定数目的字符进行编码时产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-472">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="35f72-473">对指定数目的字符进行编码所产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-473">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-474">若要计算 <xref:System.Text.UTF32Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-474">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="35f72-475">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-475">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="35f72-476"><xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-476">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-477"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 是最差的事例数，包括当前所选 <xref:System.Text.EncoderFallback>的最坏情况。</span><span class="sxs-lookup"><span data-stu-id="35f72-477"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="35f72-478">如果使用可能大的字符串选择回退，<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 可以返回大值。</span><span class="sxs-lookup"><span data-stu-id="35f72-478">If a fallback is chosen with a potentially large string,  <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="35f72-479">在大多数情况下，此方法为小字符串返回合理的数字。</span><span class="sxs-lookup"><span data-stu-id="35f72-479">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="35f72-480">对于大字符串，可能需要在超过更合理缓冲区的罕见情况下，在使用非常大的缓冲区和捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="35f72-480">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="35f72-481">你可能还需要考虑使用不同的方法，并使用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 或 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="35f72-481">You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="35f72-482"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 与 <xref:System.Text.UTF32Encoding.GetChars%2A>没有关系。</span><span class="sxs-lookup"><span data-stu-id="35f72-482"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> has no relationship to <xref:System.Text.UTF32Encoding.GetChars%2A>.</span></span> <span data-ttu-id="35f72-483">如果需要一个类似的函数用于 <xref:System.Text.UTF32Encoding.GetChars%2A>，请使用 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="35f72-483">If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetChars%2A>, use <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="35f72-484">`GetMaxByteCount(N)` 不一定与 `N* GetMaxByteCount(1)`相同。</span><span class="sxs-lookup"><span data-stu-id="35f72-484">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
## Examples  
 <span data-ttu-id="35f72-485">下面的示例确定编码字符串所需的字节数，然后对字符串进行编码并显示生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-485">The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-486"><paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-486"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-487">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-487">-or-</span></span> 
<span data-ttu-id="35f72-488">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="35f72-488">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="35f72-489">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-489">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-490">和</span><span class="sxs-lookup"><span data-stu-id="35f72-490">-and-</span></span> 
 <span data-ttu-id="35f72-491">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-491"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF32Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="35f72-492">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-492">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="35f72-493">计算对指定数目的字节进行解码时产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-493">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="35f72-494">对指定数目的字节进行解码时所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="35f72-494">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-495">若要计算 <xref:System.Text.UTF32Encoding.GetChars%2A> 存储所生成的字符所需的确切数组大小，请调用 <xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-495">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="35f72-496">若要计算最大数组大小，请调用 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="35f72-496">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="35f72-497"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 方法通常分配较少的内存，而 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="35f72-497">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="35f72-498"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 是最差的事例数，包括当前所选 <xref:System.Text.DecoderFallback>的最坏情况。</span><span class="sxs-lookup"><span data-stu-id="35f72-498"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="35f72-499">如果使用可能大的字符串选择回退，<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 可以返回大值。</span><span class="sxs-lookup"><span data-stu-id="35f72-499">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="35f72-500">在大多数情况下，此方法为小字符串返回合理的数字。</span><span class="sxs-lookup"><span data-stu-id="35f72-500">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="35f72-501">对于大字符串，可能需要在超过更合理缓冲区的罕见情况下，在使用非常大的缓冲区和捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="35f72-501">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="35f72-502">你可能还需要考虑使用不同的方法，并使用 <xref:System.Text.UTF32Encoding.GetCharCount%2A> 或 <xref:System.Text.Decoder.Convert%2A>。</span><span class="sxs-lookup"><span data-stu-id="35f72-502">You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="35f72-503"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 与 <xref:System.Text.UTF32Encoding.GetBytes%2A>没有关系。</span><span class="sxs-lookup"><span data-stu-id="35f72-503"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> has no relationship to <xref:System.Text.UTF32Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="35f72-504">如果需要一个类似的函数用于 <xref:System.Text.UTF32Encoding.GetBytes%2A>，请使用 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="35f72-504">If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetBytes%2A>, use <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="35f72-505">`GetMaxCharCount(N)` 不一定与 `N* GetMaxCharCount(1)`相同。</span><span class="sxs-lookup"><span data-stu-id="35f72-505">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
## Examples  
 <span data-ttu-id="35f72-506">下面的示例将字符串编码为一个字节数组，然后将这些字节解码为一个字符数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-506">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-507"><paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-507"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-508">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-508">-or-</span></span> 
<span data-ttu-id="35f72-509">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="35f72-509">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="35f72-510">发生回退（有关详细信息，请参阅<see href="~/docs/standard/base-types/character-encoding.md">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="35f72-510">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="35f72-511">和</span><span class="sxs-lookup"><span data-stu-id="35f72-511">-and-</span></span> 
 <span data-ttu-id="35f72-512">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-512"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="uTF32Encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="35f72-513">返回采用 UTF-32 格式编码的 Unicode 字节顺序标记（如果 <see cref="T:System.Text.UTF32Encoding" /> 对象配置为提供一个这样的标记）。</span><span class="sxs-lookup"><span data-stu-id="35f72-513">Returns a Unicode byte order mark encoded in UTF-32 format, if the <see cref="T:System.Text.UTF32Encoding" /> object is configured to supply one.</span></span></summary>
        <returns><span data-ttu-id="35f72-514">一个包含 Unicode 字节顺序标记的字节数组（如果 <see cref="T:System.Text.UTF32Encoding" /> 对象配置为提供一个这样的字节数组）。</span><span class="sxs-lookup"><span data-stu-id="35f72-514">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF32Encoding" /> object is configured to supply one.</span></span> <span data-ttu-id="35f72-515">否则，此方法返回一个零长度的字节数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-515">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-516"><xref:System.Text.UTF32Encoding> 对象可以提供前导码，这是一组字节，可以作为编码过程中所产生的字节序列的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-516">The <xref:System.Text.UTF32Encoding> object can provide a preamble, which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="35f72-517">前面带有字节顺序标记的编码字节序列（码位 U + 0000 U + FEFF）有助于解码器确定字节顺序和转换格式，或 UTF。</span><span class="sxs-lookup"><span data-stu-id="35f72-517">Prefacing a sequence of encoded bytes with a byte order mark (code points U+0000 U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="35f72-518">Unicode 字节顺序标记（BOM）按以下方式序列化（十六进制）：</span><span class="sxs-lookup"><span data-stu-id="35f72-518">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="35f72-519">大型 endian 字节顺序： 00 00 FE FF</span><span class="sxs-lookup"><span data-stu-id="35f72-519">Big endian byte order: 00 00 FE FF</span></span>  
  
-   <span data-ttu-id="35f72-520">小 endian 字节顺序： FF FE 00 00</span><span class="sxs-lookup"><span data-stu-id="35f72-520">Little endian byte order: FF FE 00 00</span></span>  
  
 <span data-ttu-id="35f72-521">可以实例化<xref:System.Text.UTF32Encoding>对象，其<xref:System.Text.UTF32Encoding.GetPreamble%2A>方法按以下方式返回有效的 BOM：</span><span class="sxs-lookup"><span data-stu-id="35f72-521">You can instantiate a <xref:System.Text.UTF32Encoding> object whose <xref:System.Text.UTF32Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="35f72-522">通过检索 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Text.UTF32Encoding> 对象。</span><span class="sxs-lookup"><span data-stu-id="35f72-522">By retrieving the <xref:System.Text.UTF32Encoding> object returned by the <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="35f72-523">通过调用无参数 <xref:System.Text.UTF32Encoding.%23ctor> 构造函数来实例化 <xref:System.Text.UTF32Encoding> 对象。</span><span class="sxs-lookup"><span data-stu-id="35f72-523">By calling the parameterless <xref:System.Text.UTF32Encoding.%23ctor> constructor to instantiate a <xref:System.Text.UTF32Encoding> object.</span></span>  
  
-   <span data-ttu-id="35f72-524">通过向 <xref:System.Text.UTF32Encoding.%23ctor%2A> 和 <xref:System.Text.UTF32Encoding.%23ctor%2A> 构造函数提供 `true` 作为 `byteOrderMark` 参数的值。</span><span class="sxs-lookup"><span data-stu-id="35f72-524">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UTF32Encoding.%23ctor%2A> and <xref:System.Text.UTF32Encoding.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="35f72-525">我们建议你使用 BOM，因为它为某些文件的编码提供了几乎特定的标识，否则这些文件将失去对 <xref:System.Text.UTF32Encoding> 对象的引用，例如，未标记或标记错误的 web 数据，或在业务不具有国际顾虑或其他数据时存储的随机文本文件。</span><span class="sxs-lookup"><span data-stu-id="35f72-525">We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.UTF32Encoding> object, for example, untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data.</span></span> <span data-ttu-id="35f72-526">通常，如果数据一致且标记正确，则可能会避免用户问题。</span><span class="sxs-lookup"><span data-stu-id="35f72-526">Often, user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="35f72-527">对于提供编码类型的标准，BOM 有些多余。</span><span class="sxs-lookup"><span data-stu-id="35f72-527">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="35f72-528">但是，可以使用它来帮助服务器发送正确的编码标头。</span><span class="sxs-lookup"><span data-stu-id="35f72-528">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="35f72-529">或者，它可以用作回退，以防编码在其他情况下丢失。</span><span class="sxs-lookup"><span data-stu-id="35f72-529">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="35f72-530">使用 BOM 存在一些缺点。</span><span class="sxs-lookup"><span data-stu-id="35f72-530">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="35f72-531">例如，了解如何限制使用 BOM 的数据库字段可能很困难。</span><span class="sxs-lookup"><span data-stu-id="35f72-531">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="35f72-532">文件的串联可能也是一个问题，例如，当文件以这样一种方式进行合并时，不需要的字符会在数据中间结束。</span><span class="sxs-lookup"><span data-stu-id="35f72-532">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="35f72-533">但尽管有几个缺点，但强烈建议使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="35f72-533">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="35f72-534">有关字节顺序和字节顺序标记的详细信息，请参阅[unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)上的 unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="35f72-534">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="35f72-535">若要确保编码的字节解码正确，应使用前导码作为编码字节的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-535">To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</span></span> <span data-ttu-id="35f72-536">请注意，<xref:System.Text.UTF32Encoding.GetBytes%2A> 方法不会将 BOM 预置到已编码的字节序列;开发人员负责在相应的字节流的开头提供 BOM。</span><span class="sxs-lookup"><span data-stu-id="35f72-536">Note that the <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
## Examples  
 <span data-ttu-id="35f72-537">下面的代码示例检索并显示不同 <xref:System.Text.UTF32Encoding> 实例的字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="35f72-537">The following code example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 <span data-ttu-id="35f72-538">下面的示例实例化两个 <xref:System.Text.UTF32Encoding> 对象，第一个对象未提供 BOM，第二个对象执行。</span><span class="sxs-lookup"><span data-stu-id="35f72-538">The following example instantiates two <xref:System.Text.UTF32Encoding> objects, the first of which does not provide a BOM and the second of which does.</span></span> <span data-ttu-id="35f72-539">然后，它调用 <xref:System.Text.UTF32Encoding.GetPreamble%2A> 方法，将 BOM 写入到文件中，然后再编写32编码的字符串。</span><span class="sxs-lookup"><span data-stu-id="35f72-539">It then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UTF-32-encoded string.</span></span> <span data-ttu-id="35f72-540">如示例中的输出所示，从第二个编码器保存字节的文件的第一个字节有四个以上的字节。</span><span class="sxs-lookup"><span data-stu-id="35f72-540">As the output from the example shows, the file that saves the bytes from the second encoder has four more bytes that the first.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/getpreamble1.vb#2)]  
  
 <span data-ttu-id="35f72-541">你还可以使用控制台窗口中的 "`fc`" 命令来比较文件，也可以在包含十六进制视图模式的文本编辑器中检查文件。</span><span class="sxs-lookup"><span data-stu-id="35f72-541">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="35f72-542">请注意，在支持 UTF-32 的编辑器中打开文件时，不会显示 BOM。</span><span class="sxs-lookup"><span data-stu-id="35f72-542">Note that when the file is opened in an editor that supports UTF-32, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF32Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="35f72-543">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="35f72-543">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="35f72-544">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="35f72-544">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="35f72-545">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="35f72-545">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="35f72-546">将字节数组中某个范围的字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="35f72-546">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="35f72-547">包含指定字节序列解码结果的字符串。</span><span class="sxs-lookup"><span data-stu-id="35f72-547">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-548">使用错误检测时，无效序列会导致此方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="35f72-548">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="35f72-549">如果未检测到错误，将忽略无效的序列，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="35f72-549">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="35f72-550">如果要解码的字节范围包含字节顺序标记（BOM），并且该字节数组由非 BOM 感知类型的方法返回，则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="35f72-550">If the range of bytes to be decoded includes the byte order mark (BOM), and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="35f72-551">可以通过调用 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 方法来删除它。</span><span class="sxs-lookup"><span data-stu-id="35f72-551">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="35f72-552">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="35f72-552">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="35f72-553">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序应分别使用 <xref:System.Text.UTF32Encoding.GetDecoder%2A> 方法或 <xref:System.Text.UTF32Encoding.GetEncoder%2A> 方法提供的 <xref:System.Text.Decoder> 或 <xref:System.Text.Encoder>。</span><span class="sxs-lookup"><span data-stu-id="35f72-553">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35f72-554">下面的示例将一个字符串编码为两个字节数组，一个以小字节序顺序排列，另一个以大字节序顺序排列。</span><span class="sxs-lookup"><span data-stu-id="35f72-554">The following example encodes a string into two arrays of bytes, one in little-endian order and the other in big-endian order.</span></span> <span data-ttu-id="35f72-555">然后，它将字节解码为字符串。</span><span class="sxs-lookup"><span data-stu-id="35f72-555">It then decodes the bytes back into a string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString.vb#1)]  
  
 <span data-ttu-id="35f72-556">下面的示例通过调用 <xref:System.Text.UTF32Encoding.GetByteCount%2A> 方法来初始化一个数组，以确定编码字符串所需的字节数，然后添加字节顺序标记（BOM）的大小。</span><span class="sxs-lookup"><span data-stu-id="35f72-556">The following example initializes an array by calling the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="35f72-557">然后，该示例调用 <xref:System.Text.UTF32Encoding.GetPreamble%2A> 方法，将 BOM 存储到数组中，然后再调用 <xref:System.Text.UTF32Encoding.GetBytes%2A> 方法将已编码的字节存储到数组中。</span><span class="sxs-lookup"><span data-stu-id="35f72-557">The example then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF32Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="35f72-558">然后，该示例调用 <xref:System.Text.UTF32Encoding.GetString%2A> 方法对该字符串进行解码。</span><span class="sxs-lookup"><span data-stu-id="35f72-558">The example then calls the <xref:System.Text.UTF32Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/GetString1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString1.vb#2)]  
  
 <span data-ttu-id="35f72-559">请注意，在这种情况下，解码的字符串不同于原始字符串，因为它以32位字节顺序标记 U + FFFE U + 0000 开头。</span><span class="sxs-lookup"><span data-stu-id="35f72-559">Note that in this case the decoded string differs from the original string, since it begins with a 32-bit byte order mark U+FFFE U+0000.</span></span> <span data-ttu-id="35f72-560">这意味着两个字符串的比较结果不相等，并且如果字符串已输出，则 BOM 将显示为替换字符 "？"。</span><span class="sxs-lookup"><span data-stu-id="35f72-560">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="35f72-561"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-561"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="35f72-562"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="35f72-562"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="35f72-563">- 或 -</span><span class="sxs-lookup"><span data-stu-id="35f72-563">-or-</span></span> 
 <span data-ttu-id="35f72-564"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="35f72-564"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="35f72-565">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="35f72-565">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="35f72-566">发生了回退（如需完整说明，请参阅 <see href="~/docs/standard/base-types/character-encoding.md">.NET 中的字符编码</see>）。</span><span class="sxs-lookup"><span data-stu-id="35f72-566">A fallback occurred (see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see> for a complete explanation).</span></span>
  
<span data-ttu-id="35f72-567">和</span><span class="sxs-lookup"><span data-stu-id="35f72-567">-and-</span></span> 
 <span data-ttu-id="35f72-568">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="35f72-568"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Preamble">
      <MemberSignature Language="C#" Value="public override ReadOnlySpan&lt;byte&gt; Preamble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; Preamble" />
      <MemberSignature Language="DocId" Value="P:System.Text.UTF32Encoding.Preamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Preamble As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property ReadOnlySpan&lt;System::Byte&gt; Preamble { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Preamble : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.UTF32Encoding.Preamble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="35f72-569">获取采用 UTF-32 格式编码的 Unicode 字节顺序标记（如果此对象配置为提供一个这样的标记）。</span><span class="sxs-lookup"><span data-stu-id="35f72-569">Gets a Unicode byte order mark encoded in UTF-32 format, if this object is configured to supply one.</span></span></summary>
        <value><span data-ttu-id="35f72-570">如果将此对象配置为提供一个字节，则为包含 Unicode 字节顺序标记的字节跨距;否则为默认跨度。</span><span class="sxs-lookup"><span data-stu-id="35f72-570">A byte span containing the Unicode byte order mark, if this object is configured to supply one; otherwise, a default span.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35f72-571"><xref:System.Text.UTF32Encoding> 对象可以提供前导码，这是一个字节范围，可以作为编码过程中所产生的字节序列的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-571">The <xref:System.Text.UTF32Encoding> object can provide a preamble, which is an span of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="35f72-572">前面是包含字节顺序标记的编码字节序列（码位 `U+0000` `U+FEFF`）有助于解码器确定字节顺序和转换格式，或 UTF。</span><span class="sxs-lookup"><span data-stu-id="35f72-572">Prefacing a sequence of encoded bytes with a byte order mark (code points `U+0000` `U+FEFF`) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="35f72-573">Unicode 字节顺序标记（BOM）按以下方式序列化（十六进制）：</span><span class="sxs-lookup"><span data-stu-id="35f72-573">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="35f72-574">大 endian 字节顺序： `00 00 FE FF`</span><span class="sxs-lookup"><span data-stu-id="35f72-574">Big endian byte order: `00 00 FE FF`</span></span>  
  
-   <span data-ttu-id="35f72-575">小 endian 字节顺序： `FF FE 00 00`</span><span class="sxs-lookup"><span data-stu-id="35f72-575">Little endian byte order: `FF FE 00 00`</span></span>  
  
 <span data-ttu-id="35f72-576">可以通过以下方式实例化 <xref:System.Text.UTF32Encoding.Preamble> 属性为有效 BOM 的 <xref:System.Text.UTF32Encoding> 对象：</span><span class="sxs-lookup"><span data-stu-id="35f72-576">You can instantiate a <xref:System.Text.UTF32Encoding> object whose <xref:System.Text.UTF32Encoding.Preamble> property is a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="35f72-577">通过检索 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Text.UTF32Encoding> 对象。</span><span class="sxs-lookup"><span data-stu-id="35f72-577">By retrieving the <xref:System.Text.UTF32Encoding> object returned by the <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="35f72-578">通过调用无参数 <xref:System.Text.UTF32Encoding.%23ctor> 构造函数来实例化 <xref:System.Text.UTF32Encoding> 对象。</span><span class="sxs-lookup"><span data-stu-id="35f72-578">By calling the parameterless <xref:System.Text.UTF32Encoding.%23ctor> constructor to instantiate a <xref:System.Text.UTF32Encoding> object.</span></span>  
  
-   <span data-ttu-id="35f72-579">通过向 <xref:System.Text.UTF32Encoding.%23ctor%2A> 和 <xref:System.Text.UTF32Encoding.%23ctor%2A> 构造函数提供 `true` 作为 `byteOrderMark` 参数的值。</span><span class="sxs-lookup"><span data-stu-id="35f72-579">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UTF32Encoding.%23ctor%2A> and <xref:System.Text.UTF32Encoding.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="35f72-580">我们建议你使用 BOM，因为它为某些文件的编码提供了几乎特定的标识，否则会丢失对 <xref:System.Text.UTF32Encoding> 对象的引用，例如未标记或标记错误的 web 数据，或在业务不具有国际顾虑或其他数据时存储的随机文本文件。</span><span class="sxs-lookup"><span data-stu-id="35f72-580">We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to the <xref:System.Text.UTF32Encoding> object, such as untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data.</span></span> <span data-ttu-id="35f72-581">通常，如果数据一致且标记正确，则可能会避免用户问题。</span><span class="sxs-lookup"><span data-stu-id="35f72-581">Often, user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="35f72-582">对于提供编码类型的标准，BOM 有些多余。</span><span class="sxs-lookup"><span data-stu-id="35f72-582">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="35f72-583">但是，可以使用它来帮助服务器发送正确的编码标头。</span><span class="sxs-lookup"><span data-stu-id="35f72-583">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="35f72-584">或者，它可以用作回退，以防编码在其他情况下丢失。</span><span class="sxs-lookup"><span data-stu-id="35f72-584">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="35f72-585">使用 BOM 存在一些缺点。</span><span class="sxs-lookup"><span data-stu-id="35f72-585">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="35f72-586">例如，了解如何限制使用 BOM 的数据库字段可能很困难。</span><span class="sxs-lookup"><span data-stu-id="35f72-586">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="35f72-587">文件的串联可能也是一个问题，例如，当文件以这样一种方式进行合并时，不需要的字符会在数据中间结束。</span><span class="sxs-lookup"><span data-stu-id="35f72-587">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="35f72-588">但尽管有几个缺点，但强烈建议使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="35f72-588">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="35f72-589">有关字节顺序和字节顺序标记的详细信息，请参阅[unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)上的 unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="35f72-589">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="35f72-590">若要确保编码的字节解码正确，应使用前导码作为编码字节的前缀。</span><span class="sxs-lookup"><span data-stu-id="35f72-590">To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</span></span> <span data-ttu-id="35f72-591">请注意，<xref:System.Text.UTF32Encoding.GetBytes%2A> 方法不会将 BOM 预置到已编码的字节序列;开发人员负责在相应的字节流的开头提供 BOM。</span><span class="sxs-lookup"><span data-stu-id="35f72-591">Note that the <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
