<Type Name="ExceptionHandlingClauseOptions" FullName="System.Reflection.ExceptionHandlingClauseOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1195bd78fd61227d2a94bbc8574f869819d77b7e" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75167300" /></Metadata><TypeSignature Language="C#" Value="public enum ExceptionHandlingClauseOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExceptionHandlingClauseOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ExceptionHandlingClauseOptions" />
  <TypeSignature Language="VB.NET" Value="Public Enum ExceptionHandlingClauseOptions" />
  <TypeSignature Language="C++ CLI" Value="public enum class ExceptionHandlingClauseOptions" />
  <TypeSignature Language="F#" Value="type ExceptionHandlingClauseOptions = " />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c37d7-101">标识异常处理子句的种类。</span><span class="sxs-lookup"><span data-stu-id="c37d7-101">Identifies kinds of exception-handling clauses.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c37d7-102">若要检查方法中的异常处理子句，请获取 <xref:System.Reflection.MethodInfo> 对象，并调用 <xref:System.Reflection.MethodBase.GetMethodBody%2A> 方法以获取方法体。</span><span class="sxs-lookup"><span data-stu-id="c37d7-102">To examine the exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> object and call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain the method body.</span></span> <span data-ttu-id="c37d7-103">使用 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> 属性可获取 <xref:System.Reflection.ExceptionHandlingClause> 对象的列表。</span><span class="sxs-lookup"><span data-stu-id="c37d7-103">Use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c37d7-104">使用异常处理子句需要透彻地理解元数据和 Microsoft 中间语言（MSIL）指令格式。</span><span class="sxs-lookup"><span data-stu-id="c37d7-104">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="c37d7-105">有关信息，请参阅公共语言基础结构（CLI）文档，尤其是 "第二部分：元数据定义和语义" 和 "第三部分： CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="c37d7-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="c37d7-106">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="c37d7-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c37d7-107">下面的代码示例定义一个名为 `MethodBodyExample`的测试方法，并显示其本地变量信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="c37d7-107">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="c37d7-108"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> 方法用于获取测试方法的 <xref:System.Reflection.MethodBody> 对象。</span><span class="sxs-lookup"><span data-stu-id="c37d7-108">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="c37d7-109"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> 属性用于获取 <xref:System.Reflection.ExceptionHandlingClause> 对象的列表并显示其属性。</span><span class="sxs-lookup"><span data-stu-id="c37d7-109">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c37d7-110">并非所有计算机语言都可以生成筛选子句。</span><span class="sxs-lookup"><span data-stu-id="c37d7-110">Not all computer languages can generate Filter clauses.</span></span> <span data-ttu-id="c37d7-111">Visual Basic 示例显示一个筛选器子句，该子句使用 Visual Basic `When` 表达式，这在其他语言的示例中是省略的。</span><span class="sxs-lookup"><span data-stu-id="c37d7-111">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="c37d7-112">此代码是为 <xref:System.Reflection.MethodBody> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="c37d7-112">This code is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.MethodBody" />
    <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
  </Docs>
  <Members>
    <Member MemberName="Clause">
      <MemberSignature Language="C#" Value="Clause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Clause = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Clause" />
      <MemberSignature Language="VB.NET" Value="Clause" />
      <MemberSignature Language="C++ CLI" Value="Clause" />
      <MemberSignature Language="F#" Value="Clause = 0" Usage="System.Reflection.ExceptionHandlingClauseOptions.Clause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c37d7-113">该子句接受从指定类型派生的所有异常。</span><span class="sxs-lookup"><span data-stu-id="c37d7-113">The clause accepts all exceptions that derive from a specified type.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Fault">
      <MemberSignature Language="C#" Value="Fault" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Fault = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Fault" />
      <MemberSignature Language="VB.NET" Value="Fault" />
      <MemberSignature Language="C++ CLI" Value="Fault" />
      <MemberSignature Language="F#" Value="Fault = 4" Usage="System.Reflection.ExceptionHandlingClauseOptions.Fault" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c37d7-114">该子句在发生异常时执行，而不是在正常控制流完成之后执行。</span><span class="sxs-lookup"><span data-stu-id="c37d7-114">The clause is executed if an exception occurs, but not on completion of normal control flow.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="Filter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Filter = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />
      <MemberSignature Language="VB.NET" Value="Filter" />
      <MemberSignature Language="C++ CLI" Value="Filter" />
      <MemberSignature Language="F#" Value="Filter = 1" Usage="System.Reflection.ExceptionHandlingClauseOptions.Filter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c37d7-115">该子句包含用户指定的指令，这些指令确定是否应忽略异常（即是否应继续正常执行），由关联的处理程序处理异常，还是应将异常传递给下一个子句。</span><span class="sxs-lookup"><span data-stu-id="c37d7-115">The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Finally">
      <MemberSignature Language="C#" Value="Finally" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Finally = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />
      <MemberSignature Language="VB.NET" Value="Finally" />
      <MemberSignature Language="C++ CLI" Value="Finally" />
      <MemberSignature Language="F#" Value="Finally = 2" Usage="System.Reflection.ExceptionHandlingClauseOptions.Finally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c37d7-116">try 块在任何时候退出时，该子句都会执行，无论是通过正常控制流还是因为未经处理的异常。</span><span class="sxs-lookup"><span data-stu-id="c37d7-116">The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
