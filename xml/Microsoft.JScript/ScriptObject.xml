<Type Name="ScriptObject" FullName="Microsoft.JScript.ScriptObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="489c1f3b0e157cce386cd209b960fda2fdc13fc2" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78804887" /></Metadata><TypeSignature Language="C#" Value="public abstract class ScriptObject : System.Reflection.IReflect" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ScriptObject extends System.Object implements class System.Reflection.IReflect" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.ScriptObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ScriptObject&#xA;Implements IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptObject abstract : System::Reflection::IReflect" />
  <TypeSignature Language="F#" Value="type ScriptObject = class&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f3c14-101">支持所有 JScript 类。</span><span class="sxs-lookup"><span data-stu-id="f3c14-101">Supports all JScript classes.</span></span> <span data-ttu-id="f3c14-102">这是所有 JScript 类的最终基类。</span><span class="sxs-lookup"><span data-stu-id="f3c14-102">This is the ultimate base class of all JScript classes.</span></span> <span data-ttu-id="f3c14-103">此类属于对象和函数类别。</span><span class="sxs-lookup"><span data-stu-id="f3c14-103">This class belongs to the objects and functions category.</span></span></summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
    <altmember cref="T:Microsoft.JScript.ActivationObject" />
    <altmember cref="T:Microsoft.JScript.JSObject" />
  </Docs>
  <Members>
    <Member MemberName="engine">
      <MemberSignature Language="C#" Value="public Microsoft.JScript.Vsa.VsaEngine engine;" />
      <MemberSignature Language="ILAsm" Value=".field public class Microsoft.JScript.Vsa.VsaEngine engine" />
      <MemberSignature Language="DocId" Value="F:Microsoft.JScript.ScriptObject.engine" />
      <MemberSignature Language="VB.NET" Value="Public engine As VsaEngine " />
      <MemberSignature Language="C++ CLI" Value="public: Microsoft::JScript::Vsa::VsaEngine ^ engine;" />
      <MemberSignature Language="F#" Value="val mutable engine : Microsoft.JScript.Vsa.VsaEngine" Usage="Microsoft.JScript.ScriptObject.engine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.VsaEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f3c14-104">存储对脚本引擎的引用。</span><span class="sxs-lookup"><span data-stu-id="f3c14-104">Stores a reference to the scripting engine.</span></span></summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="scriptObject.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f3c14-105">要获取的字段的名称。</span><span class="sxs-lookup"><span data-stu-id="f3c14-105">The name of the field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="f3c14-106">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-106">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="f3c14-107">获取具有指定名称的字段。</span><span class="sxs-lookup"><span data-stu-id="f3c14-107">Gets a field that has the specified name.</span></span></summary>
        <returns><span data-ttu-id="f3c14-108">一个具有指定 <paramref name="name" /> 的字段，若脚本对象不包含该字段，则为 null。</span><span class="sxs-lookup"><span data-stu-id="f3c14-108">A field that has the specified <paramref name="name" />, or null if the script object does not contain the field.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="scriptObject.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="f3c14-109">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-109">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="f3c14-110">获取 <see cref="T:System.Reflection.FieldInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有字段。</span><span class="sxs-lookup"><span data-stu-id="f3c14-110">Gets an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the current script object.</span></span></summary>
        <returns><span data-ttu-id="f3c14-111">对象的数组，其中包含当前脚本对象的所有字段。</span><span class="sxs-lookup"><span data-stu-id="f3c14-111">An array of objects that contains all fields of the current script object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="scriptObject.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f3c14-112">要搜索的成员的名称。</span><span class="sxs-lookup"><span data-stu-id="f3c14-112">The name of the member to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="f3c14-113">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-113">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="f3c14-114">在派生类中重写时，获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于与指定名称匹配的所有成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-114">When overridden in a derived class, gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</span></span></summary>
        <returns><span data-ttu-id="f3c14-115">与 <paramref name="name" /> 参数匹配的对象的数组。</span><span class="sxs-lookup"><span data-stu-id="f3c14-115">An array of objects that match the <paramref name="name" /> argument.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="scriptObject.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="f3c14-116">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-116">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="f3c14-117">在派生类中重写时，获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-117">When overridden in a derived class, gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the current script object.</span></span></summary>
        <returns><span data-ttu-id="f3c14-118">对象的数组，其中包含当前脚本对象的所有成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-118">An array of objects that contains all members of the current script object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f3c14-119">获取具有指定名称的方法。</span><span class="sxs-lookup"><span data-stu-id="f3c14-119">Gets a method that has a specified name.</span></span></summary>
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="scriptObject.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f3c14-120">要获取的方法的名称。</span><span class="sxs-lookup"><span data-stu-id="f3c14-120">The name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="f3c14-121">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-121">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="f3c14-122">获取具有指定名称的方法。</span><span class="sxs-lookup"><span data-stu-id="f3c14-122">Gets a method that has the specified name.</span></span></summary>
        <returns><span data-ttu-id="f3c14-123">一个具有指定 <paramref name="name" /> 的方法，若脚本对象不包含该方法，则为 null。</span><span class="sxs-lookup"><span data-stu-id="f3c14-123">A method that has the specified <paramref name="name" />, or null if the script object does not contain the method.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags, binder As Binder, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="scriptObject.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f3c14-124">要搜索的方法的名称。</span><span class="sxs-lookup"><span data-stu-id="f3c14-124">The name of the method to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="f3c14-125">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-125">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <param name="binder"><span data-ttu-id="f3c14-126">一个对象，该对象执行从实参类型到形参类型的类型转换。</span><span class="sxs-lookup"><span data-stu-id="f3c14-126">An object that performs type conversion from actual argument type to formal argument type.</span></span></param>
        <param name="types"><span data-ttu-id="f3c14-127">用于定位匹配方法的参数类型。</span><span class="sxs-lookup"><span data-stu-id="f3c14-127">The parameter types that are used to locate a matching method.</span></span></param>
        <param name="modifiers"><span data-ttu-id="f3c14-128">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。</span><span class="sxs-lookup"><span data-stu-id="f3c14-128">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</span></span></param>
        <summary><span data-ttu-id="f3c14-129">通过使用指定的选择条件来获取具有指定名称的方法。</span><span class="sxs-lookup"><span data-stu-id="f3c14-129">Gets a method that has the specified name by using the specified selection criteria.</span></span></summary>
        <returns><span data-ttu-id="f3c14-130">一个具有指定 <paramref name="name" /> 的方法，若脚本对象不包含该方法，则为 null。</span><span class="sxs-lookup"><span data-stu-id="f3c14-130">A method that has the specified <paramref name="name" />, or null if the script object does not contain the method.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="scriptObject.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="f3c14-131">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-131">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="f3c14-132">获取 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有方法。</span><span class="sxs-lookup"><span data-stu-id="f3c14-132">Gets an array of <see cref="T:System.Reflection.MethodInfo" /> objects that correspond to all methods of the current script object.</span></span></summary>
        <returns><span data-ttu-id="f3c14-133">对象的数组，其中包含当前脚本对象的所有方法。</span><span class="sxs-lookup"><span data-stu-id="f3c14-133">An array of objects that contains all methods of the current script object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public Microsoft.JScript.ScriptObject GetParent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.JScript.ScriptObject GetParent() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetParent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParent () As ScriptObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::JScript::ScriptObject ^ GetParent();" />
      <MemberSignature Language="F#" Value="member this.GetParent : unit -&gt; Microsoft.JScript.ScriptObject" Usage="scriptObject.GetParent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.ScriptObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f3c14-134">获取对父对象的引用。</span><span class="sxs-lookup"><span data-stu-id="f3c14-134">Gets a reference to the parent object.</span></span></summary>
        <returns><span data-ttu-id="f3c14-135">对父对象的引用。</span><span class="sxs-lookup"><span data-stu-id="f3c14-135">A reference to the parent object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3c14-136">父对象是脚本对象将对其自身未实现的属性或方法的请求委托给的对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-136">The parent is the object to which the script object delegates requests for properties or methods that it does not implement itself.</span></span> <span data-ttu-id="f3c14-137">例如，使用 <xref:Microsoft.JScript.NumberConstructor>创建 <xref:Microsoft.JScript.NumberObject> 时，父级是 <xref:Microsoft.JScript.NumberPrototype>。</span><span class="sxs-lookup"><span data-stu-id="f3c14-137">For example, when you create a <xref:Microsoft.JScript.NumberObject> by using a <xref:Microsoft.JScript.NumberConstructor>, the parent is a <xref:Microsoft.JScript.NumberPrototype>.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="scriptObject.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="f3c14-138">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-138">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="f3c14-139">获取 <see cref="T:System.Reflection.PropertyInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有属性。</span><span class="sxs-lookup"><span data-stu-id="f3c14-139">Gets an array of <see cref="T:System.Reflection.PropertyInfo" /> objects that correspond to all properties of the current script object.</span></span></summary>
        <returns><span data-ttu-id="f3c14-140">对象的数组，其中包含当前脚本对象的所有属性。</span><span class="sxs-lookup"><span data-stu-id="f3c14-140">An array of objects that contains all properties of the current script object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f3c14-141">获取具有指定名称的属性。</span><span class="sxs-lookup"><span data-stu-id="f3c14-141">Gets a property that has a specified name.</span></span></summary>
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="scriptObject.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f3c14-142">要获取的属性的名称。</span><span class="sxs-lookup"><span data-stu-id="f3c14-142">The name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="f3c14-143">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-143">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="f3c14-144">获取具有指定名称的属性。</span><span class="sxs-lookup"><span data-stu-id="f3c14-144">Gets a property that has the specified name.</span></span></summary>
        <returns><span data-ttu-id="f3c14-145">一个具有指定 <paramref name="name" /> 的属性，若脚本对象不包含该属性，则为 null。</span><span class="sxs-lookup"><span data-stu-id="f3c14-145">A property that has the specified <paramref name="name" />, or null if the script object does not contain the property.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags, binder As Binder, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="scriptObject.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f3c14-146">要搜索的属性的名称。</span><span class="sxs-lookup"><span data-stu-id="f3c14-146">The name of the property to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="f3c14-147">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-147">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <param name="binder"><span data-ttu-id="f3c14-148">一个对象，该对象执行从实参类型到形参类型的类型转换。</span><span class="sxs-lookup"><span data-stu-id="f3c14-148">An object that performs type conversion from actual argument type to formal argument type.</span></span></param>
        <param name="returnType"><span data-ttu-id="f3c14-149">该属性必须具有的返回值的类型。</span><span class="sxs-lookup"><span data-stu-id="f3c14-149">The type of the return value that the property must have.</span></span></param>
        <param name="types"><span data-ttu-id="f3c14-150">所搜索的属性的索引类型。</span><span class="sxs-lookup"><span data-stu-id="f3c14-150">The index types of the property being searched for.</span></span> <span data-ttu-id="f3c14-151">用于索引属性，如类的索引器。</span><span class="sxs-lookup"><span data-stu-id="f3c14-151">Used for index properties, such as the indexer for a class.</span></span></param>
        <param name="modifiers"><span data-ttu-id="f3c14-152">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。</span><span class="sxs-lookup"><span data-stu-id="f3c14-152">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</span></span></param>
        <summary><span data-ttu-id="f3c14-153">通过使用指定的选择条件来获取具有指定名称的属性。</span><span class="sxs-lookup"><span data-stu-id="f3c14-153">Gets a property that has the specified name by using the specified selection criteria.</span></span></summary>
        <returns><span data-ttu-id="f3c14-154">一个具有指定 <paramref name="name" /> 的属性，若脚本对象不包含该属性，则为 null。</span><span class="sxs-lookup"><span data-stu-id="f3c14-154">A property that has the specified <paramref name="name" />, or null if the script object does not contain the property.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public virtual object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo locale, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo locale, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InvokeMember (name As String, invokeAttr As BindingFlags, binder As Binder, target As Object, args As Object(), modifiers As ParameterModifier(), locale As CultureInfo, namedParameters As String()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ locale, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="scriptObject.InvokeMember (name, invokeAttr, binder, target, args, modifiers, locale, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="locale" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f3c14-155">要调用的成员的名称。</span><span class="sxs-lookup"><span data-stu-id="f3c14-155">The name of the member to invoke.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="f3c14-156">枚举值的按位组合，用于指定反射如何执行成员搜索。</span><span class="sxs-lookup"><span data-stu-id="f3c14-156">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <param name="binder"><span data-ttu-id="f3c14-157">一个对象，该对象执行从实参类型到形参类型的类型转换。</span><span class="sxs-lookup"><span data-stu-id="f3c14-157">An object that performs type conversion from actual argument type to formal argument type.</span></span></param>
        <param name="target"><span data-ttu-id="f3c14-158">对其调用成员的对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-158">The object on which to invoke the member.</span></span> <span data-ttu-id="f3c14-159">此对象必须为当前脚本对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-159">This must be the current script object.</span></span></param>
        <param name="args"><span data-ttu-id="f3c14-160">包含要调用的成员的参数数目、顺序和类型的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f3c14-160">An array of objects that contains the number, order, and type of the parameters of the member to be invoked.</span></span> <span data-ttu-id="f3c14-161">如果没有参数，则这是一个空数组。</span><span class="sxs-lookup"><span data-stu-id="f3c14-161">This is an empty array if there are no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="f3c14-162">长度与 args 参数相同的数组。</span><span class="sxs-lookup"><span data-stu-id="f3c14-162">An array that has the same length as the args parameter.</span></span> <span data-ttu-id="f3c14-163">它表示元数据中被调用成员的参数特性。</span><span class="sxs-lookup"><span data-stu-id="f3c14-163">It represents the invoked member's argument attributes in the metadata.</span></span></param>
        <param name="locale"><span data-ttu-id="f3c14-164">提供有关特定区域性或区域设置的信息。</span><span class="sxs-lookup"><span data-stu-id="f3c14-164">Provides information about a specific culture or locale.</span></span> <span data-ttu-id="f3c14-165">用于正确设置数字、日期和字符串的格式。</span><span class="sxs-lookup"><span data-stu-id="f3c14-165">Used to format numbers, dates, and strings correctly.</span></span></param>
        <param name="namedParameters"><span data-ttu-id="f3c14-166">参数的数组。</span><span class="sxs-lookup"><span data-stu-id="f3c14-166">An array of parameters.</span></span></param>
        <summary><span data-ttu-id="f3c14-167">调用指定的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-167">Invokes the specified member.</span></span></summary>
        <returns><span data-ttu-id="f3c14-168">成员调用的返回值。</span><span class="sxs-lookup"><span data-stu-id="f3c14-168">The return value of the call to the member.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f3c14-169">获取或设置脚本对象的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-169">Gets or sets a member of the script object.</span></span></summary>
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[double index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(float64)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.Item(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[double] { System::Object ^ get(double index); void set(double index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(double) : obj with get, set" Usage="Microsoft.JScript.ScriptObject.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="f3c14-170">成员的索引。</span><span class="sxs-lookup"><span data-stu-id="f3c14-170">The index of the member.</span></span></param>
        <summary><span data-ttu-id="f3c14-171">获取或设置由指定的 <see cref="T:System.Double" /> 索引值指定的脚本对象的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-171">Gets or sets a member of the script object that is designated by the specified <see cref="T:System.Double" /> index value.</span></span></summary>
        <value><span data-ttu-id="f3c14-172"><paramref name="index" /> 处的成员的值。</span><span class="sxs-lookup"><span data-stu-id="f3c14-172">The value of the member that is at <paramref name="index" />.</span></span></value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj with get, set" Usage="Microsoft.JScript.ScriptObject.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="f3c14-173">成员的索引。</span><span class="sxs-lookup"><span data-stu-id="f3c14-173">The index of the member.</span></span></param>
        <summary><span data-ttu-id="f3c14-174">获取或设置由指定的 <see cref="T:System.Int32" /> 索引值指定的脚本对象的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-174">Gets or sets a member of the script object that is designated by the specified <see cref="T:System.Int32" /> index value.</span></span></summary>
        <value><span data-ttu-id="f3c14-175"><paramref name="index" /> 处的成员的值。</span><span class="sxs-lookup"><span data-stu-id="f3c14-175">The value of the member that is at <paramref name="index" />.</span></span></value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[params object[] pars] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object[])" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.Item(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(ParamArray pars As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[cli::array &lt;System::Object ^&gt; ^] { System::Object ^ get(... cli::array &lt;System::Object ^&gt; ^ pars); void set(... cli::array &lt;System::Object ^&gt; ^ pars, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj[]) : obj with get, set" Usage="Microsoft.JScript.ScriptObject.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pars" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="pars"><span data-ttu-id="f3c14-176">成员的名称或索引。</span><span class="sxs-lookup"><span data-stu-id="f3c14-176">The name or index of the member.</span></span></param>
        <summary><span data-ttu-id="f3c14-177">获取或设置由指定的名称、<see cref="T:System.Double" /> 索引值或 <see cref="T:System.Int32" /> 索引值指定的脚本对象的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-177">Gets or sets a member of the script object that is designated by the specified name, <see cref="T:System.Double" /> index value, or <see cref="T:System.Int32" /> index value.</span></span></summary>
        <value><span data-ttu-id="f3c14-178">在 <paramref name="pars" /> 中指定的成员的值。</span><span class="sxs-lookup"><span data-stu-id="f3c14-178">The value of the member that is specified in <paramref name="pars" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3c14-179">如果 `pars` 数组具有多个元素，则最后一个元素是此属性的自变量。</span><span class="sxs-lookup"><span data-stu-id="f3c14-179">If the `pars` array has more than one element, the last element is the argument for this property.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); void set(System::String ^ name, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="Microsoft.JScript.ScriptObject.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f3c14-180">成员名。</span><span class="sxs-lookup"><span data-stu-id="f3c14-180">The name of the member.</span></span></param>
        <summary><span data-ttu-id="f3c14-181">获取或设置由指定名称指定的脚本对象的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-181">Gets or sets a member of the script object that is designated by the specified name.</span></span></summary>
        <value><span data-ttu-id="f3c14-182">名为 <paramref name="name" /> 的成员的值。</span><span class="sxs-lookup"><span data-stu-id="f3c14-182">The value of the member that is named <paramref name="name" />.</span></span></value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="parent">
      <MemberSignature Language="C#" Value="protected Microsoft.JScript.ScriptObject parent;" />
      <MemberSignature Language="ILAsm" Value=".field family class Microsoft.JScript.ScriptObject parent" />
      <MemberSignature Language="DocId" Value="F:Microsoft.JScript.ScriptObject.parent" />
      <MemberSignature Language="VB.NET" Value="Protected parent As ScriptObject " />
      <MemberSignature Language="C++ CLI" Value="protected: Microsoft::JScript::ScriptObject ^ parent;" />
      <MemberSignature Language="F#" Value="val mutable parent : Microsoft.JScript.ScriptObject" Usage="Microsoft.JScript.ScriptObject.parent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.ScriptObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f3c14-183">存储对父对象的引用。</span><span class="sxs-lookup"><span data-stu-id="f3c14-183">Stores a reference to the parent object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3c14-184">父对象是脚本对象将对其自身未实现的属性或方法的请求委托给的对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-184">The parent is the object to which the script object delegates requests for properties or methods that it does not implement itself.</span></span> <span data-ttu-id="f3c14-185">例如，使用 <xref:Microsoft.JScript.NumberConstructor>创建 <xref:Microsoft.JScript.NumberObject> 时，父级是 <xref:Microsoft.JScript.NumberPrototype>。</span><span class="sxs-lookup"><span data-stu-id="f3c14-185">For example, when you create a <xref:Microsoft.JScript.NumberObject> by using a <xref:Microsoft.JScript.NumberConstructor>, the parent is a <xref:Microsoft.JScript.NumberPrototype>.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public virtual Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="Microsoft.JScript.ScriptObject.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f3c14-186">获取脚本对象的类型。</span><span class="sxs-lookup"><span data-stu-id="f3c14-186">Gets the type of the script object.</span></span></summary>
        <value><span data-ttu-id="f3c14-187">脚本对象的类型。</span><span class="sxs-lookup"><span data-stu-id="f3c14-187">The type of the script object.</span></span></value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WrapMembers">
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f3c14-188">创建“被包装”对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-188">Creates *wrapped* objects.</span></span> <span data-ttu-id="f3c14-189">每个被包装对象都包含一个成员（字段、属性或方法）的信息，以及作为成员定义依据的实例化对象的副本。</span><span class="sxs-lookup"><span data-stu-id="f3c14-189">Each wrapped object contains the information for one member (field, property, or method), together with a copy of the instantiated object that the member is defined on.</span></span> <span data-ttu-id="f3c14-190">这样，不包含成员的其他对象将能够存储成员，然后返回成员的值，就好像成员是自己的成员一样。</span><span class="sxs-lookup"><span data-stu-id="f3c14-190">This enables other objects that do not contain the member to store it and then return its value as if it were their own.</span></span></summary>
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WrapMembers">
      <MemberSignature Language="C#" Value="protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo member, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Reflection.MemberInfo[] WrapMembers(class System.Reflection.MemberInfo member, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function WrapMembers (member As MemberInfo, obj As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ WrapMembers(System::Reflection::MemberInfo ^ member, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member WrapMembers : System.Reflection.MemberInfo * obj -&gt; System.Reflection.MemberInfo[]" Usage="Microsoft.JScript.ScriptObject.WrapMembers (member, obj)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="f3c14-191">要包装的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-191">The member to wrap.</span></span></param>
        <param name="obj"><span data-ttu-id="f3c14-192">在其上定义 <paramref name="member" /> 的对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-192">The object that <paramref name="member" /> is defined on.</span></span></param>
        <summary><span data-ttu-id="f3c14-193">创建一个包含指定成员以及指定对象的被包装对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-193">Creates a wrapped object that contains the specified member together with the specified object.</span></span></summary>
        <returns><span data-ttu-id="f3c14-194">一个具有被包装对象的一元素数组，该被包装对象包含成员信息和 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="f3c14-194">A one-element array that has a wrapped object that contains the member information and <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3c14-195">此方法允许不包含成员的其他对象存储该成员，并返回其值，就像它是自己的值一样。</span><span class="sxs-lookup"><span data-stu-id="f3c14-195">This method enables other objects that do not contain the member to store it and then return its value as if it were their own.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="WrapMembers">
      <MemberSignature Language="C#" Value="protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo[] members, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Reflection.MemberInfo[] WrapMembers(class System.Reflection.MemberInfo[] members, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function WrapMembers (members As MemberInfo(), obj As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ WrapMembers(cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member WrapMembers : System.Reflection.MemberInfo[] * obj -&gt; System.Reflection.MemberInfo[]" Usage="Microsoft.JScript.ScriptObject.WrapMembers (members, obj)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="members"><span data-ttu-id="f3c14-196">要包装的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-196">The members to wrap.</span></span></param>
        <param name="obj"><span data-ttu-id="f3c14-197">在其上定义 <paramref name="members" /> 的对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-197">The object that <paramref name="members" /> are defined on.</span></span></param>
        <summary><span data-ttu-id="f3c14-198">创建被包装对象（其中包含指定的成员以及指定的对象）的数组。</span><span class="sxs-lookup"><span data-stu-id="f3c14-198">Creates an array of wrapped objects that contain the specified members together with the specified object.</span></span></summary>
        <returns><span data-ttu-id="f3c14-199">被包装对象的数组，每个被包装对象均包含成员信息和 <paramref name="obj" /> 的副本。</span><span class="sxs-lookup"><span data-stu-id="f3c14-199">An array of wrapped objects, each of which contains member information and a copy of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3c14-200">此方法允许不包含这些成员的其他对象存储它们，然后返回它们的值，就像它们是自己的值一样。</span><span class="sxs-lookup"><span data-stu-id="f3c14-200">This method enables other objects that do not contain these members to store them and then return their values as if they were their own.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="WrapMembers">
      <MemberSignature Language="C#" Value="protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo[] members, object obj, Microsoft.JScript.SimpleHashtable cache);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Reflection.MemberInfo[] WrapMembers(class System.Reflection.MemberInfo[] members, object obj, class Microsoft.JScript.SimpleHashtable cache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function WrapMembers (members As MemberInfo(), obj As Object, cache As SimpleHashtable) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ WrapMembers(cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members, System::Object ^ obj, Microsoft::JScript::SimpleHashtable ^ cache);" />
      <MemberSignature Language="F#" Value="static member WrapMembers : System.Reflection.MemberInfo[] * obj * Microsoft.JScript.SimpleHashtable -&gt; System.Reflection.MemberInfo[]" Usage="Microsoft.JScript.ScriptObject.WrapMembers (members, obj, cache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]" />
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="cache" Type="Microsoft.JScript.SimpleHashtable" />
      </Parameters>
      <Docs>
        <param name="members"><span data-ttu-id="f3c14-201">要包装的成员。</span><span class="sxs-lookup"><span data-stu-id="f3c14-201">The members to wrap.</span></span></param>
        <param name="obj"><span data-ttu-id="f3c14-202">在其上定义 <paramref name="members" /> 的对象。</span><span class="sxs-lookup"><span data-stu-id="f3c14-202">The object that <paramref name="members" /> are defined on.</span></span></param>
        <param name="cache"><span data-ttu-id="f3c14-203">被包装对象的临时数据存储。</span><span class="sxs-lookup"><span data-stu-id="f3c14-203">Temporary data storage for the wrapped objects.</span></span></param>
        <summary><span data-ttu-id="f3c14-204">创建被包装对象（其中包含指定的成员以及指定的对象）的数组，并将结果缓存在指定的数据存储中。</span><span class="sxs-lookup"><span data-stu-id="f3c14-204">Creates an array of wrapped objects that contain the specified members together with the specified object, caching the results in the specified data storage.</span></span></summary>
        <returns><span data-ttu-id="f3c14-205">被包装对象的数组，每个被包装对象均包含成员信息和 <paramref name="obj" /> 的副本。</span><span class="sxs-lookup"><span data-stu-id="f3c14-205">An array of wrapped objects, each of which contains member information and a copy of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3c14-206">此方法允许不包含这些成员的其他对象存储它们，然后返回它们的值，就像它们是自己的值一样。</span><span class="sxs-lookup"><span data-stu-id="f3c14-206">This method enables other objects that do not contain these members to store them and then return their values as if they were their own.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
  </Members>
</Type>
